=== From Ken Jin ===

Another interesting env var is PYTHON_OPT_DEBUG=4 (this ranges from 1 to 4), which tells you what the optimizer is doing 

=== From Brandt ===

brandtbucher â€” Yesterday at 4:01 PM
Looks great! A few things I noticed while reading:

>>>>> "The internals of the pull request itself.": Due to a GitHub bug, the PR looks empty. You should probably just link to the actual commit for this: https://github.com/python/cpython/commit/f6d9e5926b6138994eaa60d1c36462e36105733d
>>>> "the flags for the windows builds are the same": They aren't, but they're similar. They're spelled --experimental-jit, --experimental-jit-off, and --experimental-jit-interpreter
>>>> "--enable the-experimental-jit=yes-off": This option should be --enable-experimental-jit=yes-off. Probably also worth calling out the PYTHON_JIT=1 environment variable here (PYTHON_JIT=0 will also turn the JIT off in the other modes).
>>>> "--enable-experimental-jit=interpreter": Maybe worth clarifying that this runs the same code as the JIT, but without actually jitting anything. Also worth calling out that it doesn't require LLVM, it works anywhere, and it's quite a bit slower.
>>>> I don't see any mention of needing to install LLVM. Probably worth calling this out and linking to the Tools/jit/README.md for instructions.
>>>> "*Except in frames that are owned by the C Stack, i.e. C extensions calling into Python.": That's not really what "owned by the C stack" means. It's pretty subtle and not too important here, so I'd just leave it out (basically, these are "secret" shim frames that we sneak in whenever we re-enter the interpreter loop).
>>>> "and creates an nice HTML summary": It creates a markdown summary, not HTML.
>>>> "--enable-experimental-jit jit": Repeated "jit" here.
>>>> For the deeper dive, might be worth directing interested people to the jit_stencils.h file now sitting in their build directory. ðŸ™‚

Broken in v3.13.0a4
Works on 3.14 Main
First good commit: "9b8611eeea172cd4aa626ccd1ca333dc4093cd8c"
Previous Commit: ....


Works in v3.13.0a4
Broken in v3.13.0b2
First bad commit: "1ab6356ebec25f216a0eddbd81225abcb93f2d55" https://github.com/python/cpython/commit/1ab6356ebec25f216a0eddbd81225abcb93f2d55

Find good commit:
! ((rm -rf ./venv || true) && make clean && ./configure --enable-experimental-jit --with-pydebug && make -j8 && ./python -m venv venv && ./venv/bin/python -m pip install pyperformance)

-----

On 3.13 Branch:
first bad commit:
beb653cc24275025708758d444835db2ddbb74e4
or
1ab6356ebec25f216a0eddbd81225abcb93f2d55

[3.13] Ensurepip fails when built with `--enable-experimental-jit` and `--with-pydebug` (Linux)

When building for Linux/X64, the 3.13 branch will not run successfully run `python -m ensurepip` if built with both `--enable-experimental-jit` and `--with-pydebug`:

```sh
git checkout 3.13
make clean
./configure --enable-experimental-jit --with-pydebug
./python -m ensurepip
```

This fails with an error message like:
```sh
subprocess.CalledProcessError: Command '['/home/jglass/Documents/cpython/python', '-W', 'ignore::DeprecationWarning', '-c', '\nimport runpy\nimport sys\nsys.path = [\'/tmp/tmpsu81mj6o/pip-24.0-py3-none-any.whl\'] + sys.path\nsys.argv[1:] = [\'install\', \'--no-cache-dir\', \'--no-index\', \'--find-links\', \'/tmp/tmpsu81mj6o\', \'pip\']\nrunpy.run_module("pip", run_name="__main__", alter_sys=True)\n']' died with <Signals.SIGABRT: 6>.
```

Building with either config flag individually successfully builds.

Build Details:
```py
$ ./python -VV
Python 3.13.0b2+ (heads/3.13:ff358616ddb, Jun 12 2024, 21:17:57) [GCC 11.4.0]
```

Built on Ubuntu 22.04; same failure on two separate machines. This build currently succeeds on main (`030b452e`).
