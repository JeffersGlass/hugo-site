<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Posts on Jeff Glass</title>
    <link>https://jeff.glass/post/</link>
    <description>Recent content in Blog Posts on Jeff Glass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Nov 2023 11:30:42 -0500</lastBuildDate><atom:link href="https://jeff.glass/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What&#39;s New in PyScript Next (2023.11.1)</title>
      <link>https://jeff.glass/post/whats-new-pyscript-2023-11-1/</link>
      <pubDate>Tue, 07 Nov 2023 11:30:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/whats-new-pyscript-2023-11-1/</guid>
      <description>
&lt;script type=&#34;module&#34; src=&#34;https://pyscript.net/releases/2023.11.1/core.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;mini-coi.js&#34;&gt;&lt;/script&gt;

&lt;p class=&#34;post-p&#34;&gt;Today marks the release of &lt;span class=&#34;font-bold&#34;&gt;PyScript 2023.11.1&lt;/span&gt;, a ground-up total-rewrite of PyScript that adds a wide swath of new functionality, smaller file sizes, faster loading, and so much more. This post (and really, this release) is a doozy, so get your brains in gear.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;You read that right - all of PyScript has been re-written from the ground up. While as many features and behaviors as possible have been retained from &#39;PyScript Classic&#39; (our internal shorthand for all releases from Alpha/2022.05.1 through 2023.05.1), there are some things in &#39;PyScript Next&#39; that have been tweaked, changed, and added. There are also features that have either been removed from scope or have been temporarily removed as lower-priority in the name of getting this release out. As such, any articles and tutorials about PyScript prior to today should be taken as &lt;span class=&#34;italic&#34;&gt;potentially&lt;/span&gt; out-of-date. For those migrating existing PyScript applications, see the &lt;a href=&#34;#migration&#34;&gt;Migration Section&lt;/a&gt; of this post.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That said, the underpinnings of PyScript are still the same. It&#39;s still built on top of the &lt;a href=&#34;https://pyodide.org&#34;&gt;Pyodide Runtime&lt;/a&gt; (plus an additional runtime... keep reading!), it still allows users to run Python code directly in the browser by writing it into their HTML, etc.. What&#39;s changed is how PyScript delivers that experience, in a way that&#39;s faster, lighter, and more web friendly.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As this is a different kind of release from any of the previous ones, this Release Post also looks quite different. Rather than meticulously cateloging and demoing every single change and new feature, this post will:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;Explore the major features and attributes&lt;/li&gt;
        &lt;li&gt;Discuss migration and major changes&lt;/li&gt;
        &lt;li&gt;Expand on the performance and size differences&lt;/li&gt;
        &lt;li&gt;Tease some exciting PyScript related projects&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In the coming days and weeks, we&#39;ll take a closer look at PyScript Next&#39;s new features. (The &lt;a href=&#34;https://docs.pyscript.net/latest/user-guide/&#34;&gt;official PyScript documentation&lt;/a&gt; also goes into deeper detail.) In the meantime, here&#39;s the roaring headlines:&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;grid justify-center p-1 m-auto bg-gray-200&#34;&gt;
    &lt;span&gt;Jump To: &lt;span&gt;
    &lt;a href=&#34;#cpython-and-micropython&#34;&gt;Python Versions&lt;/a&gt; • 
    &lt;a href=&#34;#running-code&#34;&gt;Running Code&lt;/a&gt; • 
    &lt;a href=&#34;#tags-and-attributes&#34;&gt;Script Tags and Attributes&lt;/a&gt; • 
    &lt;a href=&#34;#config&#34;&gt;Configuration&lt;/a&gt; • 
    &lt;a href=&#34;#migration&#34;&gt;Migration Guide&lt;/a&gt; • 
    &lt;a href=&#34;#performance&#34;&gt;Performance and Size&lt;/a&gt; • 
    &lt;a href=&#34;#announcements&#34;&gt;A Teaser&lt;/a&gt;
&lt;/div&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;cpython-and-micropython&#34;&gt;CPython and Micropython&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Before we look at specific tags and attributes, it&#39;s important to note: PyScript now offers you a choice of Python runtimes - you can use either CPython (via &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide&lt;/a&gt;) or &lt;a href=&#34;https://micropython.org/&#34;&gt;Micropython&lt;/a&gt; to execute your code. For those unfamiliar with the latter, Micropython is a very lean Python interpreter originally written for use on microcontrollers, which has since been used &lt;a href=&#34;https://www.youtube.com/watch?v=Vh_5Lz1mLq8&#34;&gt;in space&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=YovngSLXoxw&#34;&gt;in the lab&lt;/a&gt;, and &lt;a href=&#34;https://store.micropython.org/&#34;&gt;in innumerable hobbyists&#39; hands&lt;/a&gt;. It&#39;s a reimplementation of (almost) all of Python with keen eyes toward minimizing memory usage and startup time. This makes it a very attractive tool on the web where milliseconds matter.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that while writing Micropython feels almost exactly like writing Python, they are &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; the same language and don&#39;t have the same underlying object model. This means that packages written for one generally don&#39;t work in the other - no &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;matplotlib&lt;/code&gt;, or &lt;code&gt;scikit&lt;/code&gt; in Micropython, for instance. For a list of the differences between the two languages, see &lt;a href=&#34;https://docs.micropython.org/en/latest/genrst/index.html&#34;&gt;Micropython Differences from CPython&lt;/a&gt; from their documentation. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That said, if what you&#39;re interested in is writing Python code to manipulate data on the web and you don&#39;t need to dip too deeply into the standard library or PYPI&#39;s resources, I&#39;d encourage you to give Micropython a shot - I was personally stunned at how fast the startup time is, and how small the download for its core is. See the &lt;a href=&#34;#micropython-size&#34;&gt;performance and size&lt;/a&gt; section below for more details.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;See the &lt;a href=&#34;#run-micropython&#34;&gt;Scripts and Tags - Micropython&lt;/a&gt; section to learn how to run Micropython on your page.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;running-code&#34;&gt;Running Code with PyScript&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Just like in PyScript Classic, you can use PyScript on your page by adding a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag that points to a specific url:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://pyscript.net/releases/2023.11.1/core.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;mt-4 warning-banner&#34;&gt;Note that previous PyScript releases required the &lt;code&gt;defer&lt;/code&gt; attribute on this tag - that&#39;s no longer necessary, but &lt;span class=&#34;font-semibold underline&#34;&gt;specifying a &lt;code class=&#34;nocode&#34;&gt;type&lt;/code&gt; of &lt;code class=&#34;nocode&#34;&gt;module&lt;/code&gt; is&lt;/span&gt;. If you forget to add the &lt;code&gt;module&lt;/code&gt; type, you&#39;ll see an error like:  &lt;code style=&#34;color:darkred&#34;&gt;Uncaught SyntaxError: await is only valid in async functions and the top level bodies of modules&lt;/code&gt;:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Note too that the name of the file has changed from &lt;code&gt;pyscript.js&lt;/code&gt; to &lt;code&gt;core.js&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One optimization: the Python runtime used (Pyodide or Micropython) is not bootstrapped until the first &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt; tag is encountered on the page. That is, if you&#39;re injecting PyScript tags dynamically, the Pyodide and Micropoython only actually are downloaded/loaded in the browser when the first tag appears on the page.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;tags-and-attributes&#34;&gt;Script Tags and Attributes&lt;/h2&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Script Tags&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;To run Python code in the browser, wrap it in a &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    print(&amp;#34;Hello, world!&amp;#34;)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
        print(i)    
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&#34;post-p&#34;&gt;This will execute code in the browser with no backend using the &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide&lt;/a&gt; runtime. The two types of tags (&lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; are mostly* equivalent from PyScript&#39;s point of view, and I will use &lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt; for the rest of this post. The &lt;code class=&#34;code&#34;&gt;script&lt;/code&gt; tag has the advantage of not pre-parsing its context as text prior to being interpreted as code, which can cause parsing errors for code that looks like HTML tags inside a &lt;code class=&#34;code&#34;&gt;py-script&lt;/code&gt; tag. &lt;span class=&#34;font-semibold&#34;&gt;In general, using &lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt; is preferred.&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34; id=&#34;run-micropython&#34;&gt;Micropython&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;To run code using &lt;a href=&#34;#cpython-and-micropython&#34;&gt;Micropython&lt;/a&gt;, use either &lt;code&gt;&amp;lt;mpy-script&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;script type=&#34;mpy&#34;&amp;gt;&lt;/code&gt;. In general, these tags function exactly like their Pyodide counterparts. For brevity, I&#39;ll only illustrate the examples below with Pyodide tags; swap &lt;code&gt;type=&#34;py&#34;&lt;/code&gt; for &lt;code&gt;type=&#34;mpy&#34;&lt;/code&gt; in any of the code samples below to use Micropython.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mpy&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display
    display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Wow that was fast!&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# The micropython stdlib is also availble&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# https://docs.micropython.org/en/latest/library/index.html&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;hashlib&lt;/span&gt;
    display(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(hashlib&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sha256(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;hello world!&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;digest()))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&#34;post-h3&#34;&gt;Tag Attributes&lt;/h3&gt;
&lt;h4 class=&#34;font-mono text-green-800 post-h4&#34;&gt;src&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code&gt;src&lt;/code&gt; attribute is a URL pointing to an external Python file to be used as the source code to execute. If included, any source written inside the actual &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt; tag is ignored.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# /some/url/my_module.py&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/some/url/my_module.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 class=&#34;font-mono text-green-800 post-h4&#34;&gt;config&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code&gt;config&lt;/code&gt; attribute defines the &lt;span class=&#34;italic&#34;&gt;configuration&lt;/span&gt; to be used with a particular script tag. This can either be a URL (relative or fully qualified), or a string of JSON specifying the configuration directly. More info is given in the &lt;a href=&#34;#config&#34;&gt;config section&lt;/a&gt; below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_config.json&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;h4 class=&#34;font-mono text-green-800 post-h4&#34;&gt;async&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Adding the &lt;code&gt;async&lt;/code&gt; tag will run the Python code with &lt;a href=&#34;../post/pyscript-asyncio#implicitasync&#34;&gt;top level await&lt;/a&gt; enabled. This allows users to use the &lt;a href=&#34;https://docs.python.org/3/reference/compound_stmts.html#coroutines&#34;&gt;&lt;code&gt;await&lt;/code&gt;, &lt;code&gt;async for&lt;/code&gt;, and &lt;code&gt;async with&lt;/code&gt;&lt;/a&gt; statements at the top level of a module (i.e. not inside a coroutine/&lt;code&gt;async def&lt;/code&gt; block). This allows users to, in essence, write coroutines which are automatically scheduled into an event loop without using &lt;code&gt;asyncio.ensure_future&lt;/code&gt; or similar.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;async&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Normally top-level &amp;#39;await&amp;#39; is forbidden, but allowed with &amp;#39;async&amp;#39; tag attribute&lt;/span&gt;
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(i)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 class=&#34;font-mono text-green-800 post-h4&#34;&gt;target&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;By default, calls to &lt;code&gt;display()&lt;/code&gt; output to the same location on the page as the PyScript tag itself. If you wish the output produced by &lt;code&gt;display()&lt;/code&gt; to appear somewhere else on the page, you can specify that location using the &lt;code&gt;target&lt;/code&gt; attribute, which takes a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors&#34;&gt;CSS Selector&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;------&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#foo&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display, current_target
    display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;This appears up at the top, in the div with id &amp;#39;foo&amp;#39;&amp;#34;&lt;/span&gt;)
    display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;This appears in the div with id &amp;#39;bar&amp;#39;&amp;#34;&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 class=&#34;font-mono text-green-800 post-h4&#34;&gt;worker&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Adding the &lt;code&gt;worker&lt;/code&gt; attribute to a script tag causes the Python code to be executed in a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers&#34;&gt;JS Web Worker&lt;/a&gt;. The code can either be included in-line, or in an external file specified by the &lt;code class=&#34;code&#34;&gt;src&lt;/code&gt; attribute. Note that each tag with the &lt;code class=&#34;code&#34;&gt;work&lt;/code&gt; attribute runs in its own isolated worker thread - in the example below, the second &lt;code class=&#34;code&#34;&gt;worker&lt;/code&gt; tag does not have access to the &lt;code class=&#34;code&#34;&gt;x&lt;/code&gt; variable defined in the first tag, as they are running in separate interpreters/threads.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Code running in a worker also accepts the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; attributes. Note that each worker can have its own config. If no &lt;code&gt;config&lt;/code&gt; is specified, the worker will use a copy of the config being used by the main thread script tags.

&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;hello, world! &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;worker&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display
    display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;first worker&amp;#34;&lt;/span&gt;)
    x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;x&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;worker&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display
    display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;second worker&amp;#34;&lt;/span&gt;)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;x&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Error - each &amp;#39;worker&amp;#39; tag is a separate worker&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&#34;post-p&#34;&gt;The use of worker threads via &lt;a href=&#34;https://github.com/pyscript/polyscript/tree/main/docs#xworker&#34;&gt;PolyScript&#39;s XWorker Utility&lt;/a&gt; is an advanced but hugely powerful topic that deserves its own series of posts. For those looking to dive in on the deep end, I&#39;d start with:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;The &lt;a href=&#34;https://github.com/pyscript/polyscript/tree/main/docs#xworker&#34;&gt;PolyScript XWorker Documentation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;The &lt;a href=&#34;https://docs.pyscript.net/2023.11.1.RC3/user-guide/workers/&#34;&gt;official PyScript docs page on Workers&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;The PyScript documentation&#39;s &lt;a href=&#34;https://docs.pyscript.net/2023.11.1.RC3/user-guide/builtins/&#34;&gt;worker-specific builtins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;But note that your server must either provide the appropriate headers/permissions (COEP and CORP at least), or you can use a shim like &lt;a href=&#34;https://github.com/WebReflection/mini-coi&#34;&gt;mini-coi&lt;/a&gt; to provide them for you in a service worker.&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;The &lt;code&gt;worker&lt;/code&gt; attribute gains some additional superpowers when used with the &lt;code&gt;terminal&lt;/code&gt; attribute...&lt;/p&gt;

&lt;h4 class=&#34;font-mono text-green-800 post-h4&#34; id=&#34;terminal-attribute&#34;&gt;terminal&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Adding the &lt;code&gt;terminal&lt;/code&gt; attribute to a script tag causes an &lt;a href=&#34;https://xtermjs.org/&#34;&gt;xtermjs&lt;/a&gt; terminal to be loaded on the page in the same location as that script tag.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If the script tag in question is running in on the main thread, the terminal is a &#34;passive&#34; output system, in the sense that it doesn&#39;t have any built-in capacity to send input back to the Python interpreter. It&#39;s worth noting that, with either main-thread interpreters or workers, only one terminal is permitted per-page:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s a main-thread terminal:&lt;/p&gt;
&lt;py-config style=&#34;display:none&#34;&gt;
    packages = [&#39;rich&#39;]
&lt;/py-config&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;terminal&lt;/span&gt;&amp;gt;
    print(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;)
    print(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You can even \x1B[1;3;31mprint in color!\x1B[0m&amp;#34;&lt;/span&gt;)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div dir=&#34;ltr&#34; class=&#34;terminal xterm xterm-dom-renderer-owner-1&#34;&gt;&lt;div class=&#34;xterm-viewport&#34; style=&#34;background-color: rgb(25, 26, 25);&#34;&gt;&lt;div class=&#34;xterm-scroll-area&#34; style=&#34;height: 415px;&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;xterm-screen&#34; style=&#34;width: 720px; height: 415px;&#34;&gt;&lt;div class=&#34;xterm-helpers&#34;&gt;&lt;textarea class=&#34;xterm-helper-textarea&#34; aria-label=&#34;Terminal input&#34; aria-multiline=&#34;false&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; tabindex=&#34;0&#34; style=&#34;left: 263.009px; top: 18.3296px; width: 20px; height: 20px; line-height: 17.2917px; z-index: 1000;&#34;&gt;&lt;/textarea&gt;&lt;span class=&#34;xterm-char-measure-element&#34; aria-hidden=&#34;true&#34; style=&#34;white-space: pre; font-kerning: none; font-family: courier-new, courier, monospace; font-size: 15px;&#34;&gt;&lt;/span&gt;&lt;div class=&#34;composition-view&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;.xterm-dom-renderer-owner-1 .xterm-rows span { display: inline-block; height: 100%; vertical-align: top;}&lt;/style&gt;&lt;style&gt;.xterm-dom-renderer-owner-1 .xterm-rows { color: #F5F2E7; font-family: courier-new, courier, monospace; font-size: 15px; font-kerning: none; white-space: pre}.xterm-dom-renderer-owner-1 .xterm-rows .xterm-dim { color: #f5f2e780;}.xterm-dom-renderer-owner-1 span:not(.xterm-bold) { font-weight: normal;}.xterm-dom-renderer-owner-1 span.xterm-bold { font-weight: bold;}.xterm-dom-renderer-owner-1 span.xterm-italic { font-style: italic;}@keyframes blink_box_shadow_1 { 50% {  border-bottom-style: hidden; }}@keyframes blink_block_1 { 0% {  background-color: #ffffff;  color: #000000; } 50% {  background-color: inherit;  color: #ffffff; }}.xterm-dom-renderer-owner-1 .xterm-rows.xterm-focus .xterm-cursor.xterm-cursor-blink:not(.xterm-cursor-block) { animation: blink_box_shadow_1 1s step-end infinite;}.xterm-dom-renderer-owner-1 .xterm-rows.xterm-focus .xterm-cursor.xterm-cursor-blink.xterm-cursor-block { animation: blink_block_1 1s step-end infinite;}.xterm-dom-renderer-owner-1 .xterm-rows .xterm-cursor.xterm-cursor-block { background-color: #ffffff; color: #000000;}.xterm-dom-renderer-owner-1 .xterm-rows .xterm-cursor.xterm-cursor-outline { outline: 1px solid #ffffff; outline-offset: -1px;}.xterm-dom-renderer-owner-1 .xterm-rows .xterm-cursor.xterm-cursor-bar { box-shadow: 1px 0 0 #ffffff inset;}.xterm-dom-renderer-owner-1 .xterm-rows .xterm-cursor.xterm-cursor-underline { border-bottom: 1px #ffffff; border-bottom-style: solid; height: calc(100% - 1px);}.xterm-dom-renderer-owner-1 .xterm-selection { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}.xterm-dom-renderer-owner-1.focus .xterm-selection div { position: absolute; background-color: #5e5f5e;}.xterm-dom-renderer-owner-1 .xterm-selection div { position: absolute; background-color: #5e5f5e;}.xterm-dom-renderer-owner-1 .xterm-fg-0 { color: #2e3436; }.xterm-dom-renderer-owner-1 .xterm-fg-0.xterm-dim { color: #2e343680; }.xterm-dom-renderer-owner-1 .xterm-bg-0 { background-color: #2e3436; }.xterm-dom-renderer-owner-1 .xterm-fg-1 { color: #cc0000; }.xterm-dom-renderer-owner-1 .xterm-fg-1.xterm-dim { color: #cc000080; }.xterm-dom-renderer-owner-1 .xterm-bg-1 { background-color: #cc0000; }.xterm-dom-renderer-owner-1 .xterm-fg-2 { color: #4e9a06; }.xterm-dom-renderer-owner-1 .xterm-fg-2.xterm-dim { color: #4e9a0680; }.xterm-dom-renderer-owner-1 .xterm-bg-2 { background-color: #4e9a06; }.xterm-dom-renderer-owner-1 .xterm-fg-3 { color: #c4a000; }.xterm-dom-renderer-owner-1 .xterm-fg-3.xterm-dim { color: #c4a00080; }.xterm-dom-renderer-owner-1 .xterm-bg-3 { background-color: #c4a000; }.xterm-dom-renderer-owner-1 .xterm-fg-4 { color: #3465a4; }.xterm-dom-renderer-owner-1 .xterm-fg-4.xterm-dim { color: #3465a480; }.xterm-dom-renderer-owner-1 .xterm-bg-4 { background-color: #3465a4; }.xterm-dom-renderer-owner-1 .xterm-fg-5 { color: #75507b; }.xterm-dom-renderer-owner-1 .xterm-fg-5.xterm-dim { color: #75507b80; }.xterm-dom-renderer-owner-1 .xterm-bg-5 { background-color: #75507b; }.xterm-dom-renderer-owner-1 .xterm-fg-6 { color: #06989a; }.xterm-dom-renderer-owner-1 .xterm-fg-6.xterm-dim { color: #06989a80; }.xterm-dom-renderer-owner-1 .xterm-bg-6 { background-color: #06989a; }.xterm-dom-renderer-owner-1 .xterm-fg-7 { color: #d3d7cf; }.xterm-dom-renderer-owner-1 .xterm-fg-7.xterm-dim { color: #d3d7cf80; }.xterm-dom-renderer-owner-1 .xterm-bg-7 { background-color: #d3d7cf; }.xterm-dom-renderer-owner-1 .xterm-fg-8 { color: #555753; }.xterm-dom-renderer-owner-1 .xterm-fg-8.xterm-dim { color: #55575380; }.xterm-dom-renderer-owner-1 .xterm-bg-8 { background-color: #555753; }.xterm-dom-renderer-owner-1 .xterm-fg-9 { color: #ef2929; }.xterm-dom-renderer-owner-1 .xterm-fg-9.xterm-dim { color: #ef292980; }.xterm-dom-renderer-owner-1 .xterm-bg-9 { background-color: #ef2929; }.xterm-dom-renderer-owner-1 .xterm-fg-10 { color: #8ae234; }.xterm-dom-renderer-owner-1 .xterm-fg-10.xterm-dim { color: #8ae23480; }.xterm-dom-renderer-owner-1 .xterm-bg-10 { background-color: #8ae234; }.xterm-dom-renderer-owner-1 .xterm-fg-11 { color: #fce94f; }.xterm-dom-renderer-owner-1 .xterm-fg-11.xterm-dim { color: #fce94f80; }.xterm-dom-renderer-owner-1 .xterm-bg-11 { background-color: #fce94f; }.xterm-dom-renderer-owner-1 .xterm-fg-12 { color: #729fcf; }.xterm-dom-renderer-owner-1 .xterm-fg-12.xterm-dim { color: #729fcf80; }.xterm-dom-renderer-owner-1 .xterm-bg-12 { background-color: #729fcf; }.xterm-dom-renderer-owner-1 .xterm-fg-13 { color: #ad7fa8; }.xterm-dom-renderer-owner-1 .xterm-fg-13.xterm-dim { color: #ad7fa880; }.xterm-dom-renderer-owner-1 .xterm-bg-13 { background-color: #ad7fa8; }.xterm-dom-renderer-owner-1 .xterm-fg-14 { color: #34e2e2; }.xterm-dom-renderer-owner-1 .xterm-fg-14.xterm-dim { color: #34e2e280; }.xterm-dom-renderer-owner-1 .xterm-bg-14 { background-color: #34e2e2; }.xterm-dom-renderer-owner-1 .xterm-fg-15 { color: #eeeeec; }.xterm-dom-renderer-owner-1 .xterm-fg-15.xterm-dim { color: #eeeeec80; }.xterm-dom-renderer-owner-1 .xterm-bg-15 { background-color: #eeeeec; }.xterm-dom-renderer-owner-1 .xterm-fg-16 { color: #000000; }.xterm-dom-renderer-owner-1 .xterm-fg-16.xterm-dim { color: #00000080; }.xterm-dom-renderer-owner-1 .xterm-bg-16 { background-color: #000000; }.xterm-dom-renderer-owner-1 .xterm-fg-17 { color: #00005f; }.xterm-dom-renderer-owner-1 .xterm-fg-17.xterm-dim { color: #00005f80; }.xterm-dom-renderer-owner-1 .xterm-bg-17 { background-color: #00005f; }.xterm-dom-renderer-owner-1 .xterm-fg-18 { color: #000087; }.xterm-dom-renderer-owner-1 .xterm-fg-18.xterm-dim { color: #00008780; }.xterm-dom-renderer-owner-1 .xterm-bg-18 { background-color: #000087; }.xterm-dom-renderer-owner-1 .xterm-fg-19 { color: #0000af; }.xterm-dom-renderer-owner-1 .xterm-fg-19.xterm-dim { color: #0000af80; }.xterm-dom-renderer-owner-1 .xterm-bg-19 { background-color: #0000af; }.xterm-dom-renderer-owner-1 .xterm-fg-20 { color: #0000d7; }.xterm-dom-renderer-owner-1 .xterm-fg-20.xterm-dim { color: #0000d780; }.xterm-dom-renderer-owner-1 .xterm-bg-20 { background-color: #0000d7; }.xterm-dom-renderer-owner-1 .xterm-fg-21 { color: #0000ff; }.xterm-dom-renderer-owner-1 .xterm-fg-21.xterm-dim { color: #0000ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-21 { background-color: #0000ff; }.xterm-dom-renderer-owner-1 .xterm-fg-22 { color: #005f00; }.xterm-dom-renderer-owner-1 .xterm-fg-22.xterm-dim { color: #005f0080; }.xterm-dom-renderer-owner-1 .xterm-bg-22 { background-color: #005f00; }.xterm-dom-renderer-owner-1 .xterm-fg-23 { color: #005f5f; }.xterm-dom-renderer-owner-1 .xterm-fg-23.xterm-dim { color: #005f5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-23 { background-color: #005f5f; }.xterm-dom-renderer-owner-1 .xterm-fg-24 { color: #005f87; }.xterm-dom-renderer-owner-1 .xterm-fg-24.xterm-dim { color: #005f8780; }.xterm-dom-renderer-owner-1 .xterm-bg-24 { background-color: #005f87; }.xterm-dom-renderer-owner-1 .xterm-fg-25 { color: #005faf; }.xterm-dom-renderer-owner-1 .xterm-fg-25.xterm-dim { color: #005faf80; }.xterm-dom-renderer-owner-1 .xterm-bg-25 { background-color: #005faf; }.xterm-dom-renderer-owner-1 .xterm-fg-26 { color: #005fd7; }.xterm-dom-renderer-owner-1 .xterm-fg-26.xterm-dim { color: #005fd780; }.xterm-dom-renderer-owner-1 .xterm-bg-26 { background-color: #005fd7; }.xterm-dom-renderer-owner-1 .xterm-fg-27 { color: #005fff; }.xterm-dom-renderer-owner-1 .xterm-fg-27.xterm-dim { color: #005fff80; }.xterm-dom-renderer-owner-1 .xterm-bg-27 { background-color: #005fff; }.xterm-dom-renderer-owner-1 .xterm-fg-28 { color: #008700; }.xterm-dom-renderer-owner-1 .xterm-fg-28.xterm-dim { color: #00870080; }.xterm-dom-renderer-owner-1 .xterm-bg-28 { background-color: #008700; }.xterm-dom-renderer-owner-1 .xterm-fg-29 { color: #00875f; }.xterm-dom-renderer-owner-1 .xterm-fg-29.xterm-dim { color: #00875f80; }.xterm-dom-renderer-owner-1 .xterm-bg-29 { background-color: #00875f; }.xterm-dom-renderer-owner-1 .xterm-fg-30 { color: #008787; }.xterm-dom-renderer-owner-1 .xterm-fg-30.xterm-dim { color: #00878780; }.xterm-dom-renderer-owner-1 .xterm-bg-30 { background-color: #008787; }.xterm-dom-renderer-owner-1 .xterm-fg-31 { color: #0087af; }.xterm-dom-renderer-owner-1 .xterm-fg-31.xterm-dim { color: #0087af80; }.xterm-dom-renderer-owner-1 .xterm-bg-31 { background-color: #0087af; }.xterm-dom-renderer-owner-1 .xterm-fg-32 { color: #0087d7; }.xterm-dom-renderer-owner-1 .xterm-fg-32.xterm-dim { color: #0087d780; }.xterm-dom-renderer-owner-1 .xterm-bg-32 { background-color: #0087d7; }.xterm-dom-renderer-owner-1 .xterm-fg-33 { color: #0087ff; }.xterm-dom-renderer-owner-1 .xterm-fg-33.xterm-dim { color: #0087ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-33 { background-color: #0087ff; }.xterm-dom-renderer-owner-1 .xterm-fg-34 { color: #00af00; }.xterm-dom-renderer-owner-1 .xterm-fg-34.xterm-dim { color: #00af0080; }.xterm-dom-renderer-owner-1 .xterm-bg-34 { background-color: #00af00; }.xterm-dom-renderer-owner-1 .xterm-fg-35 { color: #00af5f; }.xterm-dom-renderer-owner-1 .xterm-fg-35.xterm-dim { color: #00af5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-35 { background-color: #00af5f; }.xterm-dom-renderer-owner-1 .xterm-fg-36 { color: #00af87; }.xterm-dom-renderer-owner-1 .xterm-fg-36.xterm-dim { color: #00af8780; }.xterm-dom-renderer-owner-1 .xterm-bg-36 { background-color: #00af87; }.xterm-dom-renderer-owner-1 .xterm-fg-37 { color: #00afaf; }.xterm-dom-renderer-owner-1 .xterm-fg-37.xterm-dim { color: #00afaf80; }.xterm-dom-renderer-owner-1 .xterm-bg-37 { background-color: #00afaf; }.xterm-dom-renderer-owner-1 .xterm-fg-38 { color: #00afd7; }.xterm-dom-renderer-owner-1 .xterm-fg-38.xterm-dim { color: #00afd780; }.xterm-dom-renderer-owner-1 .xterm-bg-38 { background-color: #00afd7; }.xterm-dom-renderer-owner-1 .xterm-fg-39 { color: #00afff; }.xterm-dom-renderer-owner-1 .xterm-fg-39.xterm-dim { color: #00afff80; }.xterm-dom-renderer-owner-1 .xterm-bg-39 { background-color: #00afff; }.xterm-dom-renderer-owner-1 .xterm-fg-40 { color: #00d700; }.xterm-dom-renderer-owner-1 .xterm-fg-40.xterm-dim { color: #00d70080; }.xterm-dom-renderer-owner-1 .xterm-bg-40 { background-color: #00d700; }.xterm-dom-renderer-owner-1 .xterm-fg-41 { color: #00d75f; }.xterm-dom-renderer-owner-1 .xterm-fg-41.xterm-dim { color: #00d75f80; }.xterm-dom-renderer-owner-1 .xterm-bg-41 { background-color: #00d75f; }.xterm-dom-renderer-owner-1 .xterm-fg-42 { color: #00d787; }.xterm-dom-renderer-owner-1 .xterm-fg-42.xterm-dim { color: #00d78780; }.xterm-dom-renderer-owner-1 .xterm-bg-42 { background-color: #00d787; }.xterm-dom-renderer-owner-1 .xterm-fg-43 { color: #00d7af; }.xterm-dom-renderer-owner-1 .xterm-fg-43.xterm-dim { color: #00d7af80; }.xterm-dom-renderer-owner-1 .xterm-bg-43 { background-color: #00d7af; }.xterm-dom-renderer-owner-1 .xterm-fg-44 { color: #00d7d7; }.xterm-dom-renderer-owner-1 .xterm-fg-44.xterm-dim { color: #00d7d780; }.xterm-dom-renderer-owner-1 .xterm-bg-44 { background-color: #00d7d7; }.xterm-dom-renderer-owner-1 .xterm-fg-45 { color: #00d7ff; }.xterm-dom-renderer-owner-1 .xterm-fg-45.xterm-dim { color: #00d7ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-45 { background-color: #00d7ff; }.xterm-dom-renderer-owner-1 .xterm-fg-46 { color: #00ff00; }.xterm-dom-renderer-owner-1 .xterm-fg-46.xterm-dim { color: #00ff0080; }.xterm-dom-renderer-owner-1 .xterm-bg-46 { background-color: #00ff00; }.xterm-dom-renderer-owner-1 .xterm-fg-47 { color: #00ff5f; }.xterm-dom-renderer-owner-1 .xterm-fg-47.xterm-dim { color: #00ff5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-47 { background-color: #00ff5f; }.xterm-dom-renderer-owner-1 .xterm-fg-48 { color: #00ff87; }.xterm-dom-renderer-owner-1 .xterm-fg-48.xterm-dim { color: #00ff8780; }.xterm-dom-renderer-owner-1 .xterm-bg-48 { background-color: #00ff87; }.xterm-dom-renderer-owner-1 .xterm-fg-49 { color: #00ffaf; }.xterm-dom-renderer-owner-1 .xterm-fg-49.xterm-dim { color: #00ffaf80; }.xterm-dom-renderer-owner-1 .xterm-bg-49 { background-color: #00ffaf; }.xterm-dom-renderer-owner-1 .xterm-fg-50 { color: #00ffd7; }.xterm-dom-renderer-owner-1 .xterm-fg-50.xterm-dim { color: #00ffd780; }.xterm-dom-renderer-owner-1 .xterm-bg-50 { background-color: #00ffd7; }.xterm-dom-renderer-owner-1 .xterm-fg-51 { color: #00ffff; }.xterm-dom-renderer-owner-1 .xterm-fg-51.xterm-dim { color: #00ffff80; }.xterm-dom-renderer-owner-1 .xterm-bg-51 { background-color: #00ffff; }.xterm-dom-renderer-owner-1 .xterm-fg-52 { color: #5f0000; }.xterm-dom-renderer-owner-1 .xterm-fg-52.xterm-dim { color: #5f000080; }.xterm-dom-renderer-owner-1 .xterm-bg-52 { background-color: #5f0000; }.xterm-dom-renderer-owner-1 .xterm-fg-53 { color: #5f005f; }.xterm-dom-renderer-owner-1 .xterm-fg-53.xterm-dim { color: #5f005f80; }.xterm-dom-renderer-owner-1 .xterm-bg-53 { background-color: #5f005f; }.xterm-dom-renderer-owner-1 .xterm-fg-54 { color: #5f0087; }.xterm-dom-renderer-owner-1 .xterm-fg-54.xterm-dim { color: #5f008780; }.xterm-dom-renderer-owner-1 .xterm-bg-54 { background-color: #5f0087; }.xterm-dom-renderer-owner-1 .xterm-fg-55 { color: #5f00af; }.xterm-dom-renderer-owner-1 .xterm-fg-55.xterm-dim { color: #5f00af80; }.xterm-dom-renderer-owner-1 .xterm-bg-55 { background-color: #5f00af; }.xterm-dom-renderer-owner-1 .xterm-fg-56 { color: #5f00d7; }.xterm-dom-renderer-owner-1 .xterm-fg-56.xterm-dim { color: #5f00d780; }.xterm-dom-renderer-owner-1 .xterm-bg-56 { background-color: #5f00d7; }.xterm-dom-renderer-owner-1 .xterm-fg-57 { color: #5f00ff; }.xterm-dom-renderer-owner-1 .xterm-fg-57.xterm-dim { color: #5f00ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-57 { background-color: #5f00ff; }.xterm-dom-renderer-owner-1 .xterm-fg-58 { color: #5f5f00; }.xterm-dom-renderer-owner-1 .xterm-fg-58.xterm-dim { color: #5f5f0080; }.xterm-dom-renderer-owner-1 .xterm-bg-58 { background-color: #5f5f00; }.xterm-dom-renderer-owner-1 .xterm-fg-59 { color: #5f5f5f; }.xterm-dom-renderer-owner-1 .xterm-fg-59.xterm-dim { color: #5f5f5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-59 { background-color: #5f5f5f; }.xterm-dom-renderer-owner-1 .xterm-fg-60 { color: #5f5f87; }.xterm-dom-renderer-owner-1 .xterm-fg-60.xterm-dim { color: #5f5f8780; }.xterm-dom-renderer-owner-1 .xterm-bg-60 { background-color: #5f5f87; }.xterm-dom-renderer-owner-1 .xterm-fg-61 { color: #5f5faf; }.xterm-dom-renderer-owner-1 .xterm-fg-61.xterm-dim { color: #5f5faf80; }.xterm-dom-renderer-owner-1 .xterm-bg-61 { background-color: #5f5faf; }.xterm-dom-renderer-owner-1 .xterm-fg-62 { color: #5f5fd7; }.xterm-dom-renderer-owner-1 .xterm-fg-62.xterm-dim { color: #5f5fd780; }.xterm-dom-renderer-owner-1 .xterm-bg-62 { background-color: #5f5fd7; }.xterm-dom-renderer-owner-1 .xterm-fg-63 { color: #5f5fff; }.xterm-dom-renderer-owner-1 .xterm-fg-63.xterm-dim { color: #5f5fff80; }.xterm-dom-renderer-owner-1 .xterm-bg-63 { background-color: #5f5fff; }.xterm-dom-renderer-owner-1 .xterm-fg-64 { color: #5f8700; }.xterm-dom-renderer-owner-1 .xterm-fg-64.xterm-dim { color: #5f870080; }.xterm-dom-renderer-owner-1 .xterm-bg-64 { background-color: #5f8700; }.xterm-dom-renderer-owner-1 .xterm-fg-65 { color: #5f875f; }.xterm-dom-renderer-owner-1 .xterm-fg-65.xterm-dim { color: #5f875f80; }.xterm-dom-renderer-owner-1 .xterm-bg-65 { background-color: #5f875f; }.xterm-dom-renderer-owner-1 .xterm-fg-66 { color: #5f8787; }.xterm-dom-renderer-owner-1 .xterm-fg-66.xterm-dim { color: #5f878780; }.xterm-dom-renderer-owner-1 .xterm-bg-66 { background-color: #5f8787; }.xterm-dom-renderer-owner-1 .xterm-fg-67 { color: #5f87af; }.xterm-dom-renderer-owner-1 .xterm-fg-67.xterm-dim { color: #5f87af80; }.xterm-dom-renderer-owner-1 .xterm-bg-67 { background-color: #5f87af; }.xterm-dom-renderer-owner-1 .xterm-fg-68 { color: #5f87d7; }.xterm-dom-renderer-owner-1 .xterm-fg-68.xterm-dim { color: #5f87d780; }.xterm-dom-renderer-owner-1 .xterm-bg-68 { background-color: #5f87d7; }.xterm-dom-renderer-owner-1 .xterm-fg-69 { color: #5f87ff; }.xterm-dom-renderer-owner-1 .xterm-fg-69.xterm-dim { color: #5f87ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-69 { background-color: #5f87ff; }.xterm-dom-renderer-owner-1 .xterm-fg-70 { color: #5faf00; }.xterm-dom-renderer-owner-1 .xterm-fg-70.xterm-dim { color: #5faf0080; }.xterm-dom-renderer-owner-1 .xterm-bg-70 { background-color: #5faf00; }.xterm-dom-renderer-owner-1 .xterm-fg-71 { color: #5faf5f; }.xterm-dom-renderer-owner-1 .xterm-fg-71.xterm-dim { color: #5faf5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-71 { background-color: #5faf5f; }.xterm-dom-renderer-owner-1 .xterm-fg-72 { color: #5faf87; }.xterm-dom-renderer-owner-1 .xterm-fg-72.xterm-dim { color: #5faf8780; }.xterm-dom-renderer-owner-1 .xterm-bg-72 { background-color: #5faf87; }.xterm-dom-renderer-owner-1 .xterm-fg-73 { color: #5fafaf; }.xterm-dom-renderer-owner-1 .xterm-fg-73.xterm-dim { color: #5fafaf80; }.xterm-dom-renderer-owner-1 .xterm-bg-73 { background-color: #5fafaf; }.xterm-dom-renderer-owner-1 .xterm-fg-74 { color: #5fafd7; }.xterm-dom-renderer-owner-1 .xterm-fg-74.xterm-dim { color: #5fafd780; }.xterm-dom-renderer-owner-1 .xterm-bg-74 { background-color: #5fafd7; }.xterm-dom-renderer-owner-1 .xterm-fg-75 { color: #5fafff; }.xterm-dom-renderer-owner-1 .xterm-fg-75.xterm-dim { color: #5fafff80; }.xterm-dom-renderer-owner-1 .xterm-bg-75 { background-color: #5fafff; }.xterm-dom-renderer-owner-1 .xterm-fg-76 { color: #5fd700; }.xterm-dom-renderer-owner-1 .xterm-fg-76.xterm-dim { color: #5fd70080; }.xterm-dom-renderer-owner-1 .xterm-bg-76 { background-color: #5fd700; }.xterm-dom-renderer-owner-1 .xterm-fg-77 { color: #5fd75f; }.xterm-dom-renderer-owner-1 .xterm-fg-77.xterm-dim { color: #5fd75f80; }.xterm-dom-renderer-owner-1 .xterm-bg-77 { background-color: #5fd75f; }.xterm-dom-renderer-owner-1 .xterm-fg-78 { color: #5fd787; }.xterm-dom-renderer-owner-1 .xterm-fg-78.xterm-dim { color: #5fd78780; }.xterm-dom-renderer-owner-1 .xterm-bg-78 { background-color: #5fd787; }.xterm-dom-renderer-owner-1 .xterm-fg-79 { color: #5fd7af; }.xterm-dom-renderer-owner-1 .xterm-fg-79.xterm-dim { color: #5fd7af80; }.xterm-dom-renderer-owner-1 .xterm-bg-79 { background-color: #5fd7af; }.xterm-dom-renderer-owner-1 .xterm-fg-80 { color: #5fd7d7; }.xterm-dom-renderer-owner-1 .xterm-fg-80.xterm-dim { color: #5fd7d780; }.xterm-dom-renderer-owner-1 .xterm-bg-80 { background-color: #5fd7d7; }.xterm-dom-renderer-owner-1 .xterm-fg-81 { color: #5fd7ff; }.xterm-dom-renderer-owner-1 .xterm-fg-81.xterm-dim { color: #5fd7ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-81 { background-color: #5fd7ff; }.xterm-dom-renderer-owner-1 .xterm-fg-82 { color: #5fff00; }.xterm-dom-renderer-owner-1 .xterm-fg-82.xterm-dim { color: #5fff0080; }.xterm-dom-renderer-owner-1 .xterm-bg-82 { background-color: #5fff00; }.xterm-dom-renderer-owner-1 .xterm-fg-83 { color: #5fff5f; }.xterm-dom-renderer-owner-1 .xterm-fg-83.xterm-dim { color: #5fff5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-83 { background-color: #5fff5f; }.xterm-dom-renderer-owner-1 .xterm-fg-84 { color: #5fff87; }.xterm-dom-renderer-owner-1 .xterm-fg-84.xterm-dim { color: #5fff8780; }.xterm-dom-renderer-owner-1 .xterm-bg-84 { background-color: #5fff87; }.xterm-dom-renderer-owner-1 .xterm-fg-85 { color: #5fffaf; }.xterm-dom-renderer-owner-1 .xterm-fg-85.xterm-dim { color: #5fffaf80; }.xterm-dom-renderer-owner-1 .xterm-bg-85 { background-color: #5fffaf; }.xterm-dom-renderer-owner-1 .xterm-fg-86 { color: #5fffd7; }.xterm-dom-renderer-owner-1 .xterm-fg-86.xterm-dim { color: #5fffd780; }.xterm-dom-renderer-owner-1 .xterm-bg-86 { background-color: #5fffd7; }.xterm-dom-renderer-owner-1 .xterm-fg-87 { color: #5fffff; }.xterm-dom-renderer-owner-1 .xterm-fg-87.xterm-dim { color: #5fffff80; }.xterm-dom-renderer-owner-1 .xterm-bg-87 { background-color: #5fffff; }.xterm-dom-renderer-owner-1 .xterm-fg-88 { color: #870000; }.xterm-dom-renderer-owner-1 .xterm-fg-88.xterm-dim { color: #87000080; }.xterm-dom-renderer-owner-1 .xterm-bg-88 { background-color: #870000; }.xterm-dom-renderer-owner-1 .xterm-fg-89 { color: #87005f; }.xterm-dom-renderer-owner-1 .xterm-fg-89.xterm-dim { color: #87005f80; }.xterm-dom-renderer-owner-1 .xterm-bg-89 { background-color: #87005f; }.xterm-dom-renderer-owner-1 .xterm-fg-90 { color: #870087; }.xterm-dom-renderer-owner-1 .xterm-fg-90.xterm-dim { color: #87008780; }.xterm-dom-renderer-owner-1 .xterm-bg-90 { background-color: #870087; }.xterm-dom-renderer-owner-1 .xterm-fg-91 { color: #8700af; }.xterm-dom-renderer-owner-1 .xterm-fg-91.xterm-dim { color: #8700af80; }.xterm-dom-renderer-owner-1 .xterm-bg-91 { background-color: #8700af; }.xterm-dom-renderer-owner-1 .xterm-fg-92 { color: #8700d7; }.xterm-dom-renderer-owner-1 .xterm-fg-92.xterm-dim { color: #8700d780; }.xterm-dom-renderer-owner-1 .xterm-bg-92 { background-color: #8700d7; }.xterm-dom-renderer-owner-1 .xterm-fg-93 { color: #8700ff; }.xterm-dom-renderer-owner-1 .xterm-fg-93.xterm-dim { color: #8700ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-93 { background-color: #8700ff; }.xterm-dom-renderer-owner-1 .xterm-fg-94 { color: #875f00; }.xterm-dom-renderer-owner-1 .xterm-fg-94.xterm-dim { color: #875f0080; }.xterm-dom-renderer-owner-1 .xterm-bg-94 { background-color: #875f00; }.xterm-dom-renderer-owner-1 .xterm-fg-95 { color: #875f5f; }.xterm-dom-renderer-owner-1 .xterm-fg-95.xterm-dim { color: #875f5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-95 { background-color: #875f5f; }.xterm-dom-renderer-owner-1 .xterm-fg-96 { color: #875f87; }.xterm-dom-renderer-owner-1 .xterm-fg-96.xterm-dim { color: #875f8780; }.xterm-dom-renderer-owner-1 .xterm-bg-96 { background-color: #875f87; }.xterm-dom-renderer-owner-1 .xterm-fg-97 { color: #875faf; }.xterm-dom-renderer-owner-1 .xterm-fg-97.xterm-dim { color: #875faf80; }.xterm-dom-renderer-owner-1 .xterm-bg-97 { background-color: #875faf; }.xterm-dom-renderer-owner-1 .xterm-fg-98 { color: #875fd7; }.xterm-dom-renderer-owner-1 .xterm-fg-98.xterm-dim { color: #875fd780; }.xterm-dom-renderer-owner-1 .xterm-bg-98 { background-color: #875fd7; }.xterm-dom-renderer-owner-1 .xterm-fg-99 { color: #875fff; }.xterm-dom-renderer-owner-1 .xterm-fg-99.xterm-dim { color: #875fff80; }.xterm-dom-renderer-owner-1 .xterm-bg-99 { background-color: #875fff; }.xterm-dom-renderer-owner-1 .xterm-fg-100 { color: #878700; }.xterm-dom-renderer-owner-1 .xterm-fg-100.xterm-dim { color: #87870080; }.xterm-dom-renderer-owner-1 .xterm-bg-100 { background-color: #878700; }.xterm-dom-renderer-owner-1 .xterm-fg-101 { color: #87875f; }.xterm-dom-renderer-owner-1 .xterm-fg-101.xterm-dim { color: #87875f80; }.xterm-dom-renderer-owner-1 .xterm-bg-101 { background-color: #87875f; }.xterm-dom-renderer-owner-1 .xterm-fg-102 { color: #878787; }.xterm-dom-renderer-owner-1 .xterm-fg-102.xterm-dim { color: #87878780; }.xterm-dom-renderer-owner-1 .xterm-bg-102 { background-color: #878787; }.xterm-dom-renderer-owner-1 .xterm-fg-103 { color: #8787af; }.xterm-dom-renderer-owner-1 .xterm-fg-103.xterm-dim { color: #8787af80; }.xterm-dom-renderer-owner-1 .xterm-bg-103 { background-color: #8787af; }.xterm-dom-renderer-owner-1 .xterm-fg-104 { color: #8787d7; }.xterm-dom-renderer-owner-1 .xterm-fg-104.xterm-dim { color: #8787d780; }.xterm-dom-renderer-owner-1 .xterm-bg-104 { background-color: #8787d7; }.xterm-dom-renderer-owner-1 .xterm-fg-105 { color: #8787ff; }.xterm-dom-renderer-owner-1 .xterm-fg-105.xterm-dim { color: #8787ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-105 { background-color: #8787ff; }.xterm-dom-renderer-owner-1 .xterm-fg-106 { color: #87af00; }.xterm-dom-renderer-owner-1 .xterm-fg-106.xterm-dim { color: #87af0080; }.xterm-dom-renderer-owner-1 .xterm-bg-106 { background-color: #87af00; }.xterm-dom-renderer-owner-1 .xterm-fg-107 { color: #87af5f; }.xterm-dom-renderer-owner-1 .xterm-fg-107.xterm-dim { color: #87af5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-107 { background-color: #87af5f; }.xterm-dom-renderer-owner-1 .xterm-fg-108 { color: #87af87; }.xterm-dom-renderer-owner-1 .xterm-fg-108.xterm-dim { color: #87af8780; }.xterm-dom-renderer-owner-1 .xterm-bg-108 { background-color: #87af87; }.xterm-dom-renderer-owner-1 .xterm-fg-109 { color: #87afaf; }.xterm-dom-renderer-owner-1 .xterm-fg-109.xterm-dim { color: #87afaf80; }.xterm-dom-renderer-owner-1 .xterm-bg-109 { background-color: #87afaf; }.xterm-dom-renderer-owner-1 .xterm-fg-110 { color: #87afd7; }.xterm-dom-renderer-owner-1 .xterm-fg-110.xterm-dim { color: #87afd780; }.xterm-dom-renderer-owner-1 .xterm-bg-110 { background-color: #87afd7; }.xterm-dom-renderer-owner-1 .xterm-fg-111 { color: #87afff; }.xterm-dom-renderer-owner-1 .xterm-fg-111.xterm-dim { color: #87afff80; }.xterm-dom-renderer-owner-1 .xterm-bg-111 { background-color: #87afff; }.xterm-dom-renderer-owner-1 .xterm-fg-112 { color: #87d700; }.xterm-dom-renderer-owner-1 .xterm-fg-112.xterm-dim { color: #87d70080; }.xterm-dom-renderer-owner-1 .xterm-bg-112 { background-color: #87d700; }.xterm-dom-renderer-owner-1 .xterm-fg-113 { color: #87d75f; }.xterm-dom-renderer-owner-1 .xterm-fg-113.xterm-dim { color: #87d75f80; }.xterm-dom-renderer-owner-1 .xterm-bg-113 { background-color: #87d75f; }.xterm-dom-renderer-owner-1 .xterm-fg-114 { color: #87d787; }.xterm-dom-renderer-owner-1 .xterm-fg-114.xterm-dim { color: #87d78780; }.xterm-dom-renderer-owner-1 .xterm-bg-114 { background-color: #87d787; }.xterm-dom-renderer-owner-1 .xterm-fg-115 { color: #87d7af; }.xterm-dom-renderer-owner-1 .xterm-fg-115.xterm-dim { color: #87d7af80; }.xterm-dom-renderer-owner-1 .xterm-bg-115 { background-color: #87d7af; }.xterm-dom-renderer-owner-1 .xterm-fg-116 { color: #87d7d7; }.xterm-dom-renderer-owner-1 .xterm-fg-116.xterm-dim { color: #87d7d780; }.xterm-dom-renderer-owner-1 .xterm-bg-116 { background-color: #87d7d7; }.xterm-dom-renderer-owner-1 .xterm-fg-117 { color: #87d7ff; }.xterm-dom-renderer-owner-1 .xterm-fg-117.xterm-dim { color: #87d7ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-117 { background-color: #87d7ff; }.xterm-dom-renderer-owner-1 .xterm-fg-118 { color: #87ff00; }.xterm-dom-renderer-owner-1 .xterm-fg-118.xterm-dim { color: #87ff0080; }.xterm-dom-renderer-owner-1 .xterm-bg-118 { background-color: #87ff00; }.xterm-dom-renderer-owner-1 .xterm-fg-119 { color: #87ff5f; }.xterm-dom-renderer-owner-1 .xterm-fg-119.xterm-dim { color: #87ff5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-119 { background-color: #87ff5f; }.xterm-dom-renderer-owner-1 .xterm-fg-120 { color: #87ff87; }.xterm-dom-renderer-owner-1 .xterm-fg-120.xterm-dim { color: #87ff8780; }.xterm-dom-renderer-owner-1 .xterm-bg-120 { background-color: #87ff87; }.xterm-dom-renderer-owner-1 .xterm-fg-121 { color: #87ffaf; }.xterm-dom-renderer-owner-1 .xterm-fg-121.xterm-dim { color: #87ffaf80; }.xterm-dom-renderer-owner-1 .xterm-bg-121 { background-color: #87ffaf; }.xterm-dom-renderer-owner-1 .xterm-fg-122 { color: #87ffd7; }.xterm-dom-renderer-owner-1 .xterm-fg-122.xterm-dim { color: #87ffd780; }.xterm-dom-renderer-owner-1 .xterm-bg-122 { background-color: #87ffd7; }.xterm-dom-renderer-owner-1 .xterm-fg-123 { color: #87ffff; }.xterm-dom-renderer-owner-1 .xterm-fg-123.xterm-dim { color: #87ffff80; }.xterm-dom-renderer-owner-1 .xterm-bg-123 { background-color: #87ffff; }.xterm-dom-renderer-owner-1 .xterm-fg-124 { color: #af0000; }.xterm-dom-renderer-owner-1 .xterm-fg-124.xterm-dim { color: #af000080; }.xterm-dom-renderer-owner-1 .xterm-bg-124 { background-color: #af0000; }.xterm-dom-renderer-owner-1 .xterm-fg-125 { color: #af005f; }.xterm-dom-renderer-owner-1 .xterm-fg-125.xterm-dim { color: #af005f80; }.xterm-dom-renderer-owner-1 .xterm-bg-125 { background-color: #af005f; }.xterm-dom-renderer-owner-1 .xterm-fg-126 { color: #af0087; }.xterm-dom-renderer-owner-1 .xterm-fg-126.xterm-dim { color: #af008780; }.xterm-dom-renderer-owner-1 .xterm-bg-126 { background-color: #af0087; }.xterm-dom-renderer-owner-1 .xterm-fg-127 { color: #af00af; }.xterm-dom-renderer-owner-1 .xterm-fg-127.xterm-dim { color: #af00af80; }.xterm-dom-renderer-owner-1 .xterm-bg-127 { background-color: #af00af; }.xterm-dom-renderer-owner-1 .xterm-fg-128 { color: #af00d7; }.xterm-dom-renderer-owner-1 .xterm-fg-128.xterm-dim { color: #af00d780; }.xterm-dom-renderer-owner-1 .xterm-bg-128 { background-color: #af00d7; }.xterm-dom-renderer-owner-1 .xterm-fg-129 { color: #af00ff; }.xterm-dom-renderer-owner-1 .xterm-fg-129.xterm-dim { color: #af00ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-129 { background-color: #af00ff; }.xterm-dom-renderer-owner-1 .xterm-fg-130 { color: #af5f00; }.xterm-dom-renderer-owner-1 .xterm-fg-130.xterm-dim { color: #af5f0080; }.xterm-dom-renderer-owner-1 .xterm-bg-130 { background-color: #af5f00; }.xterm-dom-renderer-owner-1 .xterm-fg-131 { color: #af5f5f; }.xterm-dom-renderer-owner-1 .xterm-fg-131.xterm-dim { color: #af5f5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-131 { background-color: #af5f5f; }.xterm-dom-renderer-owner-1 .xterm-fg-132 { color: #af5f87; }.xterm-dom-renderer-owner-1 .xterm-fg-132.xterm-dim { color: #af5f8780; }.xterm-dom-renderer-owner-1 .xterm-bg-132 { background-color: #af5f87; }.xterm-dom-renderer-owner-1 .xterm-fg-133 { color: #af5faf; }.xterm-dom-renderer-owner-1 .xterm-fg-133.xterm-dim { color: #af5faf80; }.xterm-dom-renderer-owner-1 .xterm-bg-133 { background-color: #af5faf; }.xterm-dom-renderer-owner-1 .xterm-fg-134 { color: #af5fd7; }.xterm-dom-renderer-owner-1 .xterm-fg-134.xterm-dim { color: #af5fd780; }.xterm-dom-renderer-owner-1 .xterm-bg-134 { background-color: #af5fd7; }.xterm-dom-renderer-owner-1 .xterm-fg-135 { color: #af5fff; }.xterm-dom-renderer-owner-1 .xterm-fg-135.xterm-dim { color: #af5fff80; }.xterm-dom-renderer-owner-1 .xterm-bg-135 { background-color: #af5fff; }.xterm-dom-renderer-owner-1 .xterm-fg-136 { color: #af8700; }.xterm-dom-renderer-owner-1 .xterm-fg-136.xterm-dim { color: #af870080; }.xterm-dom-renderer-owner-1 .xterm-bg-136 { background-color: #af8700; }.xterm-dom-renderer-owner-1 .xterm-fg-137 { color: #af875f; }.xterm-dom-renderer-owner-1 .xterm-fg-137.xterm-dim { color: #af875f80; }.xterm-dom-renderer-owner-1 .xterm-bg-137 { background-color: #af875f; }.xterm-dom-renderer-owner-1 .xterm-fg-138 { color: #af8787; }.xterm-dom-renderer-owner-1 .xterm-fg-138.xterm-dim { color: #af878780; }.xterm-dom-renderer-owner-1 .xterm-bg-138 { background-color: #af8787; }.xterm-dom-renderer-owner-1 .xterm-fg-139 { color: #af87af; }.xterm-dom-renderer-owner-1 .xterm-fg-139.xterm-dim { color: #af87af80; }.xterm-dom-renderer-owner-1 .xterm-bg-139 { background-color: #af87af; }.xterm-dom-renderer-owner-1 .xterm-fg-140 { color: #af87d7; }.xterm-dom-renderer-owner-1 .xterm-fg-140.xterm-dim { color: #af87d780; }.xterm-dom-renderer-owner-1 .xterm-bg-140 { background-color: #af87d7; }.xterm-dom-renderer-owner-1 .xterm-fg-141 { color: #af87ff; }.xterm-dom-renderer-owner-1 .xterm-fg-141.xterm-dim { color: #af87ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-141 { background-color: #af87ff; }.xterm-dom-renderer-owner-1 .xterm-fg-142 { color: #afaf00; }.xterm-dom-renderer-owner-1 .xterm-fg-142.xterm-dim { color: #afaf0080; }.xterm-dom-renderer-owner-1 .xterm-bg-142 { background-color: #afaf00; }.xterm-dom-renderer-owner-1 .xterm-fg-143 { color: #afaf5f; }.xterm-dom-renderer-owner-1 .xterm-fg-143.xterm-dim { color: #afaf5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-143 { background-color: #afaf5f; }.xterm-dom-renderer-owner-1 .xterm-fg-144 { color: #afaf87; }.xterm-dom-renderer-owner-1 .xterm-fg-144.xterm-dim { color: #afaf8780; }.xterm-dom-renderer-owner-1 .xterm-bg-144 { background-color: #afaf87; }.xterm-dom-renderer-owner-1 .xterm-fg-145 { color: #afafaf; }.xterm-dom-renderer-owner-1 .xterm-fg-145.xterm-dim { color: #afafaf80; }.xterm-dom-renderer-owner-1 .xterm-bg-145 { background-color: #afafaf; }.xterm-dom-renderer-owner-1 .xterm-fg-146 { color: #afafd7; }.xterm-dom-renderer-owner-1 .xterm-fg-146.xterm-dim { color: #afafd780; }.xterm-dom-renderer-owner-1 .xterm-bg-146 { background-color: #afafd7; }.xterm-dom-renderer-owner-1 .xterm-fg-147 { color: #afafff; }.xterm-dom-renderer-owner-1 .xterm-fg-147.xterm-dim { color: #afafff80; }.xterm-dom-renderer-owner-1 .xterm-bg-147 { background-color: #afafff; }.xterm-dom-renderer-owner-1 .xterm-fg-148 { color: #afd700; }.xterm-dom-renderer-owner-1 .xterm-fg-148.xterm-dim { color: #afd70080; }.xterm-dom-renderer-owner-1 .xterm-bg-148 { background-color: #afd700; }.xterm-dom-renderer-owner-1 .xterm-fg-149 { color: #afd75f; }.xterm-dom-renderer-owner-1 .xterm-fg-149.xterm-dim { color: #afd75f80; }.xterm-dom-renderer-owner-1 .xterm-bg-149 { background-color: #afd75f; }.xterm-dom-renderer-owner-1 .xterm-fg-150 { color: #afd787; }.xterm-dom-renderer-owner-1 .xterm-fg-150.xterm-dim { color: #afd78780; }.xterm-dom-renderer-owner-1 .xterm-bg-150 { background-color: #afd787; }.xterm-dom-renderer-owner-1 .xterm-fg-151 { color: #afd7af; }.xterm-dom-renderer-owner-1 .xterm-fg-151.xterm-dim { color: #afd7af80; }.xterm-dom-renderer-owner-1 .xterm-bg-151 { background-color: #afd7af; }.xterm-dom-renderer-owner-1 .xterm-fg-152 { color: #afd7d7; }.xterm-dom-renderer-owner-1 .xterm-fg-152.xterm-dim { color: #afd7d780; }.xterm-dom-renderer-owner-1 .xterm-bg-152 { background-color: #afd7d7; }.xterm-dom-renderer-owner-1 .xterm-fg-153 { color: #afd7ff; }.xterm-dom-renderer-owner-1 .xterm-fg-153.xterm-dim { color: #afd7ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-153 { background-color: #afd7ff; }.xterm-dom-renderer-owner-1 .xterm-fg-154 { color: #afff00; }.xterm-dom-renderer-owner-1 .xterm-fg-154.xterm-dim { color: #afff0080; }.xterm-dom-renderer-owner-1 .xterm-bg-154 { background-color: #afff00; }.xterm-dom-renderer-owner-1 .xterm-fg-155 { color: #afff5f; }.xterm-dom-renderer-owner-1 .xterm-fg-155.xterm-dim { color: #afff5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-155 { background-color: #afff5f; }.xterm-dom-renderer-owner-1 .xterm-fg-156 { color: #afff87; }.xterm-dom-renderer-owner-1 .xterm-fg-156.xterm-dim { color: #afff8780; }.xterm-dom-renderer-owner-1 .xterm-bg-156 { background-color: #afff87; }.xterm-dom-renderer-owner-1 .xterm-fg-157 { color: #afffaf; }.xterm-dom-renderer-owner-1 .xterm-fg-157.xterm-dim { color: #afffaf80; }.xterm-dom-renderer-owner-1 .xterm-bg-157 { background-color: #afffaf; }.xterm-dom-renderer-owner-1 .xterm-fg-158 { color: #afffd7; }.xterm-dom-renderer-owner-1 .xterm-fg-158.xterm-dim { color: #afffd780; }.xterm-dom-renderer-owner-1 .xterm-bg-158 { background-color: #afffd7; }.xterm-dom-renderer-owner-1 .xterm-fg-159 { color: #afffff; }.xterm-dom-renderer-owner-1 .xterm-fg-159.xterm-dim { color: #afffff80; }.xterm-dom-renderer-owner-1 .xterm-bg-159 { background-color: #afffff; }.xterm-dom-renderer-owner-1 .xterm-fg-160 { color: #d70000; }.xterm-dom-renderer-owner-1 .xterm-fg-160.xterm-dim { color: #d7000080; }.xterm-dom-renderer-owner-1 .xterm-bg-160 { background-color: #d70000; }.xterm-dom-renderer-owner-1 .xterm-fg-161 { color: #d7005f; }.xterm-dom-renderer-owner-1 .xterm-fg-161.xterm-dim { color: #d7005f80; }.xterm-dom-renderer-owner-1 .xterm-bg-161 { background-color: #d7005f; }.xterm-dom-renderer-owner-1 .xterm-fg-162 { color: #d70087; }.xterm-dom-renderer-owner-1 .xterm-fg-162.xterm-dim { color: #d7008780; }.xterm-dom-renderer-owner-1 .xterm-bg-162 { background-color: #d70087; }.xterm-dom-renderer-owner-1 .xterm-fg-163 { color: #d700af; }.xterm-dom-renderer-owner-1 .xterm-fg-163.xterm-dim { color: #d700af80; }.xterm-dom-renderer-owner-1 .xterm-bg-163 { background-color: #d700af; }.xterm-dom-renderer-owner-1 .xterm-fg-164 { color: #d700d7; }.xterm-dom-renderer-owner-1 .xterm-fg-164.xterm-dim { color: #d700d780; }.xterm-dom-renderer-owner-1 .xterm-bg-164 { background-color: #d700d7; }.xterm-dom-renderer-owner-1 .xterm-fg-165 { color: #d700ff; }.xterm-dom-renderer-owner-1 .xterm-fg-165.xterm-dim { color: #d700ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-165 { background-color: #d700ff; }.xterm-dom-renderer-owner-1 .xterm-fg-166 { color: #d75f00; }.xterm-dom-renderer-owner-1 .xterm-fg-166.xterm-dim { color: #d75f0080; }.xterm-dom-renderer-owner-1 .xterm-bg-166 { background-color: #d75f00; }.xterm-dom-renderer-owner-1 .xterm-fg-167 { color: #d75f5f; }.xterm-dom-renderer-owner-1 .xterm-fg-167.xterm-dim { color: #d75f5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-167 { background-color: #d75f5f; }.xterm-dom-renderer-owner-1 .xterm-fg-168 { color: #d75f87; }.xterm-dom-renderer-owner-1 .xterm-fg-168.xterm-dim { color: #d75f8780; }.xterm-dom-renderer-owner-1 .xterm-bg-168 { background-color: #d75f87; }.xterm-dom-renderer-owner-1 .xterm-fg-169 { color: #d75faf; }.xterm-dom-renderer-owner-1 .xterm-fg-169.xterm-dim { color: #d75faf80; }.xterm-dom-renderer-owner-1 .xterm-bg-169 { background-color: #d75faf; }.xterm-dom-renderer-owner-1 .xterm-fg-170 { color: #d75fd7; }.xterm-dom-renderer-owner-1 .xterm-fg-170.xterm-dim { color: #d75fd780; }.xterm-dom-renderer-owner-1 .xterm-bg-170 { background-color: #d75fd7; }.xterm-dom-renderer-owner-1 .xterm-fg-171 { color: #d75fff; }.xterm-dom-renderer-owner-1 .xterm-fg-171.xterm-dim { color: #d75fff80; }.xterm-dom-renderer-owner-1 .xterm-bg-171 { background-color: #d75fff; }.xterm-dom-renderer-owner-1 .xterm-fg-172 { color: #d78700; }.xterm-dom-renderer-owner-1 .xterm-fg-172.xterm-dim { color: #d7870080; }.xterm-dom-renderer-owner-1 .xterm-bg-172 { background-color: #d78700; }.xterm-dom-renderer-owner-1 .xterm-fg-173 { color: #d7875f; }.xterm-dom-renderer-owner-1 .xterm-fg-173.xterm-dim { color: #d7875f80; }.xterm-dom-renderer-owner-1 .xterm-bg-173 { background-color: #d7875f; }.xterm-dom-renderer-owner-1 .xterm-fg-174 { color: #d78787; }.xterm-dom-renderer-owner-1 .xterm-fg-174.xterm-dim { color: #d7878780; }.xterm-dom-renderer-owner-1 .xterm-bg-174 { background-color: #d78787; }.xterm-dom-renderer-owner-1 .xterm-fg-175 { color: #d787af; }.xterm-dom-renderer-owner-1 .xterm-fg-175.xterm-dim { color: #d787af80; }.xterm-dom-renderer-owner-1 .xterm-bg-175 { background-color: #d787af; }.xterm-dom-renderer-owner-1 .xterm-fg-176 { color: #d787d7; }.xterm-dom-renderer-owner-1 .xterm-fg-176.xterm-dim { color: #d787d780; }.xterm-dom-renderer-owner-1 .xterm-bg-176 { background-color: #d787d7; }.xterm-dom-renderer-owner-1 .xterm-fg-177 { color: #d787ff; }.xterm-dom-renderer-owner-1 .xterm-fg-177.xterm-dim { color: #d787ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-177 { background-color: #d787ff; }.xterm-dom-renderer-owner-1 .xterm-fg-178 { color: #d7af00; }.xterm-dom-renderer-owner-1 .xterm-fg-178.xterm-dim { color: #d7af0080; }.xterm-dom-renderer-owner-1 .xterm-bg-178 { background-color: #d7af00; }.xterm-dom-renderer-owner-1 .xterm-fg-179 { color: #d7af5f; }.xterm-dom-renderer-owner-1 .xterm-fg-179.xterm-dim { color: #d7af5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-179 { background-color: #d7af5f; }.xterm-dom-renderer-owner-1 .xterm-fg-180 { color: #d7af87; }.xterm-dom-renderer-owner-1 .xterm-fg-180.xterm-dim { color: #d7af8780; }.xterm-dom-renderer-owner-1 .xterm-bg-180 { background-color: #d7af87; }.xterm-dom-renderer-owner-1 .xterm-fg-181 { color: #d7afaf; }.xterm-dom-renderer-owner-1 .xterm-fg-181.xterm-dim { color: #d7afaf80; }.xterm-dom-renderer-owner-1 .xterm-bg-181 { background-color: #d7afaf; }.xterm-dom-renderer-owner-1 .xterm-fg-182 { color: #d7afd7; }.xterm-dom-renderer-owner-1 .xterm-fg-182.xterm-dim { color: #d7afd780; }.xterm-dom-renderer-owner-1 .xterm-bg-182 { background-color: #d7afd7; }.xterm-dom-renderer-owner-1 .xterm-fg-183 { color: #d7afff; }.xterm-dom-renderer-owner-1 .xterm-fg-183.xterm-dim { color: #d7afff80; }.xterm-dom-renderer-owner-1 .xterm-bg-183 { background-color: #d7afff; }.xterm-dom-renderer-owner-1 .xterm-fg-184 { color: #d7d700; }.xterm-dom-renderer-owner-1 .xterm-fg-184.xterm-dim { color: #d7d70080; }.xterm-dom-renderer-owner-1 .xterm-bg-184 { background-color: #d7d700; }.xterm-dom-renderer-owner-1 .xterm-fg-185 { color: #d7d75f; }.xterm-dom-renderer-owner-1 .xterm-fg-185.xterm-dim { color: #d7d75f80; }.xterm-dom-renderer-owner-1 .xterm-bg-185 { background-color: #d7d75f; }.xterm-dom-renderer-owner-1 .xterm-fg-186 { color: #d7d787; }.xterm-dom-renderer-owner-1 .xterm-fg-186.xterm-dim { color: #d7d78780; }.xterm-dom-renderer-owner-1 .xterm-bg-186 { background-color: #d7d787; }.xterm-dom-renderer-owner-1 .xterm-fg-187 { color: #d7d7af; }.xterm-dom-renderer-owner-1 .xterm-fg-187.xterm-dim { color: #d7d7af80; }.xterm-dom-renderer-owner-1 .xterm-bg-187 { background-color: #d7d7af; }.xterm-dom-renderer-owner-1 .xterm-fg-188 { color: #d7d7d7; }.xterm-dom-renderer-owner-1 .xterm-fg-188.xterm-dim { color: #d7d7d780; }.xterm-dom-renderer-owner-1 .xterm-bg-188 { background-color: #d7d7d7; }.xterm-dom-renderer-owner-1 .xterm-fg-189 { color: #d7d7ff; }.xterm-dom-renderer-owner-1 .xterm-fg-189.xterm-dim { color: #d7d7ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-189 { background-color: #d7d7ff; }.xterm-dom-renderer-owner-1 .xterm-fg-190 { color: #d7ff00; }.xterm-dom-renderer-owner-1 .xterm-fg-190.xterm-dim { color: #d7ff0080; }.xterm-dom-renderer-owner-1 .xterm-bg-190 { background-color: #d7ff00; }.xterm-dom-renderer-owner-1 .xterm-fg-191 { color: #d7ff5f; }.xterm-dom-renderer-owner-1 .xterm-fg-191.xterm-dim { color: #d7ff5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-191 { background-color: #d7ff5f; }.xterm-dom-renderer-owner-1 .xterm-fg-192 { color: #d7ff87; }.xterm-dom-renderer-owner-1 .xterm-fg-192.xterm-dim { color: #d7ff8780; }.xterm-dom-renderer-owner-1 .xterm-bg-192 { background-color: #d7ff87; }.xterm-dom-renderer-owner-1 .xterm-fg-193 { color: #d7ffaf; }.xterm-dom-renderer-owner-1 .xterm-fg-193.xterm-dim { color: #d7ffaf80; }.xterm-dom-renderer-owner-1 .xterm-bg-193 { background-color: #d7ffaf; }.xterm-dom-renderer-owner-1 .xterm-fg-194 { color: #d7ffd7; }.xterm-dom-renderer-owner-1 .xterm-fg-194.xterm-dim { color: #d7ffd780; }.xterm-dom-renderer-owner-1 .xterm-bg-194 { background-color: #d7ffd7; }.xterm-dom-renderer-owner-1 .xterm-fg-195 { color: #d7ffff; }.xterm-dom-renderer-owner-1 .xterm-fg-195.xterm-dim { color: #d7ffff80; }.xterm-dom-renderer-owner-1 .xterm-bg-195 { background-color: #d7ffff; }.xterm-dom-renderer-owner-1 .xterm-fg-196 { color: #ff0000; }.xterm-dom-renderer-owner-1 .xterm-fg-196.xterm-dim { color: #ff000080; }.xterm-dom-renderer-owner-1 .xterm-bg-196 { background-color: #ff0000; }.xterm-dom-renderer-owner-1 .xterm-fg-197 { color: #ff005f; }.xterm-dom-renderer-owner-1 .xterm-fg-197.xterm-dim { color: #ff005f80; }.xterm-dom-renderer-owner-1 .xterm-bg-197 { background-color: #ff005f; }.xterm-dom-renderer-owner-1 .xterm-fg-198 { color: #ff0087; }.xterm-dom-renderer-owner-1 .xterm-fg-198.xterm-dim { color: #ff008780; }.xterm-dom-renderer-owner-1 .xterm-bg-198 { background-color: #ff0087; }.xterm-dom-renderer-owner-1 .xterm-fg-199 { color: #ff00af; }.xterm-dom-renderer-owner-1 .xterm-fg-199.xterm-dim { color: #ff00af80; }.xterm-dom-renderer-owner-1 .xterm-bg-199 { background-color: #ff00af; }.xterm-dom-renderer-owner-1 .xterm-fg-200 { color: #ff00d7; }.xterm-dom-renderer-owner-1 .xterm-fg-200.xterm-dim { color: #ff00d780; }.xterm-dom-renderer-owner-1 .xterm-bg-200 { background-color: #ff00d7; }.xterm-dom-renderer-owner-1 .xterm-fg-201 { color: #ff00ff; }.xterm-dom-renderer-owner-1 .xterm-fg-201.xterm-dim { color: #ff00ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-201 { background-color: #ff00ff; }.xterm-dom-renderer-owner-1 .xterm-fg-202 { color: #ff5f00; }.xterm-dom-renderer-owner-1 .xterm-fg-202.xterm-dim { color: #ff5f0080; }.xterm-dom-renderer-owner-1 .xterm-bg-202 { background-color: #ff5f00; }.xterm-dom-renderer-owner-1 .xterm-fg-203 { color: #ff5f5f; }.xterm-dom-renderer-owner-1 .xterm-fg-203.xterm-dim { color: #ff5f5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-203 { background-color: #ff5f5f; }.xterm-dom-renderer-owner-1 .xterm-fg-204 { color: #ff5f87; }.xterm-dom-renderer-owner-1 .xterm-fg-204.xterm-dim { color: #ff5f8780; }.xterm-dom-renderer-owner-1 .xterm-bg-204 { background-color: #ff5f87; }.xterm-dom-renderer-owner-1 .xterm-fg-205 { color: #ff5faf; }.xterm-dom-renderer-owner-1 .xterm-fg-205.xterm-dim { color: #ff5faf80; }.xterm-dom-renderer-owner-1 .xterm-bg-205 { background-color: #ff5faf; }.xterm-dom-renderer-owner-1 .xterm-fg-206 { color: #ff5fd7; }.xterm-dom-renderer-owner-1 .xterm-fg-206.xterm-dim { color: #ff5fd780; }.xterm-dom-renderer-owner-1 .xterm-bg-206 { background-color: #ff5fd7; }.xterm-dom-renderer-owner-1 .xterm-fg-207 { color: #ff5fff; }.xterm-dom-renderer-owner-1 .xterm-fg-207.xterm-dim { color: #ff5fff80; }.xterm-dom-renderer-owner-1 .xterm-bg-207 { background-color: #ff5fff; }.xterm-dom-renderer-owner-1 .xterm-fg-208 { color: #ff8700; }.xterm-dom-renderer-owner-1 .xterm-fg-208.xterm-dim { color: #ff870080; }.xterm-dom-renderer-owner-1 .xterm-bg-208 { background-color: #ff8700; }.xterm-dom-renderer-owner-1 .xterm-fg-209 { color: #ff875f; }.xterm-dom-renderer-owner-1 .xterm-fg-209.xterm-dim { color: #ff875f80; }.xterm-dom-renderer-owner-1 .xterm-bg-209 { background-color: #ff875f; }.xterm-dom-renderer-owner-1 .xterm-fg-210 { color: #ff8787; }.xterm-dom-renderer-owner-1 .xterm-fg-210.xterm-dim { color: #ff878780; }.xterm-dom-renderer-owner-1 .xterm-bg-210 { background-color: #ff8787; }.xterm-dom-renderer-owner-1 .xterm-fg-211 { color: #ff87af; }.xterm-dom-renderer-owner-1 .xterm-fg-211.xterm-dim { color: #ff87af80; }.xterm-dom-renderer-owner-1 .xterm-bg-211 { background-color: #ff87af; }.xterm-dom-renderer-owner-1 .xterm-fg-212 { color: #ff87d7; }.xterm-dom-renderer-owner-1 .xterm-fg-212.xterm-dim { color: #ff87d780; }.xterm-dom-renderer-owner-1 .xterm-bg-212 { background-color: #ff87d7; }.xterm-dom-renderer-owner-1 .xterm-fg-213 { color: #ff87ff; }.xterm-dom-renderer-owner-1 .xterm-fg-213.xterm-dim { color: #ff87ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-213 { background-color: #ff87ff; }.xterm-dom-renderer-owner-1 .xterm-fg-214 { color: #ffaf00; }.xterm-dom-renderer-owner-1 .xterm-fg-214.xterm-dim { color: #ffaf0080; }.xterm-dom-renderer-owner-1 .xterm-bg-214 { background-color: #ffaf00; }.xterm-dom-renderer-owner-1 .xterm-fg-215 { color: #ffaf5f; }.xterm-dom-renderer-owner-1 .xterm-fg-215.xterm-dim { color: #ffaf5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-215 { background-color: #ffaf5f; }.xterm-dom-renderer-owner-1 .xterm-fg-216 { color: #ffaf87; }.xterm-dom-renderer-owner-1 .xterm-fg-216.xterm-dim { color: #ffaf8780; }.xterm-dom-renderer-owner-1 .xterm-bg-216 { background-color: #ffaf87; }.xterm-dom-renderer-owner-1 .xterm-fg-217 { color: #ffafaf; }.xterm-dom-renderer-owner-1 .xterm-fg-217.xterm-dim { color: #ffafaf80; }.xterm-dom-renderer-owner-1 .xterm-bg-217 { background-color: #ffafaf; }.xterm-dom-renderer-owner-1 .xterm-fg-218 { color: #ffafd7; }.xterm-dom-renderer-owner-1 .xterm-fg-218.xterm-dim { color: #ffafd780; }.xterm-dom-renderer-owner-1 .xterm-bg-218 { background-color: #ffafd7; }.xterm-dom-renderer-owner-1 .xterm-fg-219 { color: #ffafff; }.xterm-dom-renderer-owner-1 .xterm-fg-219.xterm-dim { color: #ffafff80; }.xterm-dom-renderer-owner-1 .xterm-bg-219 { background-color: #ffafff; }.xterm-dom-renderer-owner-1 .xterm-fg-220 { color: #ffd700; }.xterm-dom-renderer-owner-1 .xterm-fg-220.xterm-dim { color: #ffd70080; }.xterm-dom-renderer-owner-1 .xterm-bg-220 { background-color: #ffd700; }.xterm-dom-renderer-owner-1 .xterm-fg-221 { color: #ffd75f; }.xterm-dom-renderer-owner-1 .xterm-fg-221.xterm-dim { color: #ffd75f80; }.xterm-dom-renderer-owner-1 .xterm-bg-221 { background-color: #ffd75f; }.xterm-dom-renderer-owner-1 .xterm-fg-222 { color: #ffd787; }.xterm-dom-renderer-owner-1 .xterm-fg-222.xterm-dim { color: #ffd78780; }.xterm-dom-renderer-owner-1 .xterm-bg-222 { background-color: #ffd787; }.xterm-dom-renderer-owner-1 .xterm-fg-223 { color: #ffd7af; }.xterm-dom-renderer-owner-1 .xterm-fg-223.xterm-dim { color: #ffd7af80; }.xterm-dom-renderer-owner-1 .xterm-bg-223 { background-color: #ffd7af; }.xterm-dom-renderer-owner-1 .xterm-fg-224 { color: #ffd7d7; }.xterm-dom-renderer-owner-1 .xterm-fg-224.xterm-dim { color: #ffd7d780; }.xterm-dom-renderer-owner-1 .xterm-bg-224 { background-color: #ffd7d7; }.xterm-dom-renderer-owner-1 .xterm-fg-225 { color: #ffd7ff; }.xterm-dom-renderer-owner-1 .xterm-fg-225.xterm-dim { color: #ffd7ff80; }.xterm-dom-renderer-owner-1 .xterm-bg-225 { background-color: #ffd7ff; }.xterm-dom-renderer-owner-1 .xterm-fg-226 { color: #ffff00; }.xterm-dom-renderer-owner-1 .xterm-fg-226.xterm-dim { color: #ffff0080; }.xterm-dom-renderer-owner-1 .xterm-bg-226 { background-color: #ffff00; }.xterm-dom-renderer-owner-1 .xterm-fg-227 { color: #ffff5f; }.xterm-dom-renderer-owner-1 .xterm-fg-227.xterm-dim { color: #ffff5f80; }.xterm-dom-renderer-owner-1 .xterm-bg-227 { background-color: #ffff5f; }.xterm-dom-renderer-owner-1 .xterm-fg-228 { color: #ffff87; }.xterm-dom-renderer-owner-1 .xterm-fg-228.xterm-dim { color: #ffff8780; }.xterm-dom-renderer-owner-1 .xterm-bg-228 { background-color: #ffff87; }.xterm-dom-renderer-owner-1 .xterm-fg-229 { color: #ffffaf; }.xterm-dom-renderer-owner-1 .xterm-fg-229.xterm-dim { color: #ffffaf80; }.xterm-dom-renderer-owner-1 .xterm-bg-229 { background-color: #ffffaf; }.xterm-dom-renderer-owner-1 .xterm-fg-230 { color: #ffffd7; }.xterm-dom-renderer-owner-1 .xterm-fg-230.xterm-dim { color: #ffffd780; }.xterm-dom-renderer-owner-1 .xterm-bg-230 { background-color: #ffffd7; }.xterm-dom-renderer-owner-1 .xterm-fg-231 { color: #ffffff; }.xterm-dom-renderer-owner-1 .xterm-fg-231.xterm-dim { color: #ffffff80; }.xterm-dom-renderer-owner-1 .xterm-bg-231 { background-color: #ffffff; }.xterm-dom-renderer-owner-1 .xterm-fg-232 { color: #080808; }.xterm-dom-renderer-owner-1 .xterm-fg-232.xterm-dim { color: #08080880; }.xterm-dom-renderer-owner-1 .xterm-bg-232 { background-color: #080808; }.xterm-dom-renderer-owner-1 .xterm-fg-233 { color: #121212; }.xterm-dom-renderer-owner-1 .xterm-fg-233.xterm-dim { color: #12121280; }.xterm-dom-renderer-owner-1 .xterm-bg-233 { background-color: #121212; }.xterm-dom-renderer-owner-1 .xterm-fg-234 { color: #1c1c1c; }.xterm-dom-renderer-owner-1 .xterm-fg-234.xterm-dim { color: #1c1c1c80; }.xterm-dom-renderer-owner-1 .xterm-bg-234 { background-color: #1c1c1c; }.xterm-dom-renderer-owner-1 .xterm-fg-235 { color: #262626; }.xterm-dom-renderer-owner-1 .xterm-fg-235.xterm-dim { color: #26262680; }.xterm-dom-renderer-owner-1 .xterm-bg-235 { background-color: #262626; }.xterm-dom-renderer-owner-1 .xterm-fg-236 { color: #303030; }.xterm-dom-renderer-owner-1 .xterm-fg-236.xterm-dim { color: #30303080; }.xterm-dom-renderer-owner-1 .xterm-bg-236 { background-color: #303030; }.xterm-dom-renderer-owner-1 .xterm-fg-237 { color: #3a3a3a; }.xterm-dom-renderer-owner-1 .xterm-fg-237.xterm-dim { color: #3a3a3a80; }.xterm-dom-renderer-owner-1 .xterm-bg-237 { background-color: #3a3a3a; }.xterm-dom-renderer-owner-1 .xterm-fg-238 { color: #444444; }.xterm-dom-renderer-owner-1 .xterm-fg-238.xterm-dim { color: #44444480; }.xterm-dom-renderer-owner-1 .xterm-bg-238 { background-color: #444444; }.xterm-dom-renderer-owner-1 .xterm-fg-239 { color: #4e4e4e; }.xterm-dom-renderer-owner-1 .xterm-fg-239.xterm-dim { color: #4e4e4e80; }.xterm-dom-renderer-owner-1 .xterm-bg-239 { background-color: #4e4e4e; }.xterm-dom-renderer-owner-1 .xterm-fg-240 { color: #585858; }.xterm-dom-renderer-owner-1 .xterm-fg-240.xterm-dim { color: #58585880; }.xterm-dom-renderer-owner-1 .xterm-bg-240 { background-color: #585858; }.xterm-dom-renderer-owner-1 .xterm-fg-241 { color: #626262; }.xterm-dom-renderer-owner-1 .xterm-fg-241.xterm-dim { color: #62626280; }.xterm-dom-renderer-owner-1 .xterm-bg-241 { background-color: #626262; }.xterm-dom-renderer-owner-1 .xterm-fg-242 { color: #6c6c6c; }.xterm-dom-renderer-owner-1 .xterm-fg-242.xterm-dim { color: #6c6c6c80; }.xterm-dom-renderer-owner-1 .xterm-bg-242 { background-color: #6c6c6c; }.xterm-dom-renderer-owner-1 .xterm-fg-243 { color: #767676; }.xterm-dom-renderer-owner-1 .xterm-fg-243.xterm-dim { color: #76767680; }.xterm-dom-renderer-owner-1 .xterm-bg-243 { background-color: #767676; }.xterm-dom-renderer-owner-1 .xterm-fg-244 { color: #808080; }.xterm-dom-renderer-owner-1 .xterm-fg-244.xterm-dim { color: #80808080; }.xterm-dom-renderer-owner-1 .xterm-bg-244 { background-color: #808080; }.xterm-dom-renderer-owner-1 .xterm-fg-245 { color: #8a8a8a; }.xterm-dom-renderer-owner-1 .xterm-fg-245.xterm-dim { color: #8a8a8a80; }.xterm-dom-renderer-owner-1 .xterm-bg-245 { background-color: #8a8a8a; }.xterm-dom-renderer-owner-1 .xterm-fg-246 { color: #949494; }.xterm-dom-renderer-owner-1 .xterm-fg-246.xterm-dim { color: #94949480; }.xterm-dom-renderer-owner-1 .xterm-bg-246 { background-color: #949494; }.xterm-dom-renderer-owner-1 .xterm-fg-247 { color: #9e9e9e; }.xterm-dom-renderer-owner-1 .xterm-fg-247.xterm-dim { color: #9e9e9e80; }.xterm-dom-renderer-owner-1 .xterm-bg-247 { background-color: #9e9e9e; }.xterm-dom-renderer-owner-1 .xterm-fg-248 { color: #a8a8a8; }.xterm-dom-renderer-owner-1 .xterm-fg-248.xterm-dim { color: #a8a8a880; }.xterm-dom-renderer-owner-1 .xterm-bg-248 { background-color: #a8a8a8; }.xterm-dom-renderer-owner-1 .xterm-fg-249 { color: #b2b2b2; }.xterm-dom-renderer-owner-1 .xterm-fg-249.xterm-dim { color: #b2b2b280; }.xterm-dom-renderer-owner-1 .xterm-bg-249 { background-color: #b2b2b2; }.xterm-dom-renderer-owner-1 .xterm-fg-250 { color: #bcbcbc; }.xterm-dom-renderer-owner-1 .xterm-fg-250.xterm-dim { color: #bcbcbc80; }.xterm-dom-renderer-owner-1 .xterm-bg-250 { background-color: #bcbcbc; }.xterm-dom-renderer-owner-1 .xterm-fg-251 { color: #c6c6c6; }.xterm-dom-renderer-owner-1 .xterm-fg-251.xterm-dim { color: #c6c6c680; }.xterm-dom-renderer-owner-1 .xterm-bg-251 { background-color: #c6c6c6; }.xterm-dom-renderer-owner-1 .xterm-fg-252 { color: #d0d0d0; }.xterm-dom-renderer-owner-1 .xterm-fg-252.xterm-dim { color: #d0d0d080; }.xterm-dom-renderer-owner-1 .xterm-bg-252 { background-color: #d0d0d0; }.xterm-dom-renderer-owner-1 .xterm-fg-253 { color: #dadada; }.xterm-dom-renderer-owner-1 .xterm-fg-253.xterm-dim { color: #dadada80; }.xterm-dom-renderer-owner-1 .xterm-bg-253 { background-color: #dadada; }.xterm-dom-renderer-owner-1 .xterm-fg-254 { color: #e4e4e4; }.xterm-dom-renderer-owner-1 .xterm-fg-254.xterm-dim { color: #e4e4e480; }.xterm-dom-renderer-owner-1 .xterm-bg-254 { background-color: #e4e4e4; }.xterm-dom-renderer-owner-1 .xterm-fg-255 { color: #eeeeee; }.xterm-dom-renderer-owner-1 .xterm-fg-255.xterm-dim { color: #eeeeee80; }.xterm-dom-renderer-owner-1 .xterm-bg-255 { background-color: #eeeeee; }.xterm-dom-renderer-owner-1 .xterm-fg-257 { color: #191a19; }.xterm-dom-renderer-owner-1 .xterm-fg-257.xterm-dim { color: #191a1980; }.xterm-dom-renderer-owner-1 .xterm-bg-257 { background-color: #F5F2E7; }&lt;/style&gt;&lt;div class=&#34;xterm-rows&#34; aria-hidden=&#34;true&#34; style=&#34;line-height: normal; letter-spacing: 0px;&#34;&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;span&gt;Hello, world!&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;span&gt;You can even &lt;/span&gt;&lt;span class=&#34;xterm-bold xterm-italic xterm-fg-9&#34;&gt;print in color!&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;span class=&#34;xterm-cursor xterm-cursor-outline&#34;&gt; &lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;width: 720px; height: 17.2917px; line-height: 17.2917px; overflow: hidden;&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;xterm-selection&#34; aria-hidden=&#34;true&#34;&gt;&lt;div style=&#34;height: 17.2917px; top: 69.1667px; left: 252px; width: 0px;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;top: 86.4583px; left: 0px; width: 720px;&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;xterm-decoration-container&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;post-p&#34;&gt;Where the terminal becomes powerful is when it&#39;s combined with worker scripts. Not only can a terminal serve as a rich graphic output for your Python code, but it supports running an interactive console session as well! With your CPython code, simply add &lt;code&gt;import code; code.interact()&lt;/code&gt; to start a fully interactive Python REPL session:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    packages = [&amp;#39;rich&amp;#39;]
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;terminal&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;worker&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;code&lt;/span&gt;
    code&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;interact()
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Try copy/pasting the following into your REPL session:&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# from rich import print&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# print(&amp;#34;Hello, [bold magenta]World[/bold magenta]!&amp;#34;, &amp;#34;:vampire:&amp;#34;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;script type=&#34;py&#34; terminal worker&gt;
    import code
    code.interact()
    # Try copy/pasting the following into your REPL session:
    # print(&#34;Hello, [bold magenta]World[/bold magenta]!&#34;, &#34;:vampire:&#34;)
&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;For an upcoming release, we&#39;re looking at adding an additional attribute to the &lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt; tags which means &#39;please drop me into an interactive session when this block finishes executing&#39;, but the semantics of that turn out to be &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/1840&#34;&gt;surprisingly&lt;/a&gt; &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/1841&#34;&gt;complicated&lt;/a&gt;. (And also, naming things is hard!) If you have opinions about what that attribute should be called and how it should work, please come &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;tell us about it!&lt;/a&gt;&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;config&#34;&gt;Configuration&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;A number of runtime options can be configured by including them inside a &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag, or as the &lt;code&gt;config&lt;/code&gt; attribute to one of the script tags on the page. These options are largely the same as those from the previous release. Here&#39;s an example using JSON:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;    {
        &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;packages&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;numpy&amp;#34;&lt;/span&gt;],
        &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;files&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;htts://example.net/file1.py&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file1.py&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;fetch&amp;#34;&lt;/span&gt;: [
            {
                &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;files&amp;#34;&lt;/span&gt;: [
                    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file2.py&amp;#34;&lt;/span&gt;
                ],
                &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;www.example.net&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;to_folder&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;internal&amp;#34;&lt;/span&gt;
            }
        ],
        &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;interpreter&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0.23.2&amp;#34;&lt;/span&gt;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that only one &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag can be used per page - if multiple are present, all but the first will be ignored. Similarly, the first main-thread (i.e. nonworker) script tag with &lt;code&gt;config&lt;/code&gt; attribute will be used, and all others will be ignored. The &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag takes precedence over any &lt;code&gt;config&lt;/code&gt; attributes.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The exception to the only-one-configuration rule is that Pyodide and Micropython receive separate configurations. If you&#39;re using Micropython, use the &lt;code&gt;mpy-config&lt;/code&gt; tag to specify a separate configuration for your Micropython environment.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;A config in a &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag can be written in JSON or TOML. Specify the &lt;code&gt;type&lt;/code&gt; attribute for which language you&#39;re using. The config can also be sourced from an external file using the &lt;code&gt;src&lt;/code&gt; attribute; in this case, PyScript will attempt to infer the language from the ending of the file name (&lt;code&gt;.json&lt;/code&gt; or &lt;code&gt;.toml&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# testconfig.json&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;packages&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cryptography&amp;#34;&lt;/span&gt;
    ]
  }&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;testconfig.json&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt;&amp;gt;
    from cryptography.fernet &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Fernet
    from pyscript &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display
    display(Fernet.generate_key())        
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The config supplied with the &lt;code&gt;config&lt;/code&gt; attribute of a script tag can be either a URL referencing an external JSON or TOML file, or an inline config written in JSON within the attribute itself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{ &amp;#34;packages&amp;#34;: [ &amp;#34;cryptography&amp;#34; ] }&amp;#39;&lt;/span&gt;&amp;gt;
    from cryptography.fernet &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Fernet
    from pyscript &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display
    display(Fernet.generate_key())        
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The configuration supports the following keys:&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;&lt;code&gt;packages&lt;/code&gt;&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;A list of Python packes to install from PYPI or the &lt;a href=&#34;https://pyodide.org/en/0.23.2/usage/packages-in-pyodide.html&#34;&gt;the list of packages pre-built for Pyodide&lt;/a&gt;. Additionally, the list may include URLs of &lt;code&gt;.whl&lt;/code&gt; files to load and install.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    packages=[&amp;#39;numpy&amp;#39;]
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;np&lt;/span&gt;
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)
    display(a)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;post-h3&#34; id=&#34;fetch-config&#34;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Loads external resources at various URLs into the virtual filesystem where Pyodide can interact with them. I previously detailed &lt;a href=&#34;../post/whats-new-pyscript-2022-12-1/#paths&#34;&gt;how &lt;code&gt;[[fetch]]&lt;/code&gt; configurations work&lt;/a&gt; in my release notes from version 2022.12.1; their usage has not changed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;    [[fetch]]
    files = [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;__init__.py&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;helloworld/greetings.py&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;helloworld/__init__.py&amp;#39;&lt;/span&gt;]
    from = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;../packages/my_package/&amp;#39;&lt;/span&gt;
    to_folder = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;./my_package&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;post-h3&#34; id=&#34;files-config&#34;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Another, simpler way to load external files in Loads external resources at various URLs into the virtual file system. This added feature in this release has a much simpler interface than the (quite verbose) &lt;code&gt;[[fetch]]&lt;/code&gt; syntax. In short, &lt;code&gt;files&lt;/code&gt; is just a list of key:value pairs, where the keys are URLs and the values are locations in the virtual filesystem that Python interacts with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;    [files]
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dummy.html&amp;#34;&lt;/span&gt; = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dummy.txt&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://example.com/database_file&amp;#34;&lt;/span&gt; = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./database.csv&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;relative/urls/work/too&amp;#34;&lt;/span&gt; = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/fully/qualified/filepaths/not/recommended.txt&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;What makes this feature really powerful is the (simple) built-in templating. Specifying a key name that&#39;s surrounded by &lt;code&gt;{CURLY_BRACKETS}&lt;/code&gt; are re-usable placeholders, allowing partial URLS or filepaths to be re-used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;    [files]
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{BASE}&amp;#34;&lt;/span&gt; = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://example.com&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{LOCAL_FOLDER}&amp;#34;&lt;/span&gt; = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;data/files&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{BASE}/resource.txt&amp;#34;&lt;/span&gt; = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{LOCAL_FOLDER}/local_resource.txt&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{BASE}/data/file2.csv&amp;#34;&lt;/span&gt; = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{LOCAL_FOLDER}/data/file2.csv&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;See the &lt;a href=&#34;https://docs.pyscript.net/2023.11.1/user-guide/configuration/#files&#34;&gt;official documentation&lt;/a&gt; for more details on how templating works, and further examples.&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34; id=&#34;plugins-config&#34;&gt;&lt;code&gt;plugins&lt;/code&gt;&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;A list of plugins, used to specify which built-in plugins should &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; be included using an exclamation point. Currently, the only built-in plugin is the &lt;code&gt;error&lt;/code&gt; plugin, which causes Python and other errors to be displayed on the page. To disable this, use &lt;code&gt;plugins = [&#39;!error&#39;]&lt;/code&gt; in your configuration.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34; id=&#34;interpreter-config&#34;&gt;&lt;code&gt;interpreter&lt;/code&gt;&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The release version of the interpreter (Pyodide or Micropython) to use; or, a URL pointing to a version of that runtime, which allows you to link to your own custom or local builds.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that each release of PyScript is pinned to, and only officially supports, one release of Pyodide and one release of Micropython-in-WASM. The &lt;code&gt;interpreters&lt;/code&gt; key doesn&#39;t imply additional compatibility - rather, it&#39;s meant for use by experimenters testing custom builds of Pyodide, or bleeding-edge builds, or those with specific optional flags enabled etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;    interpreter = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0.23.2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Use Pyodide 0.23.2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;    interpreter = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://example.com/built_my_own_pyodide/pyodide.js&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Use a custom build, local or online&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;events&#34;&gt;Event Handling&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The syntax for event handling has shifted in this release. Any HTML element on the page can be assigned an attribute of &lt;code&gt;py-[event]&lt;/code&gt; (or &lt;code&gt;mpy-[event]&lt;/code&gt;), where &lt;code&gt;[event]&lt;/code&gt; is any of the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events&#34;&gt;browser events&lt;/a&gt; or a user-defined &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent&#34;&gt;Custom Event&lt;/a&gt;. The handler will be passed the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Event&#34;&gt;Event Object&lt;/a&gt; representing that event.&lt;/p&gt; 
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&amp;gt;One&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&amp;gt;Two&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;foo&lt;/span&gt;(event):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;I got called by the element with id: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;event&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;migration&#34;&gt;Migration and Major Differences&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;So you have an existing PyScript application that you&#39;ve built on top of the previous build, and your wondering how to adapt and change. While not a formal migration guide, here&#39;s a few informal pointers.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;First, if you&#39;re not making use of any of the new major features (Micropython or Workers specifically), you&#39;re unlikely to notice major breaking changes in how your Python code runs. The core tags (&lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt;) have been rebuilt to almost entirely mimic their previous behavior.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34; id=&#34;py-terminal&#34;&gt;&lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; tag is retired&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; tag as a concept has been replaced by the &lt;a href=&#34;#terminal-attribute&#34;&gt;&lt;code&gt;terminal&lt;/code&gt; attribute&lt;/a&gt; of a &lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt; tag. See that section for details and (using workers) interactivity.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34; id=&#34;py-repl&#34;&gt;&lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; is on Haitus&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;This version of PyScript is releasing without the &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; tag, which is busy getting a makeover in the background. The name &lt;code&gt;py-repl&lt;/code&gt;, while catchy, didn&#39;t really capture what the component was, which was much closer to the cell of a Jupyter notebook. With the py-terminal getting overhauled in a way that would &lt;span class=&#34;italic&#34;&gt;let it run an actual Python REPL&lt;/span&gt;, it was time to retire the former &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; component. Currently, the plan is for that element to rise again as the &lt;code&gt;&amp;lt;py-cell&amp;gt;&lt;/code&gt; (or maybe &lt;code&gt;&amp;lt;script type=&#34;py-cell&#34;&amp;gt;&lt;/code&gt;) tag (perhaps contained inside a &lt;code&gt;&amp;lt;py-notebook&amp;gt;&lt;/code&gt; tag as well), but that will have to wait for a future release.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Fabio Pliger and I recently authored a proposal over on GitHub with a sketch of what this feature might look like - if you&#39;re interested in this feature, please &lt;a href=&#34;https://github.com/pyscript/pyscript/discussions/1842&#34;&gt;check it out and leave feedback!&lt;/a&gt;&lt;/p&gt;

&lt;h3 class=&#34;post-h3&#34; id=&#34;events&#34;&gt;Events are Different&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;As discussed in the &lt;a href=&#34;#events&#34;&gt;events&lt;/a&gt; section of this post, inline event handlers work differently than how they used to. Previously, inline event attributes were strings of Python code, which were &lt;code&gt;exec()&lt;/code&gt;&#39;d when the handler was invoked. Now, they&#39;re the name of a function in the Python global namespace to be called, and passed an Event object.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The one usage pattern that this doesn&#39;t accommodate (yet) is something like the following, since there&#39;s no way to directly pass arguments.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;select_color(&amp;#39;red&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;Red&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;select_color(&amp;#39;green&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;Green&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;select_color(&amp;#39;blue&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;Blue&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;  
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;select_color&lt;/span&gt;(color_name):
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# ???&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;That said, there are some web-ish ways to continue to pass element specific information to your functions, like embedding that information in a data-attribute:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;data-color&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;select_color&amp;#34;&lt;/span&gt;&amp;gt;Red&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;data-color&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;select_color&amp;#34;&lt;/span&gt;&amp;gt;Green&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;data-color&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;select_color&amp;#34;&lt;/span&gt;&amp;gt;Blue&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;select_color&lt;/span&gt;(event):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Setting color to: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;event&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getAttribute(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;data-color&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&#34;post-h3&#34; id=&#34;plugins&#34;&gt;Plugins&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The plugins system has been overhauled from the ground up, with an entirely different set of named hooks and actions. If you&#39;ve written any plugins for PyScript Classic - and to be honest, because of the interim and relatively undocumented nature of that API, I&#39;d be shocked if there were that many in the wild - you&#39;ll need to re-write re-adapt them going forward.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That said, if you &lt;span class=&#34;italic&#34;&gt;have&lt;/span&gt; written a plugin that you found usfeul and would like to keep using, the PyScript team would love to hear from you and what you&#39;d find useful in the API as it evolves!&lt;/p&gt;    
&lt;p class=&#34;post-p&#34;&gt;For now, the core of the PyScript Next plugin system is the &lt;a href=&#34;https://pyscript.github.io/polyscript/#hooks&#34;&gt;Polyscript Hooks&lt;/a&gt; system - see that documentation for more info. This is another area where I hope to share more examples and info in the coming weeks.&lt;/p&gt;

&lt;!-- &lt;h3 class=&#34;post-h3&#34; id=&#34;import-js&#34;&gt;&lt;code&gt;import js&lt;/code&gt; vs &lt;code&gt;from pyscript import window&lt;/code&gt;&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;One of the niftiest things about Pyodide (and now Micropython+Wasm) is it&#39;s ability to semalessly &lt;a href=&#34;https://pyodide.org/en/stable/usage/type-conversions.html#&#34;&gt;proxy objects from JavaScript to Python&lt;/a&gt; and back. With Pyodide, the simplest way to do this is using the &lt;a href=&#34;https://pyodide.org/en/stable/usage/type-conversions.html#type-translations-using-js-obj-from-py&#34;&gt;&lt;code&gt;import js&lt;/code&gt;&lt;/a&gt; syntax, which imports objects from the JavaScript global namespace.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The things is, &lt;code&gt;from js import ...&lt;/code&gt; always imports from the global namespace of the javascript environment where the Python interpreter is running, whether that&#39;s in the main thread or in a worker. But several key JavaScript objects, like the &lt;code&gt;document&lt;/code&gt; and its access to the DOM, only exist in the main thread.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For that reason, PyScript has added a bit of magic in the form of &lt;code&gt;from pyscript import window&lt;/code&gt; and &lt;code&gt;from pyscript import document&lt;/code&gt;, which always return a reference to the &lt;span class=&#34;italic&#34;&gt;main thread&#39;s&lt;/span&gt; global scope and document, respectively. In general, I&#39;d encourage users who don&#39;t want to think too deeply about whether their code will be running in the main thread or in a worker to us &lt;code&gt;from pyscript import window&lt;/code&gt; over &lt;code&gt;import js&lt;/code&gt;, since your code will then (generally) run in either thread just fine.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, there is some overhead in proxying to the main thread and back, so if you don&#39;t actually need access to the main thread&#39;s scope, you can continue using &lt;code&gt;import js&lt;/code&gt; in typical pyodide fashion.&lt;/p&gt; --&gt;

&lt;h3 class=&#34;post-h3&#34; id=&#34;style-recs&#34;&gt;Import Recommendations&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s no getting around the fact that the browser&#39;s &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Main_thread&#34;&gt;main thread&lt;/a&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers&#34;&gt;worker threads&lt;/a&gt; are fundamentally different. Even with &lt;a href=&#34;https://github.com/WebReflection/coincident&#34;&gt;coincident&lt;/a&gt; under the hood making passing proxies back and forth relatively painless, and Polyscript&#39;s Pythonic &lt;a href=&#34;https://github.com/pyscript/polyscript/tree/main/docs#xworker&#34;&gt;XWorker wrapper&lt;/a&gt; around it, there are things which are only permitted in one environment or the other. This could lead to pain points, where every PyScript code sample from now on could need to specify whether it&#39;s meant to run in the main thread, a worker, or either.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://pyodide.org/en/0.23.2/usage/type-conversions.html#type-translations-using-js-obj-from-py&#34;&gt;&lt;code&gt;import js&lt;/code&gt;&lt;/a&gt; is one such sticking point. This statement uses some Pyodide (and now Micropython) magic to import JavaScript objects from the current global scope and proxy them as Python objects. But the main thread local scope gets access to lots of useful goodies - specifically the DOM itself and DOM events - that aren&#39;t available in worker threads. So something simple like &lt;code&gt;from js import document&lt;/code&gt; works in the main thread, but will break in a worker thread which has no access to the document.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To help smooth out this particular difficulty, a couple more (slightly) magically imports have been added - &lt;code&gt;from pyscript import window&lt;/code&gt; and &lt;code&gt;from pyscript import document&lt;/code&gt;, both of which refer to the &lt;span class=&#34;font-semibold&#34;&gt;main thread&#39;s&lt;/span&gt; global scope and document, respectively, regardless of whether your code is running in the main thread or a worker. For this reason, in PyScript specifically, I recommend using &lt;code&gt;from pyscript import window&lt;/code&gt; instead of &lt;code&gt;import js&lt;/code&gt; most of the time - whenever you&#39;re working with DOM manipulation or events for sure. Of course, if you need access to the &lt;span class=&#34;italic&#34;&gt;worker thread&#39;s global JavaScript scope&lt;/span&gt;, you can use &lt;code&gt;import js&lt;/code&gt; as usual.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To illustrate - the first script below works identically with or without the &lt;code&gt;worker&lt;/code&gt; attribute; the second script only works on the main thread:&lt;/p&gt;
&lt;div class=&#34;p-2 m-4 bg-green-300 rounded-lg&#34;&gt;
&lt;p class=&#34;text-sm text-green-700&#34;&gt;Works in main thread or worker&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; window
    p  &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; window&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;)
    p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello, world&amp;#34;&lt;/span&gt;
    window&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;body&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(p)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;p-2 m-4 bg-yellow-300 rounded-lg&#34;&gt;
&lt;p class=&#34;text-sm text-yellow-700&#34;&gt;Only works in main thread&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    p  &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;)
    p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello, world&amp;#34;&lt;/span&gt;
    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;body&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(p)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&#34;post-h3&#34;&gt;No &lt;code&gt;output&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt; attributes&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;http://localhost:1313/post/whats-new-pyscript-2023-03-1/#output&#34;&gt;&lt;code&gt;output and stderr&lt;/code&gt;&lt;/a&gt; attributes of &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; (or &lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt; tags are not implemented in this release. We had included them in previous releases to accommodate use cases of using desktop-style code (i.e. that relies on &lt;code&gt;print&lt;/code&gt; for output) to still output to somewhere on the page. I (personally) expect we&#39;ll re-implement them sometime soon, but there&#39;s some additional underlying architecture to be investigated first.&lt;/p&gt;

&lt;h3 class=&#34;post-h3&#34;&gt;No More Magic Imports&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;In an effort to keep things cleaner, more predictable, and better-behaved with IDEs and linters, PyScript no longer imports any names into the Python namespace for you. This differs from the previous release, where the names &lt;code&gt;js&lt;/code&gt;, &lt;code&gt;pyscript&lt;/code&gt;, &lt;code&gt;Element&lt;/code&gt;, &lt;code&gt;display&lt;/code&gt;, and &lt;code&gt;HTML&lt;/code&gt; were treated a bit like builtins, and imported prior to any user-written code.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Those objects still exist, you&#39;ll just have to import them for yourself.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;performance&#34;&gt;Performance and Size&lt;/h2&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Startup Time&lt;/h3&gt; 
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s a short PyScript page which measures the time between (roughly) the start of paging loading and when Python code starts being executed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#099&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; startTime&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;Date&lt;/span&gt;.now()
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&amp;lt;!-- Uncomment only one of the following two lines to compare performance --&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&amp;lt;!-- &amp;lt;script type=&amp;#34;module&amp;#34; src=&amp;#34;https://pyscript.net/releases/2023.11.1/core.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://pyscript.net/releases/2023.05.1/pyscript.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;    import js
    js.console.log(&amp;#34;Elapsed Time:&amp;#34;, js.Date.now() - js.startTime)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, the specifics of the timing will vary widely from machine-to-machine and connection-to-connection. But for this informal test (on my particular laptop, on my particular Wifi, at this particular spot on my couch, on a Sunday afternoon), I found that the previous &lt;code&gt;2023.05.1&lt;/code&gt; release averaged about 4.9 seconds, where the new &lt;code&gt;2023.11.1&lt;/code&gt; release averaged around 3.4 seconds. That&#39;s roughly a 30% decrease in initialization time just for upgrading to the new version. Not bad!&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Transfer Size&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;There isn&#39;t an enormous difference in the total file size transferred to the browser between this release and the previous one: 5.4 MB previously vs. 5.2MB now. This makes some sense though - PyScript is still transferring the entire CPython interpreter (compiled to Web Assembly) to the browser; compared to that, the entire PyScript codebase is tiny in either case. But where both of the above metrics get blown out of the water is with...&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34; id=&#34;micropython-size&#34;&gt;Micropython&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Take the above example, and replace &lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;script type=&#34;mpy&#34;&amp;gt;&lt;/code&gt; to switch to using Micropython. Now the transfer size drops to &lt;span class=&#34;italic font-semibold&#34;&gt;just over 250Kb&lt;/span&gt; and the average startup time plummets to &lt;span class=&#34;italic font-semibold&#34;&gt;~200ms&lt;/span&gt;. That&#39;s 200 milliseconds from page-load to start-of-script-execution. In relative terms (again, in my informal experiment), that&#39;s a transfer that&#39;s ~4% of the one needed for CPython/Pyodide, with roughly 6% of the loading time. Like I mentioned earlier - if you don&#39;t need additional CPython packages or deep needs from the standard library, it&#39;s worth giving Micropython a try.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;announcements&#34;&gt;Two More Announcements - A Teaser&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;On a personal note - in the next two weeks, I&#39;m excited that I&#39;ll be able to share a couple of PyScript-based projects I&#39;ve been working on for some time! The first is aimed at helping PyScript users get acclimated to its features and uses as quickly as possible. The second integrates PyScript on top of another existing platform, to bring the power of Python on the Web to even more users.&lt;/post-p&gt;
&lt;p class=&#34;post-p&#34;&gt;But it wouldn&#39;t be much of &lt;span class=&#34;italic&#34;&gt;teaser&lt;/span&gt; if I just told you what they were, would it? In the meantime, I hope you get your hands on the new PyScript release! Send us &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/new/choose&#34;&gt;those new issues&lt;/a&gt;, join us &lt;a href=&#34;https://discord.gg/pPu9ZEjKhY&#34;&gt;on Discord&lt;/a&gt;, and show us the things you make!&lt;/p&gt;


&lt;style&gt;
    code:not(.nocode):not(.language-python):not(.language-python3):not(.language-html):not(.language-js){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
    .py-terminal{
        font-family: &#39;Courier New&#39;, Courier, monospace;
        min-height: 4em;
        background-color: black;
        color: white;
    }
    .invisible{
        visibility: hidden;
    }
    .control-button{
        padding: 0.5rem; 
        background-color: #E5E7EB; 
        border-radius: 0.375rem; 
        border-width: 2px; 
        border-color: #D1D5DB; 
    }
    .post-h2{
        border-bottom-width: 2px; 
        border-color: #F9FAFB; 
        border-style: solid;
    }
&lt;/style&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>What&#39;s New in Pyscript 2023.05.1</title>
      <link>https://jeff.glass/post/whats-new-pyscript-2023-05-1/</link>
      <pubDate>Tue, 20 Jun 2023 07:33:00 -0500</pubDate>
      
      <guid>https://jeff.glass/post/whats-new-pyscript-2023-05-1/</guid>
      <description>
&lt;style&gt;
    code:not(.nocode):not(.language-python):not(.language-python3):not(.language-html):not(.language-js){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
    .py-terminal{
        font-family: &#39;Courier New&#39;, Courier, monospace;
        min-height: 4em;
        background-color: black;
        color: white;
    }
    .invisible{
        visibility: hidden;
    }
    .control-button{
        padding: 0.5rem; 
        background-color: #E5E7EB; 
        border-radius: 0.375rem; 
        border-width: 2px; 
        border-color: #D1D5DB; 
    }
    .post-h2{
        border-bottom-width: 2px; 
        border-color: #F9FAFB; 
        border-style: solid;
    }
&lt;/style&gt;

&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://pyscript.net&#34;&gt;PyScript&lt;/a&gt; has released &lt;a href=https://github.com/pyscript/pyscript/releases/tag/2023.05.1&#34;&gt;version 2023.05.1&lt;/a&gt; today! Between the big push to &lt;a href=&#34;https://us.pycon.org/2023/&#34;&gt;PyconUS 2023&lt;/a&gt;, the ensuing sprints and the following flurry of enthusiasm, it&#39;s been a busy couple of months. There&#39;s been some significant bonuses to functionality, in parallel with a backend overhaul that&#39;ll be dropping in a future version.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As always, you can see a &lt;a href=&#34;https://docs.pyscript.net/latest/changelog.html&#34;&gt;Published Changelog&lt;/a&gt; for additional changes and bugfixes. But let&#39;s dive into the major changes in this PyScript release:&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;grid justify-center p-1 m-auto bg-gray-200&#34;&gt;
    &lt;span&gt;Jump To: &lt;span&gt;
    &lt;a href=&#34;#pyscript&#34;&gt;PyScript&lt;/a&gt; • 
    &lt;a href=&#34;#repl&#34;&gt;Py-Repl&lt;/a&gt; • 
    &lt;a href=&#34;#terminal&#34;&gt;Py-Terminal&lt;/a&gt; • 
    &lt;a href=&#34;#plugins&#34;&gt;Plugins&lt;/a&gt; • 
    &lt;a href=&#34;#deprecations&#34;&gt;Deprecations and Removals&lt;/a&gt; • 
    &lt;a href=&#34;#pyodide&#34;&gt;Pyodide&lt;/a&gt; • 
    &lt;a href=&#34;#community&#34;&gt;Community &amp; Core&lt;/a&gt; • 
    &lt;a href=&#34;#next&#34;&gt;What&#39;s Next?&lt;/a&gt;
&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;pyscript&#34;&gt;PyScript&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;pre&gt;&amp;lt;script type=&#34;py&#34;&amp;gt; == &amp;lt;py-script&amp;gt;&lt;/pre&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt; is now a synonym for &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; , as are &lt;code&gt;&amp;lt;script type=&#34;pyscript&#34;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script type=&#34;py-script&#34;&amp;gt;&lt;/code&gt; (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1396&#34;&gt;#1396&lt;/a&gt;). But why have four tags, when we&#39;ve been getting along fine with just one?&lt;/p&gt;

&lt;p class=&#34;post-p&#34;&gt;The truth is, we haven&#39;t quite been getting along. HTML Custom Elements (of which &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; is one) are treated just like any other displayable element - their contents are parsed as text, and that text is displayed on the screen, until and unless some styling specifies not to. This means that any characters that have special meaning to the HTML parser like &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt; will be parsed like HTML tags, and our Python code becomes a mess. Currently, the only way around this is to make use of the special treatmean the browser affords the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, whose contents are left alone and are not displayed.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So if you are running into funky issues with &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; in your code, or code visible on your page in a way you don&#39;t want, converting your code to use &lt;code&gt;&amp;lt;script type=&#34;py&#34;&amp;gt;&lt;/code&gt; may do the trick.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;The &lt;code&gt;@when&lt;/code&gt; decorator&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For building interactive and web-friendly pages in Python, one wants a Python way to hookup Python event handler functions to respond to &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/web/api/event&#34;&gt;Events&lt;/a&gt; that occur on the page. Thus, in addition to the existing &lt;a href=&#34;https://docs.pyscript.net/latest/tutorials/py-click.html&#34;&gt;&lt;code&gt;py-*&lt;/code&gt;&lt;/a&gt; syntax, there&#39;s now a new way to hookup event handlers directly in one&#39;s python code: the &lt;code&gt;@when&lt;/code&gt; decorator.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code&gt;@when&lt;/code&gt; decorator takes two arguments, both strings: the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events&#34;&gt;type&lt;/a&gt; of the event to listen for, and a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors&#34;&gt;css selector&lt;/a&gt; to match Elements to tie the event handler to. The decorated function can take 0 or 1 arguments; if the function takes zero arguments, it will simply be called when the matching event is dispatched. If it takes one argument, it will be called and passed the correpsonding Event object.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The combination of selectors and the ability to utilize the event object can create powerful interfaces with just a little bit of code. Consider the &lt;code&gt;add_number&lt;/code&gt; example below, which uses only one decorated function to handle many buttons. In general, if you&#39;re using the &lt;code&gt;@when&lt;/code&gt; decorator, consider how you can use containers, structure, and careful matching to minimize the number of decorators you need to apply.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The event listeners are added exactly once, when the &lt;code&gt;@when&lt;/code&gt; decorator executes. That is, even if other elements are added to the DOM later that match the given selector, they will not have the event listener attached. Currently, there is no API for removing these event listeners. (Both are noted as desired features for the near future.)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;You can decorate the same function with multiple instances of the &lt;code&gt;@when&lt;/code&gt; decorator, to attach the same listener across multiple events or css selectors.&lt;/p&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;grid class=&#34;grid grid-cols-1 md:grid-cols-2 gap-y-4&#34;&gt;
    &lt;div&gt;
        &lt;div class=&#34;code-title&#34;&gt;@When Decorator, Function takes no Arguments&lt;/div&gt;
        &lt;div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; when

&lt;span style=&#34;color:#99f&#34;&gt;@when&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;#my_button&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;red&lt;/span&gt;():
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;I love the color red&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex justify-center invisible live-example center-content&#34;&gt;
        &lt;button id=&#34;my_button&#34; class=&#34;p-2 my-2 border-2 border-blue-600 rounded-lg center bg-blue-50&#34;&gt;Do you like the color red?&lt;/button&gt;
        &lt;py-script output=&#34;red&#34;&gt;
            from pyscript import when
            @when(&#39;click&#39;, &#39;#my_button&#39;)
            def red():
                display(&#34;I love the color red&#34;, target=&#34;red&#34;, append=True)
        &lt;/py-script&gt;
    &lt;/div&gt;
    &lt;div class=&#34;hidden col-span-2 py-terminal live-example&#34; id=&#34;red&#34;&gt;&lt;/div&gt;

    &lt;div&gt;
        &lt;div class=&#34;code-title&#34;&gt;@When Decorator, Function takes One Argument&lt;/div&gt;
        &lt;div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; when

&lt;span style=&#34;color:#99f&#34;&gt;@when&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;mouseenter&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;p.colorful&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_my_color&lt;/span&gt;(event):
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(event&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&#34;invisible live-example&#34;&gt;
        &lt;div class=&#34;w-full mx-2 my-4&#34;&gt;
            &lt;div class=&#34;w-full bg-red-200 colorful&#34;&gt;This paragraph is red&lt;/div&gt;
            &lt;div class=&#34;w-full bg-green-200 colorful&#34;&gt;This paragraph is green&lt;/div&gt;
            &lt;div class=&#34;w-full bg-blue-200 colorful&#34;&gt;This paragraph is blue&lt;/div&gt;
        &lt;/div&gt;
        &lt;py-script&gt;
            from pyscript import when

            @when(&#39;mouseover&#39;, &#39;div.colorful&#39;)
            def say_my_color(event):
                display(event.target.innerText, target=&#34;colorful&#34;, append=True)
        &lt;/py-script&gt;
    &lt;/div&gt;
    &lt;div class=&#34;hidden col-span-2 py-terminal live-example&#34; id=&#34;colorful&#34;&gt;&lt;/div&gt;

    &lt;div&gt;
        &lt;div class=&#34;code-title&#34;&gt;@When Decorator, Many Buttons&lt;/div&gt;
        &lt;div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; when

value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@when&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div#controls button&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; value
    addend &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(event&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getAttribute(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;data-value&amp;#34;&lt;/span&gt;))
    new_value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; addend
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; + &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;addend&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;new_value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; new_value&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&#34;invisible live-example&#34;&gt;
        &lt;div class=&#34;w-full mx-2 my-4 border-2 border-blue-600 rounded-md&#34; id=&#34;controls&#34;&gt;
            &lt;p class=&#34;text-sm text-blue-600&#34;&gt;#controls&lt;/p&gt;
            &lt;div class=&#34;grid grid-cols-3 m-2 gap-x-2 gap-y-1&#34;&gt;
                &lt;button class=&#34;control-button&#34; data-value=&#34;1&#34;&gt;1&lt;/button&gt;
                &lt;button class=&#34;control-button&#34; data-value=&#34;2&#34;&gt;2&lt;/button&gt;
                &lt;button class=&#34;control-button&#34; data-value=&#34;3&#34;&gt;3&lt;/button&gt;
                &lt;button class=&#34;control-button&#34; data-value=&#34;4&#34;&gt;4&lt;/button&gt;
                &lt;button class=&#34;control-button&#34; data-value=&#34;5&#34;&gt;5&lt;/button&gt;
                &lt;button class=&#34;control-button&#34; data-value=&#34;6&#34;&gt;6&lt;/button&gt;
                &lt;button class=&#34;control-button&#34; data-value=&#34;7&#34;&gt;7&lt;/button&gt;
                &lt;button class=&#34;control-button&#34; data-value=&#34;8&#34;&gt;8&lt;/button&gt;
                &lt;button class=&#34;control-button&#34; data-value=&#34;9&#34;&gt;9&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;py-script&gt;
            from pyscript import when

            value = 0

            @when(&#39;click&#39;, &#39;div#controls button&#39;)
            def add_number(event):
                global value
                addend = int(event.target.getAttribute(&#34;data-value&#34;))
                new_value = value + addend
                display(f&#34;{value} + {addend} = {new_value}&#34;, target=&#34;value&#34;, append=True)
                value = new_value
        &lt;/py-script&gt;
    &lt;/div&gt;
    &lt;div class=&#34;hidden col-span-2 py-terminal live-example&#34; id=&#34;value&#34;&gt;&lt;/div&gt;
&lt;/grid&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;code&gt;py-[event]&lt;/code&gt; Attributes now Dynamically Updated&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Continuing the theme of an improved events API, &lt;code&gt;py-[event]&lt;/code&gt; attributes, which were previously only assigned once at PyScript load time, are now updated dynamically whenever the attribute changes. This brings them closer to the behavior of the browser&#39;s native &lt;code&gt;on[event]=...&lt;/code&gt; syntax, and allows for page interfaces to be dynamically hooked to Python events.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As a reminder of what that syntax is: any HTML element can be given an attribute of the form &lt;code&gt;py-[event]=&#34;some code&#34;&lt;/code&gt;, where &#34;event&#34; is the type of some &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/web/api/event&#34;&gt;DOM Event&lt;/a&gt;. When the given even is observed on that element, the string of &lt;code&gt;&#34;some code&#34;&lt;/code&gt; will be executed in the global namespace.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The term &#34;executed&#34; in the preceding paragraph is not incidental: the code is processed in a way that ultimately redounds to &lt;a href=&#34;https://docs.python.org/3/library/functions.html#exec&#34;&gt;exec()&lt;/a&gt;. This means you can use multiple expressions separated by commas or newline characters if desired; while not necessarily the cleanest code practice, it does allow for inlining simple things like imports. See the examples below for some ideas.&lt;/p&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 gap-y-4&#34;&gt;
    &lt;div&gt;
        &lt;div class=&#34;code-title&#34;&gt;index.html&lt;/div&gt;
        &lt;div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;print(&amp;#39;Hello, world!&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;Click to Say Hi&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex justify-center invisible live-example center-content&#34;&gt;
        &lt;button py-click=&#34;display(&#39;Hello, world!&#39;, target=&#39;hello&#39;)&#34; class=&#34;p-2 my-2 border-2 border-blue-600 rounded-lg center bg-blue-50&#34;&gt;Click to Say Hi&lt;/button&gt;
    &lt;/div&gt;
    &lt;div class=&#34;hidden col-span-2 py-terminal live-example&#34; id=&#34;hello&#34;&gt;&lt;/div&gt;

    &lt;div&gt;
        &lt;div class=&#34;code-title&#34;&gt;index.html&lt;/div&gt;
        &lt;div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;yourname&amp;#34;&lt;/span&gt;&amp;gt;What is your name?&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;
 &lt;span style=&#34;color:#309&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;yourname&amp;#34;&lt;/span&gt;
 &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;yourname&amp;#34;&lt;/span&gt;
 &lt;span style=&#34;color:#309&#34;&gt;py-input&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;import js; elem = js.document.getElementById(&amp;#39;yourname&amp;#39;); print(elem.value)&amp;#34;&lt;/span&gt;&amp;gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex justify-center invisible live-example center-content&#34;&gt;
        &lt;label for=&#34;yourname&#34;&gt;What is your name?&lt;/label&gt;
        &lt;input type=&#34;text&#34; name=&#34;yourname&#34; id=&#34;yourname&#34; py-input=&#34;import js; elem = js.document.getElementById(&#39;yourname&#39;); display(elem.value, target=&#39;nameoutput&#39;)&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;hidden col-span-2 py-terminal live-example&#34; id=&#34;nameoutput&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h4 class=&#34;post-h4&#34;&gt;Dynamically Imported Pyodide&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Early in PyScript&#39;s lifecycle, it needs to load the actual CPython interpreter/runtime that&#39;s going to be executing Python code in the Browser.. Currently, this is soely the Pyodide runtime. Pyodide is now imported into the current page via an &lt;code&gt;import()&lt;/code&gt; statement instead of by adding a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag to the page. This shouldn&#39;t impact end-user behavior, but if you were doing something like using the presence of that &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag to signal something, you&#39;ll have to find a new (better) method. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1306&#34;&gt;#1306&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;No more &#39;Python Initialization Complete&#39; Message&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;In its early stages, PyScript used the console log message &#34;Python Initialization Complete&#34; from Pyodide to signal when all of the user&#39;s scripts were run. In Pyodide 0.22, this message was removed, but PyScript added it into its own process to keep tests executing smoothly for the time being. That message has been removed from PyScript as well - if you relied on looking at the logs for that specific message for some reason, you will need to find a workaround. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1373&#34;&gt;#1373&lt;/a&gt;)&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;repl&#34;&gt;&lt;pre&gt;&amp;lt;py-repl&amp;gt;&lt;/pre&gt;&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;code&gt;src&lt;/code&gt; attribute for &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; tag now accepts a &lt;code&gt;src&lt;/code&gt; attribute, whose value is a URL represented by a string. When changed or set, the text content from that URL is loaded as the code content of the REPL. This brings the behavior closer in line with the &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag, and allows for simpler pre-loading of REPL contents. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1292&#34;&gt;#1292&lt;/a&gt;). See also the added documentation (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1353&#34;&gt;#1353&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The motivation for this feature (at least for the author of the PR) was being able to use a singular on-page REPL to present many different code samples. We&#39;ve seen a number of folks interested in making their own Python code tutor site with PyScript, to whom this feature may also be useful. And just to say it again: the &lt;code&gt;src&lt;/code&gt; attribute of a &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; tag is a &lt;b&gt;URL&lt;/b&gt;, which points to a resource containing the desired code, just like the &lt;code&gt;src&lt;/code&gt; attribute of the &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; attributes: &lt;code&gt;output&lt;/code&gt;, &lt;code&gt;output-mode&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; now accept three addition attributes: &lt;code&gt;output&lt;/code&gt;, &lt;code&gt;output-mode&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;, all of which are strings. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1106&#34;&gt;#1106&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code&gt;output&lt;/code&gt; attribute specifies the ID of an element in the DOM where writes to &lt;a href=&#34;https://docs.python.org/3/library/sys.html#sys.stdout&#34;&gt;&lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; should also be printed, in addition to being written to the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;(s). The &lt;code&gt;stderr&lt;/code&gt; attribute behaves similarly, but only writes to &lt;code&gt;sys.stderr&lt;/code&gt; will be written there (again, in addition to going to the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Setting &lt;code&gt;output-mode == &#39;append&#39;&lt;/code&gt; as the attribute of a &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; means the output location for the REPL is not cleared before writing. This leads to decidedly un-notebook-like behavior, but it may be desirable for some demos or applications.&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;The motivation for this feature was to restore notebook-like behavior of a series of REPL cells on a page. It was enabled by the addition of &lt;a href=&#34;#repl-plugins&#34;&gt;two new  plugin hooks for REPLs&lt;/a&gt;, which you can read about elsewhere in this post.&lt;/p&gt;

&lt;h4 class=&#34;post-h4&#34;&gt;No More ID on py-repl run button&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, every REPL run-button had the same id of &lt;code&gt;#runButton&lt;/code&gt;, which is a violation of the specified usage of the id attribute. No longer share this one id, and instead all share the class &lt;code&gt;py-repl-run-button&lt;/code&gt;. If you need a programmatic way to cause of &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; to execute, using a CSS selector or XPath to grab objects with this class (possibly inside a known parent) is the way to go. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1296&#34;&gt;#1296&lt;/a&gt;)&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;terminal&#34;&gt;&lt;pre&gt;&amp;lt;py-terminal&amp;gt;&lt;/pre&gt;&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;XTermjs Option&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;By default, a &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; is a very lightweight piece of content - just a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag with some css to style it. But many applications benefit from richer console output, and PyScript aims to be useful to those users as well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To that end, Users can now add the &lt;code&gt;xterm = True&lt;/code&gt; option to their &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; to turn the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; into an &lt;a href=&#34;http://xtermjs.org/&#34;&gt;xterm.js terminal&lt;/a&gt;, a fully in-browser terminal implemented in JavaScript. When loaded, the xterm is an output-only page element, but users can implement their own input functionality and extensions by targeting the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;&#39;s &lt;code&gt;xterm&lt;/code&gt; attribute, which is a reference to the &lt;a href=&#34;http://xtermjs.org/docs/api/terminal/classes/terminal/&#34;&gt;Terminal object&lt;/a&gt; itself (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1317&#34;&gt;#1317&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Auto-Docked &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This release also changes the default placement of the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;; rather than being stuck at the end of the DOM if the user doesn&#39;t specify a location, the terminal will appear &#34;docked&#34; at the bottom of the browser window. A new &lt;code&gt;docked&lt;/code&gt; configuration option in &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; (default to &#39;docked&#39;) can be set to False to revert to the previous behavior. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1284&#34;&gt;#1284&lt;/a&gt;)&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;plugins&#34;&gt;Plugins&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Add &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; plugin hooks&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code&gt;2023.05.1&lt;/code&gt; PyScript release adds two new Plugin Hooks: &lt;code&gt;beforePyReplExec()&lt;/code&gt; and &lt;code&gt;afterPyReplExec()&lt;/code&gt;. Plugin objects will have these methods called (if the exist) immediately before the execution of code by a &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; and immediately after, allowing developers to inspect users&#39; code before it executes, and respond to its results after the fact. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1106&#34;&gt;#1106&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The signaures of these plugin methods, in both Python and JavaScript, are:&lt;/p&gt;
&lt;div class=&#34;code-title&#34;&gt;JS&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;*
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;* @param options.interpreter  The interpreter object that will be used to evaluated the Python source code
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;* @param options.src  {string} The Python source code to be evaluated
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;* @param options.outEl  The element that the result of the REPL evaluation will be output to.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;* @param options.pyReplTag  The &amp;lt;py-repl&amp;gt; HTML tag the originated the evaluation
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;* @param options.result The result of evaluating the Python (if any)
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;*/&lt;/span&gt;

beforePyReplExec(options&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; {
   interpreter&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; InterpreterClient;
   src&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; string;
   outEl&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; HTMLElement;
   pyReplTag&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; PyReplTag;
})

afterPyReplExec(options&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; {
   interpreter&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; InterpreterClient;
   src&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; string;
   outEl&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; HTMLElement;
   pyReplTag&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; PyReplTag;
   result&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; any;
})&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;h-4&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;code-title&#34;&gt;Python&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;beforePyReplExec&lt;/span&gt;(self, interpreter: Interpreter, src: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, outEl: HTMLElement, pyReplTag: PyReplTag):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;afterPyReplExec&lt;/span&gt;(self, interpreter: Interpreter, src: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, outEl: HTMLElement, pyReplTag: PyReplTag, result: &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;As a brand-new plugin method that&#39;s been much requested on &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;Community Discord&lt;/a&gt; and in the GitHub Discussions, we&#39;re excited to be releasing these. If there are extra parameters, features, or questions about these new methods, please let the team know!.&lt;/p&gt;

&lt;h4 class=&#34;post-h4&#34;&gt;All Plugin Methods are &lt;code&gt;await&lt;/code&gt;ed&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;In previous version of PyScript, plugin methods (both JavaScript and Python) were executed sequentially one after another, in the order the Plugins were originally added. As of this release, all JS plugins are executed at once via &lt;code&gt;Promise.all([collect of js method for this plugin])&lt;/code&gt;, followed by all the Python plugin methods via Promise.all([collection of Py method for this plugin]) (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1467&#34;&gt;#1467&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This shouldn&#39;t have too much impact on the functionality of plugins themselves, we think - but the team will be interested to hear whether anyone was indeed relying on plugins executing in a specific order. That wasn&#39;t a guaranteed feature of the interface, but having a deterministic execution order API for plugins is something we&#39;ve bandied about a bit - if that would be useful, we&#39;d love to hear about it.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;deprecations&#34;&gt;Deprecation and Removals&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;code&gt;pys-on*&lt;/code&gt; and &lt;code&gt;py-on*&lt;/code&gt; attributes are removed&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Existing from the very earliest days of py-script, the long-since-deprecated &lt;code&gt;pys-onClick&lt;/code&gt;, &lt;code&gt;py-onClick&lt;/code&gt;, &lt;code&gt;py-onKeyDown&lt;/code&gt; and &lt;code&gt;pys-onKeyDown&lt;/code&gt; HTML attributes have finally been removed from PyScript all together. They were superseded by the &lt;code&gt;py-[event]&lt;/code&gt; syntax for hooking up event handlers. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1361&#34;&gt;#1361&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Py-Widget has Been Removed&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The little known &lt;code&gt;&amp;lt;py-register-widget&amp;gt;&lt;/code&gt; tag has been removed; this allowed for registering a named Python class as a custom HTML element. This ability is currently captured by the Plugins API (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1452&#34;&gt;#1452&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;code&gt;py-mount&lt;/code&gt; is deprecated&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This little-documented (and little-used) attribute had been available for &#34;automatically&#34; created proxies in Python for associated HTML elements. It&#39;s fallen out of step with the current recommended APIs, and since it wasn&#39;t much documented or recommended anyway, there were no qualms from the team about deprecating it. It will be removed in a future release.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;pyodide&#34;&gt;Pyodide 0.23.2&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript now runs on Pyodide 0.23.2! As usual for a downstream project, PyScript basks in the glorious rays of Pyodide upstream, and the many improvements it has received.(&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1347&#34;&gt;#1347&lt;/a&gt;). While the Pyodide team wrote up an &lt;a href=&#34;https://blog.pyodide.org/posts/0.23-release/&#34;&gt;excellent post&lt;/a&gt; for the release of Pyodide 0.23, I do want to take a moment to highlight some of the larger and more exciting changes:&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Python 3.11.2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide 0.23 is pinned to Python version 3.11.2, an upgrade from the 3.10.6 that had previously been bundled. With it come &lt;a href=&#34;https://www.python.org/downloads/release/python-3110/&#34;&gt;myriad improvements&lt;/a&gt;, including:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;Improved error messages in Exceptions and Tracebacks (&lt;a href=&#39;https://peps.python.org/pep-0657/&#39;&gt;PEP 657&lt;/a&gt;)&lt;/li&gt;
        &lt;li&gt;Exception Groups (&lt;a href=&#39;https://peps.python.org/pep-0654/&#39;&gt;PEP 654&lt;/a&gt;)&lt;/li&gt;
        &lt;li&gt;Adding &lt;code&gt;tomllib&lt;/code&gt; to the standard library (&lt;a href=&#39;https://peps.python.org/pep-0680/&#39;&gt;PEP 680&lt;/a&gt;)&lt;/li&gt;
        &lt;li&gt;The &lt;a href=&#34;https://docs.python.org/3.11/whatsnew/3.11.html#faster-cpython&#34;&gt;Faster CPython project&lt;/a&gt; has been making some strides in speeding up Python generally!&lt;/li&gt;
        &lt;li&gt;Many improvements to typing and the type system&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Additionally, Python 3.11 is the first release of CPython to support Web Assembly as a &lt;a href=&#34;https://peps.python.org/pep-0011/#tier-3&#34;&gt;Tier 3 Platform&lt;/a&gt;. The tiering system of supported platforms describes the level of build and issue support each platform can expect. Tier 1 includes x86 Mac, Windows, and Linux - the heavy hitters. Any issues that break these builds &lt;i&gt;block&lt;/i&gt; a new release. Tier 3 requirements are much looser, including:
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Must have a reliable buildbot. (i.e. the Tests Pass)&lt;/li&gt;
    &lt;li&gt;At least one core developer is signed up to support the platform.&lt;/li&gt;
&lt;/ul&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What&#39;s more, issues in a Tier 3 Platform &lt;i&gt;do not&lt;/i&gt; block a build, and there&#39;s no response SLA to failures. For more background on the considerable of Web Assembly-Emscripten (and &lt;a href=&#34;https://wasi.dev/&#34;&gt;WASI&lt;/a&gt;) as Tier 3 platforms, check out &lt;a href=&#34;https://discuss.python.org/t/make-wasm-a-1st-class-platform-in-the-python-ecosystem/21798/13&#34;&gt;this discussion on the Python Discuss&lt;/a&gt; (some familiar PyScript names there) and the &lt;a href=&#34;https://github.com/python/steering-council/issues/131&#34;&gt;proposal&lt;/a&gt; and &lt;a href=&#34;https://discuss.python.org/t/proposing-wasm32-emscripten-and-wasm32-wasi-as-tier-3-platforms/17310&#34;&gt;discussion&lt;/a&gt; of that change to the Steering Council.&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;New Packages&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Many new packages have been pre-built by the Pyodide team to work with Pyodide, with their C/Rust/Fortran extensions pre-compiled, including: &lt;code&gt;fastparquet&lt;/code&gt;, &lt;code&gt;cramjam&lt;/code&gt;, &lt;code&gt;pynacl&lt;/code&gt;, &lt;code&gt;pyxel&lt;/code&gt;, &lt;code&gt;mypy&lt;/code&gt;, &lt;code&gt;multidict&lt;/code&gt;, &lt;code&gt;yarl&lt;/code&gt;, &lt;code&gt;idna&lt;/code&gt;, and &lt;code&gt;cbor-diag&lt;/code&gt; .&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;A particularly fun one, in my personal opinion, is the &lt;a href=&#34;https://github.com/kitao/pyxel&#34;&gt;pyxel&lt;/a&gt; game engine package. This retro-framework allows users to write games in pure Python, in the style of early-90s compturs (16-colors and 4 sounds at a time being the chief limitations). The Pyxel and Pyodide teams have both been working to make this engine work out of the box in the browser, and It&#39;s built on top of the &lt;a href=&#34;https://github.com/emscripten-ports/SDL2&#34;&gt;SDL2 Support in Emscripten&lt;/a&gt;. &lt;a href=&#34;../post/whats-new-pyscript-2023-03-1#pyxel&#34;&gt;From personal experience,&lt;/a&gt; the ability to run serverless web games right in the user&#39;s browser window, written in pure Python, is electric.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Efforts on Download Size&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The Pyodide team is aware (as in the PyScript team) of the onus that download-size has on the viability of Python in the Browser, and has been &lt;a href=&#34;https://blog.pyodide.org/posts/0.23-release/#load-time-and-size-optimizations&#34;&gt;making efforts&lt;/a&gt; to reduce their download size wherever possible. These efforts are, of course, offset by the continually growing nature of the Python standard library, so the overall download size hasn&#39;t changed much. But looked at another way, it&#39;s gained more functionality while staying about the same size, which isn&#39;t nothing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One experimental effort includes an option to use &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3701&#34;&gt;a version of the Pyodide runtime&lt;/a&gt; that pre-compiles the Pyodide packages and the standard library to &lt;code&gt;.pyc&lt;/code&gt; files. You can point your &lt;code&gt;runtimes&lt;/code&gt; variable in &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; to &lt;code&gt;https://cdn.jsdelivr.net/pyodide/v0.23.0/pyc/pyodide.js&lt;/code&gt; to give it a try! Note that, because the deployment doesn&#39;t include the standardlib source code, tracebacks and error messages will not look great, but for some applications this may be acceptable.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Removed Deprecated Object Nmaes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Many key functions of the Pyodide Python API, like &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html#pyodide.ffi.create_proxy&#34;&gt;create_proxy()&lt;/a&gt;, &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html#pyodide.ffi.to_js&#34;&gt;to_js()&lt;/a&gt;, and &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/code.html#pyodide.code.eval_code&#34;&gt;eval_code()&lt;/a&gt;, used to be accessibile directly from the pyodide root package, but were moved to individual submodules in version 0.21 and showed a deprecation warning if imported from root. Now, those functions and many, many others truly can only be accessed from their appropriate submodules (&lt;code&gt;pyodide.ffi.create_proxy()&lt;/code&gt;, &lt;code&gt;pyodide.ffi.to_js()&lt;/code&gt;, and &lt;code&gt;pyodide.code.eval_code()&lt;/code&gt;, for example). (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3677&#34;&gt;#3677&lt;/a&gt;)&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;infrastructure&#34;&gt;Infrastructure&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Pull Request Template&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript now has a Pull Request template, to help contributors supply context and complete information with their PRs (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1279&#34;&gt;#1279&lt;/a&gt;).&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Typescript 5&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript is now built using TypeScript 5 (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1377&#34;&gt;#1377&lt;/a&gt;). While we&#39;re not making use of many of &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-0.html&#34;&gt;it&#39;s powerful new features&lt;/a&gt; yet, we&#39;re glad to be using the latest release.&lt;/p&gt;


&lt;h2 class=&#34;post-h2&#34; id=&#34;community&#34;&gt;Community / Core&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;PyConUS 2023&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A bunch of folks from the PyScript team attended &lt;a href=&#34;https://us.pycon.org/2023/&#34;&gt;PyCon&lt;/a&gt; in Salt Lake City in April, and what a delight it was! Between a tutorial session and three additional PyScript-centric talks, and even more PyScript adjacent presentations by team members, it was a roller coaster of a weekend, but a joyous one. You should really check out the &lt;a href=&#34;../post/come-see-pyscript-at-pycon-2023/&#34;&gt;full list of PyScript talks&lt;/a&gt; from this year. (Now with Video!)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I won&#39;t pretend to speak for PyScript as a project here, nor even the team, but just for myself, here were some key takeaways from my experience at PyCon:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;People want to make things for the Web, and they want to write Python to do it. PyScript is hardly the only player in this space, with folks like &lt;a href=&#34;https://anvil.works/&#34;&gt;Anvil&lt;/a&gt; and &lt;a href=&#34;https://pynecone.io/&#34;&gt;Pynecone&lt;/a&gt; both having great showings in their &#34;write Python and we&#39;ll turn it into a front- and/or back-end&#34; offerings.&lt;/li&gt;
        &lt;li&gt;The Web is a strange place for Pythonistas, the Browser in particular. Without a cozy command line, synchrnous file system, and threads, web limitations are like a foreign language to Python users.&lt;/li&gt;
        &lt;li&gt;Ease of deployment is a huge feature. Users love the ability to write some code and give it to/run it for someone else with minimal additional setup.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;New Core Contributor: Andrea Giammarchi&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The PyScript team is delighted to have &lt;a href=&#34;https://github.com/WebReflection&#34;&gt;Andrea Giammarchi&lt;/a&gt; as a new core contributor and Anaconda staff member. He has a long history of building web tools, working with Web Standards, and hacking together JavaScript solutions and polyfills for the betterment of the Web. Andrea brings with him a deep fluidity in JavaScript, which is fortifying PyScript&#39;s technical bedrock at a frankly astonishing pace. His &lt;a href=&#34;https://webreflection.medium.com/&#34;&gt;Medium Blog&lt;/a&gt; is well worth a read and a follow as well. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1450&#34;&gt;#1450&lt;/a&gt;)&lt;/p&gt;

&lt;h4 class=&#34;post-h4&#34;&gt;PyScript.Recipes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As a personal project, I soft-launched &lt;a href=&#34;https://pyscript.recipes&#34;&gt;pyscript.recipes&lt;/a&gt; recently as a repository for simple strategies for working with PyScript and Pyodide. Many of the questions I see float through the Discord, Stack Overflow, or the official forum are of the same kind, so I put together a central location where answers could live and be accessible.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Check it out for PyScript tips, and if you have a recipe to contribute, please &lt;a href=&#34;https://github.com/JeffersGlass/pyscript-recipes&#34;&gt;submit it!&lt;/a&gt;&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;next&#34;&gt;What&#39;s Next? &lt;i&gt;PyScript Next&lt;/i&gt;&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;As alluded to earlier, the PyScript team is in the midst of a massive overhaul of the PyScript codebase. The goal is to streamline the PyScript lifecycle, bring it more in line with web standards, and allow for faster and cleaner expansion of the PyScript with new features (and potentially new languages). Take a peak at the &lt;a href=&#34;https://github.com/pyscript/pyscript/tree/next&#34;&gt;PyScript:next&lt;/a&gt; branch to check out the work that&#39;s been happening there (in the &lt;code&gt;pyscript.core&lt;/code&gt; folder).&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;Since this work is proceeding forward at lightspeed, I&#39;d hate to share any firm predictions of what&#39;s coming out next for PyScript, as it&#39;s very possible I could be wrong in the direction the bullet train is heading. But I&#39;m excited by where it&#39;s been and where it lands.&lt;/p&gt;


&lt;script&gt;    
    //Create Load PyScript buttons:
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        btn_locations = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(btn_locations).forEach(elem =&gt; {
            elem.classList.add(&#39;my-2&#39;, &#39;mx-8&#39;, &#39;border-blue-200&#39;, &#39;rounded-xl&#39;, &#39;flex&#39;, &#39;flex-row&#39;, &#39;justify-center&#39;, &#39;w-auto&#39;, &#34;py-1&#34;)
            let p = document.createElement(&#39;p&#39;)
            p.classList.add(&#39;my-auto&#39;, &#39;mr-4&#39;, &#39;italic&#39;)
            p.innerText = &#34;Want to run these examples live in your browser?&#34;
            elem.appendChild(p)
            //button
            let btn = document.createElement(&#39;button&#39;)
            btn.innerText = &#34;Load PyScript&#34;
            btn.classList.add(&#39;load-pyscript-button&#39;)
            btn.onclick = loadPyScript
            elem.appendChild(btn)
        });
    })
    function setupLoadButtons(){

    }
    function loadPyScript() {
        //load css
        css_link = document.createElement(&#34;link&#34;)
        css_link.rel = &#34;stylesheet&#34;
        css_link.type = &#34;text/css&#34;
        //css_link.href = &#34;https://pyscript.net/releases/2022.12.1/pyscript.css&#34;
        css_link.href = &#34;https://pyscript.net/unstable/pyscript.css&#34;
        //css_link.href = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.css&#34;
        //css_link.href = &#34;./pyscript.css&#34;
        document.getElementsByTagName(&#39;head&#39;)[0].appendChild(css_link)

        //load cs
        script_tag = document.createElement(&#39;script&#39;)
        //script_tag.src = &#34;https://pyscript.net/releases/2022.12.1/pyscript.js&#34;
        script_tag.src = &#34;https://pyscript.net/unstable/pyscript.js&#34;
        //script_tag.src = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.js&#34;
        //script_tag.src = &#34;./pyscript.js&#34;
        document.body.append(script_tag)        
    }
    document.addEventListener(&#39;pyscript_ready&#39;, () =&gt; {
        static = document.getElementsByClassName(&#39;static-example&#39;)
        live = document.getElementsByClassName(&#39;live-example&#39;)
        Array.from(static).forEach(div =&gt; {
            div.classList.add(&#39;hidden&#39;)
        })
        Array.from(live).forEach(div =&gt; {
            div.classList.remove(&#39;hidden&#39;)
            div.classList.remove(&#39;invisible&#39;)
        })
        load_buttons = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(load_buttons).forEach(elem =&gt; {
            elem.classList.add(&#39;hidden&#39;)
        })
    })
&lt;/script&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    loaded_event = js.Event.new(&#39;pyscript_ready&#39;)
    js.document.dispatchEvent(loaded_event)
&lt;/py-script&gt;
&lt;py-config class=&#34;hidden&#34;&gt;
&lt;/py-config&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Realtime Updates in PyScript/Pyodide</title>
      <link>https://jeff.glass/post/pyscript-realtime-page-updates/</link>
      <pubDate>Wed, 24 May 2023 13:21:29 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-realtime-page-updates/</guid>
      <description>&lt;style&gt;
    /* Code tags not in highlight blocks */
    code:not(.nocode):not(.language-py):not(.language-python):not(.language-js):not(.language-html){
        --tw-text-opacity: 1; 
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;../tabs/tabs.css&#34;&gt;   
&lt;p class=&#34;post-p&#34;&gt;When writing Python code to run in the Browser (whether in PyScript or Pyodide), one common desire is to print something out to the page as the program progresses. Maybe it&#39;s status messages from phases of execution, or warning messages, or informational updates. In their simplest form, they might look like: &lt;/p&gt;
&lt;div class=&#34;mb-4&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;button.html&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;myDiv&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
&lt;style&gt;
    .code-container {
        border-width: 2px;
    }
&lt;/style&gt;

&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        
        
            
            
            
            
            &lt;li data-tab-target-first=&#34;#firstPyScript1py-code&#34; class=&#34;active tab code-title&#34;&gt;PyScript&lt;/li&gt;
        
            
            
            
            
            &lt;li data-tab-target-first=&#34;#firstPyodide1py-code&#34; class=&#34; tab code-title&#34;&gt;Pyodide&lt;/li&gt;
        
    &lt;/ul&gt;

    

    
    
        
        
            
            
            
            
            
              
            
            
            &lt;div id=&#34;firstPyScript1py-code&#34; data-tab-content-first class=&#34;active tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;):
    display(i, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;myDiv&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
            
            
            
            
            
              
            
            
            &lt;div id=&#34;firstPyodide1py-code&#34; data-tab-content-first class=&#34; tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;):
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(i)
    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;myDiv&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;textContent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; i&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        

    
    
&lt;/div&gt;
&lt;script&gt;
    const tabsfirst = document.querySelectorAll(&#39;[data-tab-target-first]&#39;)
    const tabContentsfirst = document.querySelectorAll(&#39;[data-tab-content-first]&#39;)

    tabsfirst.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetFirst
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsfirst.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsfirst.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;However, when running the code, it appears that only the final number &lt;code&gt;99&lt;/code&gt; appears on the page, when we&#39;d expect to see the number &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;99&lt;/code&gt; appear, one after another.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The issue isn&#39;t that the textContent isn&#39;t being changed; the issue is that there&#39;s no opportunity for the screen to update to actually display the change. The solution is to use a coroutine.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Confirming that Changes Do Happen&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;To observe that the &lt;code&gt;textContent&lt;/code&gt; of our targeted &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is indeed changing, we can add a small &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver&#34;&gt;Mutation Observer&lt;/a&gt; to the very top of the HTML page. A Mutation Observer is just what it sounds like - it watches for any mutations (changes) on a specified element, and runs some user-defined code in response. This particular mutatio will log the observed Element to the &lt;a href=&#34;https://balsamiq.com/support/faqs/browserconsole/&#34;&gt;browser dev console&lt;/a&gt; whenever any change is made:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; callback(mutationList, observer){
        mutationList.forEach(record =&amp;gt; console.log(record.target))
    }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; MO &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; MutationObserver(callback)
    MO.observe(&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;myDiv&amp;#34;&lt;/span&gt;), {attributes&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt; })&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;With this added code, the console fills with &lt;code&gt;0,&lt;/code&gt; &lt;code&gt;1,&lt;/code&gt; ..., &lt;code&gt;98&lt;/code&gt;, &lt;code&gt;99&lt;/code&gt;. So the textContent of our target Div is, in fact, changing with each call to &lt;code&gt;print&lt;/code&gt;/&lt;code&gt;display&lt;/code&gt;/&lt;code&gt;textContent=&lt;/code&gt;. So why can&#39;t we see that on the page?&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Slowing Things Down to Human Speed&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;One might think that the code is simply proceeding too fast for you eyes to see the numbers change, but that&#39;s not exactly happening either. Let&#39;s slow things down by modifying the &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;
&lt;style&gt;
    .code-container {
        border-width: 2px;
    }
&lt;/style&gt;

&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        
        
            
            
            
            
            &lt;li data-tab-target-second=&#34;#secondPyScript2py-code&#34; class=&#34;active tab code-title&#34;&gt;PyScript&lt;/li&gt;
        
            
            
            
            
            &lt;li data-tab-target-second=&#34;#secondPyodide2py-code&#34; class=&#34; tab code-title&#34;&gt;Pyodide&lt;/li&gt;
        
    &lt;/ul&gt;

    

    
    
        
        
            
            
            
            
            
              
            
            
            &lt;div id=&#34;secondPyScript2py-code&#34; data-tab-content-second class=&#34;active tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;):
    display(i, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;myDiv&amp;#34;&lt;/span&gt;, append &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1_000_000&lt;/span&gt;):
        _ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
            
            
            
            
            
              
            
            
            &lt;div id=&#34;secondPyodide2py-code&#34; data-tab-content-second class=&#34; tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;):
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(i)
    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;myDiv&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;textContent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; i
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1_000_000&lt;/span&gt;):
        _ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        

    
    
&lt;/div&gt;
&lt;script&gt;
    const tabssecond = document.querySelectorAll(&#39;[data-tab-target-second]&#39;)
    const tabContentssecond = document.querySelectorAll(&#39;[data-tab-content-second]&#39;)

    tabssecond.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetSecond
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentssecond.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabssecond.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;Now the loop has to &#34;do a little useless work&#34; before it advances to the next number. (You may need to change &lt;code&gt;1_000_000&lt;/code&gt; to a larger or smaller number, depending on your system&#39;s capabilities.) Opening the dev console again   , the numbers still appear, just at a more measured pace. But the text on the page doesn&#39;t update until the Python code has finished. So what gives?&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;The Real Issue&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The issue is that while updates to the DOM are synchronous (i.e. no further code will be executed until the DOM update is complete), updates to the screen are asynchronous. What&#39;s more, the entire call to runPython() is synchronous, so no updates to the screen will occur until the runPython terminates. Essentially, the call to runPython is a blocking call, and nothing else can happen on the page - screen updates and repainting, other JavaScript calls, etc - until runPython returns.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.macarthur.me/posts/when-dom-updates-appear-to-be-asynchronous&#34;&gt;This blog post&lt;/a&gt; gives a good high-level explanation of the interaction between synchronous code and visible changes on screen.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;The Solution&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;So, if the screen can&#39;t update until our synchronous code call terminates, what can we do? Make our code asynchronous! By turning our code into a coroutine which occasionally yields back to the browser&#39;s event loop to do some work (i.e. update the screen), we can see the updates visibly as they happen.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide has a nifty utility for this in the form of the &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/js-api.html&#34;&gt;runPythonAsync&lt;/a&gt; function, which allows you to write async code without resorting to wrapping your code into a coroutine. Here&#39;s a &lt;a href=&#34;https://jeff.glass/post/pyscript-asyncio/#implicitasync&#34;&gt;description of this feature and its purpose&lt;/a&gt;, which is demonstrated in the final sample code below.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript requires the user to be slightly more explicit about creating and scheduling coroutines and awaitables, and top-level &lt;code&gt;await&lt;/code&gt; is not permitted. Instead, we&#39;ll write our code as a coroutine using &lt;code&gt;async def&lt;/code&gt;, and schedule it using &lt;code&gt;asyncio.ensure_future&lt;/code&gt; Here&#39;s an &lt;a href=&#34;https://jeff.glass/post/pyscript-asyncio/&#34;&gt;Overview of Asyncio in PyScript&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, here&#39;s the required code. The &#34;useless slowdown loop&#34; is still present so that the results are visible, but there&#39;s no need for it to be there in production.&lt;/p&gt;
&lt;style&gt;
    .code-container {
        border-width: 2px;
    }
&lt;/style&gt;

&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        
        
            
            
            
            
            &lt;li data-tab-target-third=&#34;#thirdPyScript3py-code&#34; class=&#34;active tab code-title&#34;&gt;PyScript&lt;/li&gt;
        
            
            
            
            
            &lt;li data-tab-target-third=&#34;#thirdPyodide3py-code&#34; class=&#34; tab code-title&#34;&gt;Pyodide&lt;/li&gt;
        
    &lt;/ul&gt;

    

    
    
        
        
            
            
            
            
            
              
            
            
            &lt;div id=&#34;thirdPyScript3py-code&#34; data-tab-content-third class=&#34;active tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; sleep

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;count&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(i)
        display(i, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;myDiv&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; sleep(&lt;span style=&#34;color:#f60&#34;&gt;0.01&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1_000_000&lt;/span&gt;):
            _ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

fut &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(count())&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
            
            
            
            
            
              
            
            
            &lt;div id=&#34;thirdPyodide3py-code&#34; data-tab-content-third class=&#34; tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;runPythonAsync(&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;`&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; sleep

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(i)
        document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;myDiv&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;textContent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; i
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; sleep(&lt;span style=&#34;color:#f60&#34;&gt;0.01&lt;/span&gt;) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Top level await is permitted by runPythonAsync&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1_000_000&lt;/span&gt;):
            _ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;`&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        

    
    
&lt;/div&gt;
&lt;script&gt;
    const tabsthird = document.querySelectorAll(&#39;[data-tab-target-third]&#39;)
    const tabContentsthird = document.querySelectorAll(&#39;[data-tab-content-third]&#39;)

    tabsthird.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetThird
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsthird.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsthird.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, go forth, and let all your intermediate results be visible!&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Why Does PyScript Need a Local Server?</title>
      <link>https://jeff.glass/post/pyscript-need-a-server/</link>
      <pubDate>Wed, 10 May 2023 09:43:07 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-need-a-server/</guid>
      <description>&lt;h2 class=&#34;post-h2&#34;&gt;The Most Common PyScript Error&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s one stumbling block that new PyScript users trip on more than any other&lt;sup id=&#34;inline-foot-1&#34;&gt;&lt;a href=&#34;#foot-1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt;, and it&#39;s encapsulated in the following error message you may have seen gracing the top of your page:&lt;/p&gt;
&lt;div  style=&#34;font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, &#39;Helvetica Neue&#39;,Arial, &#39;Noto Sans&#39;, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;, &#39;Noto Color Emoji&#39;;line-height: 1.5;position: relative;padding: 0.5rem 1.5rem 0.5rem 0.5rem;margin: .25rem 1rem;background-color: #ffe9e8;border: solid;border-color: #f0625f;color: #9d041c;&#34;&gt;(PY0001): PyScript: Access to local files (using &#34;Paths:&#34; in &amp;lt;py-config&amp;gt;) is not available when directly opening a HTML file; you must use a webserver to serve the additional files. See &lt;a style=&#34;text-decoration: underline; color: #FF041c;&#34; href=&#34;https://github.com/pyscript/pyscript/issues/257#issuecomment-1119595062&#34;&gt;this reference&lt;/a&gt; on starting a simple webserver with Python.&lt;/div&gt;
&lt;p class=post-p&gt;We see this when users clone the &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;PyScript GitHub repo&lt;/a&gt;, double click on some of the html files in the examples folder... and while some work, others (notoriously &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/examples/simple_clock.html&#34;&gt;simple_clock.html&lt;/a&gt;) fail with the error &lt;code class=&#34;code&#34;&gt;ModuleNotFoundError: No module named ...&lt;/code&gt; and the error message above.
&lt;p class=&#34;post-p&#34;&gt;Or maybe you&#39;ve been working on your own PyScript project, and you decide to move your Python code into its own &lt;code class=&#34;code&#34;&gt;.py&lt;/code&gt; file. So you change your PyScript tag to &lt;code class=&#34;code&#34;&gt;&amp;lt;py-script src=&amp;quot;my_code.py&amp;quot;&amp;gt;&amp;lt;/py-script&amp;gt;&lt;/code&gt;, but even with &lt;code class=&#34;code&#34;&gt;my_code.py&lt;/code&gt; in the same folder as your html file, it refuses to load! You might see the same error as above, a &lt;a href=&#34;https://www.contentstack.com/docs/developers/how-to-guides/understanding-and-resolving-cors-error/&#34; class=&#34;&#34;&gt;CORS error&lt;/a&gt;, or both.&lt;/p&gt;
&lt;img src=&#34;corsfetcherror.jpg&#34; alt=&#34;&#34; class=&#34;p-4 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;So the question we have to answer is, &lt;span class=&#34;italic&#34;&gt;Why can&#39;t PyScript find my python files/modules/packages, even though they&#39;re in the same folder as my &lt;code class=&#34;not-italic code&#34;&gt;.html&lt;/code&gt; file?&lt;/span&gt; What is the issue here - why aren&#39;t local files available to your PyScript code? What is a &#34;simple web server&#34;, and why is it necessary?&lt;/p&gt;

&lt;h2 class=&#34;mt-4 post-h2&#34;&gt;Where are my Files?&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The short answer - this isn&#39;t PyScript&#39;s issue. It&#39;s the browser&#39;s. And it&#39;s not a bug: it&#39;s a feature.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For &lt;a href=&#34;https://www.techradar.com/news/theres-another-huge-security-google-chrome-update-you-should-install-right-away&#34;&gt;all&lt;/a&gt; &lt;a href=&#34;https://arstechnica.com/information-technology/2022/07/exploit-seller-used-chrome-exploit-and-2-other-0-days-to-infect-journalists/&#34;&gt;their&lt;/a&gt; &lt;a href=&#34;https://www.androidcentral.com/apps-software/google-chrome-password-strength-indicator&#34;&gt;faults&lt;/a&gt;, modern web browsers do try to keep their users safe. One thing they definitely won&#39;t allow? Allowing websites arbitrary access to your harddrive. Imagine if Twitter could search your desktop for spreadsheets and upload them without you knowing. Or worse, you accidentally type in &lt;code class=&#34;code&#34;&gt;gmial.com&lt;/code&gt; and before you know it, any file  with &#34;W2&#34; or &#34;Payroll&#34; or &#34;Deposit&#34; in it is whisked away into the hands of dangerous internet thieves.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For that reason, &lt;span class=&#34;font-bold&#34;&gt;browsers can&#39;t access arbitrary files on your harddrive without explicit permission.&lt;sup id=&#34;inline-foot-2&#34;&gt;&lt;a href=&#34;#foot-2&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/span&gt; When you double-click on an &lt;code class=&#34;code&#34;&gt;.html&lt;/code&gt; file? That&#39;s giving your browser explicit permission to open that file and&lt;span class=&#34;italic&#34;&gt; only that file&lt;/span&gt;. Same goes for using &lt;code class=&#34;code&#34;&gt;File &gt; Open...&lt;/code&gt; in the browser&#39;s menu.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But when adding external files in your PyScript page (using &lt;code class=&#34;code&#34;&gt;src = ...&lt;/code&gt; &lt;span class=&#34;italic&#34;&gt;or&lt;/span&gt; &lt;code class=&#34;code&#34;&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/reference/elements/py-config.html#local-modules&#34;&gt;&amp;lt;py-config&amp;gt; [[fetch]] &amp;lt;/py-config&amp;gt;&lt;/a&gt;&lt;/code&gt;), PyScript uses the browser&#39;s built in &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&#34;&gt;Fetch API&lt;/a&gt; to make a request to load that file from the hard disk. And as far as your browser is concerned, you haven&#39;t given explicitly permission for &lt;span class=&#34;italic&#34;&gt;that page&lt;/span&gt; to open &lt;span class=&#34;italic&#34;&gt;that file&lt;/span&gt;, so it forbids access.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The large red error that appears at the top of the screen in this case tries highilght to the new Pyscript user what&#39;s happening here and how to fix it. (I should know, &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/b767a78b052cfb6a8a7a6d6ef301250443461915#diff-93ffd8baa67686edae90dbe5aed373d8ad3e6a1164b87542c71612a48c6ed5ce&#34;&gt;I wrote it&lt;/a&gt;). The key advice it provides? &lt;span class=&#34;italic&#34;&gt;&#34;You must use a webserver to serve the additional files.&#34;&lt;/span&gt; But what is a webserver, and why might we use one?&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34;&gt;What is a &#34;Web Server&#34;?&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;In the broadest terms, a Web Server is software (possibly embedded in some related hardware) that responds to requests from a computer network; if we&#39;re being slightly more specific, we might say it responds to HTTP or HTTPS requests, to distinguish it from, say,  a &lt;a href=&#34;https://en.wikipedia.org/wiki/Print_server&#34;&gt;print server&lt;/a&gt; which spools jobs to a physical printer or a &lt;a href=&#34;https://en.wikipedia.org/wiki/Message_transfer_agent&#34;&gt;mail server&lt;/a&gt; that&#39;s responsible for email. A Web Server responds to requests for resources on a network, for things that look &#39;web content.&#39;&lt;/p&gt;
&lt;img class=&#34;post-img&#34; src=&#34;./webserver.png&#34; alt=&#34;A schematic diagram showing 3 &#34;&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Credit: &lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Web_server_serving_static_content.png&#34;&gt;Wikimedia&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;How exactly that software selects how to respond can vary from very simple to exceedingly complex. A very simple piece of server software might provide access to a single folder on a hard drive, with a one-to-one mapping from &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL&#34;&gt;URLs&lt;/a&gt; to the files in that folder. E.g. If such a server gets a network request for &lt;code class=&#34;code&#34;&gt;&#34;/earth.jpeg&#34;&lt;/code&gt;, it responds with the contents on the hard disk of the file &lt;code class=&#34;code&#34;&gt;earth.jpeg&lt;/code&gt; if there is one (and an error if it doesn&#39;t exist). At the other end of the spectrum, a piece of server software might be seriously complex, and responding to requests might involve reading from a database, doing just-in-time calculations to adjust the response, etc.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Mostly for our purposes, what we want is the former: a simple server that makes files available to &#34;the network.&#34; This allows the machinery behind a &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag&#39;s &lt;code class=&#34;code&#34;&gt;src&lt;/code&gt; attribute and the &lt;code class=&#34;code&#34;&gt;[[fetch]]&lt;/code&gt; configurations to load resources on the network that have the contents of our files on disk.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;A common retort from new Web Developers is: &lt;span class=&#34;italic&#34;&gt;&#34;So the browser doesn&#39;t let me open my own files?? Rediculous!&#34;&lt;/span&gt; Know that a lot of &lt;a href=&#34;https://www.w3.org/TR/secure-contexts/#is-origin-trustworthy&#34;&gt;thought and consideration&lt;/a&gt; goes into the standards around what browsers should and should not allow for security purposes. Given what we all know about the internet, defaulting to &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; trusting an arbitrary resource is often the right call.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34;&gt;Starting a Web Server&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, if you have Python installed on your system, you already have simple server software available to you. You can start it in three simple steps:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;Open your &lt;a href=&#34;https://support.apple.com/guide/terminal/open-or-quit-terminal-apd5265185d-f365-44cb-8b09-71a064a42125/mac#:~:text=Terminal%20for%20me-,Open%20Terminal,%2C%20then%20double%2Dclick%20Terminal.&#34;&gt;terminal&lt;/a&gt; or &lt;a href=&#34;https://www.makeuseof.com/tag/a-beginners-guide-to-the-windows-command-line/&#34;&gt;command prompt&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;Navigate to the folder you want to make available to the network. Typically, this will be the folder where your html (PyScript) file is.&lt;/li&gt;
    &lt;li&gt;Enter the command &lt;code class=&#34;code&#34;&gt;python -m http.server 8080 --bind 127.0.0.1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt; 
&lt;p class=&#34;post-p&#34;&gt;Now, in your favorite web browser, navigate to &lt;code class=&#34;code&#34;&gt;http://127.0.0.1:8080/&lt;span class=&#34;italic&#34;&gt;name-of-a-file&lt;/span&gt;&lt;/code&gt; to view any file in that folder in your browser.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What&#39;s more, the the files in that folder are now available on your local network - &#34;local&#34;, in this case, meaning &#34;internal to your computers operating system.&#34; These files are not available to other computers on your personal network, your work network, nor the internet: they&#39;re available as web resources &lt;span class=&#34;italic&#34;&gt;within your own computer only&lt;/span&gt;. Still, that&#39;s enough for the browser to be able to access them, and for your PyScript applications to pick them up. &lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Other Server Options&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;There are other ways of starting/running a local Web Server for development purposes as well. Many IDE&#39;s, like &lt;a href=&#34;https://www.jetbrains.com/help/pycharm/creating-local-server-configuration.html&#34;&gt;Pycharm&lt;/a&gt; and  &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&#34;&gt;VS Code&lt;/a&gt; have the ability to launch a simple server for you, or added extensions to do so. What you choose to use is down to your personal development preferences and ease of working.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The MDN Web Docs have a great article on &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Tools_and_setup/set_up_a_local_testing_server&#34;&gt;Starting a Local Testing Server&lt;/a&gt;, which features some additional techniques for other languages.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript aims to minimize the challenges Python users face when moving to the web. But there are a few sticking points where, for very sound Browser Safety reasons, we cannot provide a totally seemless transition between the two realms. Thankfully, a simple server solves the problem. Run one from the command line and you&#39;ll be just fine.&lt;/p&gt;
&lt;h2 class=&#34;post-h3&#34;&gt;Addendum: Do All My &#39;Local&#39; Users Need A Server?&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;One use case we&#39;ve seen for PyScript is users who would like to develop a &#34;web app&#34; using PyScript, but then have their users (usually fellow employees) access it by opening their HTML file on a shared network drive. This access method, which works when the file in questsion contains all of the Python code/resources internal to it, breaks when you need external files for exactly the reasons outlined above. Is there anything to be done?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s no perfect answer here, only options. The best is to work with your internal IT team to have your project hosted as a network resource on the internal (or public) network, but depending on your situation, that may not be reasonable. If the only external resource is Python code, you can move it all within &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tags in your HTML file. If you have a consistent development environment for your colleagues, you could put a &lt;a href=&#34;https://www.shellscript.sh/&#34;&gt;shell script&lt;/a&gt; or  &lt;a href=&#34;https://en.wikipedia.org/wiki/Batch_file&#34;&gt;batch file&lt;/a&gt; in the same folder as your project which automatically starts a server for your users.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Footnotes&lt;/h2&gt;
&lt;p class=&#34;post-p font-italic&#34; id=&#34;foot-2&#34;&gt;&lt;a href=&#34;#inline-foot-1&#34; class=&#34;font-semibold&#34;&gt;[1]&lt;/a&gt; I have only my own annecdotal experience to support the claim that this is the most common error. However, it came up multiple times at PyConUS, on Reddit, and on Stack overflow &lt;span class=&#34;italic&#34;&gt;in the same week&lt;/span&gt;, so I feel fairly justified in that claim.&lt;/p&gt;
&lt;p class=&#34;post-p font-italic&#34; id=&#34;foot-2&#34;&gt;&lt;a href=&#34;#inline-foot-2&#34; class=&#34;font-semibold&#34;&gt;[2]&lt;/a&gt; The statement that browsers can&#39;t access files on your hard drive, while true in spirit, has, like anything to do with programming, lots of exceptions. For example, in some operating systems, including a &lt;code class=&#34;code&#34;&gt;&amp;lt;img src=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt; tag in your html file with a local image source; if you open the html file in a browser, the image loads just fine. Such is the dance of features that vary based on operating system and browser. I hope the reader will forgive me painting with a broad and mostly-true brush.&lt;/p&gt;

&lt;style&gt;
    code:not(.nocode):not(.language-python):not(.language-python3):not(.language-html):not(.language-js){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;

&lt;!-- &lt;h2 class=&#34;post-h2&#34;&gt;The Desktop and the Network Are Different&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript allows you to write Python in your HTML. That&#39;s the pitch, right? Open a &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag in your HTML document and start writing Python for the web, &lt;span class=&#34;italic&#34;&gt;&#34;just like you would on a Desktop&#34;&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is the awesomeness of PyScript (and, really, it&#39;s underlying runtimes &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide&lt;/a&gt; and (soon) &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1392&#34;&gt;Micropython-dide&lt;/a&gt;). But easing the transition of writing the Python code hides the fact that one is no longer operating strictly in the word of local files, of hard-disks and persistent storage. When one is running code in the Browser, you&#39;re swimming in the sea of Networks and Servers, of URL&#39;s and server permissions and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/CORS&#34;&gt;CORS&lt;/a&gt;. Whether it&#39;s Python, JavaScript, &lt;a href=&#34;https://www.rust-lang.org/what/wasm&#34;&gt;Rust&lt;/a&gt;, &lt;a href=&#34;https://www.php.net/&#34;&gt;PHP&lt;/a&gt;, or something more exotic - you should be aware of how running within the web affects how you access resources.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In this post, we&#39;ll look at &lt;/p&gt; --&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Pycon 2023 Slides</title>
      <link>https://jeff.glass/post/pycon23-slides/</link>
      <pubDate>Mon, 01 May 2023 12:13:15 -0600</pubDate>
      
      <guid>https://jeff.glass/post/pycon23-slides/</guid>
      <description>&lt;h2 class=&#34;post-h2&#34;&gt;PyCon 2023 Slides&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;At the PyScript tutorial at PyConUS on Wednesday April 19, 2023, I had the privilege to present two short sections of slides: one on Python/JS interoperability, and one on Event Handling. The slides for these sessions, as presented, are included below.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The slides are created in &lt;a href=&#34;https://revealjs.com/&#34;&gt;reveal.js&lt;/a&gt; using a 2D layout, i.e. slide progression is both vertical and horizontal. The &#39;chapters&#39; run left-to-right like a typical slide show, with detail slides running down from each chapter heading. Observe the arrows in the bottom right of the slides to see which directions the slides can move in. Hit escape to view an overview of all slides.&lt;/p&gt;
&lt;h3 class=&#34;post-h3 mt-8&#34;&gt;JS Interoperability&lt;/h2&gt;
&lt;iframe src=&#34;./js-interop.html&#34; title=&#34;Slides&#34; width=&#34;100%&#34; height=&#34;100%&#34; style=&#34;aspect-ratio: 4/3&#34;&gt;
    &lt;p&gt;Your browser does not support iframes.&lt;/p&gt;
  &lt;/iframe&gt;
&lt;h3 class=&#34;post-h3 mt-8&#34;&gt;Event Handling&lt;/h3&gt;
&lt;iframe src=&#34;./events.html&#34; title=&#34;Slides&#34; width=&#34;100%&#34; height=&#34;100%&#34; style=&#34;aspect-ratio: 4/3&#34;&gt;
    &lt;p&gt;Your browser does not support iframes.&lt;/p&gt;
&lt;/iframe&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Preview: Pyscript at PyCon 2023</title>
      <link>https://jeff.glass/post/come-see-pyscript-at-pycon-2023/</link>
      <pubDate>Fri, 14 Apr 2023 10:44:04 -0500</pubDate>
      
      <guid>https://jeff.glass/post/come-see-pyscript-at-pycon-2023/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Pycon US is almost upon us! After &lt;a href=&#34;https://www.youtube.com/watch?v=qKfkCY7cmBQ&#34;&gt;Peter Wang&#39;s dynamite keynote&lt;/a&gt; launching PyScript at PyCon US 2022, the team is back again with a swath of interesting talks, tutorials, and topics in Salt Lake City this year. If you&#39;re interesting in PyScript, or Python on the web in any form, I&#39;d highly encourage you to check these out.&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;Update 6/2/23: Links to the recordings of each talk have been added.&lt;/p&gt;
&lt;h2 class=&#34;mt-4 post-h2&#34;&gt;PyScript Team Talks&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The following are talks and tutorials being given by PyScript team members, on PyScript or related topics:&lt;/p&gt;

&lt;div class=&#34;space-y-8&#34;&gt;
    &lt;div class=&#34;border-2 rounded-lg&#34;&gt;
  &lt;div class=&#34;px-2 py-2 bg-gray-200&#34;&gt;
    &lt;h2 style=&#34;font-size: 1.4rem; line-height: 1.6rem&#34; class=&#34;px-1 py-1 mb-2 rounded-md bg-gray-50&#34;&gt;Tutorial: Writing Serverless Python Web Apps with PyScript&lt;/h2&gt;
    &lt;div class=&#34;flex flex-row w-auto space-x-8&#34;&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Date:&lt;/span&gt; Wednesday April 19, 2023. 1:30pm-5:00pm&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Room:&lt;/span&gt; 250D&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://us.pycon.org/2023/schedule/presentation/102/&#39;&gt;Link &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
          &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://www.youtube.com/watch?v=RVmltK006CU&#39;&gt;Recording &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;px-2 bg-gray-100 rounded-lg&#34;&gt;
    &lt;p class=&#34;post-p&#34;&gt;We&#39;ll be kicking off the week strong with a full tutorial sesion on PyScript, hosted by Engineering Manager Ted Patrick with contributions by several of the PyScript core team. We&#39;ll look at the fundamentals of PyScript, how to configure a PyScript page/app with all the resources it needs, how to respond to events, build and utilize plugins, and use PyScript to bring all the power of existing JavaScript libraries into the Python world. No shortage of exciting things to cover!&lt;/p&gt;
    &lt;p class=&#34;post-p&#34;&gt;I say &#34;we&#34; because I&#39;m fortunate enough to be a part of the team presenting this session, in my own small way. If you want to learn more about PyScript, meet the team, or get involved, this would be a great session to attend. We&#39;d love to see you there!&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
    
    &lt;div class=&#34;border-2 rounded-lg&#34;&gt;
  &lt;div class=&#34;px-2 py-2 bg-gray-200&#34;&gt;
    &lt;h2 style=&#34;font-size: 1.4rem; line-height: 1.6rem&#34; class=&#34;px-1 py-1 mb-2 rounded-md bg-gray-50&#34;&gt;Talk: Build Yourself a PyScript&lt;/h2&gt;
    &lt;div class=&#34;flex flex-row w-auto space-x-8&#34;&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Date:&lt;/span&gt; Friday April 21, 2023. 12:15pm-1:00pm&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Room:&lt;/span&gt; 335ABC&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://us.pycon.org/2023/schedule/presentation/27/&#39;&gt;Link &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
          &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://www.youtube.com/watch?v=Fcp1eQCeD6U&#39;&gt;Recording &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;px-2 bg-gray-100 rounded-lg&#34;&gt;
    &lt;p class=&#34;post-p&#34;&gt;PyScript team members Paul Everitt and Nicholas Tollervey will be taking a look at Python platforms on the web. If you were inventing a general-purpose Python platform that you wanted others to use and build upon, what considerations might you have for its API, format and function? What does a &#34;file&#34; mean in the context of a web page? How would &#34;virtual environments&#34; work? What is a Web Worker and why should you care?&lt;/p&gt;
    &lt;p class=&#34;post-p&#34;&gt;Both Nicholas and Paul are seasoned experts in plumbing these kinds of foundational questions in their talks - if you&#39;re thinking about building something with Python on the Web, whether &lt;span class=&#34;italic&#34;&gt;with&lt;/span&gt; PyScript or &lt;span class=&#34;italic&#34;&gt;in place of&lt;/span&gt; PyScript, this would be a great talk to sit in on.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
    
    &lt;div class=&#34;border-2 rounded-lg&#34;&gt;
  &lt;div class=&#34;px-2 py-2 bg-gray-200&#34;&gt;
    &lt;h2 style=&#34;font-size: 1.4rem; line-height: 1.6rem&#34; class=&#34;px-1 py-1 mb-2 rounded-md bg-gray-50&#34;&gt;Talk: The CPU in your browser: WebAssembly demystified&lt;/h2&gt;
    &lt;div class=&#34;flex flex-row w-auto space-x-8&#34;&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Date:&lt;/span&gt; Saturday April 22, 2023. 12:15pm-12:45pm&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Room:&lt;/span&gt; 225DEF&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://us.pycon.org/2023/schedule/presentation/93/&#39;&gt;Link &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
          &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://www.youtube.com/watch?v=MRTtN1TPqs4&#39;&gt;Recording &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;px-2 bg-gray-100 rounded-lg&#34;&gt;
    &lt;p class=&#34;post-p&#34;&gt;PyScript principle software engineer Antonio Cuni will be presenting on Web Assembly - what is it, what can it do, what &lt;span class=&#34;italic&#34;&gt;can&#39;t&lt;/span&gt; it do, and what&#39;s coming in the future. The talk aims to go deeper than a simple &#34;What is Web Asssembly?&#34; to talk about advanced topics like dynamic linking, JIT Compliation, the relationship with Emscripten, and more.&lt;/p&gt;
    &lt;p class=&#34;post-p&#34;&gt;Antonio&#39;s background in compilers and interpreters (in particular HPy and PyPy) gives him a great lens to view the underlying technology that underpins many of the Python-on-the-Web implementations that now exist, like PyScript and Pyodide.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
    
    &lt;div class=&#34;border-2 rounded-lg&#34;&gt;
  &lt;div class=&#34;px-2 py-2 bg-gray-200&#34;&gt;
    &lt;h2 style=&#34;font-size: 1.4rem; line-height: 1.6rem&#34; class=&#34;px-1 py-1 mb-2 rounded-md bg-gray-50&#34;&gt;Talk: PyScript and the magic of Python in the browser&lt;/h2&gt;
    &lt;div class=&#34;flex flex-row w-auto space-x-8&#34;&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Date:&lt;/span&gt; Saturday April 22, 2023. 1:30pm-2:15pm&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Room:&lt;/span&gt; 355DEF&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://us.pycon.org/2023/schedule/presentation/77/&#39;&gt;Link &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
          &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://www.youtube.com/watch?v=G4rzwp1IE6g&#39;&gt;Recording &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;px-2 bg-gray-100 rounded-lg&#34;&gt;
    &lt;p class=&#34;post-p&#34;&gt;Lead PyScript Dev Fabio Pliger introduces what PyScript is today! What is is, what it can do, and how it&#39;s grown since its launch at the keynote at PyCon 2022. An overview of the new Micropython runtime, the plugin system, the current API, and so on.&lt;/p&gt;
    &lt;p class=&#34;post-p&#34;&gt;To be honest, there&#39;s a huge pile of cool stuff for Fabio to talk about here - squeezing it all into 45 minutes will be a feat! But if you&#39;re looking to get deeper into PyScript and you aren&#39;t able to attend the Tutorial, this would be the talk to attend.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 class=&#34;mt-6 post-h2&#34;&gt;More Python on the Web&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;re reading this far, I&#39;m going to assume you have some interest in Python On the Web as a topic; as such, here are a few more sessions that I think are exciting in that vein:&lt;/p&gt;



&lt;div class=&#34;space-y-6&#34;&gt;
    &lt;div class=&#34;border-2 rounded-lg&#34;&gt;
  &lt;div class=&#34;px-2 py-2 bg-gray-200&#34;&gt;
    &lt;h2 style=&#34;font-size: 1.4rem; line-height: 1.6rem&#34; class=&#34;px-1 py-1 mb-2 rounded-md bg-gray-50&#34;&gt;Tutorial: Web Development With A Python-backed Frontend: Featuring HTMX and Tailwind&lt;/h2&gt;
    &lt;div class=&#34;flex flex-row w-auto space-x-8&#34;&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Date:&lt;/span&gt; Wednesday April 19, 2023. 9am-12:30pm&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Room:&lt;/span&gt; 250E&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://us.pycon.org/2023/schedule/presentation/151/&#39;&gt;Link &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
          &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://www.youtube.com/watch?v=YUoflPpVLjQ&#39;&gt;Recording &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;px-2 bg-gray-100 rounded-lg&#34;&gt;
    &lt;p class=&#34;post-p&#34;&gt;Mario Munoz is presenting a tutorial on using &lt;a href=&#34;https://htmx.org/&#34;&gt;HTMX&lt;/a&gt; and &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;TailwindCSS&lt;/a&gt; inside your web designs. HTMX adds interactivtiy, transitions, sockets, and server sent events directly inside of HTML syntax, while Tailwind is an opinioned set of CSS classes for styling.  Both of these are meant to increase development speed by removing verbosity in the development environment. &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
    
    &lt;div class=&#34;border-2 rounded-lg&#34;&gt;
  &lt;div class=&#34;px-2 py-2 bg-gray-200&#34;&gt;
    &lt;h2 style=&#34;font-size: 1.4rem; line-height: 1.6rem&#34; class=&#34;px-1 py-1 mb-2 rounded-md bg-gray-50&#34;&gt;Tutorial: Streamlit for Python - How to create beautiful interactive GUIs and web apps&lt;/h2&gt;
    &lt;div class=&#34;flex flex-row w-auto space-x-8&#34;&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Date:&lt;/span&gt; Wednesday April 19, 2023. 1:30pm-5pm&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Room:&lt;/span&gt; 250F&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://us.pycon.org/2023/schedule/presentation/45/&#39;&gt;Link &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
          &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://www.youtube.com/watch?v=cw44529_OU8&#39;&gt;Recording &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;px-2 bg-gray-100 rounded-lg&#34;&gt;
    &lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://streamlit.io/&#34;&gt;Streamlit&lt;/a&gt; is quite a slick data visualization framework, with a hosted solution for data apps as a part of the &lt;a href=&#34;https://streamlit.io/cloud&#34;&gt;Streamlit Community Cloud&lt;/a&gt;. While this tutorial conflicts with the PyScript tutorial and so I can&#39;t officially recommend you clone yourself to attend both, this is one I&#39;m excited to catch on video after the fact.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

    &lt;div class=&#34;border-2 rounded-lg&#34;&gt;
  &lt;div class=&#34;px-2 py-2 bg-gray-200&#34;&gt;
    &lt;h2 style=&#34;font-size: 1.4rem; line-height: 1.6rem&#34; class=&#34;px-1 py-1 mb-2 rounded-md bg-gray-50&#34;&gt;Talk: Pyscript for Education&lt;/h2&gt;
    &lt;div class=&#34;flex flex-row w-auto space-x-8&#34;&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Date:&lt;/span&gt; Saturday April 22, 2023. 10:45pm-11:15pm&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Room:&lt;/span&gt; 355DEF&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://us.pycon.org/2023/schedule/presentation/57/&#39;&gt;Link &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
          &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://www.youtube.com/watch?v=vLWaS6ZVLvQ&#39;&gt;Recording &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;px-2 bg-gray-100 rounded-lg&#34;&gt;
    &lt;p class=&#34;post-p&#34;&gt;Professor of Finance Blake Rayfield is giving a talk on the advantages of PyScript from a distribution standpoint, with a focus on the educational space. The zero-install nature of PyScript lowers the barrier to access for folks who don&#39;t have the technical background, permission, or time to install Python locally. He&#39;ll be addressing what PyScript brings to the table that previous tools didn&#39;t, and how future developments can continue to push Python in an even-more-accessible direction.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
    
    &lt;div class=&#34;border-2 rounded-lg&#34;&gt;
  &lt;div class=&#34;px-2 py-2 bg-gray-200&#34;&gt;
    &lt;h2 style=&#34;font-size: 1.4rem; line-height: 1.6rem&#34; class=&#34;px-1 py-1 mb-2 rounded-md bg-gray-50&#34;&gt;Talk: Inside your web framework: intro to the ASGI spec, middleware and apps&lt;/h2&gt;
    &lt;div class=&#34;flex flex-row w-auto space-x-8&#34;&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Date:&lt;/span&gt; Saturday April 22, 2023. 10:45pm-11:15pm&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Room:&lt;/span&gt; 255ABC&lt;/div&gt;
        &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://us.pycon.org/2023/schedule/presentation/5/&#39;&gt;Link &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
          &lt;div class=&#34;p-1 rounded-md bg-gray-50&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;&lt;a href=&#39;https://www.youtube.com/watch?v=fcfyDvK_A6Q&#39;&gt;Recording &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;currentColor&#34; class=&#34;inline w-4 h-4 mh-auto&#34;&gt;
            &lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25&#34; /&gt;
          &lt;/svg&gt;
          &lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;px-2 bg-gray-100 rounded-lg&#34;&gt;
    &lt;p class=&#34;post-p&#34;&gt;For the more backend-focused Python devs, Adrian Garcia Badaracco is leading a session on the Asynchronous Server Gateway Interface, a spec and API for writing event-driven web applications. The talk includes writing a simple ASGI app from scratch, then building it up to a featurefull server architecture. If you&#39;re looking to squeeze cycles out of your backend, this would be a neat talk to attend.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;  

&lt;h2 class=&#34;mt-6 post-h2&#34;&gt;The Anaconda Booth&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;As a &lt;a href=&#34;https://us.pycon.org/2023/sponsorship/sponsors/&#34;&gt;contributing sponsor of PyCon&lt;/a&gt;, my understanding is that Anaconda will have a booth on the expo floor! Since I&#39;m not an Anaconda company member, I can&#39;t speak to exactly what will be going on there. That said, if you wanted to chat about PyScript, &lt;a href=&#34;https://www.pythonanywhere.com/&#34;&gt;Python Anywhere&lt;/a&gt;, &lt;a href=&#34;https://docs.anaconda.com/anaconda-nucleus/anaconda-notebooks/index.html&#34;&gt;Anaconda Notebooks&lt;/a&gt;, or the companies other interesting web offerings, I suspect you&#39;d find a friendly face there.&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>PyScript.com - First Look</title>
      <link>https://jeff.glass/post/first-look-pyscript-dot-com/</link>
      <pubDate>Tue, 28 Mar 2023 07:57:29 -0500</pubDate>
      
      <guid>https://jeff.glass/post/first-look-pyscript-dot-com/</guid>
      <description>&lt;style&gt;
    .post-h2 {
        border-bottom-width: 2px; 
        border-color: #E5E7EB; 
    }
    
    .icon-wrapper{
        padding-left: 0.25rem;
        padding-right: 0.25rem; 
        padding-bottom: 0.25rem; 
        border-radius: 0.375rem; 
        border-width: 2px; 
        border-color: #D5D7DB; 
        background-color: #F4F4F4;
    }
    code:not(.nocode):not(.language-python):not(.language-python3):not(.language-html):not(.language-js){
            --tw-text-opacity: 1;
            color: rgba(5, 120, 85, var(--tw-text-opacity));
        }
&lt;/style&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://pyscript.net/&#34;&gt;PyScript&lt;/a&gt; - the JavaScript library that lets you write Python right inside your HTML - is deliberately easy to use. Include a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, optionally a &lt;code&gt;&amp;lt;link type=&#34;css&#34;&amp;gt;&lt;/code&gt; for styling, and you can start dropping Python into your page. Easy.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But what about all the other parts of &lt;span class=&#34;italic&#34;&gt;Putting Stuff on the Web&lt;/span&gt; that are harder? What if you want to host your page with PyScript somewhere? Or share it with a friend, colleague, or teacher? What if you&#39;ve never installed an IDE before? Your experience of could be made so much better with some additional hand holding.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That&#39;s where &lt;a class=&#34;font-semibold&#34; href=&#34;https://pyscript.com&#34;&gt;PyScript.com&lt;/a&gt; comes in. &lt;a href=&#34;https://www.anaconda.com/press/anaconda-launches-pyscript-com-democratizes-python-for-all?utm_campaign=PR&amp;utm_medium=organicsocial&amp;utm_source=twitter&#34;&gt;Announced today by Anaconda&lt;/a&gt;, this free hosted offering is aimed at making it easier for anyone to write, publish, and share their Python/PyScript code. Let&#39;s take a look at the layout, features, and possibilites of PyScript.com.&lt;/p&gt;
&lt;p class=&#34;info-banner&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Disclosure:&lt;/span&gt; I am neither an employee of Anaconda nor paid by them. However, they company did bring me to a PyScript offsite session at their expense earlier this year, and I have discussed this project with several members of the PyScript.com team, as well as having beta access to the site prior to launch.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;The Dashboard&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;When you first go to PyScript.com and log in, you&#39;ll see your projects laid out as a grid of cards. These are your PyScript Projects, sets of related documents that consititute a single working unit (html, python, css, and js files most likely). Below each are two buttons: &lt;span class=&#34;icon-wrapper&#34;&gt;
    &lt;svg class=&#34;inline&#34; viewBox=&#34;0 0 32 32&#34; width=&#34;1.2em&#34; height=&#34;1.2em&#34; class=&#34;mr-2&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M2 26h28v2H2zM25.4 9c.8-.8.8-2 0-2.8l-3.6-3.6c-.8-.8-2-.8-2.8 0l-15 15V24h6.4l15-15zm-5-5L24 7.6l-3 3L17.4 7l3-3zM6 22v-3.6l10-10l3.6 3.6l-10 10H6z&#34;&gt;&lt;/path&gt;&lt;/svg&gt; Edit
&lt;/span&gt; and &lt;span class=&#34;icon-wrapper&#34;&gt;.
    &lt;svg class=&#34;inline&#34; viewBox=&#34;0 0 32 32&#34; width=&#34;1.2em&#34; height=&#34;1.2em&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M28 4H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h8v4H8v2h16v-2h-4v-4h8a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2ZM18 28h-4v-4h4Zm10-6H4V6h24Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;View Site&lt;/span&gt;
. &#34;Edit&#34; will take you to the Project View for your project; &#34;View Site&#34; will take you to the PyScriptApps.com view of your project. Both are described below.&lt;/p&gt;
&lt;img src=&#34;dashboard.png&#34; alt=&#34;A screenshot of the dashboard on PyScript.com, showing several pending projects.&#34; class=&#34;rounded-lg post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Additionally, the Dashboard view has some basic controls at the top. You can create a new project, which by default will be given a cute-but-meaningless name. You can also change the page&#39;s color theme to light or dark. Clicking on the &lt;span class=&#34;icon-wrapper&#34;&gt;avatar symbol &lt;svg class=&#34;inline&#34; viewBox=&#34;0 0 32 32&#34; width=&#34;1.2em&#34; height=&#34;1.2em&#34; class=&#34;avatar text-[38px] text-gray-650&#34;&gt;&lt;path fill=&#34;none&#34; d=&#34;M8.007 24.93A4.996 4.996 0 0 1 13 20h6a4.996 4.996 0 0 1 4.993 4.93a11.94 11.94 0 0 1-15.986 0ZM20.5 12.5A4.5 4.5 0 1 1 16 8a4.5 4.5 0 0 1 4.5 4.5Z&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M26.749 24.93A13.99 13.99 0 1 0 2 16a13.899 13.899 0 0 0 3.251 8.93l-.02.017c.07.084.15.156.222.239c.09.103.187.2.28.3c.28.304.568.596.87.87c.092.084.187.162.28.242c.32.276.649.538.99.782c.044.03.084.069.128.1v-.012a13.901 13.901 0 0 0 16 0v.012c.044-.031.083-.07.128-.1c.34-.245.67-.506.99-.782c.093-.08.188-.159.28-.242c.302-.275.59-.566.87-.87c.093-.1.189-.197.28-.3c.071-.083.152-.155.222-.24ZM16 8a4.5 4.5 0 1 1-4.5 4.5A4.5 4.5 0 0 1 16 8ZM8.007 24.93A4.996 4.996 0 0 1 13 20h6a4.996 4.996 0 0 1 4.993 4.93a11.94 11.94 0 0 1-15.986 0Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt; in the upper right presents options for opening a support or abuse ticket as well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So far, so standard. Let&#39;s get into the meat and potatoes - the Project view.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Project View&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Each project has an editor view, split into three separate panes: the &lt;span class=&#34;font-semibold&#34;&gt;file explorer&lt;/span&gt;, the &lt;span class=&#34;font-semibold&#34;&gt;editor&lt;/span&gt;, and the &lt;span class=&#34;font-semibold&#34;&gt;preview&lt;/span&gt;, as well as some addition &lt;span class=&#34;font-semibold&#34;&gt;controls&lt;/span&gt; Let&#39;s look at each of these parts individually:&lt;/p&gt;
&lt;img src=&#34;editor.png&#34; alt=&#34;A screenshot of the PyScript.com editor layout, with file browser on the left, an editor at center, and a live preview at the right.&#34; class=&#34;rounded-lg post-img&#34;&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;The File Explorer&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The file explorer shows a list of hosted on the PyScript.com servers for this particular project. The files can be of most (any?) type, and adding on with a common suffix like .html &lt;span class=&#34;inline-block h-4 w-4 items-center justify-center rounded-full p-0.5&#34; style=&#34;background-color: rgb(232, 100, 54);&#34;&gt;&lt;svg viewBox=&#34;0 0 32 32&#34; width=&#34;1.2em&#34; height=&#34;1.2em&#34; class=&#34;max-h-[11px] max-w-[11px] flex-none text-white&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M6.5 3.5L0 10l1.5 1.5l5 5L8 15l-5-5l5-5zm7 0L12 5l5 5l-5 5l1.5 1.5L20 10z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;,
    .py &lt;span class=&#34;inline-block h-4 w-4 items-center justify-center rounded-full p-0.5&#34; style=&#34;background-color: rgb(99, 199, 86);&#34;&gt;&lt;svg viewBox=&#34;0 0 40 40&#34; width=&#34;1.2em&#34; height=&#34;1.2em&#34; class=&#34;max-h-[11px] max-w-[11px] text-white&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M19.14 7.5A2.86 2.86 0 0 1 22 10.36v3.78A2.86 2.86 0 0 1 19.14 17H12c0 .39.32.96.71.96H17v1.68a2.86 2.86 0 0 1-2.86 2.86H9.86A2.86 2.86 0 0 1 7 19.64v-3.75a2.85 2.85 0 0 1 2.86-2.85h5.25a2.85 2.85 0 0 0 2.85-2.86V7.5h1.18m-4.28 11.79c-.4 0-.72.3-.72.89c0 .59.32.71.72.71a.71.71 0 0 0 .71-.71c0-.59-.32-.89-.71-.89m-10-1.79A2.86 2.86 0 0 1 2 14.64v-3.78A2.86 2.86 0 0 1 4.86 8H12c0-.39-.32-.96-.71-.96H7V5.36A2.86 2.86 0 0 1 9.86 2.5h4.28A2.86 2.86 0 0 1 17 5.36v3.75a2.85 2.85 0 0 1-2.86 2.85H8.89a2.85 2.85 0 0 0-2.85 2.86v2.68H4.86M9.14 5.71c.4 0 .72-.3.72-.89c0-.59-.32-.71-.72-.71c-.39 0-.71.12-.71.71s.32.89.71.89Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;, 
    .toml &lt;span class=&#34;inline-block h-4 w-4 items-center justify-center rounded-full p-0.5&#34; style=&#34;background-color: rgb(65, 147, 133);&#34;&gt;&lt;svg viewBox=&#34;0 0 1024 1024&#34; width=&#34;1.2em&#34; height=&#34;1.2em&#34; class=&#34;max-h-[11px] max-w-[11px] text-white&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M512 512H397.47v-56.587h52.667V56.86H397.47V0H512zM375.885 107.743v59.344h-91.161v275.88h-64.107v-275.88h-91.586v-59.344zM0 0h113.963v56.587H61.295V455.14h52.668V512H0z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;, 
    or .png &lt;span class=&#34;inline-block h-4 w-4 items-center justify-center rounded-full p-0.5&#34; style=&#34;background-color: rgb(223, 80, 124);&#34;&gt;&lt;svg viewBox=&#34;0 0 1536 1536&#34; width=&#34;1.2em&#34; height=&#34;1.2em&#34; class=&#34;max-h-[11px] max-w-[11px] text-white&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M96 896a32 32 0 0 1-32-32V160a32 32 0 0 1 32-32h832a32 32 0 0 1 32 32v704a32 32 0 0 1-32 32H96zm315.52-228.48l-68.928-68.928a32 32 0 0 0-45.248 0L128 768.064h778.688l-242.112-290.56a32 32 0 0 0-49.216 0L458.752 665.408a32 32 0 0 1-47.232 2.112zM256 384a96 96 0 1 0 192.064-.064A96 96 0 0 0 256 384z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;
    will give them a matching adorable icon. New files can be created with the &lt;span class=&#34;icon-wrapper&#34;&gt;New File &lt;svg class=&#34;inline&#34; viewBox=&#34;0 0 32 32&#34; width=&#34;1.2em&#34; height=&#34;1.2em&#34; data-v-4e467e30=&#34;&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M30 24h-4v-4h-2v4h-4v2h4v4h2v-4h4v-2z&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M16 28H8V4h8v6a2.006 2.006 0 0 0 2 2h6v4h2v-6a.91.91 0 0 0-.3-.7l-7-7A.909.909 0 0 0 18 2H8a2.006 2.006 0 0 0-2 2v24a2.006 2.006 0 0 0 2 2h8Zm2-23.6l5.6 5.6H18Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt; button, and the whole panel can be hidden to the side with the &lt;span class=&#34;icon-wrapper&#34;&gt;Hide Sidebar X&lt;/span&gt; button.
    Currently, I don&#39;t believe there&#39;s an option to upload a file directly through the UI.
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s worth emphasizing that these are the files that are present on the PyScript.com servers, &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; the contents of the Emscripten Virtual Filesystem in which Python operates. For example, if you&#39;ve created a file called &lt;code&gt;data.txt&lt;/code&gt; in the File Explorer, you can read from it in Python by doing:&lt;/p&gt;
&lt;div class=&#34;m-2&#34;&gt;
    &lt;p class=&#34;code-title&#34;&gt;index.html&lt;/p&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;data.txt&amp;#39;]
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;data.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;This file&amp;#39;s contents are: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This is just the simplest possible example - there is lots of addition flexibility provided by PyScript&#39;s &lt;a href=&#34;https://docs.pyscript.net/latest/reference/elements/py-config.html#a-name-fetch-fetch-a&#34;&gt;fetch configurations&lt;/a&gt; for where the files end up in the Virtual Filesystem.&lt;/p&gt;

&lt;h3 class=&#34;post-h3&#34;&gt;The Editor&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The center pane of the Project View is the Editor, a fully-function IDE-like environment with auto-completion, intellisense and more, provided under the hood by the &lt;a href=&#34;https://codemirror.net/&#34;&gt;CodeMirror project&lt;/a&gt;. Here users can write or edit their code directly in the browser window.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To be frank, I&#39;m not sure what more there is to say about the editor - it&#39;s where you edit code! The really neat thing is what happens on the right hand side of the page.&lt;/p&gt;

&lt;h3 class=&#34;post-h3&#34;&gt;The Preview&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;With focus anywhere on the page, users can hit &lt;span class=&#34;icon-wrapper&#34;&gt;Ctrl&lt;/span&gt;+&lt;span class=&#34;icon-wrapper&#34;&gt;s&lt;/span&gt; (&lt;span class=&#34;icon-wrapper&#34;&gt;⌘&lt;/span&gt;+&lt;span class=&#34;icon-wrapper&#34;&gt;s&lt;/span&gt; on Mac) to save their code. But what&#39;s really neat is that you can hit &lt;span class=&#34;icon-wrapper&#34;&gt;Ctrl&lt;/span&gt;+&lt;span class=&#34;icon-wrapper&#34;&gt;Enter&lt;/span&gt; (&lt;span class=&#34;icon-wrapper&#34;&gt;⌘&lt;/span&gt;+&lt;span class=&#34;icon-wrapper&#34;&gt;Enter&lt;/span&gt; on Mac) or click the button in the upper-right to &lt;span class=&#34;font-bold&#34;&gt;run your code&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;When you &#34;run&#34; your code, the contents of your &lt;code&gt;index.html&lt;/code&gt; file are loaded as the source of an iframe embedded into the right-hand side of the editor display. Since the iframe is served from the same domain as the file explorer contents, any files that are visible in the file explorer are available to your page, live, in the preview. You essentially get an in-the-page view of what your index.html page would look like if it were deployed as its own website. And it refreshes every time you hit run.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s worth nothing - this preview functions &lt;span class=&#34;italic&#34;&gt;almost&lt;/span&gt; exactly like if they were a standalone webpage, but because the page is inside an iframe inside the window, a few specific things will be different. Access to some objects which are global to a page, like &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&#34;&gt;LocalStorage&lt;/a&gt;, may have different access limitations inside an iframe than inside a vanilla window. I know the PyScript.com team has been working through these differences and trying to minimize them - if you discover things that you can do with PyScript in a normal page that don&#39;t work in the preview pane, I&#39;d encourage you to let the PyScript.com team know!&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34;&gt;PyScriptApps.com&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;So you&#39;ve developed your page entirely within the browser - what about viewing it as an actual page, or sharing it with others? This, I think, is the real secret-sauce of PyScript.com - any project is instantly shareable.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;From either the Dashboard or the Project Page, click on the &lt;span class=&#34;icon-wrapper&#34;&gt;
    &lt;svg class=&#34;inline&#34; viewBox=&#34;0 0 32 32&#34; width=&#34;1.2em&#34; height=&#34;1.2em&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M28 4H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h8v4H8v2h16v-2h-4v-4h8a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2ZM18 28h-4v-4h4Zm10-6H4V6h24Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt; View Site&lt;/span&gt; button (it&#39;s in the &lt;span class=&#34;icon-wrapper&#34;&gt;three dots menu &lt;svg class=&#34;inline&#34; viewBox=&#34;0 0 32 32&#34; width=&#34;1.2em&#34; height=&#34;1.2em&#34; class=&#34;text-2xl&#34;&gt;&lt;circle cx=&#34;16&#34; cy=&#34;8&#34; r=&#34;2&#34; fill=&#34;currentColor&#34;&gt;&lt;/circle&gt;&lt;circle cx=&#34;16&#34; cy=&#34;16&#34; r=&#34;2&#34; fill=&#34;currentColor&#34;&gt;&lt;/circle&gt;&lt;circle cx=&#34;16&#34; cy=&#34;24&#34; r=&#34;2&#34; fill=&#34;currentColor&#34;&gt;&lt;/circle&gt;&lt;/svg&gt;&lt;/span&gt; in the Project view). A new browser tab will open to a page at &lt;span class=&#34;font-semibold&#34;&gt;PyScriptApps.com&lt;/span&gt;, and the latest version of your &lt;code&gt;index.html&lt;/code&gt; file will be loaded. &lt;span class=&#34;font-semibold&#34;&gt;Share this link anywhere, and anyone can view your site live.&lt;/span&gt; Email it, text it, tweet it, jot it on a napkin - this is a real website that&#39;s publicly viewable, with your HTML/Python/PyScript code running.&lt;/p&gt;
&lt;img src=&#34;psadc.PNG&#34; alt=&#34;A screenshot of PyScriptApps.com&#34; class=&#34;w-full post-img md:w-1/2&#34;&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Hopefully your site has fewer errors than mine!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Truly, your site is immediately viewable anywhere. For instance, check out this live page showing&lt;a href=&#34;https://t.co/QJwamnOj3M&#34;&gt; how to download files using PyScript&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This sharability is what really sold me on the PyScript.com idea. I was working through a project with one of the other PyScript Open Source folks, and he said &#34;Oh let me just send you my site.&#34; He pinged me a link to the PyScriptApps.com version of his project, I clicked it, and BAM - his whole project, live on the web, super easy, and free. Not that this is the first-such shareable dev environment - replit, CodePen and others have of course had the same idea that putting development on the Web makes it that much more accessible. What PyScript.com brings to the table, I think, is that with PyScript running in the browser, the development process and code execution can also take place in the browser, and additional docs and resources for PyScript specifically can be brought in right next to the development environment. Additionally, the power of the Pyodide runtime to interact with the DOM/page/events is now made even more accessible to end users.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What&#39;s more, you&#39;ll notice that each page has a &lt;span class=&#34;icon-wrapper&#34;&gt;View Code&lt;/span&gt; button overlaid at the bottom. Clicking this brings users to a copy of the site&#39;s code, in their own PyScript.com panel, ready to be tweaked, edited, and played with. The goal of PyScript.com is make coding more accessible, so it only makes sense that end users can see how the sausage is made.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;The Founders Plan&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;re excited about PyScript.com and the possibilities it brings to the table for getting started with Python, you may want to join as a &lt;a href=&#34;https://pyscript.com/join&#34;&gt;Founder&lt;/a&gt;. For a one-time price of $150, you get in on the ground floor of PyScript.com development, including early access to beta features, a badge in the app (and potentially physical merch?), and a year of access to the site&#39;s paid features (to be announced soon).&lt;/p&gt;
&lt;img src=&#34;founders.png&#34; alt=&#34;A screenshot of the card showing the Founders plan and its benefits&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt; What&#39;s more, I can imagine that the folks on the PyScript.com team would pay particular attention to folks who signaled their strong interest by becoming a Founder, and it&#39;s an opportunity to shape what PyScript.com is and will become.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;PyScript (Open Source) vs PyScript.com&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;One question I asked when I first learned about PyScript.com (PSDC) is - what does this mean for PyScript as an open source project ? As you can tell from the proliferation of PyScript-centric posts here, I&#39;m just a wee bit invested in the software as an open-source concern. &lt;span class=&#34;italic&#34;&gt;Again, I must stress here that I&#39;m not an Anaconda employee, though I talk with the folks there on both the PyScript Open Source and the PyScript.com team quite a bit. Everything I&#39;m sharing here is my personal perception from conversations with folks on and off the PSDC team, and you shouldn&#39;t read any of it to be the official position or intention of Anaconda or its employees. I&#39;m just a guy who got involved on the Open Source side.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;From conversations with some of the PyScript.com team, I&#39;ve been struck by how conscientious they are of wanting to maintain the universality of PyScript as an open source project. There&#39;s been no expressed desire to add features to PyScript Open Source that would preference the use of PyScript.com over any other implementation of a similar idea, or of steering the project in specific ways that would benefit PSDC. PyScript.com is consistently talked about as yet another way to get people started with Python &lt;span class=&#34;italic&#34;&gt;right now&lt;/span&gt;, and make coders&#39; work shareable and viewable without installing anything.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What&#39;s more, it sounds like there isn&#39;t very much internal overlap internal between the Open Source and PSDC teams inside Anaconda itself. The former is focused on creating a powerful Open Source library to let users easily write Python into their web apps; the later is creating services and tools that surround that library, to lower that barrier to entry even further.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m excited to see where both PyScript Open Source and PyScript.com go next!&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>What&#39;s New in Pyscript 2023.03.1</title>
      <link>https://jeff.glass/post/whats-new-pyscript-2023-03-1/</link>
      <pubDate>Fri, 10 Mar 2023 19:01:29 -0600</pubDate>
      
      <guid>https://jeff.glass/post/whats-new-pyscript-2023-03-1/</guid>
      <description>&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    loaded_event = js.Event.new(&#39;pyscript_ready&#39;)
    js.document.dispatchEvent(loaded_event)
&lt;/py-script&gt;
&lt;style&gt;
    code:not(.nocode):not(.language-python):not(.language-python3):not(.language-html):not(.language-js){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
    .py-terminal{
        min-height: 10em;
        background-color: black;
        color: white;
    }
    .py-pop-up {
    text-align: center;
    width: 600px;
    }

    .py-pop-up p {
        margin: 5px;
    }

    .py-pop-up a {
        position: absolute;
        color: white;
        text-decoration: none;
        font-size: 200%;
        top: 3.5%;
        right: 5%;
    }

    /* Pop-up second layer end */
    .alert-banner {
        position: relative;
        padding: .5rem 1.5rem .5rem .5rem;
        margin: 0.5rem 2rem;
    }

    .alert-banner p {
        margin: 0;
    }

    .py-error{
        background-color: #FFE9E8;
        border: solid;
        border-color: #f0625f;
        color: #9d041c;
    }

    .py-warning {
        background-color: rgb(255, 244, 229);
        border: solid;
        border-color: #ffa016;
        color: #794700;
    }

    .alert-banner.py-error&gt;#alert-close-button {
        color: #9d041c;
    }

    .alert-banner.py-warning&gt;#alert-close-button {
        color: #794700
    }

    #alert-close-button {
    position: absolute;
    right: .5rem;
    top: .5rem;
    cursor: pointer;
    background: transparent;
    border: none;
    }
    
&lt;/style&gt;
&lt;script&gt;    
    //Create Load PyScript buttons:
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        btn_locations = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(btn_locations).forEach(div =&gt; {
            div.classList.add(&#39;my-2&#39;, &#39;mx-8&#39;, &#39;border-blue-200&#39;, &#39;rounded-xl&#39;, &#39;flex&#39;, &#39;flex-row&#39;, &#39;justify-center&#39;, &#39;w-auto&#39;, &#34;py-1&#34;)
            let p = document.createElement(&#39;p&#39;)
            p.classList.add(&#39;my-auto&#39;, &#39;mr-4&#39;, &#39;italic&#39;)
            p.innerText = &#34;Want to run these examples live in your browser?&#34;
            div.appendChild(p)
            //button
            let btn = document.createElement(&#39;button&#39;)
            btn.innerText = &#34;Load PyScript&#34;
            btn.classList.add(&#39;load-pyscript-button&#39;)
            btn.onclick = loadPyScript
            div.appendChild(btn)
        });
    })
    function setupLoadButtons(){

    }
    function loadPyScript() {
        //load css
        css_link = document.createElement(&#34;link&#34;)
        css_link.rel = &#34;stylesheet&#34;
        css_link.type = &#34;text/css&#34;
        css_link.href = &#34;https://pyscript.net/releases/2023.03.1/pyscript.css&#34;
        //css_link.href = &#34;https://pyscript.net/unstable/pyscript.css&#34;
        //css_link.href = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.css&#34;
        //css_link.href = &#34;./pyscript.css&#34;
        document.getElementsByTagName(&#39;head&#39;)[0].appendChild(css_link)

        //load cs
        script_tag = document.createElement(&#39;script&#39;)
        script_tag.src = &#34;https://pyscript.net/releases/2023.03.1/pyscript.js&#34;
        //script_tag.src = &#34;https://pyscript.net/unstable/pyscript.js&#34;
        //script_tag.src = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.js&#34;
        //script_tag.src = &#34;./pyscript.js&#34;
        document.body.append(script_tag) 
    }
    document.addEventListener(&#39;pyscript_ready&#39;, () =&gt; {
        static = document.getElementsByClassName(&#39;static-example&#39;)
        live = document.getElementsByClassName(&#39;live-example&#39;)
        Array.from(static).forEach(div =&gt; {
            div.classList.add(&#39;hidden&#39;)
        })
        Array.from(live).forEach(div =&gt; {
            div.classList.remove(&#39;hidden&#39;)
        })
        load_buttons = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(load_buttons).forEach(elem =&gt; {
            elem.classList.add(&#39;hidden&#39;)
        })
    })
&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;The PyScript team is absolutely steamrolling ahead in the past few months, working toward a new version of the PyScript open source library and &lt;span class=&#34;italic&#34;&gt;some other developments&lt;/span&gt; that will become visible in the near future. &lt;span id=&#34;tease&#34;&gt;(I hate to be a tease, but this isn&#39;t my piñata to pop).&lt;/span&gt; What follows is a writeup of the new improvements, features, and deprecations in &lt;a href=&#34;https://github.com/pyscript/pyscript/releases/tag/2023.03.1&#34;&gt;PyScript 2023.03.1&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If the &lt;a href=&#34;#pyscript&#34;&gt;PyScript section&lt;/a&gt; looks a little shorter than the last release, well, the last release set a very high bar! But there are a couple other reasons why there&#39;s less user-facing changes to talk about this time. It&#39;s partly because the team wanted to do a release to pin some key features before pushing some really significant PyScript changes that are coming soon - skip down to &lt;a href=&#34;#whatsnext&#34;&gt;&#34;What&#39;s Next?&#34;&lt;/a&gt; for those.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But additionally, a ton of work has been happening under the hood, especially in the past few weeks. Better linting, testing, deployment; unvendoring some necessary packages; refining and clarifying our approach to changes and issues. The kind of things that don&#39;t fill out a blog post, but make a big difference in the long run.&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;What&#39;s &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; listed here are bugfixes, and they have been several nice ones since the last release. For that kind of granular information, see the newly-added &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/changelog.md&#34;&gt;changelog document&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As always, for help, discussion, and bleeding-edge development on PyScript, come join us on &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;The Discord Server&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;grid justify-center p-1 m-auto bg-gray-200&#34;&gt;
    &lt;span&gt;Jump To: &lt;span&gt;
    &lt;a href=&#34;#pyscript&#34;&gt;PyScript&lt;/a&gt; • 
    &lt;a href=&#34;#plugins&#34;&gt;Plugins&lt;/a&gt; • 
    &lt;a href=&#34;#pyodide&#34;&gt;Pyodide&lt;/a&gt; • 
    &lt;a href=&#34;#documentation&#34;&gt;Documentation&lt;/a&gt; • 
    &lt;a href=&#34;#whatsnext&#34;&gt;What&#39;s Next?&lt;/a&gt;
&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;pyscript&#34;&gt;PyScript&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;output&#34;&gt;&lt;code&gt;&amp;lt;py-script&amp;gt; output=&#34;...&#34;&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code&gt;output&lt;/code&gt; attribute of the &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag has been restored. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1063&#34;&gt;#1063&lt;/a&gt;) This allows PyScript users to route Python&#39;s output to &lt;code&gt;stdout&lt;/code&gt; to a specific place in the dom, like so:&lt;/p&gt;
&lt;div class=&#34;m-2&#34;&gt;
    &lt;div&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;some-div&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;This output should go somewhere&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;px-2 my-2 bg-gray-200&#34;&gt;
        &lt;p class=&#34;mb-2 ml-2 text-sm text-gray-600&#34;&gt;#some-div&lt;/p&gt;
        &lt;p class=&#34;ml-2 font-mono&#34;&gt;Hello world!&lt;/p&gt;
        &lt;p class=&#34;ml-2 font-mono&#34;&gt;This output should go somewhere&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Users who are writing code &lt;span class=&#34;italic&#34;&gt;specifically for PyScript&lt;/span&gt; can use the &lt;a href=&#34;https://docs.pyscript.net/latest/reference/API/display.html&#34;&gt;display()&lt;/a&gt; function to route their output (whether text or rich MIME types) to a specific place on the DOM. The &lt;code&gt;output&lt;/code&gt; attribute is meant to allow the use of libraries which output directly to &lt;code&gt;stdout&lt;/code&gt;, like &lt;a href=&#34;https://github.com/Textualize/rich&#34;&gt;Rich&lt;/a&gt; or &lt;a href=&#34;https://pygments.org/&#34;&gt;Pygments&lt;/a&gt;. Or so, you know, &lt;code&gt;print(&#34;Hello World&#34;)&lt;/code&gt; doesn&#39;t have to print in the same location as the &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;

&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;&#34;&lt;code&gt;runtime&lt;/code&gt;&#34; is now &#34;&lt;code&gt;interpreter&lt;/code&gt;&#34;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The attribute of the PyScript object which represents the internal Python interpreter has been renamed from &lt;code&gt;runtime&lt;/code&gt; to &lt;code&gt;interpreter&lt;/code&gt;. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1082&#34;&gt;#1082&lt;/a&gt;) This is largely an internal PyScript naming change, but it does have ramifications for some users who were making use of this key access attributes of the runtime, as in:&lt;/p&gt;
&lt;div&gt;
    &lt;span class=&#34;bg-red-600&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//Previous naming using &amp;#39;pyscript.runtime&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; showX_2022_12_1(){
        console.log(&lt;span style=&#34;color:#c30&#34;&gt;`In Python right now, x = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;pyscript.runtime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;`&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//Updated attribute name in PyScript 2023.03.1 and later
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; showX_2023_03_1(){
        console.log(&lt;span style=&#34;color:#c30&#34;&gt;`In Python right now, x = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;pyscript.interpreter.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;`&lt;/span&gt;)
    }&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Hiding the Splashscreen&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Several users have &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/900&#34;&gt;requested&lt;/a&gt; the ability to hide the default splashscreen that&#39;s displayed while PyScript is loading. And we heard you! The &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag now accepts a &lt;code&gt;splashscreen.enabled&lt;/code&gt; property (defaults to &lt;code&gt;True&lt;/code&gt;). If set to &lt;code&gt;False&lt;/code&gt;, the default loading screen will not be shown. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1138&#34;&gt;#1138&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Auto-IDs for &lt;code&gt;py-[event]&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A small but very handy update to the &lt;code&gt;py-[event]&lt;/code&gt; behavior: users no longer need to specify an ID when adding this attribute to an HTML element. Under the hood, an ID is stilll necessary, but if the user doesn&#39;t provide one, PyScript now adds an auto-generated UUID as the ID. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1122&#34;&gt;#1122&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;m-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&amp;lt;!-- The &amp;#39;id&amp;#39; attribute was required in previous versions--&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;someFunction()&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;old&amp;#34;&lt;/span&gt;&amp;gt;Click me!&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;&amp;#34;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&amp;lt;!-- In version&amp;lt;h1 class=&amp;#34;text-4xl text-center text-red-800&amp;#34;&amp;gt;This is a draft this post hosted on a development server; not for release.&amp;lt;/h1&amp;gt; 2023.03.1 and later, an ID will be auto-generated for you --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;someFunction()&amp;#34;&lt;/span&gt;&amp;gt;Click me!&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;So Long, &lt;code&gt;&amp;lt;py-box&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;py-title&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;py-inputbox&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;py-button&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As previously promised, these elements (which were deprecated in version 2022.12.1) have been removed in version 2023.02.1. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1084&#34;&gt;#1084&lt;/a&gt;). If you were still making use of these custom elements, check out the &lt;a href=&#34;../whats-new-pyscript-2022-12-1#widgetdeprecation&#34;&gt;2022.12.1 release post&lt;/a&gt; for suggested plain HTML elements to use instead.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;plugins&#34;&gt;Plugins&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;What Are Plugins?&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Plugins are code objects, either in Python or JavaScript, whose methods are called at specific points in the PyScript lifecycle (e.g. as PyScript installs itself, fetches the interpreter, related resources, executes &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tags, etc). Internally, PyScript uses the plugin concept to orchestrate some behaviors like the Splashscreen and the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;, but the idea is that these methods are available for users to write their own plugins to hook into.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a super powerful functionality! Users can (for the most part) rewrite the rules of PyScript and its execution by simply pointing part of the &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; at a URL with their plugin resource. You could emit events corresponding to certain actions, pre-scan and parse the Python code and act upon it before the code executes, add additional custom tags that extend PyScript&#39;s behavior... the sky&#39;s the limit.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So if they&#39;re so powerful, why isn&#39;t there more documentation on Plugins? The honest answer is that &lt;span class=&#34;font-semibold&#34;&gt;the API is rapidly changing&lt;/span&gt;, both in naming conventions and scope, and there&#39;s some understandable reticence at putting out a significant amount of functionality that users might rely on, only for the names and conventions to entirely change in the next release. Currently, there are two major outstanding discussions:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;Rename the phases of the page lifecycle and lifecycle methods (&lt;a href=&#34;https://github.com/pyscript/pyscript/discussions/1238&#34;&gt;#1238&lt;/a&gt;)&lt;/li&gt;
        &lt;li&gt;Use a metadata file for plugin specification, instead of linking directly to a code file (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1228&#34;&gt;#1228&lt;/a&gt;) (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1229&#34;&gt;#1229&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So with both the method names and keys/format likely to change, it&#39;s daunting to write documentation that may already be out-of-date by the time it&#39;s published. That said, here&#39;s a peek at what&#39;s changed in the Plugins API since the last release:&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Plugins Can Now be Fetched from URLs&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Where in version 2022.12.1 plugin files could only be referenced from specific &lt;code&gt;.py&lt;/code&gt; files, a plugin can now be fetch&#39;d from any URL. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1065&#34;&gt;#1065&lt;/a&gt;). What&#39;s more, plugins can be written either in Python or in JavaScript.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;PyScript Tag Lifecycle Hooks&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;In addition to the hooks which happen at specific points in PyScript&#39;s loading process, we&#39;ve added a couple of hooks which are called immediately before and after any &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tags on the page, allowing plugins to check, for example, whether the source code adheres to certain guidelines, or whether the result was of a desired type. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1064&#34;&gt;#1063&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Plugin Method are Now Optional&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, any and all plugins had to be implemented for every plugin, or an error would be thrown. Now, plugins can implement any subset of the plugin methods (or none of them, although then what would be the point?). (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1134&#34;&gt;#1134&lt;/a&gt;) &lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;No Duplicate Plugin Calls&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I know I said I wasn&#39;t going to delve into bugfixes here, but this is one that was plaguing a couple of users with specific issues. In PyScript 2022.12.1, any Python plugins were being added to the list of managed plugins &lt;span class=&#34;italic&#34;&gt;twice&lt;/span&gt;, meaning each of their methods was called twice. This was causing some specific tricky issues where a plugin method (which should only run once) would run once, succeed, then appear to fail... tricksy indeed. That&#39;s no longer happening.(&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1064&#34;&gt;#1064&lt;/a&gt;)&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Changelog.md&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As mentioned at the top, PyScript now has an &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/changelog.md&#34;&gt;incremental Changelog&lt;/a&gt;! If you&#39;re sick of wading through a couple thousand of my (questionably spelled) words every time there&#39;s a release, the Changelog has the short-and-sweet version (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1066&#34;&gt;#1066&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Admittedly, the PyScript team is still getting used to updating the changelog as part of our workflow, so it&#39;s possible a few small things were missed. That changelog is meant to be primarily user-facing, and doesn&#39;t necessarily capture all the changes to PyScript&#39;s internals.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since we have this additional central document I&#39;ve opted to focus this post more on changes in features and utility, rather than minor-but-important changes like bugfixes. If you&#39;re interested in seeing what changed in a more specific way, and what previous bugs you can now safely ignore, I&#39;d recommend checking out the changelog.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Event Listeners Documentation&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript has a very handy but under-documented way of adding event listeners directly to HTML elements using the &lt;code&gt;py-[event]&lt;/code&gt; syntax. At least, it was under-documented until Mariana &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1125&#34;&gt;went and wrote some&lt;/a&gt;!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Fair warning to those making use of this feature, though - the syntax is likely to change in an upcoming version. There&#39;s &lt;a href=&#34;https://github.com/pyscript/pyscript/discussions/1222&#34;&gt;active discussion&lt;/a&gt; around the new syntax and a &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1240&#34;&gt;PR in the works&lt;/a&gt;, so keep your eyes peeled for what the next iteration of that API looks like.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;&lt;code&gt;requests&lt;/code&gt; package / &lt;code&gt;pyodide-http&lt;/code&gt; tutorial&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Of all the popular Python packages that users wish they could use in the browser, probably the most asked about is &lt;a href=&#34;https://requests.readthedocs.io/en/latest/&#34;&gt;requests&lt;/a&gt;, the ubiquitous package for making HTTP requests. Unfortunately, that package doesn&#39;t work natively within the browser, as the user doesn&#39;t have access to the same kind of low-level networking capabilities that Python running natively on a computer does.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But one person&#39;s problem is another person&#39;s call to action. &lt;a href=&#34;https://twitter.com/mr_le_fox&#34;&gt;Koen Vosson&lt;/a&gt; has created the &lt;a href=&#34;https://github.com/koenvo/pyodide-http&#34;&gt;pyodide-http&lt;/a&gt; package, which shims both the &lt;code&gt;requests&lt;/code&gt; and &lt;code&gt;urllib&lt;/code&gt; packages (if desired), allowing code previously written for &#34;desktop flavored&#34; python to just work in the browser. And to get users started smoothly, PyScript now includes a tutorial on how to integrate &lt;code&gt;pyodide-http&lt;/code&gt; into your PyScript project. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1164&#34;&gt;#1164&lt;/a&gt;)&lt;/p&gt;

&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Tutorials Overhaul&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The tutorials index page at &lt;a href=&#34;https://docs.pyscript.net/tutorials/index.html&#34;&gt;docs.pyscript.net/tutorials&lt;/a&gt; has gotten a facelift, for a better onboarding process for new users (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1090&#34;&gt;#1090&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The PyScript core team is always interested in having more tutorials and guides. Have you figured out how to do something with PyScript that you felt could use better documentation? We&#39;d love to see a &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;Pull Request&lt;/a&gt;!&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://github.com/romankehr&#34;&gt;GitHub User romankehr&lt;/a&gt; contributed a new example to the PyScript repository for uploading a CSV file into PyScript and loading it into a Pandas dataframe (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1067&#34;&gt;#1067&lt;/a&gt;). For those looking to data-sciency things with Python in the browser, this is a great place to start.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;pyodide&#34;&gt;Pyodide&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://pyodide.org&#34;&gt;Pyodide&lt;/a&gt;, the CPython-interpreter-in-WASM project that is the primary runtime for PyScript at the moment, has had a couple of releases in recent months; This release brings PyScript up-to-date with &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#version-0-22-1&#34;&gt;Pyodide 0.22.1&lt;/a&gt;, which brings a host of new and nifty features.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide&#39;s own &lt;a href=&#34;https://blog.pyodide.org/posts/0.22-release/&#34;&gt;release notes for version 0.22.0&lt;/a&gt; provide a great overview and insight into these changes, but they&#39;re so exciting that I can&#39;t help but feature them here as well:&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;JS Module Typeshed&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Many of PyScript&#39;s most powerful features rely on Pyodide&#39;s ability to &lt;code&gt;import ... from js&lt;/code&gt; to get objects from the JavaScript global namespace. But it does get a little tiring to stare at a squiggy red line underneath every instance of  &lt;span class=&#39;rl-outer&#39;&gt;&lt;span class=&#39;rl-inner&#39;&gt;&lt;code&gt;from js import console&lt;/code&gt;&lt;/span&gt;&lt;/span&gt; or &lt;span class=&#39;rl-outer&#39;&gt;&lt;span class=&#39;rl-inner&#39;&gt;&lt;code&gt;js.document.getElementById&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;. The Pyodide team have added a &lt;a href=&#34;https://mypy.readthedocs.io/en/stable/stubs.html&#34;&gt;stub (.pyi) file&lt;/a&gt; to make things a little better! Simply download a copy of the most recent &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/main/src/py/js.pyi&#34;&gt;js.pyi&lt;/a&gt; file and place in your IDE or project&#39;s location for stub files (&lt;a href=&#34;https://code.visualstudio.com/docs/python/settings-reference&#34;&gt;VS Code&lt;/a&gt;, &lt;a href=&#34;https://www.jetbrains.com/help/pycharm/stubs.html#quick-navigation&#34;&gt;PyCharm&lt;/a&gt;) or simply adjacent to your &lt;code&gt;.py&lt;/code&gt; file for simply projects. And like magic, intellisense will start filling in common attributes from the JS module! (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/3298&#34;&gt;#3298&lt;/a&gt;)&lt;/p&gt;
&lt;img src=&#34;autocomplete.gif&#34; alt=&#34;&#34; class=&#34;w-full m-auto lg:w-3/4 xl:w-1/2 p-img&#34;&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;New Packages&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A litany of new packages have been added to Pyodide, including:&lt;/p&gt;
&lt;p class=&#34;mx-4 post-p &#34;&gt;pycryptodome (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2965&#34;&gt;#2965&lt;/a&gt;), coverage-py (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3053&#34;&gt;#3053&lt;/a&gt;), bcrypt (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3125&#34;&gt;#3125&lt;/a&gt;), lightgbm (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3138&#34;&gt;#3138&lt;/a&gt;), pyheif, pillow_heif, libheif, libde265 (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3161&#34;&gt;#3161&lt;/a&gt;), wordcloud (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3173&#34;&gt;#3173&lt;/a&gt;), gdal, fiona, geopandas (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3213&#34;&gt;#3213&lt;/a&gt;), the standard library _hashlib module (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3206 &#34;&gt;#3206&lt;/a&gt;), pyinstrument (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3258&#34;&gt;#3258&lt;/a&gt;), gensim (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3326&#34;&gt;#3326&lt;/a&gt;), smart_open (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3326&#34;&gt;#3326&lt;/a&gt;), pyodide-http (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3355&#34;&gt;#3355&lt;/a&gt;) &lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Improved Python Collections APIS&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The process by which JavaScript objects are transmogrified (proxied) into Python continues to get more sophisticated - JS objects that feel like they &lt;span class=&#34;italic&#34;&gt;should&lt;/span&gt; behave like the corresponding Python collections now generally do. For instance, JavaScript arrays now implement &lt;code&gt;reverse&lt;/code&gt;, &lt;code&gt;__reversed__&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt;, and &lt;code&gt;pop&lt;/code&gt;, so that they implement the &lt;a href=&#34;https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence&#34;&gt;MutableSequence API&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2970&#34;&gt;#2970&lt;/a&gt;). This allows us to treat JavaScript arrays much more like a Python list (or other mutable sequence), eliminating the need to manually convert from one type to another. For instance, this is now possible:&lt;/p&gt;


&lt;div class=&#34;mx-6 my-2&#34;&gt;
&lt;span class=&#34;bg-red-600&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; myarray &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;PyScript&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Pyodide&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;JavaScript&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Are&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Awesome&amp;#34;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; myarray
    item &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; myarray&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(item)
    myarray&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Super!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(myarray))
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(myarray&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;p-2 pl-4 mt-4 text-white bg-black text-mono&#34;&gt;
&lt;pre&gt;
Awesome
PyScript and Pyodide and JavaScript Are Super!
2
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&#34;post-p&#34;&gt;Similarly, Map-like JS objects now implement &lt;a href=&#34;https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping&#34;&gt;MutableMapping&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3275&#34;&gt;#3275&lt;/a&gt;),

&lt;div class=&#34;mx-6 my-2&#34;&gt;
&lt;span class=&#34;bg-red-600&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; myarray &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;PyScript&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Pyodide&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;JavaScript&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Are&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Awesome&amp;#34;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; myarray
    item &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; myarray&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(item)
    myarray&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Super!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(myarray))
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(myarray&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;p-2 pl-4 mt-4 text-white bg-black text-mono&#34;&gt;
&lt;pre&gt;
Awesome
PyScript and Pyodide and JavaScript Are Super!
2
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;code&gt;Generators&lt;/code&gt;(&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3294&#34;&gt;Pyodide  #3294&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Destructuring JS Objects with python &lt;code&gt;match&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s a neat one, combining the features of Python &gt;3.10&#39;s &lt;code&gt;match&lt;/code&gt; statement with JavaScripts (relatively simple) &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&#34;&gt;object structure&lt;/a&gt;. (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3273&#34;&gt;Pyodide #3273&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you have some JavaScript object that you&#39;ve imported into Python, it will (unless it&#39;s a very simple object) be a &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html#pyodide.ffi.JsProxy&#34;&gt;JsProxy object&lt;/a&gt; that behaves like a Pythonic &#34;interpretation&#34; of the JavaScript object, with a few additional attributes and methods related to the proxy-ing behavior itself. One of these additional methods is the &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html#pyodide.ffi.JsProxy.as_object_map&#34;&gt;as_object_map()&lt;/a&gt; function, which, as the Pyodide docs say: &lt;span class=&#34;italic&#34;&gt;returns a new JsProxy that treats the object as a map&lt;/span&gt;. This can be useful in several circumstances, but one in particular is using it with the match statement, as follows:&lt;/p&gt;
&lt;div class=&#34;mx-6 my-2&#34;&gt;
&lt;span class=&#34;bg-red-600&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; actor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
        name&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Keanu&amp;#34;&lt;/span&gt;,
        role&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Neo&amp;#34;&lt;/span&gt;,
        action&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; () =&amp;gt; {
            console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;I know kung foo&amp;#34;&lt;/span&gt;)
        }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    pyActor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;actor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;as_object_map()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; key, value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pyActor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;items():
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;key&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    match pyActor:
        case {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: name, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;role&amp;#34;&lt;/span&gt;: role}:
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;This actor is named &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; in the role &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;role&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        case _:
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No match&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;p-2 pl-4 mt-4 text-white bg-black text-mono&#34;&gt;
&lt;pre&gt;
name: Keanu
role: Neo
action: () =&gt; {
            console.log(&#34;I know kung foo&#34;)
        }
This actor is named Keanu in the role Neo
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;JS &lt;code&gt;Promises&lt;/code&gt; are &lt;code&gt;thenable&lt;/code&gt; in Python&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For users coming from the JavaScript world, it&#39;s perfectly natural to create a &lt;a href=&#34;https://masteringjs.io/tutorials/fundamentals/thenable&#34;&gt;chain of thenables&lt;/a&gt; - that is, a sequence of objects that have a &lt;code&gt;then()&lt;/code&gt; method, each calling its next one when its promise resolves. This makes it easy to write out a succession of functions, each one returning a promise that should be awaited, in a reasonable way.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, it&#39;s possible to do the same kind of then-ing directly in Python: (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2997&#34;&gt;Pyodide #2997&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;mx-6 my-2&#34;&gt;
&lt;span class=&#34;bg-red-600&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Example borrowed from the Pyodide tests&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;fetch_demo&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; fetch

        name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; fetch(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://pypi.org/pypi/pytest/json&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;then(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x: x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;json())
            &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;then(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x: x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name)
        )
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(name)
        
    asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(fetch_demo())&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;p-2 pl-4 mt-4 text-white bg-black text-mono&#34;&gt;
&lt;pre&gt;
pytest
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;JS Proxy Descriptors (Using JS Functions as Python Methods)&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;At a recent PyScript team gathering, I was musing with Pyodide core dev &lt;a href=&#34;https://github.com/hoodmane&#34;&gt;Hood&lt;/a&gt; about the possibility of subclassing a JavaScript object in Python, so that one could write the &#34;JavaScripty&#34; behaviors of one&#39;s class in JavaScript and subclass it into Python to handle the &#34;Pythony&#34; bits. Hood kindly let me know that that way probably lies madness, but that it &lt;span class=&#34;italic&#34;&gt;is&lt;/span&gt; now possible to use JavaScript functions as Python methods, which accomplished much of the same thing. (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3130&#34;&gt;#3130&lt;/a&gt;). And if the function is defined within the Python class statement, the &lt;code&gt;this&lt;/code&gt; object references the current Python object (like &lt;code&gt;self&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&#34;mx-6 my-2&#34;&gt;
&lt;span class=&#34;bg-red-600&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; area &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (a, b) =&amp;gt; {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; .&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; b
    }&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.code&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; run_js

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Triangle&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, a, b):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; a
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;b &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; b

        area &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;area
        hypo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; run_js(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;function h() {return Math.hypot(this.a, this.b);} h&amp;#34;&lt;/span&gt;)
        
    c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Triangle(a&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;, b&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Area is: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;area(c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;a, c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;b)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;The hypotenuse is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;hypo()&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;p-2 pl-4 mt-4 text-white bg-black text-mono&#34;&gt;
&lt;pre&gt;
Area is: 6
The hypotenuse is 5
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;native-filesystem&#34;&gt;Mounting the Native Filesystem&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;By default, when Python in PyScript/Pyodide interacts with the filesystem (when writing something like &lt;code&gt;with open(...) as ...&lt;/code&gt;), it references a &#34;virtual&#34;, &lt;a href=&#34;https://emscripten.org/docs/api_reference/Filesystem-API.html#memfs&#34;&gt;in-memory filesystem&lt;/a&gt; that lives in the browser window&#39;s memory for as long as the page exists. But Emscripten, the c-program-to-Web-Assembly compiler that Pyodide uses to build CPython for the web, offers &lt;a href=&#34;https://emscripten.org/docs/api_reference/Filesystem-API.html&#34;&gt;additional filesystem options&lt;/a&gt;, one of them being &lt;a href=&#34;https://developer.chrome.com/articles/file-system-access/&#34;&gt;Chrome&#39;s interface for mounting directories directly&lt;/a&gt;. (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2987&#34;&gt;Pyodide #2987&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One thing to note: mounting a local folder into the browser - like &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/User_actions&#34;&gt;some other potentially-invasive browser actions&lt;/a&gt; - can only be triggered when handling a user interaction. This is so you can&#39;t, say, open Reddit and immediately be asked to mount a folder on your computer into the browser. You can imagine the kind of chaos that would cause.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This functionality currently only works in Chrome/Chromium, though it does seem that other browsers are picking it up as well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a neat-enough functionality that I want offer a live demo here. If you are using Chrome/Chromium, you can choose to mount a folder on your filesystem here, and PyScript will print the listing of its contents.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-bold text-red-700&#34;&gt;But Beware!&lt;/span&gt; When you click the button below, you will be asked for a folder on your computer that the PyScript/JavaScript code that runs will have access to. You can inspect the source on this page and see for yourself what I&#39;m doing, and I do guarantee that it&#39;s the code you see on the page here, but I want you to be aware - by mounting this folder, &lt;span class=&#34;font-semibold&#34;&gt;you are implicitly trusting me, Jeff Glass, with the contents of whatever&#39;s inside that folder.&lt;/span&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; showDirectoryPicker, Object
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide_js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;os&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;requestAndPrintFolder&lt;/span&gt;():
        modeObject &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; to_js({ &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;readwrite&amp;#34;&lt;/span&gt; }, dict_converter&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Object&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fromEntries)
        dirHandle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; showDirectoryPicker()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; dirHandle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;queryPermission(modeObject) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;granted&amp;#34;&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; dirHandle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;requestPermission(modeObject) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;granted&amp;#34;&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unable to read and write directory&amp;#34;&lt;/span&gt;)
        nativefs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; pyodide_js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mountNativeFS(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/mount_dir&amp;#34;&lt;/span&gt;, dirHandle)
        
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(os&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;listdir(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/mount_dir&amp;#39;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;requestAndPrintFolder()&amp;#34;&lt;/span&gt;&amp;gt;Click to request folder&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;hidden live-example&#34;&gt;
    &lt;py-script class=&#34;hidden&#34;&gt;
        from js import showDirectoryPicker, Object
        from pyodide.ffi import to_js
        import pyodide_js
        import os
    
        async def requestAndPrintFolder():
            modeObject = to_js({ &#34;mode&#34;: &#34;readwrite&#34; }, dict_converter=Object.fromEntries)
            dirHandle = await showDirectoryPicker()
            if await dirHandle.queryPermission(modeObject) != &#34;granted&#34;:
                if await dirHandle.requestPermission(modeObject) != &#34;granted&#34;:
                    raise Exception(&#34;Unable to read and write directory&#34;)
            nativefs = await pyodide_js.mountNativeFS(&#34;/mount_dir&#34;, dirHandle)
            
            print(os.listdir(&#39;/mount_dir&#39;))
    &lt;/py-script&gt;
    &lt;div class=&#34;flex justify-center w-full mt-3 align-center&#34;&gt;&lt;button id=&#34;btn1&#34; py-click=&#34;requestAndPrintFolder()&#34; class=&#34;w-full px-4 py-2 bg-yellow-300 border-2 rounded-md md:w-1/2&#34;&gt;Click to request folder&lt;/button&gt;&lt;/div&gt;
    &lt;py-terminal&gt;&lt;/py-terminal&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Package Loading Improvements&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide v0.22 brings a number of changes and improvements to the package loading process, most of which won&#39;t be immediately visible to casual users of PyScript, but which are useful to know. The biggest of which is that &lt;code&gt;micropip&lt;/code&gt;, the pip-like software that handles installing packages from both PyPI and the Pyodide packages, has been moved to &lt;a href=&#34;https://github.com/pyodide/micropip&#34;&gt;it&#39;s own repository&lt;/a&gt; so it can be maintained separately from Pyodide itself. It also allows users to install different versions or copies of micropip, as opposed to being locked to one that&#39;s bundled with Pyodide.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Additionally, the error messages that Pyodide provides when a package fails to load have been beefed up quite a bit (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/3137&#34;&gt;#3137&lt;/a&gt;) (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/3263&#34;&gt;#3263&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For more details, see the &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#id1&#34;&gt;Package Loading section&lt;/a&gt; of the Pyodide changelog.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Build System Improvements&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;re interested in building packages for Pyodide, or working within the Pyodide build system, version 0.22 brings another swath of improvements. There are some new commands in the pyodide CLI which allow for finer control of the build process for specific packages, or from which sources to build. Also, the &lt;code&gt;meta.yml&lt;/code&gt; files that specify the build process for particular packages have been expanded. For more details, see the &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#id2&#34;&gt;Build System section&lt;/a&gt; of the Pyodide changelog.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Beyond that, Pyodide is now using the most recent Emscripten version (3.1.27, from 3.1.14), which I gather is quite nice, but honestly a little deeper in the stack than your humble author is familiar with. For details on that, check &lt;a href=&#34;https://github.com/emscripten-core/emscripten/blob/main/ChangeLog.md&#34;&gt;the Emscripten Changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;whatsnext&#34;&gt;What&#39;s Next?&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Web Workers&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This was a topic we touched on briefly &lt;a href=&#34;../whats-new-pyscript-2022-12-1#webworkers&#34;&gt;in the last release post&lt;/a&gt;, but a huge amount of progress has been made in this area since then... just not quite in a user-facing way.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The gist of using Web Workers, you&#39;ll recall, is to offload the actual Python execution to a separate thread so it doesn&#39;t block the main browser thread while it&#39;s executing &#34;in the background.&#34; This means that all calls in the main thread to &#34;run some Python&#34; become asynchronous, which comes with its own pitfalls. The gist of the process so far is:
    &lt;ul class=&#34;mx-4 space-y-2&#34;&gt;&lt;li&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;#669966&#34; class=&#34;inline-block w-6 h-6&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z&#34; /&gt;&lt;/svg&gt; Make calls to &lt;code&gt;runPython&lt;/code&gt; into &lt;code&gt;async&lt;/code&gt; calls. Don&#39;t do anything else different, just make sure the lifecycle is still consistent, everything that needs to be &lt;code&gt;await&lt;/code&gt;ed is awaited, etc. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1212&#34;&gt;#1212&lt;/a&gt;)&lt;/li&gt;
    &lt;li&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;#669966&#34; class=&#34;inline-block w-6 h-6&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z&#34; /&gt;&lt;/svg&gt; Split the Interpreter class (which is PyScripts abstraction around Pyodide and other future interpreters) into two classes, &lt;code&gt;InterpreterClient&lt;/code&gt; and &lt;code&gt;RemoteInterpreter&lt;/code&gt;. One calls the other, but other live in the main thread. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1218&#34;&gt;#1218&lt;/a&gt;)&lt;/li&gt;
    &lt;li&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;#CC9999&#34; class=&#34;inline-block w-6 h-6&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M14.25 9v6m-4.5 0V9M21 12a9 9 0 11-18 0 9 9 0 0118 0z&#34; /&gt;&lt;/svg&gt;Move the &lt;code&gt;RemoteInterpreter&lt;/code&gt; to a Web Worker (this is the easy part, but then...)&lt;/li&gt;
    &lt;li&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;#CC3333&#34; class=&#34;inline-block w-6 h-6&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z&#34; /&gt;&lt;/svg&gt;Work out all the message passing/proxying to maintain communication between the main thread and remote thread. This is (maybe?) the most complicated part - Antonio, Madhur, and Hood&#39;s combined efforts have yielded a &lt;a href=&#34;https://github.com/pyscript/pyscript/tree/antocuni/play-with-workers&#34;&gt;hacked together demo&lt;/a&gt; which does indeed run all the Python code in a web worker. It uses the &lt;a href=&#34;https://github.com/hoodmane/synclink&#34;&gt;synclink library&lt;/a&gt; to make the synchronous actions in Python block correctly while waiting for a response from the main thread, as well as handling message passing.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But my understanding here is there&#39;s still quite a bit of work to be done before this effort is ready to merge. But that by no means should take away from the tremendous effort already put in! Really cool things are coming in this area.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Events Overhaul&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Another issue still circling since the previous release, but after a recent PyScript core team gathering, I think we have a way forward. The new &lt;code&gt;py-[event]&lt;/code&gt; syntax (which to emphasize is &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; in this release) will be:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;For any browser event &lt;code&gt;[event]&lt;/code&gt;, the attribute &lt;code&gt;py-[event]=&#34;someCallable&#34;&lt;/code&gt; can be added to any HTML element. When the specified event is triggered on that HTML element, the Callable will be called.&lt;/li&gt;
        &lt;li class=&#34;ml-6&#34;&gt;If the callable takes no arguments, it will be called with no arguments. If the callable takes a single argument, the &lt;code&gt;event&lt;/code&gt; object generated by the browser event will be passed to it. If it takes two or more arguments, an Exception is raised.&lt;/li&gt;
        &lt;li&gt;For any browser event &lt;code&gt;[event]&lt;/code&gt;, the attribute &lt;code&gt;py-[event]-code=&#34;someExpression()&#34;&lt;/code&gt; can be added to any HTML element. When the specified event is triggered on that HTML element, the expressed is &lt;code&gt;eval()&lt;/code&gt;&#39;d in the global namespace&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The following examples illustrate the difference between the two scenarios: &lt;code&gt;py-[event]&lt;/code&gt; is for &lt;span class=&#34;italic&#34;&gt;registering event handlers&lt;/span&gt;, whereas &lt;code&gt;py-[event]-code&lt;/code&gt; is for &lt;span class=&#34;italic&#34;&gt;running snippets of code&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&#34;code-title&#34;&gt;py-[event]&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printEventTarget&lt;/span&gt;(event):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(event&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;printEventTarget&amp;#34;&lt;/span&gt;&amp;gt;Click me to print a reference to this button&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class=&#34;code-title&#34;&gt;py-[event]-code&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;addition&lt;/span&gt;(a, b):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; b&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;print(f&amp;#39;{addition(2, 3)= }&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;What is two plus three?&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt; 
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;print(&amp;#39;Hello, world!&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;Click me to print Hell Worldo&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Just to say it one more time - this syntax is &lt;span class=&#34;font-semibold&#34;&gt;coming soon&lt;/span&gt; and is &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; a part of this release. We&#39;re getting close though.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;pyxel&#34;&gt;Pyxel in Pyodide&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide core dev &lt;a href=&#34;https://github.com/ryanking13&#34;&gt;Gyeongjae Choi&lt;/a&gt; has &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3508&#34;&gt;a development branch&lt;/a&gt; in the works that I&#39;m personally very excited about - it compiled Pyodide with Emscripten support for SDL (&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;Simple DirectMedia Layer&lt;/a&gt;), a cross-platform graphics library. It powers lots of desktop-oriented graphics software, like &lt;a href=&#34;https://www.pygame.org/news&#34;&gt;Pygame&lt;/a&gt; and &lt;a href=&#34;https://github.com/kitao/pyxel&#34;&gt;Pyxel&lt;/a&gt;. The branch is specifically working on integrating Pyxel, since it&#39;s written mostly in Python and Rust, which Pyodide has been increasingly included as a supported language to build against.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, Pyxel already has a &lt;a href=&#34;https://github.com/kitao/pyxel#web&#34;&gt;build-to-web&lt;/a&gt; option which compiles the requisite components into Web Assembly and spits out an html file that wraps it. But with Pyodide integration, we get all the nifty browser and JS interoperability features that we&#39;ve come to love in PyScript. For example, we can not only run games in the browser, but we can use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&#34;&gt;LocalStorage&lt;/a&gt; to save user data, add HTML control or display elements &lt;span class=&#34;italic&#34;&gt;outside&lt;/span&gt; of the game, respond to window events, or even allow game objects to be &lt;span class=&#34;italic&#34;&gt;directly scripted  by Python, in realtime, in the browser.&lt;/span&gt;. How cool is that?&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So cool I had to build a little demo, that&#39;s how cool.&lt;/p&gt;
&lt;p-post&gt;To be clear, this is all still experimental - the following demo is built against a version of Pyodide that doesn&#39;t exist in the wild, that I built from Gyeongjae&#39;s dev branch. But I got so excited about the possibilities that I just had to try it out.&lt;/p-post&gt;
&lt;p class=&#34;post-p&#34;&gt;As an example of what&#39;s possible with Pyxel in the browser, try putting focus on another browser window - you&#39;ll see that the game detects the window event and automatically pauses. Additionally, this demo uses the browser&#39;s local storage to keep track of your best time.&lt;/p&gt;
&lt;div class=&#34;mb-2 text-center&#34;&gt;
    &lt;p class=&#34;&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;CONTROLS&lt;/span&gt; Move: Left/Right      Jump: Up or Space     Pause: P &lt;/p&gt;
&lt;/div&gt;
&lt;py-config class=&#34;hidden&#34;&gt;
    packages = [&#39;pyxel&#39;]

    [[fetch]]
    files = [&#39;animated.py&#39;, &#39;collision.py&#39;, &#39;frame.py&#39;, &#39;images.pyxres&#39;, &#39;level.py&#39;, &#39;main.py&#39;, &#39;protocols.py&#39;, &#39;sounds.pyxres&#39;, &#39;wabbit-wesources.pyxres&#39;, &#39;wabbit.py&#39;, &#39;objects/coin.py&#39;]
    from = &#39;https://dev.jeff.glass/wasm-wabbit-game/src&#39;

    [[fetch]]
    files = [&#39;level_1.pyxres&#39;, &#39;level_2.pyxres&#39;, &#39;level_3.pyxres&#39;]
    from = &#39;https://dev.jeff.glass/wasm-wabbit-game/src/levels&#39;
    to_folder = &#39;levels&#39;

    [[interpreters]]
    src = &#34;https://jeff-glass-dev.s3.amazonaws.com/pyodide-pyxel/pyodide.js&#34;
    name = &#34;pyodide-0.22.1-pyxelbuild&#34;
    lang = &#34;python&#34;
&lt;/py-config&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import pyodide.code

    pyodide.code.run_js(
        &#34;&#34;&#34;
        pyscript.interpreter._remote.interface._module.canvas = document.querySelector(&#34;canvas#canvas&#34;);

        _virtualGamepadStates = [
            false, // Up
            false, // Down
            false, // Left
            false, // Right
            false, // A
            false, // B
            false, // X
            false, // Y
        ];
        &#34;&#34;&#34;
    )
    from main import App
    App()
&lt;/py-script&gt;
&lt;div class=&#34;relative static-example&#34; onclick=&#34;loadPyScript()&#34;&gt;
    &lt;img src=&#34;./wabbit-cover.png&#34; alt=&#34;&#34; class=&#34;w-full p-2 m-auto border-2 rounded-lg lg:w-1/2 md:w-3/4&#34; style=&#34;cursor: pointer&#34;&gt;
    &lt;div class=&#34;absolute px-8 py-2 text-4xl font-semibold border-2 border-gray-900 rounded-lg load-pyscript-button&#34; style=&#34;top:60%; left:50%; transform: translateX(-50%); background-color: #fda703; color: #2C2E34; cursor: pointer;&#34; &gt;Load Demo&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
    &lt;canvas id=&#34;canvas&#34; tabindex=&#34;-1&#34; class=&#34;hidden live-example&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;And more...&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As I &lt;a href=&#34;#tease&#34;&gt;teased&lt;/a&gt; about 3500 words ago, there are some very cool things coming soon for PyScript; if you want to be the first to hear about them, come join us on &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;The Discord Server&lt;/a&gt; &lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Webserial in PyScript</title>
      <link>https://jeff.glass/post/pyscript-webserial/</link>
      <pubDate>Wed, 08 Feb 2023 07:51:57 -0600</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-webserial/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;A user came along the &lt;a href=&#34;https://github.com/pyscript/pyscript/discussions&#34;&gt;PyScipt GitHub Discussions&lt;/a&gt; the other day with an interesting question - &lt;a href=&#34;https://github.com/pyscript/pyscript/discussions/1152&#34;&gt;can you use PySerial (or similar) in PyScript?&lt;/a&gt; That got my wheels a turning; this post is the answer to that question.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The short answer is &lt;span class=&#34;font-semibod&#34;&gt;no, PySerial doesn&#39;t work in PyScript&lt;/span&gt; - PySerial and other serial libraries rely on low-level features of their host operating systems which just aren&#39;t present in the browser window.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But just because PySerial doesn&#39;t work, doesn&#39;t mean that &lt;span class=&#34;italic&#34;&gt;serial connections&lt;/span&gt; can&#39;t work. Using the new-ish &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Serial_API&#34;&gt;WebSerial Browser API&lt;/a&gt;, we can ask web users for permission to access their local serial devices. If it&#39;s granted, we can access those devices via a serial connection. And if you&#39;d like to try it out live in your browser, hit the &lt;span style=&#34;&#34;&gt;load PyScript&lt;/span&gt; button below:&lt;/p&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;justify-center hidden w-auto h-auto py-1 my-2 border-2 border-blue-200 live-example md:mx-4 rounded-xl md:h-full&#34;&gt;
    &lt;div class=&#34;flex flex-row space-x-2 &#34;&gt;
        &lt;py-script src=&#34;webSerialDemo.py&#34;&gt;&lt;/py-script&gt;
        &lt;button py-click=&#34;sm.askForSerial()&#34; id=&#34;open&#34; class=&#34;p-2 border-2 border-gray-500 rounded-lg&#34;&gt;Open a Serial Port&lt;/button&gt;
        &lt;br&gt;&lt;button py-click =&#34;sendValueFromInputBox(sm)&#34; id=&#34;write&#34; class=&#34;p-2 border-2 border-gray-500 rounded-lg&#34;&gt;Write to the serial port:&lt;/button&gt;
        &lt;input type=&#34;text&#34; id=&#34;text&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;overflow-y-scroll max-h-76&#34;&gt;
        &lt;py-terminal auto&gt;&lt;/py-terminal&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;italic post-p&#34;&gt;This isn&#39;t a particularly full-featured demo. As you&#39;ll see in the code below, it doesn&#39;t contain much provision for error handling, and only the barest of UI. But it does work!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Below are three source files for a working demo using WebSerial in PyScript. The first (&lt;code class=&#34;code&#34;&gt;webPageSerial.html&lt;/code&gt;) is a (minimally formatted) HTML page with two buttons - &#34;Open a Serial Port&#34; and &#34;Write to the Serial Port&#34; - as well as an input box. Clicking the &#34;Open&#34; button prompts the user (if their browser supports WebSerial) to select an available serial port, connects to it, and begins listening for incoming bytes on that port. Once the port is open, when the user clicks the &#34;write&#34; button, the contents of the text box are written to the open serial port.&lt;/p&gt;
&lt;div class=&#34;my-4&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;webserialPage.html&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#099&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;title&lt;/span&gt;&amp;gt;WebSerial Demo&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;title&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://pyscript.net/releases/2022.12.1/pyscript.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://pyscript.net/releases/2022.12.1/pyscript.css&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;webserialdemo.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;sm.askForSerial()&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;open&amp;#34;&lt;/span&gt;&amp;gt;Open a Serial Port&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;br&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click &lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;sendValueFromInputBox(sm)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;write&amp;#34;&lt;/span&gt;&amp;gt;Write to the serial port:&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The second file (&lt;code class=&#34;code&#34;&gt;webSerialDemo.py&lt;/code&gt;) contains the actual Python/PyScript code that makes this demo work. It wraps the WebSerial API in a new class, &lt;code class=&#34;code&#34;&gt;SerialManager&lt;/code&gt;, for the purpose of managing the state of the serial connection. It also creates an instance of this class, called &lt;code class=&#34;code&#34;&gt;sm&lt;/code&gt;, which is referenced by the &lt;code class=&#34;code&#34;&gt;py-click&lt;/code&gt; attributes in the above HTML document.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, a single helper function &lt;code class=&#34;code&#34;&gt;sendValueFromInputBox()&lt;/code&gt; is defined, which is used by the &#34;Write&#34; button - it fetches the contents of the input box, asks the SerialManager to write that value to the serial port, then clears the input box.&lt;/p&gt;
&lt;div class=&#34;my-4&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;webSerialDemo.py&lt;/p&gt;
    
    
    &lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; navigator
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Utility function for converting py dicts to JS objects&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;j&lt;/span&gt;(obj):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; to_js(obj, dict_converter&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;Object&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fromEntries)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;SerialManager&lt;/span&gt;():
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Class for managing reads and writes to/from a serial port
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Not very clean! No error handling, no way to stop listening etc.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;askForSerial&lt;/span&gt;(self):
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Request that the user select a serial port, and initialize
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        the reader/writer streams with it
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(navigator, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;serial&amp;#39;&lt;/span&gt;):
            warning &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;This browser does not support WebSerial; see https://developer.mozilla.org/en-US/docs/Web/API/Web_Serial_API#browser_compatibility for a list of compatible browsers.&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(warning)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;NotImplementedError&lt;/span&gt;(warning)
        
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;port &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; navigator&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;serial&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;requestPort()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;port&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;open(j({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;baudRate&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;9600&lt;/span&gt;}))
        js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;OPENED PORT&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Set up encoder to write to port&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;encoder &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;TextEncoderStream&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new()
        outputDone &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;encoder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;readable&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pipeTo(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;port&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;writable)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Set up listening for incoming bytes&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;decoder &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;TextDecoderStream&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new()
        inputDone &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;port&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;readable&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pipeTo(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;decoder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;writable)
        inputStream &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;decoder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;readable

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reader &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; inputStream&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getReader();
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;listenAndEcho()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;writeToSerial&lt;/span&gt;(self, data):
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Write to the serial port&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        outputWriter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;encoder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;writable&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getWriter()
        outputWriter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(data &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        outputWriter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;releaseLock()
        js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Wrote to stream: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;listenAndEcho&lt;/span&gt;(self):
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Loop forever, echoing values received on the serial port to the JS console&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        receivedValues &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;):
            response &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reader&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
            value, done &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; response&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value, response&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;done
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; value):
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Output whole line and clear buffer when a newline is received&lt;/span&gt;
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Received from Serial: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(receivedValues)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
                receivedValues &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (value):
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Output individual characters as they come in&lt;/span&gt;
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Received Char: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
                receivedValues&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(value)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Create an instance of the SerialManager class when this script runs&lt;/span&gt;
sm &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; SerialManager()

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#A helper function - to point the py-click attribute of one of our buttons to&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;sendValueFromInputBox&lt;/span&gt;(sm: SerialManager):
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Get the value of the input box and write it to serial
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Also clears the input box
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    textInput &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;)
    value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; textInput&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    textInput&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Writing to Serial Port: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; sm&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;writeToSerial(value)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
    
&lt;/div&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, because a serial demo isn&#39;t all that exciting without something to actually communicate with, the final bit of code is an &lt;a href=&#34;https://docs.arduino.cc/&#34;&gt;Arduino&lt;/a&gt; Sketch. When run on an Arduino Uno or similar, the code simply echos back what it receives on its serial port, with a slight delay.&lt;/p&gt;
&lt;div class=&#34;my-4&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;arduinoSerialEcho.ino&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Echos back whatever is written to the serial port, with a small delay
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;setup&lt;/span&gt;() {
  Serial.begin(&lt;span style=&#34;color:#f60&#34;&gt;9600&lt;/span&gt;);
}

&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;loop&lt;/span&gt;() {
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (Serial.available() &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;){
    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; incomingByte &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Serial.read();
    delay(&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;);
    Serial.print(&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;char&lt;/span&gt;(incomingByte));
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
&lt;script&gt;    
    //Create Load PyScript buttons:
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        btn_locations = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(btn_locations).forEach(div =&gt; {
            div.classList.add(&#39;my-2&#39;, &#39;md:mx-4&#39;, &#39;border-2&#39;, &#39;border-blue-200&#39;, &#39;p-2&#39;, &#39;grid&#39;, &#39;grid-cols-1&#39;, &#39;rounded-xl&#39;, &#39;flex&#39;, &#39;flex-row&#39;, &#39;justify-center&#39;, &#39;w-auto&#39;, &#34;py-1&#34;, &#39;h-auto&#39;, &#39;md:h-full&#39;)
            let p = document.createElement(&#39;p&#39;)
            p.classList.add(&#39;my-auto&#39;, &#39;mr-4&#39;, &#39;italic&#39;, &#39;text-center&#39;)
            p.innerHTML = &#34;Want to run this demo live in your browser?&#34;
            if (div.classList.contains(&#34;viz&#34;)){
                p.innerHTML += &#39; &lt;p class=&#34;font-semibold text-green-600&#34;&gt;This example includes a visualization.&lt;/p&gt;&#39;
            }
            div.appendChild(p)
            //button
            let btn = document.createElement(&#39;button&#39;)
            btn.innerText = &#34;Load PyScript&#34;
            btn.classList.add(&#39;load-pyscript-button&#39;, &#39;h-12&#39;)
            btn.onclick = loadPyScript
            div.appendChild(btn)
        });
    })

    function loadPyScript() {        
        //load css
        css_link = document.createElement(&#34;link&#34;)
        css_link.rel = &#34;stylesheet&#34;
        css_link.type = &#34;text/css&#34;
        css_link.href = &#34;https://pyscript.net/releases/2022.12.1/pyscript.css&#34;
        document.getElementsByTagName(&#39;head&#39;)[0].appendChild(css_link)

        //load cs
        script_tag = document.createElement(&#39;script&#39;)
        script_tag.src = &#34;https://pyscript.net/releases/2022.12.1/pyscript.js&#34;
        document.body.append(script_tag)        
    }
    document.addEventListener(&#39;pyscript_ready&#39;, () =&gt; {
        static = document.getElementsByClassName(&#39;static-example&#39;)
        live = document.getElementsByClassName(&#39;live-example&#39;)
        Array.from(static).forEach(div =&gt; {
            div.classList.add(&#39;hidden&#39;)
        })
        Array.from(live).forEach(div =&gt; {
            div.classList.remove(&#39;hidden&#39;)
        })
        load_buttons = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(load_buttons).forEach(elem =&gt; {
            elem.classList.add(&#39;hidden&#39;)
        })
    })
&lt;/script&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    loaded_event = js.Event.new(&#39;pyscript_ready&#39;)
    js.document.dispatchEvent(loaded_event)
&lt;/py-script&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Pyscript Chipy Feb 2023</title>
      <link>https://jeff.glass/post/pyscript-chipy-feb-2023/</link>
      <pubDate>Wed, 01 Feb 2023 11:22:02 -0600</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-chipy-feb-2023/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;span id=&#34;before&#34;&gt;In February 2023, I gave&lt;/span&gt; a talk on PyScript at the &lt;a href=&#34;https://www.chipy.org/&#34;&gt;Chicago Python Users Group (Chipy)&lt;/a&gt;. The meeting was held in-person at Kitchen 17, and streamed/recorded at the time. And what a good time it was!&lt;/p&gt;
&lt;iframe class=&#34;p-2 mx-auto border-2 border-blue-200 rounded-xl&#34; width=&#34;672&#34; height=&#34;378&#34; src=&#34;https://www.youtube.com/embed/b8TpDutiduE&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p class=&#34;post-p&#34;&gt;Below are the slides for the talk, which you can also &lt;a href=&#34;https://docs.google.com/presentation/d/e/2PACX-1vQuK-NSFcriHhyUaVwIcvUvhO9UyVaU_SjGRq2h4YSNMri9J9sJGTgbjImtGDW_kNCJmE95K8RRcDqH/pub?start=true&amp;loop=true&amp;delayms=60000&#34;&gt;view at this link&lt;/a&gt;&lt;/p&gt;
&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vQuK-NSFcriHhyUaVwIcvUvhO9UyVaU_SjGRq2h4YSNMri9J9sJGTgbjImtGDW_kNCJmE95K8RRcDqH/embed?start=true&amp;loop=true&amp;delayms=60000&#34; frameborder=&#34;0&#34; width=&#34;960&#34; height=&#34;569&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34; style=&#34;display: block; margin: 0 auto&#34;&gt;&lt;/iframe&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Emscripten-Shell / Py-Xterm</title>
      <link>https://jeff.glass/post/xterm/</link>
      <pubDate>Thu, 19 Jan 2023 09:11:02 -0600</pubDate>
      
      <guid>https://jeff.glass/post/xterm/</guid>
      <description>&lt;script defer src = &#34;./build/pyscript.min.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;./build/pyscript.css&#34;&gt;
&lt;style&gt;
    code:not(.nocode):not(.language-python):not(.language-python3):not(.language-html):not(.language-js){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;py-config&gt;
    plugins = [&#39;build/pyxterm.min.js&#39;]
&lt;/py-config&gt;
&lt;div class=&#34;py-2 md:px-4&#34; &gt;
    &lt;py-xterm&gt;&lt;/py-xterm&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a (very rough) demo of a multilayered project called &lt;a href=&#34;https://github.com/JeffersGlass/emscripten-shell&#34;&gt;Emscripten Shell&lt;/a&gt; (&lt;span class=&#34;font-semibold&#34;&gt;EmShell&lt;/span&gt; for short)&lt;/p&gt;
&lt;img src=&#34;./logo_full.png&#34; alt=&#34;The EmShell Logo&#34; class=&#34;w-full mx-auto md:w-1/2&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Currently, the project encompasses three different levels of usage (which really should be three separate projects):
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;The &lt;span class=&#34;font-semibold&#34;&gt;Emscripten-Shell&lt;/span&gt; itself, which is written in TypeScript/JavaScript and can be used with any program that uses the &lt;a href=&#34;https://emscripten.org/docs/porting/files/file_systems_overview.html&#34;&gt;Emscripten Filesystem&lt;/a&gt; using the custom &lt;code&gt;&amp;lt;x-term&amp;gt;&lt;/code&gt; element. &lt;/li&gt;
        &lt;li&gt;&lt;span class=&#34;font-semibold&#34;&gt;py-xterm&lt;/span&gt;, an enhancement of the Emscripten Shell for &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide&lt;/a&gt; that adds additional Python-specific functionality, including the &lt;code&gt;python&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; commands, using the &lt;code&gt;&amp;lt;py-xterm&amp;gt;&lt;/code&gt; element&lt;/li&gt;
        &lt;li&gt;A &lt;span class=&#34;font-semibold&#34;&gt;plugin&lt;/span&gt; for &lt;a href=&#34;https://pyscript.net/&#34;&gt;PyScript&lt;/a&gt; that adds the &lt;code&gt;&amp;lt;py-xterm&amp;gt;&lt;/code&gt; element to a page using PyScript.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;div id=&#34;target&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;As my primary pursuit is PyScript, this has full pyscript integration. Trying typing &lt;code&gt;python&lt;/code&gt; and using &lt;code&gt;display(&#34;Hello world&#34;, target=&#34;target&#34;)&lt;/code&gt; in the included REPL - you&#39;ll see that the in-terminal REPL has full PyScript functionality.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This project is in such early days, I hesitate to even call it an Alpha version. The shell is really more a series of hard-coded commands - things like line history, piping and redirect, variable expansion, arrow keys... none of that&#39;s here. There&#39;s also some slight weirdness going on with the REPL and imports... not sure what&#39;s happening there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In the long term, I think it would be interesting to try compiling an existing POSIX shell like &lt;a href=&#34;https://github.com/emersion/mrsh&#34;&gt;mrsh&lt;/a&gt; with Emscripten and figuring out how to integrate that with other Emscripten-built programs.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;See the &lt;a href=&#34;https://github.com/JeffersGlass/emscripten-shell#usage-pyscript&#34;&gt;usage section on GitHub&lt;/a&gt; if you want to try out this early version.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Updates&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;span class=&#34;mr-2 font-semibold&#34;&gt;Jan 19, 2023&lt;/span&gt; Initial post, with &lt;code class=&#34;code&#34;&gt;cd&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;clear&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;help&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;ls&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;pip&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;pwd&lt;/code&gt;, and &lt;code class=&#34;code&#34;&gt;python&lt;/code&gt; commands&lt;/li&gt;
        &lt;li&gt;&lt;span class=&#34;mr-2 font-semibold&#34;&gt;Jan 19, 2023&lt;/span&gt; Added rudimentary &lt;code class=&#34;code&#34;&gt;touch&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;cat&lt;/code&gt; commands&lt;/li&gt;
        &lt;li&gt;&lt;span class=&#34;mr-2 font-semibold&#34;&gt;Jan 19, 2023&lt;/span&gt; Added &lt;code class=&#34;code&#34;&gt;-m&lt;/code&gt; option for &lt;code class=&#34;code&#34;&gt;python&lt;/code&gt; command&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>What&#39;s New in Pyscript 2022.12.1</title>
      <link>https://jeff.glass/post/whats-new-pyscript-2022-12-1/</link>
      <pubDate>Mon, 12 Dec 2022 10:12:48 -0500</pubDate>
      
      <guid>https://jeff.glass/post/whats-new-pyscript-2022-12-1/</guid>
      <description>&lt;style&gt;
    code:not(.nocode):not(.language-python):not(.language-python3):not(.language-html):not(.language-js){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
    .py-terminal{
        min-height: 10em;
        background-color: black;
        color: white;
    }
    .py-pop-up {
    text-align: center;
    width: 600px;
    }

    .py-pop-up p {
        margin: 5px;
    }

    .py-pop-up a {
        position: absolute;
        color: white;
        text-decoration: none;
        font-size: 200%;
        top: 3.5%;
        right: 5%;
    }

    /* Pop-up second layer end */
    .alert-banner {
        position: relative;
        padding: .5rem 1.5rem .5rem .5rem;
        margin: 0.5rem 2rem;
    }

    .alert-banner p {
        margin: 0;
    }

    .py-error{
        background-color: #FFE9E8;
        border: solid;
        border-color: #f0625f;
        color: #9d041c;
    }

    .py-warning {
        background-color: rgb(255, 244, 229);
        border: solid;
        border-color: #ffa016;
        color: #794700;
    }

    .alert-banner.py-error&gt;#alert-close-button {
        color: #9d041c;
    }

    .alert-banner.py-warning&gt;#alert-close-button {
        color: #794700
    }

    #alert-close-button {
    position: absolute;
    right: .5rem;
    top: .5rem;
    cursor: pointer;
    background: transparent;
    border: none;
}
&lt;/style&gt;


&lt;script&gt;    
    //Create Load PyScript buttons:
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        btn_locations = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(btn_locations).forEach(div =&gt; {
            div.classList.add(&#39;my-2&#39;, &#39;mx-8&#39;, &#39;border-blue-200&#39;, &#39;rounded-xl&#39;, &#39;flex&#39;, &#39;flex-row&#39;, &#39;justify-center&#39;, &#39;w-auto&#39;, &#34;py-1&#34;)
            let p = document.createElement(&#39;p&#39;)
            p.classList.add(&#39;my-auto&#39;, &#39;mr-4&#39;, &#39;italic&#39;)
            p.innerText = &#34;Want to run these examples live in your browser?&#34;
            div.appendChild(p)
            //button
            let btn = document.createElement(&#39;button&#39;)
            btn.innerText = &#34;Load PyScript&#34;
            btn.classList.add(&#39;load-pyscript-button&#39;)
            btn.onclick = loadPyScript
            div.appendChild(btn)
        });
    })
    function setupLoadButtons(){

    }
    function loadPyScript() {
        //load css
        css_link = document.createElement(&#34;link&#34;)
        css_link.rel = &#34;stylesheet&#34;
        css_link.type = &#34;text/css&#34;
        css_link.href = &#34;https://pyscript.net/releases/2022.12.1/pyscript.css&#34;
        //css_link.href = &#34;https://pyscript.net/unstable/pyscript.css&#34;
        //css_link.href = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.css&#34;
        //css_link.href = &#34;./pyscript.css&#34;
        document.getElementsByTagName(&#39;head&#39;)[0].appendChild(css_link)

        //load cs
        script_tag = document.createElement(&#39;script&#39;)
        script_tag.src = &#34;https://pyscript.net/releases/2022.12.1/pyscript.js&#34;
        //script_tag.src = &#34;https://pyscript.net/unstable/pyscript.js&#34;
        //script_tag.src = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.js&#34;
        //script_tag.src = &#34;./pyscript.js&#34;
        document.body.append(script_tag)        
    }
    document.addEventListener(&#39;pyscript_ready&#39;, () =&gt; {
        static = document.getElementsByClassName(&#39;static-example&#39;)
        live = document.getElementsByClassName(&#39;live-example&#39;)
        Array.from(static).forEach(div =&gt; {
            div.classList.add(&#39;hidden&#39;)
        })
        Array.from(live).forEach(div =&gt; {
            div.classList.remove(&#39;hidden&#39;)
        })
        load_buttons = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(load_buttons).forEach(elem =&gt; {
            elem.classList.add(&#39;hidden&#39;)
        })
    })
&lt;/script&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    loaded_event = js.Event.new(&#39;pyscript_ready&#39;)
    js.document.dispatchEvent(loaded_event)
&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;Another couple months have flown by, and PyScript has a shiny new release: &lt;a href=&#34;https://github.com/pyscript/pyscript/releases/tag/2022.12.1&#34; class=&#34;&#34;&gt;PyScript Version 2022.12.1 is now live!&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What follows is a walkthrough of the changes since 2022.09.1, as well as notes on what&#39;s changed in the development process, the community, and what&#39;s coming next.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What&#39;s &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; covered here in depth are some of the amazing things built with or adjacent to PyScript. In particular, if you haven&#39;t seen the &lt;a href=&#34;https://pyscript.net/tech-preview/micropython/&#34; target=&#34;_blank&#34;&gt;technical preview of MicroPython running in the Browser&lt;/a&gt; or &lt;a href=&#34;https://panel.holoviz.org/user_guide/Running_in_Webassembly.html&#34; target=&#34;_blank&#34;&gt;running Panel apps in the browser&lt;/a&gt; with &lt;code&gt;panel convert&lt;/code&gt;, you absolutely must. But those deserve their own writeups, and this post will focus on the PyScript release itself.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now is a great time to remind users that, for consistent long term bevahior, I recommend projects link to pinned releases like &lt;code class=&#34;code&#34;&gt;https://pyscript.net/releases/2022.12.1/pyscript.js&lt;/code&gt;, and not to &lt;code class=&#34;code&#34;&gt;/latest/pyscript.js&lt;/code&gt;. If your project links to &lt;code class=&#34;code&#34;&gt;/latest&lt;/code&gt;, all the improvements in the new release have almost certainly broke it. Pinned releases are the way to go, and there&#39;s talk of deprecating/removing &lt;code class=&#34;code&#34;&gt;/latest&lt;/code&gt; in the near future.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And for those who want to get &lt;span class=&#34;italic&#34;&gt;really&lt;/span&gt; in the weeds, I&#39;ve prepared &lt;a href=&#34;since2022091.html&#34; target=&#34;_blank&#34;&gt;a granular Change and Issue Log of every Issue and Pull Request since the last release&lt;/a&gt;. It was made possibly by a (slightly tweaked) version of Ned Batchelder&#39;s &lt;a href=&#34;https://github.com/nedbat/dinghy&#34; target=&#34;_blank&#34;&gt;Dinghy GitHub digest tool&lt;/a&gt; &lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;grid justify-center p-1 m-auto bg-gray-200&#34;&gt;
    &lt;span&gt;Jump To: &lt;span&gt;
    &lt;a href=&#34;#Display&#34;&gt;display()&lt;/a&gt; • 
    &lt;a href=&#34;#paths&#34;&gt;[[fetch]]&lt;/a&gt; • 
    &lt;a href=&#34;#PyScript&#34;&gt;PyScript&lt;/a&gt; • 
    &lt;a href=&#34;#infrastructure&#34;&gt;Infrastructure&lt;/a&gt; • 
    &lt;a href=&#34;#pyodide&#34;&gt;Pyodide&lt;/a&gt; • 
    &lt;a href=&#34;#Community&#34;&gt;Community&lt;/a&gt; • 
    &lt;a href=&#34;#Team&#34;&gt;The PyScript Team&lt;/a&gt; • 
    &lt;a href=&#34;#Next&#34;&gt;What&#39;s Next?&lt;/a&gt;
&lt;/div&gt;
&lt;div id=&#34;toc-auto&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;Display&#34;&gt;&lt;code class=&#34;text-green-600&#34;&gt;display()&lt;/code&gt;, &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;, and &lt;code&gt;stdout&lt;/code&gt;&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;display-section&#34;&gt;&lt;code&gt;display()&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s one change to the PyScript API that&#39;s so big, it&#39;s getting its own whole section! And it has to do with how PyScript outputs to the browser window. &lt;span class=&#34;font-bold&#34;&gt;&lt;code&gt;print()&lt;/code&gt; no longer outputs to arbitrary places in the browser window!&lt;/span&gt; The new function to use is called &lt;span class=&#34;font-bold&#34;&gt;&lt;code&gt;display()&lt;/code&gt;&lt;/span&gt;. And using &lt;code&gt;print()&lt;/code&gt; has some new and interesting behaviors as well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In &#34;desktop flavored&#34; Python, &lt;code&gt;print()&lt;/code&gt; takes the &lt;code&gt;*objects&lt;/code&gt; it&#39;s given, converts them to strings &lt;a href=&#34;https://docs.python.org/3/library/functions.html#print&#34; target=&#34;_blank&#34;&gt;&#34;like &lt;code&gt;str()&lt;/code&gt; does&#34;&lt;/a&gt;, and sends the results to &lt;code class=&#34;code&#34;&gt;sys.stdout&lt;/code&gt;. &lt;code&gt;sys.stdout&lt;/code&gt; is a File-like object with methods like &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;readline()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, and so on. It represents a continuous stream of text, plus the idea that various characters break up the stream into &#34;lines.&#34; And that&#39;s about it. The simplicity of this default output stream is its power - a very similar structure can be used to represent a stream of text into a file, over a network, a buffer, etc.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Prior to 2022.12.1, Python&#39;s &lt;code&gt;sys.stdout&lt;/code&gt; was routed &lt;span class=&#34;italic&#34;&gt;to the DOM&lt;/span&gt; via fairly complicated &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/beb3aa157419ecb53863c76674069c78cb48dfe1/pyscriptjs/src/python/pyscript.py#L368-L419&#34; target=&#34;_blank&#34;&gt;wrapper setup&lt;/a&gt;. However, a browser window has so many more dimensions of possibility for where we might want to place content compared to a terminal. Thus, the metaphor of &#34;use &lt;code&gt;print()&lt;/code&gt; and we&#39;ll just send some version of that stream to a location on the page&#34; wasn&#39;t as useful as it could be.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As of 2022.12.1, &lt;span class=&#34;font-bold&#34;&gt;&lt;code&gt;print()&lt;/code&gt; (i.e. stdout) goes to the developer console; &lt;code&gt;display()&lt;/code&gt; is for outputting to the browser window&lt;/span&gt; (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/749&#34;&gt;#749&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;py-2 pl-2 m-0 ml-4 bg-green-100&#34;&gt;
    &lt;h4 class=&#34;text-xl&#34;&gt;&lt;code class=&#34;nocode&#34; &gt;display(*values, target=None, append=True)&lt;/code&gt;&lt;/h4&gt;
    &lt;div class=&#34;ml-4&#34;&gt;
        &lt;p class=&#34;pt-1 text-justify&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;*values&lt;/span&gt; (&lt;code&gt;list&lt;/code&gt;) - the list of objects to be displayed. Can be any of the following MIME types:: &#34;text/plain&#34;, &#34;text/html&#34;, &#34;image/png&#34;, &#34;image/jpeg&#34;, &#34;image/svg+xml&#34;, &#34;application/json&#34; or &#34;application/javascript&#34;&lt;/p&gt;
        &lt;p class=&#34;pt-1 mt-2 text-justify&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;target&lt;/span&gt; (&lt;code&gt;str&lt;/code&gt;)- the ID of the html tag to output to. If &lt;code&gt;none&lt;/code&gt;, output to the current &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
        &lt;p class=&#34;pt-1 mt-2 text-justify&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;append&lt;/span&gt; (&lt;code&gt;boolean&lt;/code&gt;) if the output is going to be appended or not to the `target`ed element. It creates a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag if &lt;code&gt;True&lt;/code&gt; and a &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag with a random ID if &lt;code&gt;False&lt;/code&gt;&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;If &lt;code&gt;display()&lt;/code&gt; is given a &lt;code&gt;target&lt;/code&gt; argument, it will attempt to send its *values to the HTML element on the page with that ID. If not, it will use the currently executing tag (&amp;lt;py-script&amp;gt; or &amp;lt;py-repl&amp;gt;) as that destination. Either way, the content is placed either in a new &amp;lt;div&amp;gt; as a sibling of the currently executing tag, or replace the content at the tag location, depending on whether `append` is true or false.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So for example, in place of the usual &lt;code&gt;print(&#34;Hello, world&#34;)&lt;/code&gt;, one could do one of these (they have slightly different behaviors - try them out!):&lt;/p&gt;
&lt;div class=&#34;p-2 mx-4 my-2&#34; style=&#34;background-color: #f0f3f3&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;)

display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;)

display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello world&amp;#34;&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;target-div&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;hidden live-example&#34;&gt;
    &lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-2&#34;&gt;
        &lt;div&gt;
            &lt;py-repl&gt;display(&#34;Hello World&#34;)&lt;/py-repl&gt;
            &lt;py-repl&gt;
                display(&#34;Hello&#34;)
                display(&#34;World&#34;)
            &lt;/py-repl&gt;
            &lt;py-repl&gt;display(&#34;Hello&#34;, &#34;World&#34;, append=False)&lt;/py-repl&gt;
            &lt;py-repl&gt;display(&#34;Hello world&#34;, target=&#34;target-div&#34;)&lt;/py-repl&gt;
        &lt;/div&gt;
        &lt;div class=&#34;pt-1 pl-2 bg-gray-200&#34;&gt;
            &lt;p class=&#34;text-sm text-gray-700&#34;&gt;#target-div&lt;/p&gt;
            &lt;div id=&#34;target-div&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;display()&lt;/code&gt; escapes any HTML given to it as an input string, so &lt;code&gt;display(&#34;&amp;lt;br&amp;gt;&#34;)&lt;/code&gt; prints the literal characters &lt;code class=&#34;code&#34;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; to the screen, instead of creating a newline. For non-string inputs, &lt;code&gt;display(some_obj)&lt;/code&gt; calls &lt;code&gt;repr(some_obj)&lt;/code&gt; and escapes that. If you &lt;span class=&#34;italic&#34;&gt;do&lt;/span&gt; want to inject HTML into your page, a new object is to use the new &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/515858f3134bf031497f0420e8a0e7fbc4c32be0/pyscriptjs/src/python/pyscript.py#L49&#34;&gt;HTML class&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/915&#34;&gt;#915&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;&#34;&gt;
&lt;p class=&#34;code-title&#34;&gt;HTML Class&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;You&amp;#39;ll see the angle brackets and everything here&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;)
display(HTML(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;But this is an honest-to-goodness bold paragraph!&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;hidden my-3 live-example&#34;&gt;
    &lt;py-repl&gt;
        display(&#34;&lt;p&gt;&lt;b&gt;You&#39;ll see the angle brackets and everything here&lt;/b&gt;&lt;/p&gt;&#34;)
        display(HTML(&#34;&lt;p&gt;&lt;b&gt;But this is an honest-to-goodness bold paragraph!&lt;/b&gt;&lt;/p&gt;&#34;))
    &lt;/py-repl&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;As part of this reshaping of output, the &lt;span class=&#34;font-semibold&#34;&gt;&lt;code&gt;&amp;lt;py-script output=&#34;...&#34;&amp;gt;&lt;/code&gt; attribute has been deprecated...&lt;/span&gt; at least for now. This means that if you want the stdout of your code to go to a specific place in the browser window, you&#39;ll need to handle that on the Python side. One possible way would be to use &lt;code&gt;&lt;a href=&#34;https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout&#34; target=&#34;_blank&#34;&gt;contextlib.redirect_stdout&lt;/a&gt;&lt;/code&gt;, but there are many ways to handle that behavior. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/981&#34;&gt;#981&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, it&#39;s worth nothing that the behavior of placing content based on the currently executing tag doesn&#39;t necessarily work for coroutines in async contexts. In most situations, you&#39;ll see a helpful warning banner will let you know:&lt;/p&gt;
&lt;p class=&#34;flex justify-center post-p&#34;&gt;&lt;code class=&#34;px-2 text-red-800 border-2 border-red-800 nocode&#34;&gt;Implicit target not allowed here. Please use display(..., target=...)&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But due to some tricky edge cases with how warnings percolate up from coroutines, things currently may just fail silently.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;pyterminal&#34;&gt;&lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;So if &lt;code&gt;display()&lt;/code&gt; is for writing to the screen, what does &lt;code&gt;print()&lt;/code&gt; do? Well, a couple of things, but most visibly, it writes to the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;mx-0 static-example md:mx-4&#34;&gt;
&lt;p class=&#34;code-title&#34;&gt;hello_world_terminal.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;I can count to &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;px-4 py-2 mt-2 py-terminal&#34; &gt;Hello, world!&lt;br&gt;I can count to 0&lt;br&gt;I can count to 1&lt;br&gt;I can count to 2&lt;br&gt;I can count to 3&lt;br&gt;I can count to 4&lt;br&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;div class=&#34;hidden live-example&#34;&gt;
    &lt;py-script&gt;
        print(&#34;Hello, world!&#34;)
        for i in range(3):
            print(f&#34;I can count to {i}&#34;)
    &lt;/py-script&gt;
    &lt;div class=&#34;w-full md:w-5/6 md:m-auto gap-y-4&#34;&gt;
        &lt;py-repl&gt;
        print(&#34;Hello, world!&#34;)
        for i in range(3):
            print(f&#34;I can count to {i}&#34;)
        &lt;/py-repl&gt;
        &lt;div class=&#34;px-4 py-2 bg-black&#34;&gt;
            &lt;py-terminal&gt;&lt;/py-terminal&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; achieves a couple things:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;It makes sure that output to stdout goes &lt;span class=&#34;italic&#34;&gt;somewhere&lt;/span&gt; visible; if you copy and paste Python code from your desktop environment to the browser, you can see at least something happening&lt;/li&gt;
    &lt;li&gt;If you want to use a terminal-like output for your code, this is a pre-made solution&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;The behavior and placement of the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; is configurable via a new &lt;a href=&#34;https://docs.pyscript.net/latest/reference/plugins/py-terminal.html&#34;&gt;terminal setting&lt;/a&gt; in &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;. The options are:&lt;/p&gt;
&lt;table class=&#34;w-full md:w-3/4 md:m-auto&#34;&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;value&lt;/th&gt;
            &lt;th&gt;description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr class=&#34;divide-x-2 divide-gray-400&#34;&gt;
            &lt;td class=&#34;pl-2 pr-4&#34;&gt;&lt;code&gt;&amp;quot;auto&amp;quot;&lt;/code&gt;&lt;/td&gt;
            &lt;td class=&#34;pl-4 pr-2&#34;&gt;(default) Automatically add a &lt;code&gt;&amp;lt;py-terminal auto&amp;gt;&lt;/code&gt;, to the page. The terminal is initially hidden and automatically shown as soon as something writes to &lt;code&gt;stdout&lt;/code&gt; and/or &lt;code&gt;stderr&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&#34;divide-x-2 divide-gray-400&#34;&gt;
            &lt;td class=&#34;pl-2 pr-4&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
            &lt;td class=&#34;pl-4 pr-2&#34;&gt;Automatically add a visible &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; to the page when PyScript loads. It will be added to the end of the &amp;lt;body&amp;lt; unless there is a &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; tag on the page.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&#34;divide-x-2 divide-gray-400&#34;&gt;
            &lt;td class=&#34;pl-2 pr-4&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
            &lt;td class=&#34;pl-4 pr-2&#34;&gt;Don&amp;#39;t add &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; to the page&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&#34;post-p&#34;&gt;So, if you want to stick the terminal somewhere specific, simply include &lt;code&gt;&amp;lt;py-terminal&amp;gt;&amp;lt;/py-terminal&amp;gt;&lt;/code&gt; on your page. You can even include several py-terminals - output to &lt;code&gt;stdout&lt;/code&gt; will be sent to all of them.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;stdoutconsole&#34;&gt;stdout in the Developer Console&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;In addition to going to &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;, writes to &lt;code&gt;stdout&lt;/code&gt; also go to the &lt;a href=&#34;https://support.monday.com/hc/en-us/articles/360002197259-How-to-open-the-developer-console&#34;&gt;Developer Console&lt;/a&gt;. This is the closest analog in the browser to a &#34;dumb terminal&#34;, and so it makes a certain amount of sense for &lt;code&gt;stdout&lt;/code&gt; to be routed there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are certain small differences, since of course the dev console &lt;span class=&#34;italic&#34;&gt;isn&#39;t&lt;/span&gt; a terminal. For instance, we discovered just the other day that &lt;code&gt;console.log()&lt;/code&gt; (which is used to write to the dev console) &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/472#issuecomment-1281228942&#34;&gt;doesn&#39;t output unless it receives a newline&lt;/a&gt;. So something like &lt;code class=&#34;code&#34;&gt;print(&#34;Hello world&#34;, end = &#34;&#34;)&lt;/code&gt; won&#39;t show up until you log something else with a newline in it! But for simple debugging purposes, or for output where (even temporarily) including a &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; on the page would be untenable, this is a great addition.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;remarks&#34;&gt;Remarks&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;If I were a betting man, I&#39;d hedge that the API for &lt;code&gt;display()&lt;/code&gt; is likely to continue to change and evolve. It&#39;s a brand-new and breaking feature, and I suspect its semantics are going to continue to get tweaked. If you find more issues or inconsistencies, be sure to &lt;a href=&#34;https://github.com/pyscript/pyscript/issues&#34;&gt;raise an issue on GitHub&lt;/a&gt; or come tell us about it &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;on the PyScript Discord&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;paths&#34;&gt;Fetching Files with &lt;code&gt;&amp;lt;py-config&amp;gt; [[fetch]]&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, all files listed in &lt;code&gt;&amp;lt;py-config&amp;gt; paths:&lt;/code&gt; were &lt;code&gt;fetch()&lt;/code&gt;&#39;d from the listed URLs and dropped into the embedded filesystem in the same folder as the running Python Script. Which is to say, pointing a path to the relative URL &lt;code class=&#34;code&#34;&gt;&#39;data/files/Feb-24/info.txt&#39;&lt;/code&gt; would make that file available via &lt;code class=&#34;code&#34;&gt;with open(&#39;info.txt&#39;)... &lt;/code&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;From PyScript 2022.12.1, &lt;code&gt;&amp;lt;py-config&amp;gt; paths:...&lt;/code&gt; has been replaced by &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; [[fetch]] ...&lt;/span&gt;, and it&#39;s much more powerful that its predecessor.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The new options allow the user to fetch multiple files ina  way that preserves their URL/directory structure. The parameters are all bundled in a &#34;fetch configuration&#34; table under the &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag; you can have multiple fetch configurations in a single py-config.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The options for a fetch config are:&lt;/p&gt;
&lt;table class=&#34;w-full m-2 md:w-3/4 md:m-auto&#34;&gt;
    &lt;tr class=&#34;font-bold&#34;&gt;
        &lt;td&gt;Value&lt;/td&gt;
        &lt;td&gt;Type&lt;/td&gt;
        &lt;td&gt;Description&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;`from`&lt;/td&gt;
        &lt;td&gt;string&lt;/td&gt;
        &lt;td&gt;Base URL for the resource to be fetched.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;`to_folder`&lt;/td&gt;
        &lt;td&gt;string&lt;/td&gt;
        &lt;td&gt;Name of the folder to create in the filesystem.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;`files`&lt;/td&gt;
        &lt;td&gt;List of string&lt;/td&gt;
        &lt;td&gt;List of files to be downloaded. Cannot be combined with &#34;to_file&#34;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;`to_file`&lt;/td&gt;
        &lt;td&gt;string&lt;/td&gt;
        &lt;td&gt;Name of the target to create in the filesystem. Cannot be combined with &#34;files&#34;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p class=&#34;post-p&#34;&gt;Breaking that down a bit, here&#39;s how I personally think through which parameters to use:&lt;/p&gt;
&lt;ul class=&#34;py-4 pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;&lt;code&gt;files&lt;/code&gt; vs &lt;code&gt;to_file&lt;/code&gt;:&lt;/li&gt;
    &lt;ul class=&#34;py-2 pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li&gt;If you want the files in the Emscripten file system to have the same name as on the server, use &lt;code&gt;files&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;If you want the files in the Emscripten file system to have a &lt;span class=&#34;italic&#34;&gt;different&lt;/span&gt; name than on the server, or if the URL has no file name (e.g. an API endpoint), use &lt;code&gt;to_file&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;If &lt;code&gt;from&lt;/code&gt; is specified, it will be used as the prefix for URL&#39;s to down files from (can be absolute or relative). Leave unspecified to reference the same relative URL path as the current document.
    &lt;li&gt;If &lt;code&gt;to_folder&lt;/code&gt; is specified, files will be placed in that folder in the Emscripten file system; otherwise, they&#39;ll be placed in the same folder Python scripts are executed from&lt;/li&gt;
    &lt;/li&gt;

&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;The pseudo-code for what PyScript will fetch is something like this:&lt;/p&gt;
&lt;div class=&#34;px-8 overflow-x-scroll bg-codeblock&#34;&gt;
&lt;pre&gt;
&lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; both &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;files&lt;/span&gt; and &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;to_file&lt;/span&gt; are specified: Error

&lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; is not specified, &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; = &#34;&#34;&lt;span class=&#34;text-green-700&#34;&gt; #defaults to relative URLs&lt;/span&gt;
&lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;to_folder&lt;/span&gt; is not specified, &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;to_folder&lt;/span&gt; = &#34;.&#34; &lt;span class=&#34;text-green-700&#34;&gt;#defaults to the working current directory, where Python Scripts are run&lt;/span&gt;

&lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;files&lt;/span&gt; is specified:
    for each &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;file&lt;/span&gt; in &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;files&lt;/span&gt;:
        &lt;span class=&#34;text-green-700&#34;&gt;#These concatenations are done in a smart way to try to avoid dangling/missing &#34;/&#34;s&lt;/span&gt;
        &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;source_URL&lt;/span&gt; = &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; + &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;file&lt;/span&gt;
        &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;destination&lt;/span&gt; = &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;to_folder&lt;/span&gt; + &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;file&lt;/span&gt;
        download object from the source_url to destination in the local file system

&lt;span class=&#34;font-semibold text-red-700&#34;&gt;else:&lt;/span&gt; &lt;span class=&#34;text-green-700&#34;&gt;#&#34;files&#34; not specified:&lt;/span&gt;
    &lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; to_file is specified:
        download object from url &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; to &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;(to_folder + to_file)&lt;/span&gt;
    &lt;span class=&#34;font-semibold text-red-700&#34;&gt;else if&lt;/span&gt; &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; ends in a file-name: &lt;span class=&#34;text-green-700&#34;&gt;#i.e. the part after the last &#34;/&#34;&lt;/span&gt;
        download object from url &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; to &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;(to_folder + (&#39;filename&#39; at end of from))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s look at some recipes for using these new attributes to fetch resources from the web and download them to the Emscripten local file system to Python can use them.&lt;/p&gt;
&lt;div class=&#34;p-2 border-2 border-blue-200 rounded-xl&#34; id=&#34;fetch-container&#34;&gt;
    &lt;div class=&#34;overflow-y-scroll&#34; style=&#34;height: 37rem;&#34; id=&#34;fetch-examples&#34;&gt;
        &lt;p&gt;For the examples where we&#39;re fetching our own files and modules, we&#39;ll assume our site has the following simple structure.&lt;/p&gt;
        &lt;pre class=&#34;p-4 bg-gray-200&#34;&gt;
        content/
        ├─ &lt;span class=&#34;font-bold&#34;&gt;index.html &lt;&lt;&lt; File with &amp;lt;py-config&amp;gt;&lt;/span&gt;
        ├─ info.txt
        ├─ data/
        │  ├─ sensordata.csv
        ├─ packages/
        │  ├─ my_package/
        │  │  ├─ __init__.py
        │  │  ├─ helloworld/
        │  │  │  ├─ __init__.py/
        │  │  │  ├─ greetings.py/
        &lt;/pre&gt;
        &lt;div class=&#34;grid grid-cols-1 mt-4 xl:grid-cols-2 gap-x-3 gap-y-4&#34;&gt;
        
        &lt;div class=&#34;w-full&#34;&gt;
        &lt;p class=&#34;code-title&#34;&gt;Single File&lt;/p&gt;
        &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;info.txt&amp;#39;]
    # URL defaults to &amp;#39;relative to this folder&amp;#39;
    # Destination defaults to &amp;#39;adjacent to the Python files we run&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    with open(&amp;#39;info.txt&amp;#39;, &amp;#39;r&amp;#39;) as fp:
        display(fp.read())
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    import os
    import asyncio
    from pyodide.ffi import to_js
    
    async def load_to_local(filepath, fetchpath):
        await js.pyscript.runtime.loadFromFile(filepath, fetchpath)

    asyncio.ensure_future(load_to_local(&#39;info.txt&#39;, &#39;info.txt&#39;))
&lt;/py-script&gt;
        &lt;/div&gt;
        &lt;div class=&#34;hidden mt-2 mb-6 live-example&#34;&gt;
            &lt;py-repl&gt;
            with open(&#39;info.txt&#39;, &#39;r&#39;) as fp:
                text = fp.read()
            
            text
            &lt;/py-repl&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;w-full&#34;&gt;
            &lt;p class=&#34;code-title&#34;&gt;Single File w/ Renaming&lt;/p&gt;
            &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    from = &amp;#39;info.txt&amp;#39;
    to_file = &amp;#39;info_loaded_from_web.txt&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    with open(&amp;#39;info_loaded_from_web.txt&amp;#39;, &amp;#39;r&amp;#39;) as fp:
        print(fp.read())
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;info_loaded_from_web.txt&#39;, &#39;info.txt&#39;))
&lt;/py-script&gt;
            &lt;/div&gt;
            &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                &lt;py-repl&gt;
                with open(&#39;info_loaded_from_web.txt&#39;, &#39;r&#39;) as fp:
                    text = fp.read()
                
                text
                &lt;/py-repl&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        
        &lt;div class=&#34;w-full&#34;&gt;
        &lt;p class=&#34;code-title&#34;&gt;To Another Local Folder&lt;/p&gt;
        &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;info.txt&amp;#39;]
    to_folder = &amp;#39;infofiles/loaded_info&amp;#39;
    # trailing slash would also be acceptable: &amp;#39;infofiles/loaded_info/&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    with open(&amp;#34;infofiles/loaded_info/info.txt&amp;#34;, &amp;#34;r&amp;#34;) as fp:
        print(fp.read())
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;infofiles/loaded_info/info.txt&#39;, &#39;info.txt&#39;))
&lt;/py-script&gt;
        &lt;/div&gt;
        &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
            &lt;py-repl&gt;
            with open(&#39;infofiles/loaded_info/info.txt&#39;, &#39;r&#39;) as fp:
                text = fp.read()
            
            text
            &lt;/py-repl&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;w-full&#34;&gt;
            &lt;p class=&#34;code-title&#34;&gt;From Another Folder to Current Working Directory&lt;/p&gt;
            &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;sensordata.csv&amp;#39;]
    from = &amp;#39;data/&amp;#39;
    # fetch file from URL &amp;#39;data/sensordata.csv&amp;#39; to local file &amp;#39;./sensordata.csv&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    import csv
    with open(&amp;#34;./sensordata.csv&amp;#34;, &amp;#34;r&amp;#34;) as csvfile:
        datareader = csv.reader(csvfile)
        for row in datareader:
            display(row)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;sensordata.csv&#39;, &#39;data/sensordata.csv&#39;))
&lt;/py-script&gt;
            &lt;/div&gt;
            &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                &lt;py-repl&gt;
                    import csv
                    with open(&#34;./sensordata.csv&#34;, &#34;r&#34;) as csvfile:
                        datareader = csv.reader(csvfile)
                        for row in datareader:
                            display(row)
                &lt;/py-repl&gt;
                &lt;/div&gt;
            &lt;/div&gt;

            &lt;div class=&#34;w-full&#34;&gt;
                &lt;p class=&#34;code-title&#34;&gt;From a Folder, to A Folder&lt;/p&gt;
                &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    # With no &amp;#39;files&amp;#39; or &amp;#39;to_file&amp;#39; specified, use the &amp;#34;file&amp;#34; at the end of &amp;#34;from&amp;#34;
    # This ends up at &amp;#39;./local_data/sensordata.csv&amp;#39;
    from = &amp;#39;./data/sensordata.csv&amp;#39;
    to_folder = &amp;#39;./local_data&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
import csv
with open(&amp;#34;./local_data/sensordata.csv&amp;#34;, &amp;#34;r&amp;#34;) as csvfile:
    datareader = csv.reader(csvfile)
    for row in datareader:
        display(row)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;./local_data/sensordata.csv&#39;, &#39;data/sensordata.csv&#39;))
&lt;/py-script&gt;
                &lt;/div&gt;
                &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                    &lt;py-repl&gt;
                        import csv
                        with open(&#34;./local_data/sensordata.csv&#34;, &#34;r&#34;) as csvfile:
                            datareader = csv.reader(csvfile)
                            for row in datareader:
                                display(row)
                    &lt;/py-repl&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
        
            &lt;div class=&#34;w-full&#34;&gt;
                &lt;p class=&#34;code-title&#34;&gt;Multiple Files, Preserving Folder Structure&lt;/p&gt;
                &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;__init__.py&amp;#39;, &amp;#39;helloworld/greetings.py&amp;#39;, &amp;#39;helloworld/__init__.py&amp;#39;]
    from = &amp;#39;../packages/my_package/&amp;#39;
    to_folder = &amp;#39;./my_package&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
from my_package.helloworld.greetings import say_hi
print(say_hi())
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.gather(*[
        load_to_local(&#39;./my_package/__init__.py&#39;, &#34;packages/my_package/__init__.py&#34;),
        load_to_local(&#39;./my_package/helloworld/__init__.py&#39;, &#39;packages/my_package/helloworld/__init__.py&#39;),
        load_to_local(&#39;./my_package/helloworld/greetings.py&#39;, &#39;packages/my_package/helloworld/greetings.py&#39;)
    ])
&lt;/py-script&gt;
                &lt;/div&gt;
                &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                    &lt;py-repl&gt;
                        from my_package.helloworld.greetings import say_hi
                        display(say_hi())
                    &lt;/py-repl&gt;
                    &lt;/div&gt;
                &lt;/div&gt;

                &lt;div class=&#34;w-full&#34;&gt;
                    &lt;p class=&#34;code-title&#34;&gt;Multiple Fetch Configs&lt;/p&gt;
                    &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;info.txt&amp;#39;]
    
    [[fetch]]
    from = &amp;#39;data/&amp;#39;
    files = [&amp;#39;sensordata.csv&amp;#39;]
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
with open(&amp;#39;info.txt&amp;#39;, &amp;#39;rb&amp;#39;) as fp:
    info_length = len(fp.read())

with open(&amp;#39;sensordata.csv&amp;#39;, &amp;#39;rb&amp;#39;) as fp:
    data_length = len(fp.read())

display(f&amp;#34;info.txt is {info_length} bytes and data.csv is {data_length} bytes&amp;#34;)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;py-script class=&#34;hidden&#34;&gt;
        import asyncio
        asyncio.ensure_future(load_to_local(&#39;./info.txt&#39;, &#39;./info.txt&#39;))
        asyncio.ensure_future(load_to_local(&#39;./sensordata.csv&#39;, &#39;./data/sensordata.csv&#39;))
    &lt;/py-script&gt;
                    &lt;/div&gt;
                    &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                        &lt;py-repl&gt;
                            with open(&#39;info.txt&#39;, &#39;rb&#39;) as fp:
                                info_length = len(fp.read())
                            
                            with open(&#39;sensordata.csv&#39;, &#39;rb&#39;) as fp:
                                data_length = len(fp.read())

                            display(f&#34;info.txt is {info_length} bytes and data.csv is {data_length} bytes&#34;)
                        &lt;/py-repl&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
        
            &lt;div class=&#34;w-full&#34;&gt;
                &lt;p class=&#34;code-title&#34;&gt;From an API Endpoint&lt;/p&gt;
                &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    from = &amp;#39;https://catfact.ninja/fact&amp;#39;
    to_file = &amp;#39;./cat_fact.json&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
import json
with open(&amp;#34;cat_fact.json&amp;#34;, &amp;#34;r&amp;#34;) as fp:
    data = json.load(fp)
display(data[&amp;#39;fact&amp;#39;])
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;./cat_fact.json&#39;, &#39;https://catfact.ninja/fact&#39;))
&lt;/py-script&gt;
                &lt;/div&gt;
                &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                    &lt;py-repl&gt;
                        import json
                        with open(&#34;cat_fact.json&#34;, &#34;r&#34;) as fp:
                            data = json.load(fp)
                        display(data[&#39;fact&#39;])
                    &lt;/py-repl&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
        
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&#34;expand-fetch-examples&#34; class=&#34;flex justify-center my-1&#34;&gt;
        &lt;p class=&#34;p-1 m-1 text-lg text-center text-gray-500 border-2 border-gray-200 rounded-lg&#34; id=&#34;show-fetch-examples&#34; onclick=&#34;expandFetchExamples()&#34; style=&#34;cursor: pointer&#34;&gt;--- Expand Examples ---&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;script&gt;
    function expandFetchExamples() {
        //expand examples
        let examples_container = document.getElementById(&#34;fetch-examples&#34;)
        examples_container.style.removeProperty(&#39;height&#39;)
        examples_container.classList.remove(&#39;overflow-y-scroll&#39;)

        //remove border
        document.getElementById(&#39;fetch-container&#39;).classList.remove(&#39;border-2&#39;)

        //Hide button
        document.getElementById(&#34;expand-fetch-examples&#34;).classList.add(&#39;hidden&#39;)
    }
&lt;/script&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;PyScript&#34;&gt;PyScript&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34; id=&#34;reshaping-api&#34;&gt;Reshaping the Python API&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, it wasn&#39;t possible to use any of PyScript&#39;s python API in resources outside of &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tags. Now, &lt;code&gt;import pyscript&lt;/code&gt; just works! But there&#39;s so much more going on than that.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(Almost) all of the global variables which PyScript previously made available by default have been moved into the &lt;code&gt;pyscript&lt;/code&gt; module, and should now be imported to be used. The remaining global objects are: the &lt;code class=&#34;font-semibold&#34;&gt;js&lt;/code&gt; module, the &lt;code class=&#34;font-semibold&#34;&gt;pyscript&lt;/code&gt; module, the &lt;code class=&#34;font-semibold&#34;&gt;Element&lt;/code&gt; class (&lt;code&gt;pyscript.Element&lt;/code&gt;), the &lt;code class=&#34;font-semibold&#34;&gt;display()&lt;/code&gt; function (&lt;code&gt;pyscript.display()&lt;/code&gt;), and the &lt;code class=&#34;font-semibold&#34;&gt;HTML&lt;/code&gt; class (&lt;code&gt;pyscript.HTML&lt;/code&gt;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The following global objects in PyScript 2022.09.1 should no longer be accessed as global objects, but can be imported as normal&lt;/p&gt;
&lt;ul class=&#34;py-2 pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;stdlib modules: &lt;code&gt;asyncio&lt;/code&gt;, &lt;code&gt;base64&lt;/code&gt;, &lt;code&gt;io&lt;/code&gt;, &lt;code&gt;sys&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;pyodide&lt;/code&gt;, &lt;code&gt;micropip&lt;/code&gt;. Also &lt;code&gt;textwrap.dedent&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;PyScript Objects: &lt;code&gt;PyScript&lt;/code&gt; (the class), &lt;code&gt;PyItemTemplate&lt;/code&gt;, &lt;code&gt;PyListTemplate&lt;/code&gt;, &lt;code&gt;PyWidgetTheme&lt;/code&gt;, &lt;code&gt;add_classes&lt;/code&gt;, &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Private PyScript Names (&lt;span class=&#34;italic&#34;&gt;members of the pyscript module, were global, but should be treated as private&lt;/span&gt;): &lt;code&gt;eval_formatter&lt;/code&gt;, &lt;code&gt;format_mime&lt;/code&gt;, &lt;code&gt;identity&lt;/code&gt;, &lt;code&gt;render_image&lt;/code&gt;, &lt;code&gt;MIME_RENDERERS&lt;/code&gt;, &lt;code&gt;MIME_METHODS&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;From js module: &lt;code&gt;document&lt;/code&gt;, &lt;code&gt;console&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;For example, check out the difference between the following two pieces of code from the previous and current versions:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 my-4 lg:grid-cols-2 gap-y-4 lg:gap-x-4&#34;&gt;
    &lt;div&gt;
        &lt;p class=&#34;code-title&#34;&gt;2022.09.1 Example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;my_coro&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(my_coro())

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;foo&lt;/span&gt;():
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(dedent(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;     FOO!&amp;#34;&lt;/span&gt;))

    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mydiv&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListner(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy(foo))
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;p class=&#34;code-title&#34;&gt;2022.12.1 Equivalent&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; loop
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console, document
&lt;/span&gt;
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;my_coro&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(my_coro())

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;foo&lt;/span&gt;():
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(dedent(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;     FOO!&amp;#34;&lt;/span&gt;))

    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mydiv&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListner(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy(foo))
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Users who want to make use of PyScript-specific functions in their own modules can now use &lt;code&gt;import pyscript&lt;/code&gt; to access the objects in &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/pyscriptjs/src/python/pyscript.py&#34;&gt;the pyscript module&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Not to leave users in a lunch with this large API change, all of the global objects where were previosusly prevent are &lt;span class=&#34;italic&#34;&gt;still accessible but deprecated&lt;/span&gt;. Accessing them directly will pop up a handy error message like:&lt;/p&gt;
&lt;div class=&#34;alert-banner py-warning md:mx-4&#34;&gt;Direct usage of &lt;code class=&#34;nocode&#34;&gt;console&lt;/code&gt; is deprecated. Please use &lt;code class=&#34;nocode&#34;&gt;js.console&lt;/code&gt; instead.&lt;button id=&#34;alert-close-button&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 16 16&#34; fill=&#34;currentColor&#34; width=&#34;12px&#34;&gt;&lt;path d=&#34;M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;For context: prior to this version, all of the Python side of PyScript - the hooks which made stdout work, &lt;code&gt;Element.write()&lt;/code&gt;, the PyScript class - was included into user code in a clever but inintuitive way. The methodology equivalent to loading the contents &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/pyscriptjs/src/python/pyscript.py&#34;&gt;pyscript.py&lt;/a&gt; as a string and calling &lt;code&gt;exec(contents)&lt;/code&gt; on that string. This worked, but made it difficult for users to use these PyScript functions in their own modules, and limited how the module could be used for type-checking. Things are better now!&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;plugins&#34;&gt;Plugins!&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As was so nicely phrased on the &lt;a href=&#34;#community&#34;&gt;October Community Call&lt;/a&gt;, PyScript is aiming to be a &#34;platform&#34;, not a &#34;framework&#34;. That is, it should provide lots of hooks, triggers, and signals to allow users to &lt;span class=&#34;italic&#34;&gt;expand&lt;/span&gt; the usability of PyScript, rather than forcing users to do things &#34;The PyScript Way.&#34;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The idea of using &#34;plugins&#34; to do this has been floating around for awhile now - some straightforward way of allowing users to cause their own code to be run at certain points in the PyScript lifecycle. But within that &#34;simple&#34; idea are many questions - should this be JavaScript or Python Code (or both/either)? Should the triggering mechanism be callback-based, event-based, or some other way? How much of the core functionality of PyScript should happen every time, or should we simply define a lifecycle and move &lt;span class=&#34;italic&#34;&gt;everything&lt;/span&gt; to a Plugin?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript 2022.12.1 gets the ball rolling on this by &lt;span class=&#34;font-semibold&#34;&gt;allowing users to author plugins in Python and use them to extend PyScript&lt;/span&gt;. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/961&#34;&gt;#961&lt;/a&gt;) This behavior has only be recently merged, and deserves it&#39;s own full writeup anyway, but here&#39;s a brief description of the process of authoring a Python plugin:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;In a separate &lt;code&gt;.py&lt;/code&gt; file (module), write a class that extends the &lt;code&gt;pyscript.Plugin&lt;/code&gt; class.&lt;/li&gt;
    &lt;ul class=&#34;py-1 pl-8 text-justify list-disc list-outside;&#34;&gt;
        &lt;li&gt;This class can implement any of the valid Python &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/8b7fb89c6862f9e7d3388248a4b5f5d411da06db/pyscriptjs/src/plugin.ts#L70-L96&#34;&gt;named lifecycle callbacks&lt;/a&gt;, which will be called at determined points in the PyScript loading lifecycle.&lt;/li&gt;
        &lt;li class=&#34;italic&#34;&gt;We could use some more documentation on these methods, to be honest, but the development on this is flying fast and furious. Keep your eyes peeled!&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;In this module, create an instance of this class named &lt;code&gt;plugin&lt;/code&gt;, and pass the constructor the name of the plugin. I.e. &lt;code&gt;plugin = Plugin(&#34;myNewPlugin&#34;)&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;In &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;, add the URL (relative or absolute) of this file to the &#34;plugins&#34; attribute. I.e. &lt;code&gt;plugins = [&#39;../my_folder/plugins/myNewPlugin.py&#34;]&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;When PyScript reaches any of the defined lifecycle points, the corresponding methods of the Plugin will be called.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Additionally, there&#39;s provision on the Python side for creating custom HTML elements via a Python plugin. See &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/8b7fb89c6862f9e7d3388248a4b5f5d411da06db/pyscriptjs/src/plugins/python/py_markdown.py#L23-L31&#34;&gt;the Markdown Plugin example&lt;/a&gt; for a demo of how this works.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, PyScript is using a plugin system internally to implement some of its core behaviors. The &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; page element (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/917&#34;&gt;#917&lt;/a&gt;), the splashscreen which appears when PyScript is loading, and the &lt;code&gt;importmap&lt;/code&gt; functionality which allows loading importmap ES modules into Python (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/938&#34;&gt;#938&lt;/a&gt;), are all implemented in TypeScript as plugins. Currently, there&#39;s no ability for the user to write their own JavaScript plugins, but that&#39;s a potential (and powerful) behavior for the future.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;implicit&#34;&gt;No More Implicit Coroutines&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Prior to version 2022.12.1, PyScript allowed the use of Top-Level-Await statements. That is, &lt;code&gt;await&lt;/code&gt;, &lt;code&gt;async for&lt;/code&gt;, and &lt;code&gt;async with&lt;/code&gt; outside of coroutines (&lt;code&gt;async def&lt;/code&gt; functions). When it encountered such a block of Python, it automatically wrapped the block up into a coroutine and scheduled it to run in the event loop.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;As of PyScript 2022.12.1, this is no longer allowed.&lt;/span&gt; Users should write their async functions as coroutines using &lt;code&gt;async def&lt;/code&gt;, and schedule them using &lt;a href=&#34;https://jeff.glass/post/pyscript-asyncio#webloop&#34;&gt;the allowed webloop methods&lt;/a&gt; like &lt;code&gt;asyncio.create_task()&lt;/code&gt; or &lt;code&gt;asyncio.ensure_future()&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The doesn&#39;t actually remove anything that was previously possible with PyScript - it only requires that users be more explicit about scheduling their coroutines. Compare the two following, equivalent examples from PyScript 2022.09.1 and 2022.12.1:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 my-4 lg:grid-cols-2 gap-y-4 lg:gap-x-4&#34;&gt;
    &lt;div&gt;
        &lt;p class=&#34;code-title&#34;&gt;2022.09.1 Example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
        js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(i)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;p class=&#34;code-title&#34;&gt;2022.12.1 Equivalent&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;my_coro&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
            js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(i)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(my_coro())
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;For more techniques and background, you can check out my &lt;a href=&#34;../post/pyscript-asyncio/&#34;&gt;long writeup on Asyncio in PyScript&lt;/a&gt; from last month. Antonio and I also got &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/879#issuecomment-1289415317&#34;&gt;deep in the weeds of how Pyodide&#39;s &lt;code class=&#34;nocode&#34;&gt;runPythonAsync()&lt;/code&gt; works&lt;/a&gt; (which we previously used to implicitly schedule coroutines), and some of its limitations, if you want to dive even deep.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;jsmodule&#34;&gt;PyScript JS module&lt;/h4&gt;
&lt;h5 class=&#34;pt-3 text-lg&#34;&gt;Pyodide Runtime Access&lt;/h5&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;pyscript.js&lt;/code&gt; now exposes the instance of Pyodide it creates &lt;a href=&#34;https://docs.pyscript.net/latest/reference/pyscript-module.html&#34;&gt;as a JavaScript object&lt;/a&gt;. Users wishing to run code directly in Pyodide, or to use another JavaScript module that interacts directly with Pyodide, can use this exported reference to do so. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/868&#34;&gt;#868&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p warning-banner&#34;&gt;The current method of access makes no guarantees about the state of the runtime when accessed - users will need to implement their own method of checking whether the runtime is loaded/initialized before accessing it. This is &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/942&#34;&gt;likely to change in the future&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The Pyodide runtime is accessible as &lt;code class=&#34;code&#34;&gt;pyscript.runtime.interpreter&lt;/code&gt;, like so:&lt;/p&gt;
&lt;div class=&#34;mx-4 my-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://pyscript.net/releases/2022.12.1/pyscript.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;logFromPython()&amp;#34;&lt;/span&gt;&amp;gt;Click Me to Log&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; logFromPython() {
        pyscript.runtime.interpreter.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            from js import console
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            console.log(f&amp;#34;Hello from Python! {1 + 2 = }&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        `&lt;/span&gt;)
    }
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that the runtime will not be available until it has been loaded by PyScript and initialized. In the example above, we use a button to defer executing the desired code until sometime after PyScript has initialized; in the next example, we&#39;ll use an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Event&#34;&gt;Event&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code class=&#34;code&#34;&gt;pyscript.runtime.globals&lt;/code&gt; attribute holds a reference to Python &lt;code&gt;globals()&lt;/code&gt; dictionary, making it easy to reference Python objects from JavaScript. By the wonder that is Pyodide, the objects are proxied back and forth pretty much seamlessly, but especially when logging to the console, using the &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/js-api.html#PyProxy.toJs&#34;&gt;toJs()&lt;/a&gt; function makes the conversion explicit:&lt;/p&gt;
&lt;div class=&#34;mx-4 my-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://pyscript.net/releases/2022.12.1/pyscript.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    from js import document, Event

    techs = [&amp;#34;PyScript&amp;#34;, &amp;#34;Pyodide&amp;#34;, &amp;#34;WASM&amp;#34;]
    number_of_techs = len(techs)

    # Use an Event to trigger JS after PyScript has initialized/run:
    pydone = Event.new(&amp;#34;py-done&amp;#34;)
    document.dispatchEvent(pydone)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py-done&amp;#34;&lt;/span&gt;, () =&amp;gt; {
        console.log(pyscript.runtime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;number_of_techs&amp;#34;&lt;/span&gt;))
        console.log(pyscript.runtime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;techs&amp;#34;&lt;/span&gt;).toJs())
    })
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&#34;m-2&#34;&gt;
        &lt;p class=&#34;italic&#34;&gt;Dev Console Result:&lt;/p&gt;
        &lt;img class=&#34;border-2 border-gray-400&#34; src=&#34;consoledemo1.PNG&#34; alt=&#34;A pair of entries from the developer console reading &#39;3&#39; and &#39;PyScript&#39;, &#39;Pyodide&#39;, &#39;WASM&#39;&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h5 class=&#34;pt-3 text-lg&#34;&gt;PyScript Version Numbers (JavaScript)&lt;/h5&gt;
&lt;p class=&#34;post-p&#34;&gt;You can also access the current version of PyScript via the pyscript js module at &lt;code&gt;pyscript.version&lt;/code&gt;. This will appear as a &#34;dotted string&#34; like &lt;code class=&#34;code&#34;&gt;2022.12.1.dev&lt;/code&gt; But version numbers are even more powerful on the Python side.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;pyversionnumbers&#34;&gt;PyScript Version Numbers (Python)&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Up to this point, the current PyScript version is something a user would have to infer from what URL they sourced &lt;code class=&#34;code&#34;&gt;pyscript.js&lt;/code&gt; from. As of version 2022.12.1, though, you can access that information directly in Python via a couple of new attributes.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/reference/API/version_info.html&#34; class=&#34;font-semibold&#34;&gt;PyScript.version_info&lt;/a&gt; is a &lt;code&gt;nametuple&lt;/code&gt; representing the current version in a code-savvy way - it&#39;s intended for use when comparing version numbers, i.e. to establish feature compatibility. For example:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Using version_info&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;version_info &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;2022&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;):
          js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You should be using [[fetch]] configs&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
          js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You should be using &amp;amp;lt;py-config&amp;amp;gt; paths:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;hidden my-4 live-example&#34;&gt;
    &lt;py-repl&gt;
        import js
        if PyScript.version_info and PyScript.version_info &gt;= (2022,11,1,&#34;&#34;):
            display(&#34;This text was output using display()&#34;)
        else:
            print(&#34;This text was output using print()&#34;)
    &lt;/py-repl&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;On the other hand, &lt;a href=&#34;https://docs.pyscript.net/latest/reference/API/__version__.html&#34; class=&#34;font-semibold&#34;&gt;PyScript.__version__&lt;/a&gt; is a human-readable version of the current version, like &#34;2022.12.1.final&#34;&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Using __version__&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;The current version of PyScript running right now is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;__version__&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;hidden my-4 live-example&#34;&gt;
    &lt;py-repl&gt;
        display(f&#34;{PyScript.version_info= }&#34;)
        display(f&#34;{PyScript.__version__= }&#34;)
    &lt;/py-repl&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;widgetdeprecation&#34;&gt;&lt;code&gt;&amp;lt;py-button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;py-inputbox&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;py-box&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;py-title&amp;gt;&lt;/code&gt; are Deprecated&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;All four of these custom HTML elements, which have been present in PyScript since its alpha release, have been deprecated. In the continuing vein of trying to make PyScript into a strong, versatile, and minimal core, it was decided that these elements weren&#39;t really key - they&#39;re easy enough to implement &lt;span class=&#34;italic&#34;&gt;with&lt;/span&gt; PyScript, enough so that they don&#39;t need to be included elements by default. &lt;code&gt;&amp;lt;py-button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;py-inputbox&amp;gt;&lt;/code&gt; are simple enough to replicate with existing HTML elements and event listeners, while &lt;code&gt;&amp;lt;py-box&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;py-title&amp;gt;&lt;/code&gt; were pre-formatted &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Those components haven&#39;t been fully removed from PyScript yet, just deprecated, and nicely, the deprecation warning banner that appears suggests altenate elements with new CSS classes that maintain the old elements&#39; styling. The suggested solutions are:&lt;/p&gt;
&lt;div class=&#34;flex justify-center my-2&#34;&gt;
    &lt;table class=&#34;w-full text-center md:w-2/3&#34;&gt;
        &lt;tr&gt;
            &lt;th&gt;Deprecated Tag&lt;/th&gt;
            &lt;th&gt;Replacement Solution&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;py-button&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;button py-click=&amp;quot;function()&amp;quot; class=&amp;quot;py-button&amp;quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;py-inputbox&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;input class=&amp;quot;py-input&amp;quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;py-box&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;py-box&amp;quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;py-title&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;betterwarnings&#34;&gt;Better Warnings and Errors&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Fabio Rosado (yes, there&#39;s &lt;a href=&#34;#maintainers&#34;&gt;two Fabios&lt;/a&gt; on the PyScript team now!) put together a series of great PRs that clean up the presentation of warnings and errors caused during PyScript&#39;s lifecycle.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you write invalid TOML for &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;, say, or use a deprecated function or feature. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/909&#34;&gt;#909&lt;/a&gt;). The banners can contain either plain text or HTML, which will allow us a lot of flexibility going forward in how we use them. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/947&#34;&gt;#947&lt;/a&gt;) &lt;/p&gt;
&lt;div class=&#34;alert-banner py-error&#34;&gt;(PY1001): Unable to install package(s) &#39;pyarrow&#39;. Reason: Can&#39;t find a pure Python 3 Wheel for package(s) &#39;pyarrow&#39;. See: https://pyodide.org/en/stable/usage/faq.html#micropip-can-t-find-a-pure-python-wheel for more information.&lt;/div&gt;
&lt;div class=&#34;alert-banner py-warning&#34;&gt;Multiple &amp;lt;py-config&amp;gt; tags detected. Only the first is going to be parsed, all the others will be ignored&lt;button id=&#34;alert-close-button&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 16 16&#34; fill=&#34;currentColor&#34; width=&#34;12px&#34;&gt;&lt;path d=&#34;M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;And you might notice, the PyScript errors errors now include error codes! As the PyScript codebase grows, and community involvement increases, having short-and-simple error codes helps users find solutions to exactly the issue they&#39;re having. It encourages users to report &#34;When I do X, I get a PY2401 error&#34; instead of just &#34;I got an error.&#34; This improves searchability the &lt;a href=&#34;https://docs.pyscript.net/unstable/reference/exceptions.html&#34;&gt;error code docs&lt;/a&gt;, in the forums, and on discord, and makes it simpler to guide users to solutions to specific issues they&#39;re encountering in the PyScript lifecycle. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/959&#34;&gt;#959&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The styling of errors that occur within Python has also been improved, and reformatted to be more legible on the page:&lt;/p&gt;
&lt;pre class=&#34;mx-8 py-error&#34;&gt;Traceback (most recent call last):&lt;br&gt;  File &#34;/lib/python3.10/site-packages/_pyodide/_base.py&#34;, line 435, in eval_code&lt;br&gt;    .run(globals, locals)&lt;br&gt;  File &#34;/lib/python3.10/site-packages/_pyodide/_base.py&#34;, line 304, in run&lt;br&gt;    coroutine = eval(self.code, globals, locals)&lt;br&gt;  File &#34;&amp;lt;exec&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&lt;br&gt;ZeroDivisionError: division by zero&lt;br&gt;&lt;/pre&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;pyconfigs&#34;&gt;Streamlined py-config&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The py-config system has been overhauled to simply its use internally - including simplifying how the default configuration options are merged with user-supplied options (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/806&#34;&gt;#806&lt;/a&gt;), dealing with multiple &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;s on a page (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/826&#34;&gt;#826&lt;/a&gt;), and finally killing &lt;code&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; altogether (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/775&#34;&gt;#775&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The TOML parser handling has also been improved, in that it no longer hangs forever if given misshapen TOML. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/815&#34;&gt;#815&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;An important clarification has also been added to the docs - because of &lt;a href=&#34;https://toml.io/en/&#34;&gt;the way the TOML format works&lt;/a&gt;, if you&#39;re using TOML for your py-config, &lt;code&gt;[[runtimes]]&lt;/code&gt; must be the last element. If the &lt;code&gt;[[runtimes]]&lt;/code&gt; table precedes the other individual elements (like `paths` or `packages`), those elements end up &lt;span class=&#34;italic&#34;&gt;inside&lt;/span&gt; &lt;code&gt;[[runtimes]]&lt;/code&gt;, which will cause them to be missed. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/861&#34;&gt;#861&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This in addition to the &lt;a href=&#34;#paths&#34;&gt;changes to &lt;code&gt;[[fetch]]&lt;/code&gt; noted above&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;unidentified&#34;&gt;Undefined elements are no longer hidden&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previous, any unknown HTML elements were hidden by &lt;code&gt;pyscript.css&lt;/code&gt; in an attempt to suppress onscreen visibility of things like &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;. This had the unintended consequence of hiding elements with typos - for example, a user-typed &lt;code&gt;&amp;lt;py-scrip&amp;gt;&lt;/code&gt; element would be &#34;unknown&#34; and also hidden. Now, PyScript explicitly only hides the page-elements that need hiding. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/837&#34;&gt;#837&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;directory&#34;&gt;Directory Listings for Releases&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript releases now come with a directory-listing of files and a brief example. See, for example, &lt;a href=&#34;https://pyscript.net/unstable/&#34;&gt;https://pyscript.net/unstable&lt;/a&gt;. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/839&#34;&gt;#839&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;codemirror6&#34;c&gt;CodeMirror 6&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Just like &lt;a href=&#34;https://blog.jupyter.org/accelerating-jupyterlab-68942bb8d602#2404&#34;&gt;JupyterLab 6&lt;/a&gt;, PyScript now uses the latest version of CodeMirror to power the in-browser &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; component. This comes with a (far more stable) API and &lt;a href=&#34;https://codemirror.net/docs/migration/&#34;&gt;lots of other improvements.&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/814&#34;&gt;#814&lt;/a&gt;)&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;infrastructure&#34;&gt;Infrastructure&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;documentation&#34;&gt;Documentation&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Especially in the past couple weeks, there&#39;s been a flood of new additions to the documentation! As the changes and improvements for this release settled into their final form, the team focused on making sure as many of the changes were documented as possible. A small sample of the new pages:&lt;/p&gt;&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/reference/index.html&#34;&gt;API reference&lt;/a&gt; for &lt;code&gt;Element&lt;/code&gt;, &lt;code&gt;display()&lt;/code&gt;, &lt;code&gt;__version__&lt;/code&gt;, and &lt;code&gt;version_info&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/guides/asyncio.html&#34;&gt;Updating Implicit Async to Explicit&lt;/a&gt;, &lt;/li&gt;
    &lt;li&gt;The &lt;a href=&#34;https://docs.pyscript.net/latest/reference/modules/pyscript.html&#34;&gt;pyscript module&lt;/a&gt; in javascript&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/reference/exceptions.html&#34;&gt;Exceptions and Error Codes&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/unstable/tutorials/py-config-fetch.html&#34;&gt;Using [[fetch]] from py-config&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/unstable/tutorials/writing-to-page.html&#34;&gt;Writing content to the Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;devdocs&#34;&gt;Dev Docs&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/index.html&#34;&gt;The PyScript Documentation&lt;/a&gt; now has a &lt;a href=&#34;https://docs.pyscript.net/latest/development/&#34;&gt;Development Section&lt;/a&gt;, as a central place for notes about how the development and release process for PyScript works. In particular, there are documents on the &lt;a href=&#34;https://docs.pyscript.net/latest/development/deprecation-cycle&#34;&gt;deprecation cycle&lt;/a&gt;, &lt;a href=&#34;https://docs.pyscript.net/latest/development/setting-up-environment&#34;&gt;getting your development environment set up&lt;/a&gt;, and &lt;a href=&#34;https://docs.pyscript.net/latest/development/developing&#34;&gt;making and submitting a pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;refactoringeffots&#34;&gt;Refactoring PyScript&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Antonio, Mariana, Madhur, and many more besides have embarked on several of massive refactoring endevours of the TypeScript side of PyScript, to streamline and rationalize the process of how PyScript loads itself and Pyodide and how it then executes Python scripts. Hopefully the changes this imparts to the end-users of PyScript are minimal, but speaking from a maintenance and codebase standpoint, the amount that&#39;s been done to make sense of both of these processes makes it a significantly easier to reason about what-happens-when. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/806&#34;&gt;#806&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/850&#34;&gt;#850&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/881&#34;&gt;#881&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/884&#34;&gt;#884&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;testing&#34;&gt;Testing&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The pytest-driven test system used to re-download the Pyodide runtime and other resources for each test, significantly slowing it down. The test system now has the ability to cache resources between tests, and retry tests on network failures. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/829&#34;&gt;829&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We also now have a way for the test system to watch for and confirm that specific errors are being thrown, allowing for the writing of &lt;span class=&#34;italic&#34;&gt;negative&lt;/span&gt; integration tests (that should throw specific errors in PyScript). (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/874&#34;&gt;#874&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;sync-docs&#34;&gt;Re-Sync&#39;d Docs&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Prior to this release, documentation was being pushed to &lt;a href=&#34;https://docs.pyscript.net/latest&#34;&gt;https://docs.pyscript.net/latest&lt;/a&gt; &lt;span class=&#34;italic&#34;&gt;every time a change to the docs was merged into the main branch&lt;/span&gt;. This meant that the default (latest) version of the docs represented features which were present in the codebase, but had yet to be released!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, the /latest version of the docs corresponds to the most recent &lt;span class=&#34;italic&#34;&gt;released&lt;/span&gt; version of PyScript. Users looking for bleeding-edge docs can find them at &lt;a href=&#34;https://docs.pyscript.net/unstable/&#34;&gt;https://docs.pyscript.net/unstable/&lt;/a&gt;. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/977&#34;&gt;#977&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;goodbyesvelte&#34;&gt;Goodbye Svelte&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The original version of the &lt;a href=&#34;https://pyscript.net/examples/&#34;&gt;PyScript Demo Site&lt;/a&gt; and other parts of the build infrastructure and styling were built around &lt;a href=&#34;https://svelte.dev/&#34;&gt;Svelte&lt;/a&gt;. Thanks to several PRs and lots of refactoring, Svelte is now entirely gone (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/806&#34;&gt;#806&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/830&#34;&gt;#830&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/886&#34;&gt;#886&lt;/a&gt;) &lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;pyodide&#34;&gt;Pyodide&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide did have another minor release recently, &lt;span class=&#34;italic&#34;&gt;0.21.3&lt;/span&gt;. And while it wasn&#39;t anywhere near as big a change as the 0.20 to 0.21 release, a few critical fixes did make their way in. See &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#version-0-21-3&#34;&gt;the Pyodide Changelog&lt;/a&gt; for details.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Relative URLs for Index URLs&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;In Version 0.21.2, it was briefly impossible to use a relative URL as a the indexURL for the Pyodide package (where it looks to load the Python side of its runtime and other key support files). That&#39;s now fixed. (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3077&#34;&gt;Pyodide # 3077&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;sourcemaps&#34;&gt;Source Maps Restored&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A couple PyScript users reported concerns about seeing a &#34;Source Map Unavailable&#34; error in their dev console, thinking they had done something wrong. Turns out that was due to a minor regression in Pyodide causing that source map file not to be distributed. That&#39;s since been rectified. (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3088&#34;&gt;Pyodide #3088&lt;/a&gt;)&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;Community&#34;&gt;Community&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;discord&#34;&gt;Discord&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;PyScript Discord&lt;/a&gt; is now the official hub for realtime communication around PyScript - both internally for the maintainers and the for the community to gather, ask questions, and get help.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a really amazing shift by the staff PyScript team over at Anaconda - to bring the conversations about PyScript out to a place where the community can see them and be a part of them. Want to see the maintainers getting deep in the weeds about the Plugins API, how &lt;code&gt;[[fetch]]&lt;/code&gt; should work, or what qualifies as &#34;a Python&#34;? It&#39;s all out in the open on Discord.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Similarly, there&#39;s more an more Pyscripters hanging out in the Discord &lt;span class=&#34;font-semibold&#34;&gt;#chat&lt;/span&gt; and &lt;span class=&#34;font-semibold&#34;&gt;#pyscript-help&lt;/span&gt; channels, to help folks get unstuck or identify issues. And the &lt;span class=&#34;font-semibold&#34;&gt;#i-made-this&lt;/span&gt; and &lt;span class=&#34;font-semibold&#34;&gt;#i-found-this&lt;/span&gt; are great places to share neat things you&#39;ve made or discovered with PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Come join us!&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;community&#34;&gt;October Community Call&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The PyScript core team hosted its &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/836&#34;&gt;first Community Call&lt;/a&gt; on October 18th! (&lt;a href=&#34;https://github.com/pyscript/pyscript/issues/836&#34;&gt;#836&lt;/a&gt;) About a dozen people attended, mostly from the PyScript core team and related contributors. We unfortunately forgot to hit &#39;record&#39; on the call, but I did jot down a few notes. &lt;span class=&#34;italic&#34;&gt;(None of this should be taken as gospel or comprehesive; It&#39;s just what I, one dude, happened to scribble down.)&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;The team is going to be shooting for about 1 release per month - maybe more, maybe less, but that&#39;s a decent goal.&lt;/li&gt;
    &lt;li&gt;The lifecycle refactoring is well underway, with Antonio C leading the charge on removing global variables, streamining the loading, etc.&lt;/li&gt;
    &lt;li&gt;Similarly, the refactoring away from print() to display() being lead by Mariana was just merged yesterday!&lt;/li&gt;
    &lt;li&gt;Plugins!
        &lt;ul class=&#34;py-1 pl-8 text-justify list-disc list-outside ul-circle&#34;&gt;
            &lt;li&gt;The team is excited about streamlining and &lt;span class=&#34;italic&#34;&gt;minimizing&lt;/span&gt; the core details of what PyScript does. There&#39;s a feeling that when PyScript initializes, it should do a &#39;bare minimum&#39; to get itself running, and delegate lots of core behaviors to plugins, to allow for customizability, extensibility, and futureproofing. An emphasis on PyScript being a &#39;platform&#39; not a &#39;framework&#39;&lt;/li&gt;
            &lt;li&gt;It is very early days for this idea, but there&#39;s lots of excitement around it.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Web Workers are an awesome way to delegrate work, but there&#39;s going to be a significant amount of work integrating the message passing/isolation process with PyScript.&lt;/li&gt;
    &lt;li&gt;Cleaning up the PyScript API would be nice, in the sense of the Python objects in &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/pyscriptjs/src/python/pyscript.py#L1-L394&#34;&gt;PyScript.py&lt;/a&gt; are currently available by default when executing PyScript. Generally, there&#39;s agreement around this wanting to all be contained in a module, though there&#39;s some questions around what of that would want be &lt;code&gt;import&lt;/code&gt;ed by default into a PyScript environment.&lt;/li&gt;
        &lt;ul class=&#34;py-1 pl-8 text-justify list-disc list-outside ul-circle&#34;&gt;
            &lt;li&gt;This would allow IDE&#39;s and intellisense to have a chance at working with PyScript.&lt;/li&gt;
        &lt;/ul&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;novembercommuniyu&#34;&gt;November Community Call&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The second-even community call was held November 16th, also on Zoom, and also with a ton of great discussion and conversation. I personally missed the first three-quarters of it (&lt;span class=&#34;italic&#34;&gt;I had a 45-foot tall Christmas tree to get lit&lt;/span&gt;), but Nicholas very kindly took notes in addition to his hosting duties, which are reproduced below:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;We need to ensure we have an agenda. We&#39;ve agreed to think about this and suggest proposals here so we have a process to try by our next community call.&lt;/li&gt;
    &lt;li&gt;Given Discord does video calls, and/or there&#39;s Twitch and other services for streaming meetings that are more in or of the platform we&#39;re using for our community, we should perhaps look at those as an alternative to Zoom.&lt;/li&gt;
    &lt;li&gt;Perhaps we should record our meetings..?&lt;/li&gt;
    &lt;li&gt;PyCon US next year, what&#39;s going on. We should coordinate, compliment and amplify each others&#39; work / efforts in this area. Can tell all here please..?&lt;/li&gt;
    &lt;li&gt;Antonio - can you let Jeff know what&#39;s coming in the plugin work? (This might be helpful context: https://github.com/pyscript/pyscript/pull/938)&lt;/li&gt;
    &lt;li&gt;We had some really great in-depth technical discussion about web-assembly, DOM and JS access, GCs, blocking calls, dynamic linking and all sorts of other good stuff... oh my..!&lt;/li&gt;
    &lt;li&gt;A very positive vibe. Let&#39;s keep this up. 🎉&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;And indeed, the vibes were incredibly positive. Every maintainer on the PyScript project has gotten their hands on (in my opinion) some very neat part of PyScript in the past two months. I&#39;m very much looking forward to what this enthusiastic, generous, and considerate team does next.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;aweseompyscript&#34;&gt;Awesome PyScript&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;#maintainers&#34;&gt;Maintainer Paul Everitt&lt;/a&gt; has been hard at work assembling &lt;a href=&#34;https://github.com/pyscript/pyscript-collective/blob/main/awesome-pyscript.md&#34;&gt;Awesome PyScript&lt;/a&gt;, a curated list of awesome things relative to PyScript. If you want inspiration on what PyScript can do, this is the place to go - there&#39;s collections of videos, demos, conference talks, and more.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Have you done something awesome with PyScript? Drop the Awesome PyScript repo a comment or a Pull Request to have it included!&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;research&#34;&gt;PyScript/Research&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A new GitHub repository at &lt;a href=&#34;https://github.com/pyscript/research&#34;&gt;PyScript/Research&lt;/a&gt; has been started, as a home for overarching research, development, and proposals for PyScript. New and great ideas were popping up in issues in the main repo and being lost somewhat, so the new repo is a home for larger proposals that need need multiple files to explain, or that generate longer discussions than fit in a single issue.&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;Team&#34;&gt;The PyScript Team&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;maintainers&#34;&gt;New Maintainers&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://github.com/pauleveritt&#34;&gt;Paul Everitt&lt;/a&gt;, &lt;a href=&#34;https://github.com/FabioRosado&#34;&gt;Fabio Rosado&lt;/a&gt; and I are now community maintainers on the PyScript project. It&#39;s been tremendously exciting and satisfying working on and with PyScript the past few months - the core team over at Annaconda has been swell all around, and I&#39;m very grateful to be a part of the team in my own way. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/824&#34;&gt;#824&lt;/a&gt; &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/825&#34;&gt;#825&lt;/a&gt; &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/898&#34;&gt;#898&lt;/a&gt;)&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;Next&#34;&gt;What&#39;s Next?&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;webworkers&#34;&gt;Web Workers&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Running everything in the browser window&#39;s main thread is a bit of a bummer - anything running in Python blocks the main thread, no UI updates can happen, everything must either be async or really quick to avoid degrading the user experience.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To counteract this, there&#39;s work afoot to enable the option of running PyScript inside &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers&#34;&gt;Web Workers&lt;/a&gt;, which are designed for running scripts in the background of the page asynchronously, and passing messages to and from the main browser thread. But because they operate in a scope that doesn&#39;t have the &lt;code&gt;window&lt;/code&gt; object, DOM events and methods are not necessarily available to them. Given that DOM interaction is one of the neat possilities that running Python in the browser enables, there&#39;s lots to chew over in terms of allowing Python to run in a Web Working without degrading the DOM-access experience.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;scoped&#34;&gt;Scoped Tags&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Right now, every &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; tag executes in the same global scope. This is convenient for all the reasons that having global scope is convenient, and awful for all the reasons it&#39;s awful. There&#39;s much discussion afoot of turning each &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag into its own local namespace, probably with the ability to allow tags to share namespaces if desired.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is one I&#39;m personally very-much looking forward to. As I&#39;m currently working through this year&#39;s Advent of Code &lt;a href=&#34;post/advent-of-code-2022/&#34;&gt;entirely in PyScript&lt;/a&gt;, the challenge of not duplicating variable/function names across 50 different Python modules is a huge headache. That said, there are many good reasons to allow tags to share namespaces, so that code can be located close to its context. More to come here, I&#39;m sure.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;eventsproposals&#34;&gt;Events&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s a proposal (a couple proposals) swirling around over in &lt;a href=&#34;https://github.com/pyscript/research&#34;&gt;PyScript/Research&lt;/a&gt; about the syntax for events (&#34;py-[event]&#34; or &#34;onclick&#34; or otherwise). What&#39;s exciting is that there&#39;s tons of possibilities! Now the hard part will be to sort together the possibilities and potentiatials, weight up the pros and cons (run functions in Python vs. JavaScript, access to JS and/or Python objects as arguments, do we pass literal code or references to Callables, etc) and make the call.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;...At least for now. This is another area that might see two or three more rounds of evolution before it stabilizes. Or even potentially splits into more than one thing - there may be multiple independent systems being developed that can coexist. Time will tell.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;morepythonapi&#34;&gt;PyScript&#39;s Python API&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;With the &lt;a href=&#34;#reshaping-api&#34;&gt;modularization of the Python API&lt;/a&gt;, things have gotten quite a bit more rational in the way PyScript handles importing its &#34;built-in&#34; functions and classes. But as the possibilities around functionality, plugins, web-workers, and scope grow, I wouldn&#39;t be surprised if we continue to see the PyScript Python API continue to morph and change.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So watch this space, follow the &lt;a href=&#34;https://twitter.com/pyscript_dev&#34;&gt;PyScript Twitter&lt;/a&gt; (or &lt;a href=&#34;https://twitter.com/JeffersGlass&#34;&gt;mine&lt;/a&gt;!), join the &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;Discord&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;send the GitHub issues and pull requests&lt;/a&gt;, and show off the neat things you&#39;ve built with PyScript!&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2022</title>
      <link>https://jeff.glass/post/advent-of-code-2022/</link>
      <pubDate>Sat, 26 Nov 2022 14:23:16 -0600</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2022/</guid>
      <description>&lt;style&gt;
    /* Code tags not in highlight blocks */
    code:not(.nocode):not(.language-python){
        --tw-text-opacity: 1; 
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;p class=&#34;post-p&#34;&gt;Another year, another 25 curious code challenges from &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code!&lt;/a&gt; This year, I&#39;ll be attempting to make as many solutions as possible something you can run right here in your browser window via &lt;a href=&#34;https://pyscript.net&#34;&gt;PyScript&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;w-auto pt-2 pb-4 pl-2 mr-2 -ml-2 align-top bg-gray-200&#34;&gt;
    &lt;p class=&#34;text-2xl relative-anchor&#34; id=&#34;toc&#34;&gt;Table of Contents&lt;/p&gt;
    &lt;div class=&#34;ml-8 font-semibold&#34; id=&#34;toc-contents&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;py-config class=&#34;hidden&#34;&gt;
    packages = [&#39;anytree&#39;, &#39;rich&#39;]
    terminal = false
    [[fetch]]
    files = [&#39;utils.py&#39;]
    [[fetch]]
    from = &#39;./day10&#39;
    files = [&#39;addition.py&#39;, &#39;computer.py&#39;, &#39;instruction.py&#39;, &#39;instructionparser.py&#39;, &#39;noop.py&#39;, &#39;parser_10_1.py&#39;, &#39;register.py&#39;, &#39;screen.py&#39;]
    #to_folder = &#39;day10&#39;
&lt;/py-config&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day0&#39;&gt;Day 0 - Testing the Machinery&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;In preparation for this year&#39;s AoC, I&#39;ve set up a Hugo templating system to allow me to quickly write and share each day&#39;s code. The setup will look much like this, with a brief explanation here, the code below, and an option to run live demos. The &lt;code&gt;get_input&lt;/code&gt; function handles getting input from the textarea or file upload.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day0-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day0-upload-input&#34; name=&#34;day0-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day0-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day0-run-btn&#34; py-click=&#34;main_day0()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day0-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day0/main.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day0-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day0=&#34;#day0-code&#34; class=&#34;active tab code-title&#34;&gt;day0.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day0-code&#34; data-tab-content-day0 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day0&lt;/span&gt;():
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Input given: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day0&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
         target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day0-output&amp;#34;&lt;/span&gt;,
         append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday0 = document.querySelectorAll(&#39;[data-tab-target-day0]&#39;)
    const tabContentsday0 = document.querySelectorAll(&#39;[data-tab-content-day0]&#39;)

    tabsday0.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay0
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday0.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday0.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day1_1&#39;&gt;Day 1: Calorie Counting (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;And we&#39;re off! As common for day 1 of AoC, this puzzle is is about making sure you can read input and identify line breaks, and do some very simple parsing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One way to solve this problem would be to calculate the sum of calories in every elf&#39;s pack, then find the max of those. Astute coders will notice that you don&#39;t need to actually hold all the packs in memory at once; you can calculate them one at a time and retain the highest value seen so far, which avoids undue memory usage. Python more-or-less does this for us if we use generator expressions for everything.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day1_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day1_1-upload-input&#34; name=&#34;day1_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day1_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day1_1-run-btn&#34; py-click=&#34;main_day1_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day1/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day1_1-viz-btn&#34; py-click=&#34;viz_day1_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day1_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day1/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day1_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day1_1=&#34;#day1_1-code&#34; class=&#34;active tab code-title&#34;&gt;day1_1.py&lt;/li&gt;
        &lt;li data-tab-target-day1_1=&#34;#day1_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day1_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day1_1-code&#34; data-tab-content-day1_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day1_1&lt;/span&gt;():
    elf_packs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day1_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    elf_calories &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; elf_packs)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(elf_calories)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
         target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-output&amp;#34;&lt;/span&gt;,
         append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day1_1-viz-code&#34; data-tab-content-day1_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Chart, document, Object
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;j&lt;/span&gt;(obj):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; to_js(obj, dict_converter&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Object&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fromEntries)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day1_1&lt;/span&gt;():
    asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(viz_day1_1_coro())

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day1_1_coro&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; ctx&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-viz-canvas&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        ctx &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;canvas&amp;#34;&lt;/span&gt;)
        ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-viz-canvas&amp;#34;&lt;/span&gt;
        parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-viz&amp;#34;&lt;/span&gt;)
        parent&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(ctx)
        parent&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;48rem&amp;#34;&lt;/span&gt;
        parent&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;24rem&amp;#34;&lt;/span&gt;
        parent&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;relative&amp;#39;&lt;/span&gt;

    elf_packs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day1_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    elf_calories &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; elf_packs]
    most &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(elf_calories)
    most_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; elf_calories&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(most)

    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(elf_calories)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
         target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-output&amp;#34;&lt;/span&gt;,
         append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

    my_chart &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Chart&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(ctx, j({
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: j({
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Elf &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(elf_packs))],
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;datasets&amp;#34;&lt;/span&gt;: [j({
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: elf_calories,
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;stack&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;backgroundColor&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rgba(75,192,192,0.4)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; cal &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; most &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; cal &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; elf_calories ] 
            })]
        }),
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;options&amp;#34;&lt;/span&gt;: j({
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;animation&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;responsive&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;, 
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;: j({
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;legend&amp;#34;&lt;/span&gt;: j({
                    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
                }),
            }),
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;scales&amp;#34;&lt;/span&gt;: j({
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;: j({
                    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;stacked&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
                }),
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;: j({
                    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;beginAtZero&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
                })
            })
        })
    }))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday1_1 = document.querySelectorAll(&#39;[data-tab-target-day1_1]&#39;)
    const tabContentsday1_1 = document.querySelectorAll(&#39;[data-tab-content-day1_1]&#39;)

    tabsday1_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay1_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday1_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday1_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day1_2&#39;&gt;Day 1: Calorie Counting (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Another common theme with Advent of Code - part 2 on a given day will try to subvert the optimizations you may have made in part 1!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For a quick-and-dirty solution here, I&#39;ll use the &lt;code&gt;sorted&lt;/code&gt; function to convert our generator into a sorted list, then sum the last (largest) three elements. If this were a larger list of elements, we could come up with our own generator that injested elements from an Iterable one by one, and retained the largest three.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day1_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day1_2-upload-input&#34; name=&#34;day1_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day1_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day1_2-run-btn&#34; py-click=&#34;main_day1_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day1_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day1/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day1_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day1_2=&#34;#day1_2-code&#34; class=&#34;active tab code-title&#34;&gt;day1_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day1_2-code&#34; data-tab-content-day1_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day1_2&lt;/span&gt;():
    elf_packs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day1_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    elf_calories &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; elf_packs)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(elf_calories[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;:])&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
         target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_2-output&amp;#34;&lt;/span&gt;,
         append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday1_2 = document.querySelectorAll(&#39;[data-tab-target-day1_2]&#39;)
    const tabContentsday1_2 = document.querySelectorAll(&#39;[data-tab-content-day1_2]&#39;)

    tabsday1_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay1_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday1_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday1_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day2_1&#39;&gt;Day 2: Rock Paper Scissors (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Some slightly more complicated input handling today, with some slightly more involved conditional logic to accumulate a score&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s also quite useful to me to be able to run these examples from the terminal, as well as in PyScript. If you look at the end of today&#39;s code, you&#39;ll see a use of checking whether we&#39;re running in pyodide (&lt;code&gt;if &#39;pyodide&#39; in sys.modules&lt;/code&gt;), and chosing where to snag the input from based on that determination.&lt;/code&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day2_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day2_1-upload-input&#34; name=&#34;day2_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day2_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day2_1-run-btn&#34; py-click=&#34;main_day2_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day2_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day2/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day2_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day2_1=&#34;#day2_1-code&#34; class=&#34;active tab code-title&#34;&gt;day2_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day2_1-code&#34; data-tab-content-day2_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;translateLine&lt;/span&gt;(s):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;translate(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maketrans({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;}))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreFromStrategy&lt;/span&gt;(theirs, mine):
    selectedShapePoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;}
    points &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; selectedShapePoints[mine]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; theirs &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; mine: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#draw&lt;/span&gt;
        points &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt;  ((theirs, mine) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt;
        (theirs, mine) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt;
        (theirs, mine) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;)): &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#win&lt;/span&gt;
        points &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; points

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreFromInput&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(scoreFromStrategy(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;translateLine(line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day2_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day2_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day2_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday2_1 = document.querySelectorAll(&#39;[data-tab-target-day2_1]&#39;)
    const tabContentsday2_1 = document.querySelectorAll(&#39;[data-tab-content-day2_1]&#39;)

    tabsday2_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay2_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday2_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday2_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day2_2&#39;&gt;Day 2: Rock Paper Scissors (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I fully admit to my solution here trying to be way too clever. The speediest way to solve this problem (both in execution time and in writing) would almost certainly be to create a looking table of the 9 possible input lines with their resultant scores, and just loop over the input and sum according to those scores.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That said, this is a good chance to start stirring the brain cells on another common theme in Advnent of Code challenges - using one part of the input to determine how to interpret another part of the input.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day2_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day2_2-upload-input&#34; name=&#34;day2_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day2_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day2_2-run-btn&#34; py-click=&#34;main_day2_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day2_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day2/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day2_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day2_2=&#34;#day2_2-code&#34; class=&#34;active tab code-title&#34;&gt;day2_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day2_2-code&#34; data-tab-content-day2_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; cycle
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;translateLine&lt;/span&gt;(s):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;translate(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maketrans({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;}))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreFromStrategy&lt;/span&gt;(theirs, result):
    theirsIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(theirs) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# X,Y,Z =&amp;gt; 0,1,2&lt;/span&gt;
    relativeIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Offset by whether we lose, win, or draw&lt;/span&gt;
    selectedShape &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;][(theirsIndex &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; relativeIndex[result]) &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Find our choice&lt;/span&gt;
    selectedShapePoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Points for our choice&lt;/span&gt;

    resultPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;}
    score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; selectedShapePoints[selectedShape] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; resultPoints[result]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; score 

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreFromInput&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(scoreFromStrategy(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;translateLine(line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day2_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day2_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day2_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday2_2 = document.querySelectorAll(&#39;[data-tab-target-day2_2]&#39;)
    const tabContentsday2_2 = document.querySelectorAll(&#39;[data-tab-content-day2_2]&#39;)

    tabsday2_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay2_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday2_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday2_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day3_1&#39;&gt;Day 3: Rucksack Reorganization (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;This is one of those neat days where one can use a neat feature of Python - set operations - to make finding common elements between two iterables fast and easy.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;On a whim, I &lt;a href=&#34;https://youtu.be/VELprb8t9zg&#34;&gt;hopped on a livestream&lt;/a&gt; and whipped up a visualization of this part of the solution, which you can check out if you run the live examples on this page.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day3_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day3_1-upload-input&#34; name=&#34;day3_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day3_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day3_1-run-btn&#34; py-click=&#34;main_day3_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day3/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day3_1-viz-btn&#34; py-click=&#34;viz_day3_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day3_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day3/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day3_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day3_1=&#34;#day3_1-code&#34; class=&#34;active tab code-title&#34;&gt;day3_1.py&lt;/li&gt;
        &lt;li data-tab-target-day3_1=&#34;#day3_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day3_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day3_1-code&#34; data-tab-content-day3_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

charValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase)} &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;\
            {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_uppercase)}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prioritySum&lt;/span&gt;(data):
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        midpoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(line[:midpoint])
        second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(line[midpoint:])
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; charValue[(first &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; second)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day3_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day3_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;prioritySum(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; prioritySum(data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;result&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day3_1-viz-code&#34; data-tab-content-day3_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

charValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase)} &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;\
            {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_uppercase)}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prioritySum&lt;/span&gt;(data):
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        midpoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(line[:midpoint])
        second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(line[midpoint:])
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; charValue[(first &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; second)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;visualizeProcessing&lt;/span&gt;(data, tbody):    
    tbody&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fontFamily &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;monospace&amp;#39;&lt;/span&gt;
    tbody&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;unformatted-table&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;tr&amp;#39;&lt;/span&gt;)
        scoreElement &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;)
        firstElement &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;)
        secondElement &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#styling&lt;/span&gt;
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bg-gray-900&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-gray-300&amp;#34;&lt;/span&gt;)
        scoreElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;paddingRight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2rem&amp;#34;&lt;/span&gt;
        firstElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;textAlign &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;
        firstElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;paddingRight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0.5rem&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Actually add the content&lt;/span&gt;
        midpoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line[:midpoint]
        second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line[midpoint:]
        commonChar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(first) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(second))&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
        score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; charValue[commonChar]

        first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; first&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;replace(commonChar, &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span style=&amp;#34;text-shadow: 0 0 5px #ffffff; color: rgb(255, 255, 255)&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;commonChar&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;)
        second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; second&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;replace(commonChar, &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span style=&amp;#34;text-shadow: 0 0 5px #ffffff; color: rgb(255, 255, 255)&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;commonChar&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Format and insert text&lt;/span&gt;
        firstElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;span&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; first &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;/span&amp;gt;&amp;#34;&lt;/span&gt;
        secondElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;span&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; second &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;/span&amp;gt;&amp;#34;&lt;/span&gt;
        scoreElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;commonChar&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;score&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#34;&lt;/span&gt;

        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(scoreElement)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(firstElement)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(secondElement)
        tbody&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(row)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#grayRows = js.document.querySelectorAll(&amp;#34;tbody tr:nth-child(2n-1)&amp;#34;)&lt;/span&gt;
    grayRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;querySelectorAll(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;tr&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; grayRows:
        js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;removeProperty(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;background-color&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;setupTable&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    table &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;table&amp;#39;&lt;/span&gt;)
    table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;)
    tbody &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;tbody&amp;#39;&lt;/span&gt;)
    table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(tbody)
    vizelem &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_1-viz&amp;#34;&lt;/span&gt;)
    vizelem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;)
    vizelem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;h-76&amp;#34;&lt;/span&gt;)
    vizelem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-scroll&amp;#34;&lt;/span&gt;)
    vizelem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(table)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; tbody

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day3_1&lt;/span&gt;():
        tbody &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; setupTable()
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day3_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        visualizeProcessing(data, tbody)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;prioritySum(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; prioritySum(data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;result&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday3_1 = document.querySelectorAll(&#39;[data-tab-target-day3_1]&#39;)
    const tabContentsday3_1 = document.querySelectorAll(&#39;[data-tab-content-day3_1]&#39;)

    tabsday3_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay3_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday3_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday3_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day3_2&#39;&gt;Day 3: Rucksack Reorganization (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Similar to part 1, part 2 is much easier if you use your chosen language&#39;s set operations to quickly narrow down the given elements to only the ones common between each trio of elves. I suppose the &#34;gotcha&#34; in this part is meant to catch out anyone who implemented a nested-for-loop, check-each-element-one-by-one solution to part 1.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day3_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day3_2-upload-input&#34; name=&#34;day3_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day3_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day3_2-run-btn&#34; py-click=&#34;main_day3_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day3_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day3/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day3_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day3_2=&#34;#day3_2-code&#34; class=&#34;active tab code-title&#34;&gt;day3_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day3_2-code&#34; data-tab-content-day3_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Collection

charValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase)} &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;\
            {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_uppercase)}
        
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreBy3&lt;/span&gt;(data):
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data[::&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;]):
        b &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
        c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]
        common &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(a) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(b) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(c))
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(common) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        common &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; common&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()

        score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; charValue[common]
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; score
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day3_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day3_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreBy3(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; scoreBy3(data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;result&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday3_2 = document.querySelectorAll(&#39;[data-tab-target-day3_2]&#39;)
    const tabContentsday3_2 = document.querySelectorAll(&#39;[data-tab-content-day3_2]&#39;)

    tabsday3_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay3_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday3_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday3_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day4_1&#39;&gt;Day 4: Camp Cleanup (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Some year, somewhere, I shant be tricked by forgetting to convert input strings to integers.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is not that year apparently. The provided example input works if you only compair the inputs alphanumerically, since it only uses single-digit numbers, but the real input only yields the correct solution if you remember to convert the inputs to integers.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day4_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day4_1-upload-input&#34; name=&#34;day4_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day4_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day4_1-run-btn&#34; py-click=&#34;main_day4_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day4_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day4/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day4_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day4_1=&#34;#day4_1-code&#34; class=&#34;active tab code-title&#34;&gt;day4_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day4_1-code&#34; data-tab-content-day4_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;fullyContains&lt;/span&gt;(a: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;] , b: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solutionFromInput&lt;/span&gt;(data):
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ((p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;), p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (((&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])), (&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]))) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    matches &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (fullyContains(pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; fullyContains(pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;],pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; matches)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day4_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day4_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solutionFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day4_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solutionFromInput(data))
       &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday4_1 = document.querySelectorAll(&#39;[data-tab-target-day4_1]&#39;)
    const tabContentsday4_1 = document.querySelectorAll(&#39;[data-tab-content-day4_1]&#39;)

    tabsday4_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay4_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday4_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday4_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day4_2&#39;&gt;Day 4: Camp Cleanup (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I&#39;m certain there&#39;s a more clever way to determine whether two ranges overlap; I&#39;ve used the brute-force method to check if either of the endpoints of each pair lies within (or equals) the endpoints of the other pair. I have a feeling, from the symmetry of the boolean logic, that it could be simplified somehow, but this is functional.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day4_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day4_2-upload-input&#34; name=&#34;day4_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day4_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day4_2-run-btn&#34; py-click=&#34;main_day4_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day4_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day4/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day4_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day4_2=&#34;#day4_2-code&#34; class=&#34;active tab code-title&#34;&gt;day4_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day4_2-code&#34; data-tab-content-day4_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;overlaps&lt;/span&gt;(a: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;] , b: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
           (b[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (b[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solutionFromInput&lt;/span&gt;(data):
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ((p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;), p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (((&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])), (&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]))) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    matches &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (overlaps(pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; matches)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day4_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day4_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(data)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solutionFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day4_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solutionFromInput(data))
       &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday4_2 = document.querySelectorAll(&#39;[data-tab-target-day4_2]&#39;)
    const tabContentsday4_2 = document.querySelectorAll(&#39;[data-tab-content-day4_2]&#39;)

    tabsday4_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay4_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday4_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday4_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day5_1&#39;&gt;Day 5: Supply Stacks (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;As I&#39;ve experienced in previous years, the process of identifying a strategy or algorithm to solve a problem, and the creating the data structure for that algorithm, go hand in hand.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;In today&#39;s case, the fact that the input is presented row-by-row, but the data is relevant column-by-column, means that a cerain amount of input processessing is necessary to make the data useful. But once it is, the solution is relatively straightfoward.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day5_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day5_1-upload-input&#34; name=&#34;day5_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day5_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day5_1-run-btn&#34; py-click=&#34;main_day5_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day5/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day5_1-viz-btn&#34; py-click=&#34;viz_day5_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day5_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day5/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day5_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day5_1=&#34;#day5_1-code&#34; class=&#34;active tab code-title&#34;&gt;day5_1.py&lt;/li&gt;
        &lt;li data-tab-target-day5_1=&#34;#day5_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day5_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day5_1-code&#34; data-tab-content-day5_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewType

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# The &amp;#39;yard&amp;#39; is the collection of all the stacks of crates&lt;/span&gt;
yardType &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; NewType(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;yardType&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(NamedTuple):
    quantity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    from_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    to_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#(&amp;#34;Instruction&amp;#34;, (&amp;#39;quantity&amp;#39;, &amp;#39;from_stack&amp;#39;, &amp;#39;to_stack&amp;#39;))&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solutionFromInput&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    stacks, instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parseInput(data)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructions:
        stacks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; operateOn(stacks, ins)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; topCrates(stacks)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parseInput&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[yardType, &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[Instruction]]:
    firstBlankLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
    cratePositions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[:firstBlankLine]
    cratePositions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reverse() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#ordered bottom to top&lt;/span&gt;
    instructionLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[firstBlankLine&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Create crate data struction&lt;/span&gt;
    crateNameLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#get crate labels from line&lt;/span&gt;
    crates &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {name: [] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; name &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crateNameLine&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#create dicts per line&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, crateName &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;::&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;]):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; crateName &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
                crates[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(crateNameLine[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crateName) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Add crate to list&lt;/span&gt;
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Parse instructions&lt;/span&gt;
    instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructionLines:
        match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;move (?P&amp;lt;num&amp;gt;\d+) from (?P&amp;lt;from_stack&amp;gt;\d+) to (?P&amp;lt;to_stack&amp;gt;\d+)&amp;#39;&lt;/span&gt;, ins)
        num, from_stack, to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)

        instructions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Instruction(
                quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;)),
                from_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;),
                to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)
            ))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (crates, instructions)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;operateOn&lt;/span&gt;(crates: yardType, ins: Instruction) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; yardType:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#printCrates(crates)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity):
        crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop())
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; crates

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;topCrates&lt;/span&gt;(crates: yardType):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;values()])
    

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day5_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day5_1&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solutionFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;inputtest.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solutionFromInput(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day5_1-viz-code&#34; data-tab-content-day5_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;153
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;154
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;155
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;156
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;157
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;158
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;159
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;160
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;161
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;162
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;163
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;164
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;165
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;166
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;167
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;168
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;169
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;170
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;171
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;172
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;173
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;174
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;175
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;176
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;177
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;178
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;179
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;180
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;181
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;182
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;183
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;184
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;185
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;186
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;187
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;188
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;189
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;190
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;191
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;192
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;193
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;194
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;195
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;196
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;197
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;198
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;199
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;200
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;201
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;202
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;203
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;204
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;205
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;206
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;207
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;208
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;209
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;210
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;211
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;212
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;213
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;214
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;215
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;216
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;217
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;218
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;219
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;220
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;221
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;222
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;223
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;224
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;225
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;226
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;227
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;228
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;229
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;230
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;231
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;232
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;233
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;234
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;235
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;236
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;237
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;238
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;239
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;240
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;241
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;242
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;243
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;244
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;245
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;246
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;247
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;248
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;249
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;250
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;251
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;252
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;253
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;254
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;255
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;256
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day5_1&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;functools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; partial
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; anime, Object
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js, create_proxy
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewType

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# The &amp;#39;yard&amp;#39; is the collection of all the stacks of crates&lt;/span&gt;
    yardType &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; NewType(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;yardType&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;])

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(NamedTuple):
        quantity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
        from_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
        to_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;j&lt;/span&gt;(obj):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; to_js(obj, dict_converter&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Object&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fromEntries)

    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day5_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)        

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parseInput&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[yardType, &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[Instruction]]:
        firstBlankLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        cratePositions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[:firstBlankLine]
        cratePositions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reverse() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#ordered bottorstBlankLine = data.index(&amp;#34;&amp;#34;)&lt;/span&gt;
        cratePositions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[:firstBlankLine]
        cratePositions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reverse() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#ordered bottom to top&lt;/span&gt;
        instructionLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[firstBlankLine&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Create crate data struction&lt;/span&gt;
        crateNameLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#get crate labels from line&lt;/span&gt;
        crates &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {name: [] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; name &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crateNameLine&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#create dicts per line&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, crateName &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;::&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;]):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; crateName &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
                    crates[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(crateNameLine[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crateName) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Add crate to list&lt;/span&gt;
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Parse instructions&lt;/span&gt;
        instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructionLines:
            match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;move (?P&amp;lt;num&amp;gt;\d+) from (?P&amp;lt;from_stack&amp;gt;\d+) to (?P&amp;lt;to_stack&amp;gt;\d+)&amp;#39;&lt;/span&gt;, ins)
            num, from_stack, to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)

            instructions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Instruction(
                    quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;)),
                    from_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;),
                    to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)
                ))
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (crates, instructions)

    yard, instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parseInput(data)

    &lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Crate&lt;/span&gt;():
        label:&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
        element:&lt;span style=&#34;color:#366&#34;&gt;object&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __str__(self):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;label

    &lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Stack&lt;/span&gt;():
        crates: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;
        x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

    overall &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1-viz&amp;#34;&lt;/span&gt;)
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;margin &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;50px 50px 50px 50px&amp;#34;&lt;/span&gt;
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;relative&amp;#34;&lt;/span&gt;
    div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(div)

    divHeight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;800&lt;/span&gt;
    divWidth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;600&lt;/span&gt;

    startColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Aquamarine&amp;#34;&lt;/span&gt;
    endColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;

    div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divHeight&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
    div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divWidth&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
    div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#eee&amp;#34;&lt;/span&gt;

    floorY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; divHeight &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;

    floor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;floor&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#777&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;10px&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divWidth&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divHeight&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;floorY&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0px&amp;#34;&lt;/span&gt;
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(floor)

    textOutput &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;)
    textOutput&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1_text_output&amp;#34;&lt;/span&gt;
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;insertBefore(textOutput, overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;nextSibling)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#&amp;lt;button onclick=&amp;#34;startAnimation()&amp;#34;&amp;gt;Play&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#js.startAnimation = myTimeline.play&lt;/span&gt;
    playButton &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;)
    playButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Play&amp;#34;&lt;/span&gt;
    playButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;padding &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.5rem 1rem .5rem 1rem&amp;#34;&lt;/span&gt;
    playButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;border &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2px solid #2c2e34&amp;#34;&lt;/span&gt;
    playButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#bbf7d0&amp;#34;&lt;/span&gt;
    

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#&amp;lt;button onclick=&amp;#34;stopAnimation()&amp;#34;&amp;gt;Pause&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#js.stopAnimation = myTimeline.pause&lt;/span&gt;
    pauseButton &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;)
    pauseButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Pause&amp;#34;&lt;/span&gt;
    pauseButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;padding &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.5rem 1rem .5rem 1rem&amp;#34;&lt;/span&gt;
    pauseButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;border &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2px solid #2c2e34&amp;#34;&lt;/span&gt;
    pauseButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#fef08a&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#&amp;lt;input type=&amp;#34;range&amp;#34; id=&amp;#34;seekbar&amp;#34; min=&amp;#34;0&amp;#34; max=&amp;#34;100&amp;#34; value=&amp;#34;0&amp;#34; oninput=&amp;#34;myTimeline.pause();myTimeline.seek(myTimeline.duration * (this.value/100))&amp;#34; style=&amp;#34;width: 100%&amp;#34;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
    seekbar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;)
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;type &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;range&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;seekbar&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;min &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;max &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;400px&amp;#34;&lt;/span&gt;

    controlHolder &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;)
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_2_controls&amp;#34;&lt;/span&gt;
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(playButton)
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(pauseButton)
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(seekbar)
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute&amp;#34;&lt;/span&gt;
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;10px&amp;#34;&lt;/span&gt;
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;20px&amp;#34;&lt;/span&gt;
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;100%&amp;#34;&lt;/span&gt;
    div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(controlHolder)

    crateSize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;25&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;indexToBottom&lt;/span&gt;(index):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; divHeight &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; floorY &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (crateSize&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; index

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;makeDisplay&lt;/span&gt;(yard):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(yard):
            newStackList &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
            leftEdge &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (crateSize &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;25&lt;/span&gt;

            stackLabel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;crateSize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;crateSize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;leftEdge&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;top &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;floorY &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;textAlign &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;
            label &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;)
            label&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stack
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(label)
            div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(stackLabel)

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stackLevel, crate &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(yard[stack]):
                bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; indexToBottom(stackLevel)
                container &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; startColor
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;crateSize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;border &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2px solid #2c2e34&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;bottom&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;leftEdge&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;textAlign &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;

                label &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;)
                label&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(crate)
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(label)

                newStackList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Crate(crate, container))
                div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(container)
            yard[stack] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Stack(crates&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newStackList, x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; leftEdge)

    makeDisplay(yard)

    myTimeline &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; anime&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;timeline(j({
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;duration&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;500&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;easing&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;easeInOutSine&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;autoplay&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
    }))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;seekbar_input&lt;/span&gt;(evt):
        myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pause()
        myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;seek(myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;duration &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(evt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;srcElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;))

    add_event_listener(seekbar, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;, seekbar_input)
    add_event_listener(playButton, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; _: myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;play())
    add_event_listener(pauseButton, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; _: myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pause())

    progressElement &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;seekbar&amp;#34;&lt;/span&gt;)
    prevProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;updateSeekbar&lt;/span&gt;(yard, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nonlocal&lt;/span&gt; prevProgress
        progressElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;progress
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;progress &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; yard:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates):
                    topCrate &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
                    topCrate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; endColor
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; prevProgress &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; yard:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; crate &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates:
                    crate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; startColor

        prevProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;progress


    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;displayOnMove&lt;/span&gt;(from_stack, to_stack, quantity, instructionCount, instructionIndex, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Instruction &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;instructionIndex&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;: Move &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;quantity&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; crate&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; quantity &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; from stack &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;from_stack&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; to stack &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;to_stack&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;. &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;instructionCount&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; of &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;quantity&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; complete&amp;#34;&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1_text_output&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doFinalOutput&lt;/span&gt;(yard, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        solution &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; yard:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates):
                topCrate &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
                topCrate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;
                solution &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; topCrate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;label
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;SOLUTION: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1_text_output&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;moveOneCrate&lt;/span&gt;(yard: yardType, from_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, to_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, quantity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, timeline, instructionCount, instructionIndex, final):
        js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;moveOneCrate&amp;#34;&lt;/span&gt;)
        crate &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; yard[from_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
        yard[to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crate)
        newBottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; indexToBottom(yard[to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(crate))
        timeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(j({
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;targets&amp;#34;&lt;/span&gt;: crate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;keyframes&amp;#34;&lt;/span&gt;: [
                j({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bottom&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divHeight &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; crateSize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;}),
                j({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;: yard[to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x}),
                j({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bottom&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;newBottom&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;})
            ],
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;begin&amp;#34;&lt;/span&gt;: partial(displayOnMove, from_stack, to_stack, quantity, instructionCount, instructionIndex),
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt;: partial(updateSeekbar, yard),
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;complete&amp;#34;&lt;/span&gt;: partial(doFinalOutput, yard) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; final &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; _: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)
        }))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;operateOn&lt;/span&gt;(yard: yardType, ins: Instruction, instructionIndex: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, final:&lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; yard:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; instructionCount &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity):
            moveOneCrate(yard, ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack, ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;to_stack, ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity, myTimeline, instructionCount, instructionIndex, final &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; final &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; instructionCount &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doAllInstructions&lt;/span&gt;(instructions):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; instructionIndex, ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(instructions):
            operateOn(yard, ins, instructionIndex, final &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; instructionIndex &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(instructions) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

    doAllInstructions(instructions)

    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;window)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday5_1 = document.querySelectorAll(&#39;[data-tab-target-day5_1]&#39;)
    const tabContentsday5_1 = document.querySelectorAll(&#39;[data-tab-content-day5_1]&#39;)

    tabsday5_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay5_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday5_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday5_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day5_2&#39;&gt;Day 5: Supply Stacks (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I was wondering when I would get bit by one of PyScript&#39;s core limitations (currently) - all &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tags are executed in the same global namespace. Meaning if you have two functions with the same name in two separate files/script tags, any objects whos names overlap previous tags &lt;span class=&#34;italic&#34;&gt;overwrite those objects&lt;/span&gt;. Hence names like &lt;code&gt;operateOn5_2()&lt;/code&gt; to ensure the functions are unique to this day/part.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day5_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day5_2-upload-input&#34; name=&#34;day5_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day5_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day5_2-run-btn&#34; py-click=&#34;main_day5_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day5_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day5/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day5_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day5_2=&#34;#day5_2-code&#34; class=&#34;active tab code-title&#34;&gt;day5_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day5_2-code&#34; data-tab-content-day5_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewType

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# The &amp;#39;yard&amp;#39; is the collection of all the stacks of crates&lt;/span&gt;
yardType &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; NewType(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;yardType&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(NamedTuple):
    quantity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    from_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    to_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solutionWithClumpedStacks&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    stacks, instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parseInput5_2(data)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructions:
        stacks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; operateOn5_2(stacks, ins)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; topCrates5_2(stacks)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parseInput5_2&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[yardType, &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[Instruction]]:
    firstBlankLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
    cratePositions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[:firstBlankLine]
    cratePositions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reverse() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#ordered bottom to top&lt;/span&gt;
    instructionLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[firstBlankLine&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Create crate data struction&lt;/span&gt;
    crateNameLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#get crate labels from line&lt;/span&gt;
    crates &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {name: [] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; name &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crateNameLine&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#create dicts per line&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, crateName &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;::&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;]):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; crateName &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
                crates[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(crateNameLine[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crateName) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Add crate to list&lt;/span&gt;
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Parse instructions&lt;/span&gt;
    instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructionLines:
        match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;move (?P&amp;lt;num&amp;gt;\d+) from (?P&amp;lt;from_stack&amp;gt;\d+) to (?P&amp;lt;to_stack&amp;gt;\d+)&amp;#39;&lt;/span&gt;, ins)
        num, from_stack, to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)

        instructions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Instruction(
                quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;)),
                from_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;),
                to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)
            ))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (crates, instructions)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;operateOn5_2&lt;/span&gt;(crates: yardType, ins: Instruction) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; yardType:
    to_move &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack][&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity:]
    crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack][:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity]
    crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;extend(to_move)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; crates

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;topCrates5_2&lt;/span&gt;(crates: yardType):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;values()])
    

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day5_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day5_2&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solutionWithClumpedStacks(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solutionWithClumpedStacks(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday5_2 = document.querySelectorAll(&#39;[data-tab-target-day5_2]&#39;)
    const tabContentsday5_2 = document.querySelectorAll(&#39;[data-tab-content-day5_2]&#39;)

    tabsday5_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay5_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday5_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday5_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day6_1&#39;&gt;Day 6: Tuning Trouble (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Part of the fun of Advent of Code is trying to guess what things in Part 1 of each day are going to get turned topsy-turvy in Part 2. Today&#39;s question, involving finding when elements in a sliding window are unique, lead me to a few guesses. Would there be some other criteria for determining success? Only one duplicated letter perhaps? Perhaps the window would need to ignore only its center element, or the window would jump by twos, or something.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day6_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day6_1-upload-input&#34; name=&#34;day6_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day6_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day6_1-run-btn&#34; py-click=&#34;main_day6_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day6_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day6/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day6_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day6_1=&#34;#day6_1-code&#34; class=&#34;active tab code-title&#34;&gt;day6_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day6_1-code&#34; data-tab-content-day6_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deque
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;findIndexAllDifferent&lt;/span&gt;(input_stream, n):
    window &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; deque(maxlen&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;n)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, token &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(input_stream):
        window&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(token)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(window)) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; n:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day6_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day6_1&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;findIndexAllDifferent(data, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day6_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(findIndexAllDifferent(data, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;))
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday6_1 = document.querySelectorAll(&#39;[data-tab-target-day6_1]&#39;)
    const tabContentsday6_1 = document.querySelectorAll(&#39;[data-tab-content-day6_1]&#39;)

    tabsday6_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay6_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday6_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday6_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day6_2&#39;&gt;Day 6: Tuning Trouble (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Thankfully, it turned out part 2 made the simplest possible adjustment - the length of the window. Hence, the code for the two parts looks almost identical. I suppose the objective was to catch out anyone who &#34;manually&#34; checked each element of the sliding window for uniqueness against the other three.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day6_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day6_2-upload-input&#34; name=&#34;day6_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day6_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day6_2-run-btn&#34; py-click=&#34;main_day6_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day6_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day6/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day6_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day6_2=&#34;#day6_2-code&#34; class=&#34;active tab code-title&#34;&gt;day6_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day6_2-code&#34; data-tab-content-day6_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deque
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;findIndexAllDifferent_6_2&lt;/span&gt;(input_stream, n):
    window &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; deque(maxlen&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;n)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, token &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(input_stream):
        window&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(token)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(window)) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; n:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day6_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day6_2&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;findIndexAllDifferent_6_2(data, &lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day6_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(findIndexAllDifferent_6_2(data, &lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday6_2 = document.querySelectorAll(&#39;[data-tab-target-day6_2]&#39;)
    const tabContentsday6_2 = document.querySelectorAll(&#39;[data-tab-content-day6_2]&#39;)

    tabsday6_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay6_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday6_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday6_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day7_1&#39;&gt;Day 7: No Space Left on Device (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;When running into a challenge like today&#39;s, the question is always: &#34;Should I implement my own data structure, or make use of a built-in/pre-existing module?&#34; Today I opted for the later, and discovered the &lt;a href=&#34;https://github.com/c0fec0de/anytree&#34;&gt;anytree package&lt;/a&gt; for the first time. It has all the functionality I could way - children/parent tracking, arbitrary attributes on Nodes, provision for walking/tranversing/searching the tree, importing/exporting dictionaries/JSON, symlinks... I suspect I&#39;m going to get a lot of use out of this.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day7_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day7_1-upload-input&#34; name=&#34;day7_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day7_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day7_1-run-btn&#34; py-click=&#34;main_day7_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day7/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day7_1-viz-btn&#34; py-click=&#34;viz_day7_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day7_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day7/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day7_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day7_1=&#34;#day7_1-code&#34; class=&#34;active tab code-title&#34;&gt;day7_1.py&lt;/li&gt;
        &lt;li data-tab-target-day7_1=&#34;#day7_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day7_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day7_1-code&#34; data-tab-content-day7_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Node, RenderTree, PreOrderIter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.search&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; findall

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_7_1&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (root_cmd &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$ cd /&amp;#34;&lt;/span&gt;:
        root &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;First command something other than cd / : &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;root_cmd&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; processLine_7_1(line, root, currentNode)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# After constructing tree, pre-calculate folder sizes.&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# A bit inefficient, but fine&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; PreOrderIter(root):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFolder_7_1(node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;):
            node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; containedFileSize_7_1(node)

    small_folders &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; findall(root, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(n, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100_000&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; small_folders)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processLine_7_1&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, rootNode: Node, currentNode: Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Processes one line of input; mutates the tree pointed to by rootNode,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    returns the new currentNode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode
    match line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split():
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out to root&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rootNode
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out one level&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move to directory {dir}&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [child &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#list files&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;, dirname]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New directory {dirname}&lt;/span&gt;
            newDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dirname, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode)
        case [size, filename]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New file {filename}&lt;/span&gt;
            newFile &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;filename, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;currentNode, size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(size))
        case _:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow unmatched??&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nextCurrentNode

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printTree_7_1&lt;/span&gt;(root:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFile_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFolder_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;containedFileSize_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_1(node):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(containedFileSize_7_1(n) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day7_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day7_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_7_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solution_7_1(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day7_1-viz-code&#34; data-tab-content-day7_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;contextlib&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; redirect_stdout
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;io&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; StringIO
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Node, RenderTree, PreOrderIter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.search&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; findall
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.render&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; ContStyle

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day7_1&lt;/span&gt;():    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;local_main&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; 

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (root_cmd &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$ cd /&amp;#34;&lt;/span&gt;:
            root &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;First command something other than cd / : &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;root_cmd&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
            currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; processLine_7_1(line, root, currentNode)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# After constructing tree, pre-calculate folder sizes.&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# A bit inefficient, but fine&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; PreOrderIter(root):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFolder_7_1(node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;):
                node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; containedFileSize_7_1(node)

        small_folders &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; findall(root, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(n, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100_000&lt;/span&gt;)
        display(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; small_folders),
                target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-output&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
        

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (pre&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-pre&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Make pre tag for output&lt;/span&gt;
            pre &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pre&amp;#34;&lt;/span&gt;)
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-pre&amp;#34;&lt;/span&gt;
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bg-gray-900&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-gray-300&amp;#34;&lt;/span&gt;)
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lineHeight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.1&amp;#39;&lt;/span&gt;
            container &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-viz&amp;#34;&lt;/span&gt;)
            container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;max-h-124&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;overflow-y-auto&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;my-4&amp;#39;&lt;/span&gt;)
            container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(pre)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#clear existing output&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root, style&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;ContStyle()):
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#if node in small_folders:&lt;/span&gt;
            nameSegment &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;): displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder size:&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder_size&amp;#39;&lt;/span&gt;): displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder size:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

            contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;nameSegment&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;60&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;displaySize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Highlight solution lines&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100_000&lt;/span&gt;:
                contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span style=&amp;#34;text-shadow: 0 0 8px #ffffff; color: rgb(255, 255, 255)&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
            
            display(HTML(contents),
                    target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-pre&amp;#34;&lt;/span&gt;)
      

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processLine_7_1&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, rootNode: Node, currentNode: Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Processes one line of input; mutates the tree pointed to by rootNode,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        returns the new currentNode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode
        match line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split():
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out to root&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rootNode
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out one level&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move to directory {dir}&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [child &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#list files&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;, dirname]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New directory {dirname}&lt;/span&gt;
                newDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dirname, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode)
            case [size, filename]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New file {filename}&lt;/span&gt;
                newFile &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;filename, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;currentNode, size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(size))
            case _:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow unmatched??&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nextCurrentNode

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printTree_7_1&lt;/span&gt;(root:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root):
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFile_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFolder_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;containedFileSize_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_1(node):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(containedFileSize_7_1(n) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children)

    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day7_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    local_main(data)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday7_1 = document.querySelectorAll(&#39;[data-tab-target-day7_1]&#39;)
    const tabContentsday7_1 = document.querySelectorAll(&#39;[data-tab-content-day7_1]&#39;)

    tabsday7_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay7_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday7_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday7_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day7_2&#39;&gt;Day 7: No Space Left on Device (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Another part-2 problem which requires taking the data discovered in part 1, sorting it (by some key), and finding the smallest (largest) value, possibly beyond some threshhold. Using &lt;code&gt;anytree.search.findall&lt;/code&gt; makes it easy to find the folders, and &lt;code&gt;sorted(key = lamabda node: node.folder_size)&lt;/code&gt; allows us to sort by the relevant key.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day7_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day7_2-upload-input&#34; name=&#34;day7_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day7_2-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day7_2-run-btn&#34; py-click=&#34;main_day7_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day7/viz_2.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day7_2-viz-btn&#34; py-click=&#34;viz_day7_2()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day7_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day7/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day7_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day7_2=&#34;#day7_2-code&#34; class=&#34;active tab code-title&#34;&gt;day7_2.py&lt;/li&gt;
        &lt;li data-tab-target-day7_2=&#34;#day7_2-viz-code&#34; class=&#34;tab code-title&#34;&gt;day7_2-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day7_2-code&#34; data-tab-content-day7_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;90
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Node, RenderTree, PreOrderIter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.search&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; findall

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_7_2&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (root_cmd &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$ cd /&amp;#34;&lt;/span&gt;:
        root &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;First command something other than cd / : &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;root_cmd&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; processLine_7_2(line, root, currentNode)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; PreOrderIter(root):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFolder_7_2(node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;):
            node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; containedFileSize_7_2(node)

    size_used &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size
    total_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;70_000_000&lt;/span&gt;
    size_available &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; total_size &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; size_used

    size_needed_for_update &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;30_000_000&lt;/span&gt;
    minimum_delete &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; size_needed_for_update &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; size_available

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Sort folders by size, find the smallest one larger than the needed size&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; folder &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(findall(root, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(n, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;)), key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; folder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; minimum_delete:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; folder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processLine_7_2&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, rootNode: Node, currentNode: Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Processes one line of input; mutates the tree pointed to by rootNode,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    returns the new currentNode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode
    match line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split():
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out to root&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rootNode
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out one level&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move to directory {dir}&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [child &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# List Files&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;, dirname]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New directory {dirname}&lt;/span&gt;
            newDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dirname, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode)
        case [size, filename]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New file {filename}&lt;/span&gt;
            newFile &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;filename, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;currentNode, size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(size))
        case _:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow unmatched??&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Somehow unmatched??&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nextCurrentNode

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printTree_7_2&lt;/span&gt;(root:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFile_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFolder_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;containedFileSize_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_2(node):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(containedFileSize_7_2(n) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day7_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day7_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_7_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solution_7_2(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day7_2-viz-code&#34; data-tab-content-day7_2 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;contextlib&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; redirect_stdout
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;io&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; StringIO
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Node, RenderTree, PreOrderIter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.search&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; findall
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.render&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; ContStyle

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day7_2&lt;/span&gt;():    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;local_main&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; 

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (root_cmd &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$ cd /&amp;#34;&lt;/span&gt;:
            root &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;First command something other than cd / : &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;root_cmd&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
            currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; processLine_7_2(line, root, currentNode)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# After constructing tree, pre-calculate folder sizes.&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# A bit inefficient, but fine&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; PreOrderIter(root):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFolder_7_2(node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;):
                node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; containedFileSize_7_2(node)

        size_used &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size
        total_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;70_000_000&lt;/span&gt;
        size_available &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; total_size &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; size_used

        size_needed_for_update &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;30_000_000&lt;/span&gt;
        minimum_delete &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; size_needed_for_update &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; size_available

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Sort folders by size, find the smallest one larger than the needed size&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; folder &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(findall(root, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(n, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;)), key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; folder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; minimum_delete:
                selectedFolder &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; folder
                display(folder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-output&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;        

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (pre&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-pre&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Make pre tag for output&lt;/span&gt;
            pre &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pre&amp;#34;&lt;/span&gt;)
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-pre&amp;#34;&lt;/span&gt;
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bg-gray-900&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-gray-300&amp;#34;&lt;/span&gt;)
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lineHeight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.1&amp;#39;&lt;/span&gt;
            container &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-viz&amp;#34;&lt;/span&gt;)
            container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;max-h-124&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;overflow-y-auto&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;my-4&amp;#39;&lt;/span&gt;)
            container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(pre)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#clear existing output&lt;/span&gt;

        runningTotal &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root, style&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;ContStyle()):
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#if node in small_folders:&lt;/span&gt;
            nameSegment &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;): displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder size:&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder_size&amp;#39;&lt;/span&gt;): displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder size:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

            contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;nameSegment&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;60&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;displaySize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Highlight solution lines&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; selectedFolder &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; selectedFolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;descendants &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; isFile_7_2(node)):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; selectedFolder: contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;85&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; SOLUTION&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_2(node):
                    runningTotal &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
                    contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;85&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; Running Total: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;runningTotal&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
                contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span style=&amp;#34;text-shadow: 0 0 8px #ffffff; color: rgb(255, 255, 255)&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
            
            display(HTML(contents),
                    target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-pre&amp;#34;&lt;/span&gt;)
      

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processLine_7_2&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, rootNode: Node, currentNode: Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Processes one line of input; mutates the tree pointed to by rootNode,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        returns the new currentNode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode
        match line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split():
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out to root&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rootNode
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out one level&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move to directory {dir}&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [child &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#list files&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;, dirname]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New directory {dirname}&lt;/span&gt;
                newDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dirname, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode)
            case [size, filename]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New file {filename}&lt;/span&gt;
                newFile &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;filename, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;currentNode, size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(size))
            case _:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow unmatched??&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nextCurrentNode

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printTree_7_2&lt;/span&gt;(root:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root):
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFile_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFolder_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;containedFileSize_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_2(node):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(containedFileSize_7_2(n) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children)

    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day7_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    local_main(data)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday7_2 = document.querySelectorAll(&#39;[data-tab-target-day7_2]&#39;)
    const tabContentsday7_2 = document.querySelectorAll(&#39;[data-tab-content-day7_2]&#39;)

    tabsday7_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay7_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday7_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday7_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day8_1&#39;&gt;Day 8: Treetop Tree House (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;More parsing, more fun! I suspect there&#39;s some data structure that makes it simpler to iterate over both the rows and columns of a grid... or perhaps I should create my own, as that&#39;s the kind of thing that seems to come up often in Advent of Code.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day8_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day8_1-upload-input&#34; name=&#34;day8_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day8_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day8_1-run-btn&#34; py-click=&#34;main_day8_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day8/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day8_1-viz-btn&#34; py-click=&#34;viz_day8_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day8_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day8/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day8_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day8_1=&#34;#day8_1-code&#34; class=&#34;active tab code-title&#34;&gt;day8_1.py&lt;/li&gt;
        &lt;li data-tab-target-day8_1=&#34;#day8_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day8_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day8_1-code&#34; data-tab-content-day8_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_8_1&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# (rowIndex, columnIndex)&lt;/span&gt;
    visible_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows left to right&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, line_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line(row)}
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows right to left&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;([row[::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]):
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(row) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line(row)}
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Top to Bottom:&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[column_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, column_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line(column)}

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Bottom to Top:&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[column_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data][::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(column) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; row_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, column_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line(column)}
        
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#printVisibleTrees(data, visible_trees)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visible_trees)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printVisibleTrees&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], visbile_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]]):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_trees:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[green on dark_red]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_black]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_visible_in_line&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]:
    max_height_seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    visible_in_line &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, tree &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_height_seen:
            visible_in_line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(line_index)
            max_height_seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; max_height_seen &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; visible_in_line     

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day8_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day8_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_8_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_8_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day8_1-viz-code&#34; data-tab-content-day8_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; repeat
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; stdout

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display, HTML

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.segment&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Segment
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.console&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewLine
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.text&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Text
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.jupyter&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Patch the rich library to enable output&lt;/span&gt;

c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()
c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_rich_printer&lt;/span&gt;(target):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display_pyscript&lt;/span&gt;(segments: Iterable[Segment], text: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Allow output of raw HTML within pyscript/pyodide&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        html &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_render_segments(segments)
        display(HTML(html), target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;target, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
    rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; display_pyscript
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Solution code:&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day8_1&lt;/span&gt;():
    prepare_day8_1_element()
    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-viz&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day8_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_viz8_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
        target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-output&amp;#34;&lt;/span&gt;,
        append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
    post_day8_1_element()


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prepare_day8_1_element&lt;/span&gt;():
    viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-viz&amp;#34;&lt;/span&gt;)
    viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-x-auto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-auto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;whitespace-nowrap&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;post_day8_1_element&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js

    viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-viz&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pretag &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementsByTagName(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pre&amp;#39;&lt;/span&gt;):
        pretag&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;whiteSpace &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;nowrap&amp;#34;&lt;/span&gt;
        pretag&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;inline-block&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_viz8_1&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# (rowIndex, columnIndex)&lt;/span&gt;
    visible_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows left to right&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, line_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line_viz(row)}
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows right to left&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;([row[::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]):
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(row) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line_viz(row)}
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Top to Bottom:&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[column_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, column_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line_viz(column)}

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Bottom to Top:&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[column_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data][::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(column) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; row_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, column_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line_viz(column)}
        
    printVisibleTrees_viz(data, visible_trees)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visible_trees))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printVisibleTrees_viz&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], visbile_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]]):
    row_strings &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        line_elements &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_trees:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_white on dark_green]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[aquamarine3]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
        row_strings&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line_elements))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; row_strings:
        get_rich_printer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-viz&amp;#34;&lt;/span&gt;)(r)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#rprint_8_1_viz(r)&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_visible_in_line_viz&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]:
    max_height_seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    visible_in_line &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, tree &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_height_seen:
            visible_in_line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(line_index)
            max_height_seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; max_height_seen &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; visible_in_line     &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday8_1 = document.querySelectorAll(&#39;[data-tab-target-day8_1]&#39;)
    const tabContentsday8_1 = document.querySelectorAll(&#39;[data-tab-content-day8_1]&#39;)

    tabsday8_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay8_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday8_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday8_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day8_2&#39;&gt;Day 8: Treetop Tree House (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Figuring out all the indices, ranges, and &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/zfrgul/2022_day_8_i_know_i_should_read_it_more_carefully/&#34;&gt;exactly what was being asked&lt;/a&gt; was a bit hairy in this second part, but the ultimate stumbling block for me ended up being multiplying the running score by itself, rather than by the new trees seen in a given direction. Oops!&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day8_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day8_2-upload-input&#34; name=&#34;day8_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day8_2-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day8_2-run-btn&#34; py-click=&#34;main_day8_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day8/viz_2.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day8_2-viz-btn&#34; py-click=&#34;viz_day8_2()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day8_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day8/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day8_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day8_2=&#34;#day8_2-code&#34; class=&#34;active tab code-title&#34;&gt;day8_2.py&lt;/li&gt;
        &lt;li data-tab-target-day8_2=&#34;#day8_2-viz-code&#34; class=&#34;tab code-title&#34;&gt;day8_2-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day8_2-code&#34; data-tab-content-day8_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_8_2&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    max_trees_visible &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    high_score_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    visible_from_high_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; house_row_index, treehouse_row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; house_col_index, treehouse_height &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(treehouse_row):
        
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
            score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Row left to right&lt;/span&gt;
            row_to_right &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[house_row_index][house_col_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_8_2(row_to_right, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index, line_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; house_col_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows right to left&lt;/span&gt;
            row_to_left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;(data[house_row_index][:house_col_index]))
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_8_2(row_to_left, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index, house_col_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Top to Bottom:&lt;/span&gt;
            column_down &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[house_col_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[house_row_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]]
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_8_2(column_down, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, house_col_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns bottom to top:&lt;/span&gt;
            column_up &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;([row[house_col_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[:house_row_index]]))
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_8_2(column_up, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, house_col_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; score &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_trees_visible:
                max_trees_visible &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; score
                high_score_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (house_row_index, house_col_index)
                visible_from_high_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; visible_trees
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#printVisibleTrees(data, visible_from_high_score, special=high_score_location)&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; max_trees_visible


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printVisibleTrees&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], visible_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]], special &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; special:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[black dark_slate_gray_1]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visible_trees:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[green on dark_red]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_black]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_visible_in_line_8_2&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, max_height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Visible in line {list(line)} from height {max_height}; &amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
    visible_trees &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; line:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;Nothing here, score 0&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; visible_trees

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, tree &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; max_height:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Score: {line_index+1}&amp;#34;)&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, line_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Max length, score {len(line)}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day8_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day8_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_8_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_8_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day8_2-viz-code&#34; data-tab-content-day8_2 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; repeat
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; stdout

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display, HTML

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.segment&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Segment
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.console&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewLine
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.text&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Text
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.jupyter&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Patch the rich library to enable output&lt;/span&gt;

c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()
c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_rich_printer&lt;/span&gt;(target):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display_pyscript&lt;/span&gt;(segments: Iterable[Segment], text: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Allow output of raw HTML within pyscript/pyodide&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        html &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_render_segments(segments)
        display(HTML(html), target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;target, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
    rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; display_pyscript
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Solution code&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day8_2&lt;/span&gt;():
    prepare_day8_2_element()
    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-viz&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day8_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_viz8_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
        target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-output&amp;#34;&lt;/span&gt;,
        append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
    post_day8_2_element()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prepare_day8_2_element&lt;/span&gt;():
    viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-viz&amp;#34;&lt;/span&gt;)
    viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-x-auto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-auto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;whitespace-nowrap&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;post_day8_2_element&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js

    viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-viz&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pretag &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementsByTagName(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pre&amp;#39;&lt;/span&gt;):
        pretag&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;whiteSpace &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;nowrap&amp;#34;&lt;/span&gt;
        pretag&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;inline-block&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_viz8_2&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    max_trees_visible &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    high_score_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    visible_from_high_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; house_row_index, treehouse_row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; house_col_index, treehouse_height &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(treehouse_row):
        
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
            score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Row left to right&lt;/span&gt;
            row_to_right &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[house_row_index][house_col_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_viz8_2(row_to_right, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index, line_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; house_col_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows right to left&lt;/span&gt;
            row_to_left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;(data[house_row_index][:house_col_index]))
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_viz8_2(row_to_left, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index, house_col_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Top to Bottom:&lt;/span&gt;
            column_down &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[house_col_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[house_row_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]]
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_viz8_2(column_down, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, house_col_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns bottom to top:&lt;/span&gt;
            column_up &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;([row[house_col_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[:house_row_index]]))
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_viz8_2(column_up, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, house_col_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; score &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_trees_visible:
                max_trees_visible &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; score
                high_score_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (house_row_index, house_col_index)
                visible_from_high_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; visible_trees
    
    printVisibleTrees_viz_8_2(data, visible_from_high_score, special&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;high_score_location)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; max_trees_visible


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printVisibleTrees_viz_8_2&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], visbile_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]], special &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
    row_strings &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        line_elements &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; special:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_white on dark_violet]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_trees:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_white on dark_green]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[aquamarine3]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
        row_strings&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line_elements))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; row_strings:
        get_rich_printer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-viz&amp;#34;&lt;/span&gt;)(r)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_visible_in_line_viz8_2&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, max_height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Visible in line {list(line)} from height {max_height}; &amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
    visible_trees &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; line:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;Nothing here, score 0&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; visible_trees

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, tree &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; max_height:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Score: {line_index+1}&amp;#34;)&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, line_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Max length, score {len(line)}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday8_2 = document.querySelectorAll(&#39;[data-tab-target-day8_2]&#39;)
    const tabContentsday8_2 = document.querySelectorAll(&#39;[data-tab-content-day8_2]&#39;)

    tabsday8_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay8_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday8_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday8_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day9_1&#39;&gt;Day 9: Rope Bridge (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I felt quite clever during this first part of today&#39;s problem, when I noticed that, when the tail of the rope has to move, it always moves to where the head was in the previous step. This saves a fair amount of figuring out the logic of exactly where the tail moves to in each step - it can just reuse the previous position of the head, if necessary.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day9_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day9_1-upload-input&#34; name=&#34;day9_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day9_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day9_1-run-btn&#34; py-click=&#34;main_day9_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day9_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day9/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day9_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day9_1=&#34;#day9_1-code&#34; class=&#34;active tab code-title&#34;&gt;day9_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day9_1-code&#34; data-tab-content-day9_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Vector&lt;/span&gt;(NamedTuple):
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

direction_to_vector &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;U&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_9_1&lt;/span&gt;(data):
    head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    tail &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    tail_visited &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {tail}

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;):
        direction, quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
        diff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; direction_to_vector[direction]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(quantity)):
            prev_head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; head
            head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; too_far_9_1(head, tail):
                tail &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; prev_head
                tail_visited&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(tail)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(tail_visited)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;too_far_9_1&lt;/span&gt;(head, tail):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day9_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day9_1&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_9_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day9_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_9_1(data)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday9_1 = document.querySelectorAll(&#39;[data-tab-target-day9_1]&#39;)
    const tabContentsday9_1 = document.querySelectorAll(&#39;[data-tab-content-day9_1]&#39;)

    tabsday9_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay9_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday9_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday9_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day9_2&#39;&gt;Day 9: Rope Bridge (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Of course, I was being too clever by half, and the logic in part 1 doesn&#39;t hold in part two; I ended up chasing a nasty typo in the logic of determining where each tail segment moves for quite awhile. I&#39;ve left my rudimentary testing code and print statements in place and commented out for illustrative purposes.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day9_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day9_2-upload-input&#34; name=&#34;day9_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day9_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day9_2-run-btn&#34; py-click=&#34;main_day9_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day9_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day9/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day9_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day9_2=&#34;#day9_2-code&#34; class=&#34;active tab code-title&#34;&gt;day9_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day9_2-code&#34; data-tab-content-day9_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Point&lt;/span&gt;(NamedTuple):
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    previous: &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Vector&lt;/span&gt;(NamedTuple):
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

direction_to_vector &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;U&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_9_2&lt;/span&gt;(data):
    head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Point(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;))
    tails &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [Point(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;)]
    tail_visited &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {(tails[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, tails[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y)}

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;\n{line=}&amp;#34;)&lt;/span&gt;
        direction, quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
        head_move &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; direction_to_vector[direction]

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(quantity)):
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Segments:  {&amp;#39;&amp;#39;.join([f&amp;#39;({str(s.x): &amp;gt;2},{str(s.y): &amp;gt;2})&amp;#39; for s in [head, *tails]])}&amp;#34;)&lt;/span&gt;
            head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Point(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; head_move&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; head_move&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, previous&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Vector(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y))
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Head moves by ({head_move.x},{head_move.y}) to ({head.x}, {head.y})&amp;#34;)&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#move first tail&lt;/span&gt;
            diff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;  catchup_step(head, tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
            tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Point(tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, Vector(tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y))

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Move other tails&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, following_tail &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(tails[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]):
                local_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
                diff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;  catchup_step(tails[local_index&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], following_tail)
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#39;Moving tail at index {local_index} by {diff}&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;({str(diff.x): &amp;gt;2},{str(diff.y): &amp;gt;2})&amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
                tails[local_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Point(following_tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, following_tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, Vector(following_tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, following_tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y))

            tail_visited&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add((tails[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, tails[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y))
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Segments:  {&amp;#39;&amp;#39;.join([f&amp;#39;({str(s.x): &amp;gt;2},{str(s.y): &amp;gt;2})&amp;#39; for s in [head, *tails]])}&amp;#34;)&lt;/span&gt;
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;&amp;#34;)&lt;/span&gt;
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#input(&amp;#34;&amp;#34;)&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(tail_visited)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;catchup_step&lt;/span&gt;(head: Point, tail: Point) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Vector:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
        xdiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        ydiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x:
            xdiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x:
            xdiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y:
            ydiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y:
            ydiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Vector(xdiff, ydiff)
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;test_catchup_step&lt;/span&gt;():
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Identity&lt;/span&gt;
    zero_vector &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#1 off&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(Vector(x, y), zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#2 off&lt;/span&gt;
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#2, 1 off&lt;/span&gt;
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(c:= catchup_step(a, zero_vector))&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(c:= catchup_step(a, zero_vector))&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 2, 2 off&lt;/span&gt;
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Tests pass&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day9_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day9_2&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_9_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day9_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_9_2(data)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#test_catchup_step()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday9_2 = document.querySelectorAll(&#39;[data-tab-target-day9_2]&#39;)
    const tabContentsday9_2 = document.querySelectorAll(&#39;[data-tab-content-day9_2]&#39;)

    tabsday9_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay9_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday9_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday9_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day10_1&#39;&gt;Day 10: Cathode Ray Tube (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I had a very long dog walk this morning, during which I chose to vastly over-engineer today&#39;s problem. Partly for the fun of visualizing the solution on a quiet walk, and partly because this is the &lt;a href=&#34;https://adventofcode.com/2019/day/2&#34;&gt;kind of problem&lt;/a&gt; that tends to &lt;a href=&#34;https://adventofcode.com/2019/day/9&#34;&gt;come back&lt;/a&gt; in &lt;a href=&#34;https://adventofcode.com/2019/day/25&#34;&gt;later days&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also thoroughly type-hinted my solution, which I find tremendously helpful in keeping new data structures straight when developing them.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day10_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day10_1-upload-input&#34; name=&#34;day10_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day10_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day10_1-run-btn&#34; py-click=&#34;main_day10_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day10_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day10/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day10_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day10_1=&#34;#day10_1-code&#34; class=&#34;active tab code-title&#34;&gt;day10_1.py&lt;/li&gt;
         
        
        
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10computerpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/computer.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10parser_10_1py-code&#34; class=&#34;tab code-title&#34;&gt;day10/parser_10_1.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10registerpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/register.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10instructionpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/instruction.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10additionpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/addition.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10nooppy-code&#34; class=&#34;tab code-title&#34;&gt;day10/noop.py&lt;/li&gt;
            
        
    &lt;/ul&gt;

    &lt;div id=&#34;day10_1-code&#34; data-tab-content-day10_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;os&lt;/span&gt;
    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(os&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;listdir(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;parser_10_1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Parser_10_1


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_10_1&lt;/span&gt;(data):
    comp &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Computer(instructions&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;iter&lt;/span&gt;(data), parser&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Parser_10_1())
    signal_strength &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; breakpoint &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;)):
        comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run_until_clock(breakpoint)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Current instruction is {comp._current_instruction} with {comp._current_instruction._ellapsed_ticks} ellapsed ticks at index {comp._instruction_index}&amp;#34;)&lt;/span&gt;
        x_register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get()
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;{x_register=} &amp;#34;)&lt;/span&gt;
        signal_value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; breakpoint &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get()
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;At {breakpoint}, signal is {signal_value}&amp;#34;)&lt;/span&gt;
        signal_strength &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; signal_value
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Running total {signal_strength= }\n&amp;#34;)&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;(signal_strength)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day10_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day10_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_10_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solve_10_1(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    
        
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10computerpy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instructionparser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; InstructionParser
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;register&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Register

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Computer&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, instructions: Iterable[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], parser: InstructionParser &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instructions
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parser

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Register(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_instruction_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()
        

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Computer running&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_single_step&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Returns True if successfully completed a step, false if halted&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_until_clock&lt;/span&gt;(self, cycles) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Computer running until clock is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;cycles&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; cycles &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;next&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions))
        
        instruction_complete &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tick()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (instruction_complete):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;at_complete()
            
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;advance_instruction&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions), self)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_instruction_index &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Instruction advanced to {self._current_instruction}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;StopIteration&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
        
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10parser_10_1py-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instructionparser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; InstructionParser, InstructionParseException
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;addition&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Addition
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;noop&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Noop


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Parser_10_1&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parse&lt;/span&gt;(self, instruction: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, computer: Computer) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Instruction:
        str_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()
        match str_instruction:
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;noop&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Noop(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, computer)
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;addx&amp;#34;&lt;/span&gt;, value] :
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Addition(duration&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, computer&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;computer, register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x, addend &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(value))
            case _:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; InstructionParseException(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No instruction matching &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;instruction&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;inputtest_long.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    p &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Parser_10_1()
    computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Computer(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(instruction&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;line, computer&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;computer))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10registerpy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Register&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, data):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;set&lt;/span&gt;(self, data):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10instructionpy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;abc&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; ABC, abstractmethod
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#from computer import Computer&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(ABC):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, duration: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, computer):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;duration &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; duration
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; computer

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;

    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10additionpy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;register&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Register

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Addition&lt;/span&gt;(Instruction):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, duration: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, computer: Computer, register: Register, addend: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;):
        &lt;span style=&#34;color:#366&#34;&gt;super&lt;/span&gt;()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;__init__(duration, computer)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register: Register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; register
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addend: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; addend

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;set(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get() &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addend)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10nooppy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Noop&lt;/span&gt;(Instruction):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Only 1 tick&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
    

&lt;/div&gt;
&lt;script&gt;
    const tabsday10_1 = document.querySelectorAll(&#39;[data-tab-target-day10_1]&#39;)
    const tabContentsday10_1 = document.querySelectorAll(&#39;[data-tab-content-day10_1]&#39;)

    tabsday10_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay10_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday10_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday10_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day10_2&#39;&gt;Day 10: Cathode Ray Tube (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vero recusandae sint illo ab ullam deserunt. Fugiat debitis, harum velit corporis facilis modi perferendis consequuntur et eaque libero rem minima voluptatum?&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day10_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day10_2-upload-input&#34; name=&#34;day10_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day10_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day10_2-run-btn&#34; py-click=&#34;main_day10_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day10_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day10/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day10_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day10_2=&#34;#day10_2-code&#34; class=&#34;active tab code-title&#34;&gt;day10_2.py&lt;/li&gt;
         
        
        
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10computerpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/computer.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10screenpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/screen.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10parser_10_1py-code&#34; class=&#34;tab code-title&#34;&gt;day10/parser_10_1.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10registerpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/register.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10instructionpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/instruction.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10additionpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/addition.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10nooppy-code&#34; class=&#34;tab code-title&#34;&gt;day10/noop.py&lt;/li&gt;
            
        
    &lt;/ul&gt;

    &lt;div id=&#34;day10_2-code&#34; data-tab-content-day10_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;screen&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Screen
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;parser_10_1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Parser_10_1

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_10_2&lt;/span&gt;(data):
    screen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Screen()
    comp &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Computer(instructions&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;iter&lt;/span&gt;(data), parser&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Parser_10_1())

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        input_from_computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get()
        screen&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tick(input_from_computer)
        should_continue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run_single_step()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; should_continue:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(screen)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prepare_10_2&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
        viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_2-viz&amp;#34;&lt;/span&gt;)
        pre &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pre&amp;#34;&lt;/span&gt;)
        pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_1-pre&amp;#34;&lt;/span&gt;
        pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bg-gray-900&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-gray-300&amp;#34;&lt;/span&gt;)
        pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lineHeight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.1&amp;#39;&lt;/span&gt;
        viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(pre)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day10_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day10_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        prepare_10_2()
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_10_2(data)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_1-pre&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solve_10_2(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    
        
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10computerpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instructionparser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; InstructionParser
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;register&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Register

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Computer&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, instructions: Iterable[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], parser: InstructionParser &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instructions
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parser

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Register(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_instruction_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()
        

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Computer running&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_single_step&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Returns True if successfully completed a step, false if halted&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_until_clock&lt;/span&gt;(self, cycles) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Computer running until clock is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;cycles&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; cycles &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;next&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions))
        
        instruction_complete &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tick()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (instruction_complete):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;at_complete()
            
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;advance_instruction&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions), self)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_instruction_index &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Instruction advanced to {self._current_instruction}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;StopIteration&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
        
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10screenpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Screen&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;)]
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;  Position(row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lines)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self, input_from_computer: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;column &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; input_from_computer) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lines[self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;row][self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;column] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;

        next_column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;column &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; next_column &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;:
            next_column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
            next_row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;row &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            next_row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;row
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Position(row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; next_row, column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; next_column)
        

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Position&lt;/span&gt;(NamedTuple):
    row: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    column: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10parser_10_1py-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instructionparser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; InstructionParser, InstructionParseException
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;addition&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Addition
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;noop&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Noop


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Parser_10_1&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parse&lt;/span&gt;(self, instruction: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, computer: Computer) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Instruction:
        str_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()
        match str_instruction:
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;noop&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Noop(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, computer)
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;addx&amp;#34;&lt;/span&gt;, value] :
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Addition(duration&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, computer&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;computer, register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x, addend &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(value))
            case _:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; InstructionParseException(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No instruction matching &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;instruction&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;inputtest_long.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    p &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Parser_10_1()
    computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Computer(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(instruction&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;line, computer&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;computer))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10registerpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Register&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, data):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;set&lt;/span&gt;(self, data):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10instructionpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;abc&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; ABC, abstractmethod
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#from computer import Computer&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(ABC):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, duration: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, computer):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;duration &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; duration
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; computer

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;

    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10additionpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;register&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Register

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Addition&lt;/span&gt;(Instruction):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, duration: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, computer: Computer, register: Register, addend: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;):
        &lt;span style=&#34;color:#366&#34;&gt;super&lt;/span&gt;()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;__init__(duration, computer)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register: Register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; register
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addend: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; addend

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;set(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get() &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addend)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10nooppy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Noop&lt;/span&gt;(Instruction):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Only 1 tick&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
    

&lt;/div&gt;
&lt;script&gt;
    const tabsday10_2 = document.querySelectorAll(&#39;[data-tab-target-day10_2]&#39;)
    const tabContentsday10_2 = document.querySelectorAll(&#39;[data-tab-content-day10_2]&#39;)

    tabsday10_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay10_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday10_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday10_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;


&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    loaded_event = js.Event.new(&#39;pyscript_ready&#39;)
    js.document.dispatchEvent(loaded_event)
&lt;/py-script&gt;

&lt;style&gt;
    .code-container {
        border-width: 2px;
    }
&lt;/style&gt;
&lt;span class=&#34;text-green&#34;&gt;&lt;/span&gt;
&lt;script&gt;    
    //Create Load PyScript buttons:
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        btn_locations = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(btn_locations).forEach(div =&gt; {
            div.classList.add(&#39;my-2&#39;, &#39;md:mx-4&#39;, &#39;border-2&#39;, &#39;border-blue-200&#39;, &#39;p-2&#39;, &#39;grid&#39;, &#39;grid-cols-1&#39;, &#39;rounded-xl&#39;, &#39;flex&#39;, &#39;flex-row&#39;, &#39;justify-center&#39;, &#39;w-auto&#39;, &#34;py-1&#34;, &#39;h-auto&#39;, &#39;md:h-full&#39;)
            let p = document.createElement(&#39;p&#39;)
            p.classList.add(&#39;my-auto&#39;, &#39;mr-4&#39;, &#39;italic&#39;)
            p.innerHTML = &#34;Want to run these examples live in your browser?&#34;
            if (div.classList.contains(&#34;viz&#34;)){
                p.innerHTML += &#39; &lt;p class=&#34;font-semibold text-green-600&#34;&gt;This example includes a visualization.&lt;/p&gt;&#39;
            }
            div.appendChild(p)
            //button
            let btn = document.createElement(&#39;button&#39;)
            btn.innerText = &#34;Load PyScript&#34;
            btn.classList.add(&#39;load-pyscript-button&#39;, &#39;h-12&#39;)
            btn.onclick = loadPyScript
            div.appendChild(btn)
        });
    })

    /* Make Table of Contents */
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        headings = document.getElementsByClassName(&#39;post-h2&#39;)
        tocContents = document.getElementById(&#39;toc-contents&#39;)
        Array.from(headings).forEach(header =&gt; {
            //&lt;p&gt;&lt;a class = &#34;text-gray-500&#34; href=&#34;#day1&#34;&gt;Day 1&lt;/a&gt;&lt;/p&gt;
            const line = document.createElement(&#39;p&#39;)
            const link = document.createElement(&#39;a&#39;)
            link.href = `#${header.id}`
            link.innerText = header.innerText
            line.appendChild(link)
            if (document.getElementById(`${header.id}-viz-btn`) !== null){
                const viztag = document.createElement(&#34;span&#34;)
                viztag.innerText = &#34; - Includes Visualization&#34;
                line.appendChild(viztag)
            }
            tocContents.appendChild(line)
        })
    })

    function loadPyScript() {
        //load chartjs
        chartlink = document.createElement(&#39;script&#39;)
        chartlink.src = &#34;https://cdn.jsdelivr.net/npm/chart.js&#34;
        document.body.append(chartlink)

        //load animejs
        animejslink = document.createElement(&#39;script&#39;)
        animejslink.src=&#34;https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js&#34;
        document.body.append(animejslink)
        
        //load css
        css_link = document.createElement(&#34;link&#34;)
        css_link.rel = &#34;stylesheet&#34;
        css_link.type = &#34;text/css&#34;
        css_link.href = &#34;https://pyscript.net/unstable/pyscript.css&#34;
        //css_link.href = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.css&#34;
        document.getElementsByTagName(&#39;head&#39;)[0].appendChild(css_link)

        //load cs
        script_tag = document.createElement(&#39;script&#39;)
        script_tag.src = &#34;https://pyscript.net/unstable/pyscript.js&#34;
        //script_tag.src = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.js&#34;
        document.body.append(script_tag)        
    }
    document.addEventListener(&#39;pyscript_ready&#39;, () =&gt; {
        static = document.getElementsByClassName(&#39;static-example&#39;)
        live = document.getElementsByClassName(&#39;live-example&#39;)
        Array.from(static).forEach(div =&gt; {
            div.classList.add(&#39;hidden&#39;)
        })
        Array.from(live).forEach(div =&gt; {
            div.classList.remove(&#39;hidden&#39;)
        })
        load_buttons = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(load_buttons).forEach(elem =&gt; {
            elem.classList.add(&#39;hidden&#39;)
        })
    })
&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;tabs.css&#34;&gt;
&lt;!-- &lt;script src=&#34;tabs.js&#34;&gt;&lt;/script&gt; --&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>PyScript - Why Do We Need create_proxy()?</title>
      <link>https://jeff.glass/post/pyscript-why-create-proxy/</link>
      <pubDate>Mon, 24 Oct 2022 03:32:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-why-create-proxy/</guid>
      <description>&lt;style&gt;
    code:not(.nocode):not(.language-python){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide has an almost-magical ability to proxy objects and functions between Python and JavaScript in both directions... except when sometimes it seems to mysteriously break. Consider this stumbling block that new users often hit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;button &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;Say Hello&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console, document
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;hello&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;)

    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, hello)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This seems like a perfectly reasonable thing to do, but upon clicking the button, an error pops up in the developer console:&lt;/p&gt;
&lt;p class=&#34;post-p error-banner&#34;&gt;Uncaught Error: This borrowed proxy was automatically destroyed at the end of a function call. Try using create_proxy or create_once_callable.&lt;br&gt;The object was of type &#34;function&#34; and had repr &amp;quot;&amp;lt;function hello at 0x919828&amp;gt;&amp;quot;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The usual band-aid is wrap the Python Function in &lt;code&gt;create_proxy()&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_pyoxy(hello))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Which seems to just make things work... but why?&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;why&#34;&gt;Why &lt;code&gt;create_proxy()&lt;/code&gt;?&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;When you call something like &lt;code&gt;button.addEventListener(&#34;click&#34;, hello)&lt;/code&gt; (without create_proxy), Pyodide needs to briefly proxy the Python function &lt;code&gt;hello&lt;/code&gt; so the JS function &lt;code&gt;addEventListener&lt;/code&gt; knows how to interact with it. But once &lt;code&gt;addEventListener&lt;/code&gt; terminates, that proxy is no longer needed, it gets destroyed... and then when an event comes around to trigger your function, the proxy it should be using is gone. Which is why you&#39;ll see the error above talking about a &#34;borrowed proxy being automatically destroyed&#34;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The two functions that the Error mentions (&lt;code&gt;create_proxy()&lt;/code&gt; and &lt;code&gt;create_once_callable()&lt;/code&gt;) create a PyProxy (a JS object) of your Python object that you, the user, are supposed to manage the lifetime of, by calling &lt;code&gt;PyProxy.destroy()&lt;/code&gt; on it when you&#39;re done with it. Or, if you use &lt;code&gt;create_once_callable()&lt;/code&gt;, the proxy will destroy() itself after the first time it&#39;s called.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In practical terms, for something like an event listener, you may never want to destroy the proxy for the lifetime of your page, so you can just leave it hanging around. But it&#39;s worth noting that if you remove that event listener or button (maybe in a &#39;single-page-app&#39; where you&#39;re manipulating what&#39;s on the page quite a bit), you should plan to track and destroy the PyProxy, otherwise it just hangs around taking up memory.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;better-solution&#34;&gt;A Better Solution&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Keeping track of the proxies that wrap each of our Python functions sounds like a real pain, no? Thankfully, there&#39;s a better way, thanks to some new features in the Pyodide runtime.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since Pyodide 21.0 (PyScript 2022.09.1), there are now wrappers built into pyodide for adding event listeners: &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html?highlight=add_event_listener#pyodide.ffi.wrappers.add_event_listener&#34;&gt;pyodide.ffi.wrappers.add_event_listener()&lt;/a&gt; and &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html?highlight=remove_event_listener#pyodide.ffi.wrappers.remove_event_listener&#34;&gt;pyodide.ffi.wrappers.remove_event_listener()&lt;/a&gt; which, if you use them in conjunction, will handle proxy creation and destruction for you.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For example, here is the entirety of &lt;code&gt;pyodide.ffi.wrappers.add_event_listener&lt;/code&gt;:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;&lt;a href=&#34;https://github.com/pyodide/pyodide/blob/dc31bc8f3ecdde1eb21d345a81f8f4acc3d077ca/src/py/pyodide/ffi/wrappers.py&#34; class=&#34;underline no-style-link&#34;&gt;pyodide/wrappers.py &lt;span class=&#34;italic&#34;&gt;(partial)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_event_listener&lt;/span&gt;(
    elt: JsProxy, event: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, listener: Callable[[Any], &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;]
) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Wrapper for JavaScript&amp;#39;s addEventListener() which automatically manages the lifetime
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    of a JsProxy corresponding to the listener param.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    proxy &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(listener)
    EVENT_LISTENERS[(elt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;js_id, event, listener)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; proxy
    elt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(event, proxy)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;You can see that this:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Creates a proxy of the listener function using &lt;code&gt;create_proxy()&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Adds a reference to that proxy in an internal dictionary for later reference&lt;/li&gt;
    &lt;li&gt;Adds the event listener using the browser&#39;s &lt;code&gt;addEventListener()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;remove_event_listener&lt;/code&gt; simply undoes this process - it removes the event listener using JavaScript&#39;s &lt;code&gt;removeEventListener&lt;/code&gt;, looks up the appropriate proxy in the internal dictionary, and &lt;code&gt;destroy()&lt;/code&gt;s it.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So now, our code above would look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;button &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;Say Hello&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console, document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;hello&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;)

    btn &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;)
    add_event_listener(btn, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, hello)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;I personally recommend using these wrapper methods for all new code where possible, instead of using &lt;code&gt;create_proxy()&lt;/code&gt; and &lt;code&gt;addEventListener()&lt;/code&gt; manually.&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Asyncio in PyScript</title>
      <link>https://jeff.glass/post/pyscript-asyncio/</link>
      <pubDate>Fri, 21 Oct 2022 03:05:14 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-asyncio/</guid>
      <description>&lt;style&gt;
    code:not(.nocode){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;script defer src=&#34;https://pyscript.net/releases/2022.09.1/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;When running Python in a terminal or desktop, there&#39;s a myriad of ways to allow your code to do multiple things at once. You can spin off a new thread to handle computations, create a new process to offload work to other CPUs, even load up a while new &lt;a href=&#34;https://pythondev.readthedocs.io/subinterpreters.html&#34;&gt;subinterpretter&lt;/a&gt; (someday!) to execution more code.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;When running Python in the Browser, you get one process and (at least for now) one thread. That&#39;s it. And it&#39;s &lt;span class=&#34;italic&#34;&gt;the same thread&lt;/span&gt; that the browser window&#39;s event loop runs on. So we can&#39;t block - ever - or things fall apart.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So what if we want to do more than one thing at once? Asyncio to the rescue! In this post, we&#39;ll look at using &lt;code&gt;async/await/asyncio&lt;/code&gt; in PyScript/Pyodide to write concurrent code.&lt;/p&gt;
&lt;div class=&#34;info-banner&#34;&gt;Note that this page will focus on cooperative multitasking within Python via coroutines; for multitasking by running Python scripts in parallel in the browser, see Pyodide&#39;s documentation on &lt;a href=&#34;https://pyodide.org/en/stable/usage/webworker.html?highlight=thread&#34;&gt;Using Pyodide in a web worker&lt;/a&gt;.&lt;/div&gt;
&lt;div class=&#34;warning-banner&#34;&gt;This post was originally written for PyScript 2022.09.1. &lt;span class=&#34;font-semibold&#34;&gt;It will almost certainly be broken by later releases.&lt;/span&gt;&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;recap&#34;&gt;An Async/Await Recap&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;There are many ways of achieving the goal of &#34;do multiple things at once&#34; in Python - using multiple processes, using multiple threads within a single process, or making one thread do the work of many by requiring each piece of code to declare when it it wants to &#39;release&#39; the thread to do other work. The &lt;a href=&#34;https://docs.python.org/3/library/asyncio.html&#34;&gt;asyncio&lt;/a&gt; package in the python standard library, as well as the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords in the language, exist to support this last paradigm.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The typical way of writing these &#34;cooperative&#34; pieces of code is to declare &lt;code class=&#34;nocode&#34;&gt;Coroutines&lt;/code&gt; using the &lt;code&gt;async def&lt;/code&gt; keyword, then execute them with one of the many &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#running-an-asyncio-program&#34;&gt;asyncio execution methods&lt;/a&gt;. Within a coroutine, the &lt;code&gt;await&lt;/code&gt; keyword is used to indicate that control of the event loop (thread) should pause execution of the coroutine and move on to any others that are waiting. A statement like &lt;code class=&#34;code&#34;&gt;await foo()&lt;/code&gt; means &#34;suspend execution of the surrounding coroutine until the result of &lt;code&gt;foo()&lt;/code&gt; is returned.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;An example you can run in a regular terminal:&lt;/p&gt;
&lt;div class=&#34;mx-2&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;up_down&lt;/span&gt;():
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;What goes up&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Must come down&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;throw_things_up&lt;/span&gt;():
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# asyncio.gather() runs multiple awaitable things and gathers their return values (or errors)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;gather(up_down(), up_down(), up_down())

asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run(throw_things_up())

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# ------ Output ------&lt;/span&gt;

What goes up
What goes up
What goes up
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# ~1 second gap here&lt;/span&gt;
Must come down
Must come down
Must come down&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&#34;post-p&#34;&gt;This is just a quick and dirty primer - if asnyc/await/asyncio is a wholly new subject for you, I recommend the excellent &lt;a href=&#34;https://realpython.com/async-io-python/#the-10000-foot-view-of-async-io&#34;&gt;Real Python article on Asyncio&lt;/a&gt; for a deeper understanding before moving on.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;webloop&#34;&gt;Pyodide.Webloop&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The Pyodide runtime (which is the most common one used in PyScript at the moment) provides a custom wrapper for the asyncio event loop, that allows &lt;code&gt;async/await&lt;/code&gt; to work with the browser event loop. Many of the methods will be familiar if you&#39;ve worked with &lt;code&gt;asyncio&lt;/code&gt;, but it&#39;s worth highlighting some useful ones, as well as broken ones:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 px-2 py-2 mx-4 bg-green-100 divide-y-2 divide-green-800 md:gap-y-2 md:divide-y-0 divide-opacity-30&#34;&gt;
    &lt;div class=&#34;md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-green-800 md:divide-opacity-50 &#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold text-black&#34;&gt;create_task(coro: Coroutine)&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L342-L363&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Schedules the Coroutine into the event loop, to run concurrently as a Task. Works like &lt;code&gt;asyncio.create_task()&lt;/code&gt;&lt;/code&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-green-800 md:divide-opacity-50 &#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold text-black&#34;&gt;call_soon(callback: Callable, ...)&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L207-L221&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Schedules calling the Callable in the browser event loop using &lt;code&gt;setTimeout(callback, 0)&lt;/code&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-green-800 md:divide-opacity-50 &#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold text-black&#34;&gt;call_later(delay: float, callback: Callable, ...)&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L235-L280&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Schedules &lt;code&gt;callback&lt;/code&gt; to be called in (roughly) &lt;code&gt;delay&lt;/code&gt; seconds, using &lt;code&gt;setTimeout(callback, delay)&lt;/code&gt;. Returns a &lt;code&gt;Handle&lt;/code&gt; object with a &lt;code&gt;cancel()&lt;/code&gt; the call.&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;px-2 bg-yellow-100 md:px-0 md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-yellow-800 md:divide-opacity-50 &#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold text-black&#34;&gt;run_until_complete(future)&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L185-L201&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Since we can&#39;t block, this just ensures that the future is scheduled and returns the future. As the documentation notes, it&#39;s better to use &lt;code&gt;future.add_done_callback(do_something_with_result)&lt;/code&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;px-2 bg-yellow-100 md:px-0 md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-yellow-800 md:divide-opacity-50&#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;run_forever()&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L176-L183&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Different from asyncio.loop.run_forever - this is a a no-op! Since we can&#39;t block, this method does nothing.&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;px-2 bg-yellow-100 md:px-0 md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-yellow-800 md:divide-opacity-50&#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;asyncio.run()&lt;/span&gt; &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio.run&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;This function, like several of the base &lt;code&gt;asyncio&lt;/code&gt; functions, can&#39;t be called from &lt;span class=&#34;italic&#34;&gt;within&lt;/span&gt; an active event loop. And because we&#39;re inside the event loop in the browser, my understanding is we&#39;re &lt;span class=&#34;italic&#34;&gt;always&lt;/span&gt; in an event loop. If you see an error like this, try one of the functions above.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;We can access the Pyodide event loop at &lt;code class=&#34;code&#34;&gt;PyScript.loop&lt;/code&gt;, so we could write, for example, &lt;code class=&#34;code&#34;&gt;PyScript.loop.create_task(my_async_function())&lt;/code&gt;. It&#39;s worth looking at the full function signatures of the methods linked above - the ones which take Callables all take an *args parameter to pass arguments into your call, so you don&#39;t need to wrap them in &lt;code&gt;functools.partial&lt;/code&gt; or the like.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The presence of the Webloop implementation of the &lt;code&gt;asyncio&lt;/code&gt; event loop means that most async concepts translate pretty directly - &lt;code&gt;async for&lt;/code&gt;, &lt;code&gt;async with&lt;/code&gt;, and other constructs which generate or consume coroutines or async iterators/context managers mostly just work. But the above Webloop methods are the most useful in terms of creating behaviors you might want in your program.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Rather than walk through each method individually, I think the most instructive thing to do is simply to present and discuss examples of what I think are the most useful strategies:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;&lt;code&gt;create_task&lt;/code&gt;, which schedules a coroutine to be run soon.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;call_soon/call_later&lt;/code&gt;, which schedules a callable to be called &#34;ASAP&#34; or after a specific amount of time&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;asyncio.gather&lt;/code&gt;, for running multiple awaitables (coroutines, Tasks, and Futures) concurrently&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;webloopexamples&#34;&gt;Webloop Examples&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 gap-y-8&#34;&gt;
    &lt;div&gt;
        &lt;h4 class=&#34;post-h4&#34;&gt;&lt;code class=&#34;nocode&#34;&gt;create_task()&lt;/code&gt;&lt;/h4&gt;
        &lt;div class=&#34;flex items-stretch flex-col-reverse space-y-2   md:flex-row-reverse md:space-x-2 md:space-x-reverse  &#34;&gt;
    &lt;div class=&#34;flex flex-col items-stretch w-full md:w-1/2&#34;&gt;
        &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
        &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124&#34;&gt;
            &lt;py-script class=&#34;px-2&#34; src=&#34;clock.py&#34;&gt;&lt;/py-script&gt;
            &lt;div id=&#34;clock-output&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:w-1/2&#34;&gt;
        &lt;p class=&#34;code-title&#34;&gt;clock.py&lt;/p&gt;
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;datetime&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; datetime
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;clock_forever&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;):
        now &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;now()
        Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;clock-output&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;now&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;hour&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;now&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minute&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;now&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;second&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_task(clock_forever())&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        
    &lt;/div&gt;
&lt;/div&gt;
        &lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#task-object&#34;&gt;As the Python Documentation says&lt;/a&gt;: &lt;span class=&#34;italic&#34;&gt;Tasks are used to run coroutines in event loops. If a coroutine awaits [on a future], the Task suspends execution of the coroutine and waits for the completion of the Future.&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;This is the key behavior we want when we want coroutines (including async functions defined with &lt;code&gt;async def&lt;/code&gt;) to run concurrently.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;h4 class=&#34;mb-2 post-h4&#34;&gt;&lt;code class=&#34;nocode&#34;&gt;call_soon()&lt;/code&gt; and &lt;code class=&#34;nocode&#34;&gt;call_later()&lt;/code&gt;&lt;/h4&gt;
        &lt;div class=&#34;grid grid-cols-2&#34;&gt;
            &lt;div&gt;
                &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;timer.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;functools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; partial

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;finish_in&lt;/span&gt;(seconds):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seconds &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;timer-output&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;DONE!&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;timer-output&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(seconds, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
        PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;call_later(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, finish_in, seconds&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;call_soon(finish_in, &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
                &lt;py-script src=&#34;timer.py&#34;&gt;&lt;/py-script&gt;
            &lt;/div&gt;
            &lt;div class=&#34;flex flex-col items-stretch w-full&#34;&gt;
                &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
                &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124 md:ml-2&#34;&gt;
                    &lt;div id=&#34;timer-output&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;p class=&#34;post-p&#34;&gt;Let&#39;s say you don&#39;t have a a coroutine with an internal &lt;code&gt;await&lt;/code&gt; - you just have a regular old function (or Callable) that you&#39;d like to be called either &#34;now&#34; (but allow other Async processes to happen as well) or after an interval (while not blocking in the meantime). For that, we have &lt;code&gt;call_soon()&lt;/code&gt; and &lt;code&gt;call_later()&lt;/code&gt;, respectively.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;Notice that this example happens to use both &lt;code&gt;call_soon()&lt;/code&gt; and &lt;code&gt;call_later&lt;/code&gt;, but that&#39;s purely to illustrate their functionality. If you wanted to make an async function that counts down from 5, there are probably clearer ways to do it.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;Two positive effects of using either of these methods is that they (1) wrap your callable in a PyProxy object, so the browser garbage colletor doesn&#39;t throw them away before they&#39;re called; and (2) they return a &lt;a href=&#34;https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Handle&#34;&gt;Handle Object&lt;/a&gt; which can be used to cancel execution of the Callable prior to its calling. Neat!&lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;h4 class=&#34;mb-2 post-h4&#34;&gt;&lt;code class=&#34;nocode&#34;&gt;asyncio.gather()&lt;/code&gt;&lt;/h4&gt;
        &lt;div class=&#34;grid grid-cols-2&#34;&gt;
            &lt;div&gt;
                &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;race.py&lt;/p&gt;
    
    
    &lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;functools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; partial
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Our awaitable coroutine - we&amp;#39;ll use asyncio.gather() to run lots of these&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;racer&lt;/span&gt;(lane_element):
    speed &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;random() &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;.4&lt;/span&gt;
    lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;:
        lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; speed
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;.1&lt;/span&gt;)
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#race is over for this lane; change border color&lt;/span&gt;
    lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;border-yellow-700&amp;#39;&lt;/span&gt;)
    lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;border-green-500&amp;#39;&lt;/span&gt;)
    

NUM_RACERS &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_race&lt;/span&gt;():
    racers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#clear output&lt;/span&gt;
    output &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;race-output&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;firstChild:
        output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;removeChild(output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;firstChild)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(NUM_RACERS):
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Create new progress bars as lanes for our &amp;#34;racers&amp;#34;&lt;/span&gt;
        new_lane &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;progress&amp;#34;&lt;/span&gt;)
        new_lane&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;lane-&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;n&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
        new_lane&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;max &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;
        new_lane&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;border-4&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;border-yellow-500&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;m-2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;h-6&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;w-11/12&amp;#39;&lt;/span&gt;)
        

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Add the progress bars and labels to the document&lt;/span&gt;
        document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;race-output&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(new_lane)

        racers&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(racer(new_lane))

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Return a Promise representing the results.&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# If you don&amp;#39;t need the results, no need to return or await this&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;gather(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;racers)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Run the race over and over&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;race_monitor&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        results &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; run_race()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; results
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Start the monitoring task&lt;/span&gt;
asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_task(race_monitor())&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
    
&lt;/div&gt;
                &lt;py-script src=&#34;race.py&#34;&gt;&lt;/py-script&gt;
            &lt;/div&gt;
            &lt;div class=&#34;flex flex-col items-stretch w-full&#34;&gt;
                &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
                &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124 md:ml-2&#34;&gt;
                    &lt;div id=&#34;race-output&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;p class=&#34;post-p&#34;&gt;When you have multiple &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio-awaitables&#34;&gt;awaitable objects&lt;/a&gt; (coroutines, Tasks, and Futures) that you want to run &#34;in a group&#34; or &#34;as a batch&#34;, &lt;code&gt;asyncio.gather()&lt;/code&gt; can simplify your life. If any of the collection of awaitables is a coroutine, it is automatically wrapped in a Task (and scheduled).&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;In a PyScript/Pyodide context, one can image using &lt;code&gt;gather&lt;/code&gt; for UI management or &#34;backend&#34; work. For example, you might have a collection of onscreen objects (like the example above) that each need to update themselves asynchronously. Or you might &lt;code&gt;gather()&lt;/code&gt; a collection of coroutines that use &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/http.html?highlight=pyfetch#pyodide.http.pyfetch&#34;&gt;pyfetch()&lt;/a&gt; to retrieve network resources, allowing them to fetch asynchronously while PyScript continues executing on the page.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;implicitasync&#34;&gt;Implicit Async&lt;/h2&gt;
&lt;div class=&#34;mt-2 warning-banner&#34;&gt;As predicted, this featurew as removed in &lt;a href=&#34;../post/whats-new-pyscript-2022-12-1#implicit&#34;&gt;PyScript 2022.12.1&lt;/a&gt;; it is described here for historical reference.&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript/Pyodide has an interesting quirk that allows an additional way of working with coroutines, that has to to with what&#39;s called &lt;span class=&#34;italic&#34;&gt;&#34;Top-Level Await&#34;&lt;/span&gt;. If you&#39;ve written async/await code before, you might be familiar with Python yelling at you for trying to use &#39;await&#39; outside of a coroutine, like so:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2&#34;&gt;
    &lt;div class=&#34;h-full m-2 overflow-x-auto&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;One plus two is... wait for it...&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#555&#34;&gt;----&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;^&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;SyntaxError&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;await&amp;#39;&lt;/span&gt; outside function&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;h-full m-2 overflow-x-auto&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_slowly&lt;/span&gt;():
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;One plus two is... wait for it...&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; add_slowly()
    &lt;span style=&#34;color:#555&#34;&gt;----&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;^&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;SyntaxError&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;await&amp;#39;&lt;/span&gt; outside &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; function&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;However, if you run those same pieces of code in PyScript, they work just fine!&lt;/p&gt;
&lt;div class=&#34;flex flex-col-reverse items-stretch space-y-2 md:flex-row-reverse md:space-x-2 md:space-x-reverse&#34;&gt;
    &lt;div class=&#34;flex flex-col items-stretch w-full md:w-1/2&#34;&gt;
        &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
        &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124&#34;&gt;
            &lt;py-script class=&#34;px-2&#34; src=&#34;bad_add.py&#34; std-out=&#34;ou\t&#34;&gt;&lt;/py-script&gt;
            &lt;div id=&#34;out&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:w-1/2&#34;&gt;
        &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;bad_add.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_slowly&lt;/span&gt;():
    Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;out&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;One plus two is... wait for it...&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)
    Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;out&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#This isn&amp;#39;t normally possible:&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; add_slowly()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The reason that code with top-level await (i.e. &#34;&lt;code&gt;await&lt;/code&gt;&#34; outside an async function) works in PyScript is due to a design decision on the part of the Pyodide team, whose thinking I imagine goes like this:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;We usually can&#39;t just nakedly &lt;code&gt;await&lt;/code&gt; things in Python, since we need an active event loop to schedule the coroutines into.&lt;/li&gt;
    &lt;li&gt;In the browser, we &lt;span class=&#34;italic&#34;&gt;always&lt;/span&gt; have an active event loop (the browser event loop)&lt;/li&gt;
    &lt;li&gt;CPython allows us to compile code with the &lt;code class=&#34;code&#34;&gt;PyCF_ALLOW_TOP_LEVEL_AWAIT&lt;/code&gt;, which, if it finds Top-Level &#39;Await&#39; statements, returns the evaluated code as a coroutine&lt;/li&gt;
    &lt;li&gt;Therefore, if we evaluate a chunk of code and the result is a coroutine, we have the option to simply schedule it into the browser event loop for the user and execute it. (If the result and discuss is not a coroutine, just return the result as normal.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;This is exactly what the internal Pyodide function &lt;code class=&#34;code&#34;&gt;runPythonAsync()&lt;/code&gt; does - compiles code with PyCF_ALLOW_TOP_LEVEL_AWAIT, and if the result is a coroutine, schedules it and returns a promise representing the result. It&#39;s essentially a convenience function that takes advantage of the fact that, by definition, we always have an every loop available to us. And since PyScript (currently) uses &lt;code class=&#34;code&#34;&gt;runPythonAsync()&lt;/code&gt; to run every code block, you can write top-level await code wherever you like.&lt;/p&gt;
&lt;p class=&#34;warning-banner&#34;&gt;Importantly, &lt;code&gt;runPythonAsync()&lt;/code&gt; &lt;span class=&#34;font-semibold&#34;&gt;does not run synchronous Python &#39;asynchronously&#39;&lt;/span&gt;. It simply allows code with Top Level Await statements to compile and be &lt;code&gt;await&lt;/code&gt;ed. &lt;a href=&#34;https://gist.github.com/JeffersGlass/10adc330d8099fda1ee481bd82bc29c7&#34;&gt;[1]&lt;/a&gt;. &lt;code class=&#34;code&#34;&gt;While True: pass&lt;/code&gt; will still block forever.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;See the following pair of demos, both of which run with top-level await&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 md:gap-2 md:grid-cols-2&#34;&gt;
    &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;sleep_1.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; count

output_1 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output-1&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; count():
    output_1&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Counted to &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
    &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;sleep_2.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; count

output_2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output-2&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; count():
    output_2&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Counted to &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;.7&lt;/span&gt;) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Note the smaller sleep time!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
&lt;py-script&gt;
    import asyncio
from itertools import count

output_1 = Element(&#34;output-1&#34;)
for i in count():
    output_1.write(f&#34;Counted to {i}&#34;)
    await asyncio.sleep(1)

&lt;/py-script&gt;
&lt;py-script&gt;
    import asyncio
from itertools import count

output_2 = Element(&#34;output-2&#34;)
for i in count():
    output_2.write(f&#34;Counted to {i}&#34;)
    await asyncio.sleep(.7) #Note the smaller sleep time!

&lt;/py-script&gt;
&lt;/div&gt;
&lt;div class=&#34;flex flex-col md:flex-row&#34;&gt;
    &lt;div class=&#34;w-full my-4 md:w-1/2&#34;&gt;
        &lt;span class=&#34;text-sm text-gray-500&#34;&gt;Output from sleep_1.py&lt;/span&gt;
        &lt;div class=&#34;h-auto text-base bg-green-100 border-2&#34; id=&#34;output-1&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full m-4 md:w-1/2&#34;&gt;
        &lt;span class=&#34;text-sm text-gray-500&#34;&gt;Output from sleep_2.py&lt;/span&gt;
        &lt;div class=&#34;h-auto text-base bg-green-100 border-2&#34; id=&#34;output-2&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;BUT BEWARE!&lt;/span&gt; This is the part that&#39;s most likely to change in future versions of PyScript. You&#39;ll note above that when we compile our Python Code, if the result is a coroutine, the JavaScript side gets a promise that resolves to the result of the coroutine. Importantly though, at least in PyScript 2022.09.1, &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/7d5f6c9ead72798f23915b2ce7b619f02322ac84/pyscriptjs/src/runtime.ts#L180&#34;&gt;we don&#39;t await that promise resolving!&lt;/a&gt; This is what allows the loader to continue, other scripts to evaluate etc. while the scheduled coroutine resolves in the background.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s been &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/763&#34;&gt;quite&lt;/a&gt; a &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/715&#34;&gt;bit&lt;/a&gt; of &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/796&#34;&gt;discussion&lt;/a&gt; around what the loader lifecycle and async scripts, so I do expect this to change in the future. At this moment, it doesn&#39;t look like it&#39;s changing in the planned 2022.10.1, but time will tell!&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Personally, I think the implicit style is nice to have for quick-and-dirty examples like those just above, but they do make it hard to reason about execution order and script completion. And like I say, I suspect the details of that are going to continue to change and morph over time, so they might not be the most future-proof solution.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That&#39;s why I&#39;d recommend, for any significant projects, you lean toward using the &lt;code&gt;Webloop&lt;/code&gt; methods for handling concurrent tasks. Back when I wrote &lt;a href=&#34;../project/the-7-guis-pyscript/&#34;&gt;The 7 Guis in PyScript&lt;/a&gt;, I wasn&#39;t particularly familiar with Webloop, and so coded everything in the implicit style. All of the async work in those demos breaks down to essentially &#34;do a lot of setup, then run a loop asynchronously forever.&#34; Which makes quick, implicit async plausible.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But when I moved on to the much-more-integrated &lt;a href=&#34;../project/richdemo/&#34;&gt;Rich on PyScript Project&lt;/a&gt;, I had a hell of a time reasoning about what processes would be completed when, how to cancel and monitor them etc. from the Python side - starting that project with an asyncio/Webloop approach from the beginning would have been radially easier.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, remember that while &lt;code&gt;async/await&lt;/code&gt; in PyScript/Pyodide works &lt;span class=&#34;italic&#34;&gt;mostly&lt;/span&gt; like it does on desktop or terminal, because there&#39;s an intermediate layer of reimplementation in Webloop, not all behaviors are guaranteed to be exactly the same. Troubleshoot and test thoroughly, and &lt;span class=&#34;italic&#34;&gt;don&#39;t block the loop!&lt;/span&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Whats New in Pyscript 2022.09.1</title>
      <link>https://jeff.glass/post/whats-new-pyscript-2022-09-1/</link>
      <pubDate>Fri, 30 Sep 2022 12:05:33 -0500</pubDate>
      
      <guid>https://jeff.glass/post/whats-new-pyscript-2022-09-1/</guid>
      <description>&lt;style&gt;
    body {
        scroll-margin-top: 8em;
    }
&lt;/style&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;PyScript Version 2022.09.1 was just released&lt;/span&gt;, and just as &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/337&#34;&gt;tech lead Fabio Pliger said&lt;/a&gt; in proposing the versioning scheme:&lt;/p&gt;
&lt;blockquote class=&#34;post-blockquote&#34;&gt;&#34;...An important aspect to keep in mind is that PyScript is still in its very early stages. So, we should highlight that the expectations should be that think can often break until we reach a level of maturity and stability.&#34;&lt;/blockquote&gt;
&lt;p class=&#34;post-p&#34;&gt;And wow, are there a lot of new things in this version of PyScript. What&#39;s more, the default Pyodide runtime has been upgraded to the recently-released &lt;a href=&#34;https://pyodide.org/en/0.21.2/usage/quickstart.html&#34;&gt;version 21.2&lt;/a&gt;, which itself provides many new features and improved functionality to PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I want to specificically highlight new features, breaking changes, and neat behind-the-scenes work. The full details of what&#39;s changed are captured in the &lt;a href=&#34;https://github.com/pyscript/pyscript/compare/2022.06.1...2022.09.1&#34; class=&#34;&#34;&gt;PyScript Release Changelog&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;grid justify-center p-1 m-auto bg-gray-200&#34;&gt;
        &lt;span&gt;Jump To: &lt;span&gt;
        &lt;a href=&#34;#PyScript&#34;&gt;PyScript&lt;/a&gt; • 
        &lt;a href=&#34;#Documentation&#34;&gt;Documentation&lt;/a&gt; • 
        &lt;a href=&#34;#Pyodide&#34;&gt;Pyodide&lt;/a&gt; • 
        &lt;a href=&#34;#Emscripten&#34;&gt;Emscripten&lt;/a&gt; • 
        &lt;a href=&#34;#Testing&#34;&gt;Testing&lt;/a&gt; • 
        &lt;a href=&#34;#Infrastructure&#34;&gt;Infrastructure&lt;/a&gt; • 
        &lt;a href=&#34;#Next&#34;&gt;What&#39;s Next&lt;/a&gt;        
&lt;/div&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;PyScript&#34;&gt;PyScript&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&amp;lt;py-env&amp;gt; Will Be Going Away&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, the &lt;code&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; tag was where one would specify additional libraries to download from PyPI, as well as URL&#39;s to load into the local filesystem. Now, those options are being &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md&#34;&gt;folded into &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;&lt;/a&gt;, alongside other options like plugins and &lt;a href=&#34;#runtimes&#34;&gt;runtimes&lt;/a&gt; and metadata like the pages name and version number. The use of &lt;code&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; is deprecated and &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/775&#34;&gt;will be removed in a future release&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Additionally, &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; can now &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/783&#34;&gt;accept configurations in JSON in addition to TOML&lt;/a&gt;. Creators using build systems that strip out whitespace (which isn&#39;t very kind to TOML) may find this especially useful.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
  packages: [&amp;#34;rich&amp;#34;, &amp;#34;faker&amp;#34;]
  paths: [&amp;#34;./data_file.txt&amp;#34;]
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;    
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;span class=&#34;px-1 font-mono bg-gray-200&#34;&gt;py-*&lt;/span&gt; Events&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The alpha and 2022.06.1 releases supported a couple of special attributes on HTML tags - &lt;code class=&#34;code&#34;&gt;pys-onClick&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;pys-onKeyDown&lt;/code&gt; - that PyScript hooked into to allow the running of Python code in response to a couple of common browser interactions.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Release 2022.09.1 &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/561&#34;&gt;radically expands this capability&lt;/a&gt; with &lt;a href=&#34;https://github.com/lpliger/pyscript/blob/19491d80107f17d43633b224e231cd1cf2f657d5/pyscriptjs/src/components/pyscript.ts#L128-L220&#34;&gt;many, many more browser events supported.&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/686&#34;&gt;syntax of py-* events has also changed&lt;/a&gt; to more closely match JavaScripts &lt;code class=&#34;code&#34;&gt;event&lt;/code&gt; syntax. Previously, you supplied a &lt;code&gt;Callable&lt;/code&gt; which was called with no arguments. Now you write a line of code (optionally broken up with &lt;code&gt;;&lt;/code&gt; symbols) which is run when the event triggers. The correct usage is now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    from js import console as jsconsole
    def say_hi(name):
        jsconsole.log(&amp;#34;Hi, &amp;#34; + name)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-paragraph&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-mouseover&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;say_hi(&amp;#39;Jeff&amp;#39;); jsconsole.log(&amp;#39;I did it!&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;Mouse Over Me&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that, unlike JavaScripts event syntax, the value of the &lt;code&gt;py-*&lt;/code&gt; attribute can be any valid Python code, not just a single function call.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Better Input/Output Escaping&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Embedding something that looks like HTML inside of Python inside of HTML is... well, even just saying it is a mouthful, and it comes with its own pitfalls. Previously, PyScript tags like the following would fail in a couple of ways:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;b&amp;gt;A bold tag!&amp;lt;/b&amp;gt;&amp;#34;&lt;/span&gt;)
tag_name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;I&amp;#39;m pretty sure 1 &amp;lt; 2 but 2 &amp;gt; 0&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;First, the Browser needs to be prevented from interpretting the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tag as internal HTML, and second, the output needs to recognize that the &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; symbols are &lt;i&gt;not&lt;/i&gt; an HTML tag. These issues have been solved by a &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/684&#34;&gt;pair&lt;/a&gt; of &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/481&#34;&gt;changes&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Better Logging&lt;/h4&gt;
&lt;img src=&#34;logging.PNG&#34; alt=&#34;&#34; class=&#34;float-right w-full m-2 border-2 border-gray-300 sm:w-80&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Logging to the Developer Console that PyScript does is now much cleaner, and annotated by what file the log line is generated in. This makes it easier to see what&#39;s logged by the user&#39;s program and what&#39;s being logging by the PyScript mechanisms themselves.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34; id=&#34;runtimes&#34;&gt;Framework for Multiple Runtimes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The use of a specific version of Pyodide is no longer hardcoded into a PyScript release - users may now opt to supply a URL and name for a &#39;runtime&#39; in the &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag. If one is not supplied, the default is still to load the version of Pyodide that PyScript has been most recently tested against, which should be the right option for most users. But this does open the door to future improvements like:
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Running &lt;code&gt;py-script&lt;/code&gt; blocks in different versions of Pyodide&lt;/li&gt;
    &lt;li&gt;Running &lt;code&gt;py-script&lt;/code&gt; blocks in runtimes that are &lt;i&gt;not&lt;/i&gt; Pyodide (Micropython??)&lt;/li&gt;
    &lt;li&gt;Running &lt;code&gt;py-script&lt;/code&gt; blocks in a self-built/custom build of Pyodide for experimentation or demonstrating new features&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Try PyScript&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A new &lt;a href=&#34;https://github.com/pyscript/pyscript#try-pyscript&#34;&gt;Try PyScript&lt;/a&gt; section now leads the main ReadMe on the PyScript GitHub, to more quickly get new users up to speed on how to try out PyScript in their browser.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Contributing&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; guide has been fleshed out with more guidance on developing submitting useful issues, forking the repository for local building and setting up the a development environment, and more. Both Mariana Meireles and Fabio Rosado have contributed excellent information on &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/066ecbe02219e9c9ff5aff28a57d37e7baba8ace&#34;&gt;how to build PyScript&lt;/a&gt; and &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/d203b60f446c347fdb59b6c1350e6b3a2d9f7d66&#34;&gt;how to create and submit a Pull Request&lt;/a&gt; - every open source project should be so lucky!&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;How Tos&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Two new How-To guides were added to the documentation. The first covers &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/howtos/http-requests.md&#34;&gt;how to make HTTP requests in pure Python&lt;/a&gt; by using pyodide&#39;s &lt;code class=&#34;code&#34;&gt;pyfetch&lt;/code&gt; method. The second illustrates the techniques for &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/howtos/passing-objects.md&#34;&gt;passing objects between JavaScript and Python (in PyScript)&lt;/a&gt;, including some slightly-cursed uses of JavaScript&#39;s &lt;code&gt;eval()&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Getting Started&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md&#34;&gt;Getting Started&lt;/a&gt; guide got a huge update to reflect the new &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; changes (see above).&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Pyodide&#34;&gt;Pyodide&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s no secret that the beating heart of the PyScript project is the &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide project&lt;/a&gt;, which makes it possible to run Python in the browser by compiling the CPython runtime to Web Assembly. (This is now &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/792&#34;&gt;nicely highlighted at the top of the PyScript readme&lt;/a&gt;.) Which means that improvements to Pyodide are big boons for PyScript!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While PyScript&#39;s Alpha and 2022.06.1 were designed around Pyodide 20, PyScript 2022.09.1 fully embraces Pyodide 21.2 and the many changes and improvements it brings. We&#39;ll only hit the highlights here; for more details, see the &lt;a href=&#34;https://blog.pyodide.org/posts/0.21-release/&#34;&gt;Pyodide 21 Release Post&lt;/a&gt; and &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#version-0-21-0&#34;&gt;Change Log&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;API Changes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This is probably the most visible change for the casual PyScriptian - the functionality of the Pyodide Python API has been &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2787&#34;&gt;divied&lt;/a&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2790&#34;&gt;up&lt;/a&gt; into &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api.html&#34;&gt;a number of individual packages&lt;/a&gt; for clarity and namespace control. So now, rather than using &lt;code class=&#34;code&#34;&gt;from pyodide import create_proxy&lt;/code&gt;, one would use &lt;code class=&#34;code&#34;&gt;from pyodide.ffi import create_proxy&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_hi&lt;/span&gt;(name):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hi, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;FutureWarning&lt;/span&gt;: pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy has been moved to pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ffi&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy Accessing it through the pyodide module &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; deprecated&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The old locations of the functions are still present but deprecated in version 21, so this change alone won&#39;t break code written for Pyodide 20. But you will see a deprecation warning, and any new code should obey the new namespacing as the deprecation&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Python Wrappers for &lt;code&gt;addEventListener&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt;, and more&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As part of the reorganization mentioned above, the Pyodide API &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2456&#34;&gt;added a bunch of Python utility functions&lt;/a&gt; that handle common JS actions. Specifically, within the a[href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html&#34;&gt;&lt;code&gt;pyodide.ffi.wrappers&lt;/code&gt; namespace, we now have functions for &lt;code class=&#34;code&#34;&gt;add_event_listener&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;remove_event_listener&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;set_timeout&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;clear_timeout&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;set_interval&lt;/code&gt;, and &lt;code class=&#34;code&#34;&gt;clear_interval&lt;/code&gt;. This avoids the need import those JS functions directly from &lt;code&gt;js.document&lt;/code&gt;, and since the Python functions automatically wrap passed functions with &lt;code&gt;create_proxy&lt;/code&gt;, that can be left out as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
  
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_bye&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Goodbye!&amp;#34;&lt;/span&gt;)
    
    tag &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-div&amp;#34;&lt;/span&gt;)
    add_event_listener(tag, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, say_bye)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;pyodide.code.run_js&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Yet another API addition is &lt;code class=&#34;code&#34;&gt;pyodide.code.run_js&lt;/code&gt;, which &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/code.html#pyodide.code.run_js&#34;&gt;evaluates the passed JavaScript code&lt;/a&gt; and returns the result as a JSProxy object. This removes the need to, for example, import &lt;code&gt;eval&lt;/code&gt; from JavaScript to execute JS within Python. A nice clean feature.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;New Packages&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A whole load of new packages have now been bundled with Pyodide, including &lt;code&gt;opencv-python&lt;/code&gt;, &lt;code&gt;ffmpeg&lt;/code&gt;, &lt;code&gt;svgwrite&lt;/code&gt;, &lt;code&gt;sqlite3&lt;/code&gt;, &lt;code&gt;python-magic&lt;/code&gt;, and many more. See the &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#packages&#34;&gt;full list&lt;/a&gt; to see if your favorite package is now included.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Improved Build Process for Binary Wheels&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For those looking to integrate their own Python wheels into apps built with Pyodide, the process for building binary wheels for Pyodide has been significantly improved. See &lt;a href=&#34;https://blog.pyodide.org/posts/0.21-release/#building-binary-wheels-for-pyodide&#34;&gt;the Pyodide team&#39;s blog post on Binary Wheels&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;JavaScript Array Slicing&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There are lots of little edge cases and behaviors where JavaScript&#39;s and Python&#39;s behaviors are different, and the Pyodide team is constantly working on new ways to make that interface less painful. Recently, they&#39;ve implemented &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2907&#34;&gt;slicing on JavaScript array objects&lt;/a&gt; that obeys the same syntax as Python lists, which is a neat feature for those passing data from the browser into Python for processing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s been some &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2938&#34;&gt;additional work and corrections&lt;/a&gt; to this process, and I&#39;d imagine we&#39;ll continue to see it evolve and refine.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Correct Handling of Objects with Null Constructor&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2520&#34;&gt;small but necessary improvement&lt;/a&gt; - previously, it was difficult (if not impossible) to import a javascript &lt;span class=&#34;italic&#34;&gt;module&lt;/span&gt; into Python-in-Pyodide, since JS modules don&#39;t have constructors, but Python expects everything (including modules) to be an object, and so would try to &#34;construct&#34; them. Now, JavaScript module imports work as expected.&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Emscripten&#34;&gt;Emscripten &lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Just as PyScript uses Pyodide as its primary runtime to run Python in the browser, so Pyodide relies on Emscripten to compile CPython &lt;span class=&#34;italic&#34;&gt;for&lt;/span&gt; the browser. Pyodide 21 now moves from using Emscripten version 2.0.27 to version 3.1.14&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To be honest, I&#39;m not well enough versed in EmScripten to be able to parse the &lt;a href=&#34;https://github.com/emscripten-core/emscripten/blob/main/ChangeLog.md&#34;&gt;changelog details&lt;/a&gt; enough to highlight them. If you&#39;re more familiar with that program and its capabilities, &lt;a href=&#34;https://twitter.com/JeffersGlass&#34;&gt;let me know!&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The last two categories of changes really shouldn&#39;t impact end-users of PyScript much, but they&#39;re already making a huge difference to the PyScript devs and maintainers. Prior to this release, there wasn&#39;t much of a testing regimin. Now there&#39;s multiple different means of testing the Python and TypeScript code that make up PyScript, as well as integration tests that test them &lt;span class=&#34;italic&#34;&gt;both&lt;/span&gt;, making it easier and faster to tell when something&#39;s going to break. The testing methods are:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/pyscript/pyscript/tree/main/pyscriptjs/tests/integration&#34;&gt;Integration Tests&lt;/a&gt; with &lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt; - loads HTML pages in the browser and checks that PyScript works as intended.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/pyscript/pyscript/commit/8aba271a421ac9d22006fcaeb776efe686d3892c&#34;&gt;TypeScript Testing&lt;/a&gt; with &lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt; - Testing whether Py-Script elements load correctly via TS/jS&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/pyscript/pyscript/tree/main/pyscriptjs/tests/py-unit&#34;&gt;Python Tests&lt;/a&gt; with &lt;a href=&#34;https://docs.pytest.org/en/7.1.x/&#34;&gt;PyTest&lt;/a&gt; - Test functionality in PyScript.py, Python things like Element, PyScript, ContextManager, etc. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Infrastructure&#34;&gt;Infrastructure&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, there&#39;s the bounty of little improvements that make the codebase stronger and the dev process more repeatable.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Continuous Deployment&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The CI/CD pipeline continues to get refined and grow more resiliant - there have been some improvements to the CD process to ensure &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/ebfed27630c1e41fb42f3a67ef5978df1c9a71c3&#34;&gt;PyScript is rebuilt with every commit and pushed to Unstable&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Type Annotations&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript is being developed in TypeScript, which has the nice property of allowing quick prototyping with loose typing and gradually refining the typing to make the Linter/compiler happier. Several users, especially contributor &lt;a href=&#34;https://github.com/woxtu&#34;&gt;Woxtu&lt;/a&gt; have been hard at work makign sure types line up, Promises are resolved, and type signatures are accurate.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Though end-users don&#39;t see the results directly, having thorough and consistant type signatures makes it easy to spot smelly code when adding new features. Does this function &lt;span class=&#34;italic&#34;&gt;really&lt;/span&gt; need to return two different types of thing, or should we be rethinking the code structure? Why is this &lt;code&gt;any&lt;/code&gt; necessary?&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;/h4&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Next&#34;&gt;What&#39;s Next?&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;So what&#39;s coming down the pipe next for PyScript? Frankly, a ton, and that work is largely visible in the open PR&#39;s and issues on the PyScript GitHub.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;New Output and Rendering Design&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;One of the largest overhauls coming to a near-future version of PyScript is a total rethink of how PyScript renders to the browser window. &lt;code class=&#34;code&#34;&gt;print()&lt;/code&gt; is the right output method for a terminal, but it doesn&#39;t quite make sense in the context of a browser window, where the world of UI is much much larger.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To that end, there&#39;s a &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/622&#34;&gt;large project in the works&lt;/a&gt; that, among other things:
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Introduces a new &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/749&#34;&gt;display() function&lt;/a&gt;, which is the preferred way of outputting to the browser window&lt;/li&gt;
    &lt;li&gt;Routes stdout to the developer console by default&lt;/li&gt;
    &lt;li&gt;Improves escaping of HTML-like text included inside PyScript source&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The exact syntax and methodology of &lt;code&gt;display()&lt;/code&gt; is &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/769&#34;&gt;still being hashed out&lt;/a&gt;, but work is proceding a breakneck pace, and it&#39;ll be exciting to see where it ends up.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;PyScript Lifecycle Changes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Antonio Cuni et. al. have &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/763&#34;&gt;laid the groundwork&lt;/a&gt; for a sweeping rethink of how PyScript manages the lifecylce of initializing, loading Pyodide, processing tags into custom elements, and more. It includes provisions for user-created plugins (to extend functionality) and widgets (essentially custom tags) on the page, in more-or-less a plug-and-play fashion.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This isn&#39;t the kind of dish that can be cooked up in 20 minutes - it&#39;ll touch almost every part of the PyScript codebase. But it&#39;s exciting to see the code moving in a direction that&#39;s more flexible and understandable, which will only make it more expansible.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Async Behavior&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This one is near and dear to my heart. Exactly how asynchronous code should function in PyScript has been a hot topic for some of the maintainers, considering &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/751&#34;&gt;we broke it&lt;/a&gt; and &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/796&#34;&gt;had to fix it&lt;/a&gt; again.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide has a curious feature that allows you to run code with Top Level Await, since there&#39;s always an event loop running (the browser event loop). This is both handy and confusing, since it doesn&#39;t correspond to the experience of running Python in a terminal at all. So what&#39;s to be done? Perhaps we need to &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/751#issuecomment-1250991639&#34;&gt;further specify the execution order of async tags&lt;/a&gt;? Or &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/751#issuecomment-1260999684&#34;&gt;preclude top-level-await entirely&lt;/a&gt;? Do we even entirely understand how Pyodide is interacting with the browser event loop? What if an async task never terminates? Lots to be done here.&lt;/p&gt; 
&lt;h4 class=&#34;post-h4&#34;&gt;And More&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s plenty more swirling around in the PyScript ecosystem - &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/808&#34;&gt;web workers&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/804&#34;&gt;arrow functions&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/756&#34;&gt;further documentation&lt;/a&gt;, a &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/558&#34;&gt;file API&lt;/a&gt;... &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, not all ideas become plans, and not all plans become reality, but there&#39;s no lack of great ideas to keep pushing PyScript forward.&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Monkeypatching Rich for Beautiful Terminals in Pyscript</title>
      <link>https://jeff.glass/post/pyscript-rich/</link>
      <pubDate>Tue, 27 Sep 2022 10:34:50 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-rich/</guid>
      <description>&lt;py-env&gt;
    - rich
    - Faker
    - paths:
        - _richsetup.py
        - scripts/working/livetable.py
&lt;/py-env&gt;
&lt;script src=&#34;https://pyscript.net/releases/2022.06.1/pyscript.js&#34; defer&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://pyscript.net/releases/2022.06.1/pyscript.css&#34; /&gt;
&lt;py-script src=&#34;./_richsetup.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;p-4 mt-4 bg-gray-100 border-2&#34;&gt;
    &lt;div class=&#34;grid items-center grid-cols-1 gap-y-2 xl:grid-cols-2&#34;&gt;
        &lt;div&gt;&lt;py-script src=&#34;./scripts/working/intro.py&#34;&gt;&lt;/py-script&gt;&lt;/div&gt;
        &lt;div&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;intro.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bold]This text[/bold] is being [b]formatted[/b] by the [link https://github.com/Textualize/rich]Rich Console Formatting Library[/]&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and output with [yellow1 on grey15]&amp;lt;PyScript&amp;gt;[/]. There&amp;#39;s a [b link ../../project/richdemo]whole page of examples :link:[/]&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;The REPL below is automatically formatted with RICH;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Press [italic]shift+enter[/] or click :play_button: to execute the REPL:&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;p class=&#34;post-p&#34;&gt;&lt;/py-script&gt;&lt;py-repl id=&#34;top&#34; root=&#34;top&#34; auto-generate=&#34;true&#34;&gt;from rich import inspect; inspect(int)&lt;/py-repl&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;TL;DR: How to Use Rich in PyScript&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;To use Rich for the output of all your PyScript tags, add the following to a new PyScript take at the top of the page&#39;s &lt;code&gt;body&lt;/code&gt;:&lt;/p&gt;
&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;_richsetup.py&lt;/p&gt;
    
    
    &lt;div class=&#34;overflow-y-scroll h-52&#34;&gt;
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; stdout, modules
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;contextlib&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; contextmanager

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.console&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; _is_jupyter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.segment&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Segment
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.jupyter&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; JsException
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Per pyodide docs, determine if we&amp;#39;re running inside pyodide at Runtime&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;is_pyodide&lt;/span&gt;() &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pyodide&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; modules
 
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Patch jupyter detection of the global _console object to detect pyodide&lt;/span&gt;
c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()
c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; is_pyodide &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#monkeypatch jupyter detection @propety&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# patch function so if user creates any additional Consoles they behave correctly&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# While the global _console us&lt;/span&gt;
_is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; is_pyodide

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Jupyter display method renders html and writes to stdout&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display_pyscript&lt;/span&gt;(segments: Iterable[Segment], text: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Allow output of raw HTML within pyscript/pyodide&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    html &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_render_segments(segments)
    stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(html)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#patch jupyter display method to write processed HTML to stdout&lt;/span&gt;
rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; display_pyscript 

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# PyScripts OutputCTXManager is used for stdout but does not implement&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# full fill interface; this prevents a warning each time console tries&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# to print&lt;/span&gt;
stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flush &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;##---- Redefine Pyscript.write()---&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;output_buffer&lt;/span&gt;():
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A (inefficient) buffer to capture stdout to a string &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;write&lt;/span&gt;(self, value: &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;internal_buffer &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;br&amp;gt;&amp;#39;&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; value

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;read&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;flush&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@contextmanager&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;stdout_to_buffer&lt;/span&gt;(el:Element, append: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A context manager to manage an output_buffer, writes to an Element on closure&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; stdout &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Usually Pyscript OutputCTXManager at this pont&lt;/span&gt;
    _old_stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stdout
    stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; output_buffer()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;yield&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;finally&lt;/span&gt;:
        el&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_write(stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read(), append)
        stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _old_stdout 

Element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_write &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Allow Element.write() to take an object from rich&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;newWrite&lt;/span&gt;(self, value, append: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A Monkeypatched version of Pyscript&amp;#39;s Element.write(), auto-transforming Rich objects and rendering standard objects. &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;isinstance&lt;/span&gt;(value, (&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;, JsException)):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_write(value, append)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; stdout_to_buffer(self, append):
            get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(value)

Element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newWrite&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
    
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Live updates work a little differently in PyScript than they do in the terminal - see the &lt;a href=&#34;#live-updates&#34;&gt;Live Updates&lt;/a&gt; section for details.&lt;/p&gt;
&lt;blockquote class=&#34;warning-banner&#34;&gt;This code was written (and is running on this page on) &lt;span class=&#34;font-semibold&#34;&gt;PyScript Version 2022.06.1&lt;/span&gt;. Since there&#39;s an &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/622&#34;&gt; overhaul of how PyScript renders&lt;/a&gt; coming very soon, check the documentation for updates.&lt;/blockquote&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Background&lt;/h2&gt;
&lt;div class=&#34;flex flex-col lg:flex-row&#34;&gt;
    &lt;div class=&#34;w-full lg:w-3/5&#34;&gt;
        &lt;p class=&#34;post-p&#34;&gt;Though PyScript is still in its infancy, the possibilities unlocked by running Python in a browser are already blossoming. As such, I&#39;m seeing more and more users on the &lt;a href=&#34;https://community.anaconda.cloud/c/tech-topics/pyscript/41&#34;&gt;official forums&lt;/a&gt;, the &lt;a href=&#34;https://discord.com/invite/TynfPGRwda&#34;&gt;unofficial Discord&lt;/a&gt;, and the &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;Github Issue Tracker&lt;/a&gt; interested in working with their favorite libraries to the web. Let&#39;s look at the process of taking a package that &lt;span class=&#34;italic&#34;&gt;runs&lt;/span&gt; but doesn&#39;t run &lt;span class=&#34;italic&#34;&gt;well&lt;/span&gt;, and see how we can use patch it after import to bring it to life using Pyscript.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;Lots of packages work fine right out of the box - anything &lt;a href=&#34;https://pyodide.org/en/stable/usage/loading-packages.html#loading-packages&#34;&gt;written in Pure Python stands a good chance of at least running&lt;/a&gt;. But just because it runs, doesn&#39;t mean it&#39;ll look good or behave the way we expect objects to on a webpage. Interactive packages, like &lt;a href=&#34;https://matplotlib.org/&#34;&gt;matplotlib&lt;/a&gt; or terminal-based packages like &lt;a href=&#34;https://github.com/tqdm/tqdm&#34;&gt;tqdm&lt;/a&gt; or &lt;a href=&#34;https://github.com/tartley/colorama&#34;&gt;colorama&lt;/a&gt;, may not be immediately interactable in the browser, because they&#39;ve implemented their own methods for interpretting input/output that the browser doesn&#39;t play nicely with. Just because the PyScript/Pyodide interpretter doesn&#39;t crash doesn&#39;t mean you can get useful info in and out of an existing module.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;One such library is &lt;a href=&#34;https://github.com/Textualize/rich&#34;&gt;Rich&lt;/a&gt;: &#34;a Python library for rich text and beautiful formatting in the terminal&#34; by Will McGugan. It allows for tasteful pretty-printing of most Python objects, syntax highlighting, color and layout control and more, all written in Pure Python. See the sample image to the side or the linked homepage for bountiful exmaples.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;Of course, Rich is intended to run in the terminal. Since the display functionality in a web browser differs significantly from a terminal environment, there&#39;s no reason to expect it will work out of the box in PyScript. But since it exists as a pure Python wheel and is importable by Pyodide, I wanted to see what it would take to get it working.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;What follows is the result of a few hours of bashing things together. It&#39;s not meant to be production ready (thought it could turn into a module if there&#39;s interest). Rather, it&#39;s meant to demonstrate a patching strategy for modules that already integrate with web-Python environments like Jupyter and iPython.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;If you want to skip the dev log, you can skip to &lt;a href=&#34;patch&#34;&gt;the code that runs to patch Rich on this page &lt;/a&gt; or the &lt;a href=&#34;#examples&#34;&gt;gallery of Rich-in-PyScript samples&lt;/a&gt; below.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&#34;items-center justify-center w-auto mx-4 md:float-right md:w-96&#34;&gt;
        &lt;img src=&#34;rich-features.png&#34; alt=&#34;A demo of the features of the rich library, including colors, styles, text, markup etc&#34; class=&#34;mx-auto w-96&#34;&gt;
        &lt;p class=&#34;italic&#34;&gt;The demo image from the Rich GitHub page shows off its many features&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;The Groundwork&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The strategy we&#39;ll employ to get Rich working is called &#34;Monkeypatching.&#34; &lt;a href=&#34;https://web.archive.org/web/20120730014107/http://wiki.zope.org/zope2/MonkeyPatch&#34;&gt;From the Zope Wiki&lt;/a&gt;:&lt;/p&gt;
&lt;p class=&#34;p-2 mx-6 mb-4 italic bg-gray-100 border-l-4 border-gray-800&#34;&gt;A MonkeyPatch is a piece of Python code which extends or modifies other code at runtime (typically at startup)...The motivation for monkeypatching is typically that the developer needs to modify or extend behavior of a third-party product ... and does not wish to maintain a private copy of the source code.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, we&#39;ll be loading/importing Rich &lt;span class=&#34;italic&#34;&gt;as-is&lt;/span&gt;, modifying some of the attributes/methods/behaviors of its classes and functions and leaving others along. This will let us preserve the most of Rich&#39;s functionality untouched, while tweaking it just enough to work inside PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Almost all of the heavy lifting in terms of the formatting is handled by the fact Rich &lt;a href=&#34;https://www.willmcgugan.com/blog/tech/post/rich-adds-support-for-jupyter-notebooks/&#34;&gt;already supports Jupyter Notebooks&lt;/a&gt;, so there&#39;s already translation in place to translate Rich&#39;s internal formatting syntax to HTML. All we have to do is:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Import rich (which means it&#39;ll need to be present in our &lt;code class=&#34;code&#34;&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt;  &lt;/li&gt;
    &lt;li&gt;Hook into or replace the code that detects that we&#39;re running in a Notebook to instead tell that we&#39;re running inside Pyodide.&lt;/li&gt;
    &lt;li&gt;Take the output that would be fed to the notebook and feed it to &lt;code class=&#34;code&#34;&gt;stdout&lt;/code&gt;, where PyScript&#39;s context managers will get it to the right place&lt;/li&gt;
    &lt;li&gt;Overwrite the built-in &lt;code class=&#34;code&#34;&gt;print()&lt;/code&gt; function to point to rich&#39;s print function, to get nicely formatted printing&lt;/li&gt;
    &lt;li&gt;Point PyScript&#39;s &lt;code class=&#34;code&#34;&gt;Element.write()&lt;/code&gt; method at a new method that hooks into Rich&#39;s __rich_console__ and &lt;code class=&#34;code&#34;&gt;__rich__&lt;/code&gt; formatting methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;The Steps&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Making Rich Think We&#39;re in a Jupyter Notebook&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Since we&#39;re intending to run this in a browser anyway, we could just set &lt;code class=&#34;code&#34;&gt;console.is_jupyter = True&lt;/code&gt; to force Rich to render HTML. But we&#39;ll be slightly nicer and redirect that property to a new function &lt;code class=&#34;code&#34;&gt;is_pyodide&lt;/code&gt;. This just looks to see if &#39;pyodide&#39; is in our available modules, &lt;a href=&#34;https://pyodide.org/en/stable/usage/faq.html#how-to-detect-that-code-is-run-with-pyodide&#34;&gt;as suggested by the pyodide FAQ&lt;/a&gt;. This means that whenever our code is running in Pyodide, the Rich library will render as if it&#39;s going to be output to a Jupyter notebook.&lt;/p&gt;
&lt;div class=&#34;mb-6 lg:mx-4&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Per pyodide docs, determine if we&amp;#39;re running inside pyodide at Runtime&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;is_pyodide&lt;/span&gt;() &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pyodide&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; modules
 
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Patch jupyter detection of the global _console object to detect pyodide&lt;/span&gt;
c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()
c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; is_pyodide &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#monkeypatch jupyter detection @propety&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# patch function so if user creates any additional Consoles they behave correctly&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# While the global _console us&lt;/span&gt;
_is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; is_pyodide&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Replacing Rich&#39;s Display Function with our Own&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Similarly, we&#39;ll point &lt;code class=&#34;code&#34;&gt;rich.jupyter.display&lt;/code&gt; at a new function we&#39;ll write that gets the output that the Jupyter notebook would have received and send it to stdout. And, as noted above, we&#39;ll redirect the usual &lt;code class=&#34;code&#34;&gt;print&lt;/code&gt; function to the rich print function, to get nicely formatted outputs whenever we use the standard print() syntax.&lt;/p&gt;
&lt;div class=&#34;mb-6 lg:mx-4&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Jupyter display method renders html and writes to stdout&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display_pyscript&lt;/span&gt;(segments: Iterable[Segment], text: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Allow output of raw HTML within pyscript/pyodide&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    html &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_render_segments(segments)
    stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(html)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#patch jupyter display method to write processed HTML to stdout&lt;/span&gt;
rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; display_pyscript 

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Fixing &lt;span class=&#34;italic&#34;&gt;Element.write()&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, we need to match some adjustments to PyScript&#39;s &lt;code class=&#34;code&#34;&gt;Element.write()&lt;/code&gt; function, which is a utility method that allows PyScript users to send output to a specific DOM element directly. Since this bypasses the usual writing to stdout (and directly modifies the &lt;span class=&#34;italic&#34;&gt;innerHTML&lt;/span&gt; attribute of the DOM element), we need to do a little legwork to get the formatting to work.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In a nutshell, we&#39;ll solve this issue in 3 steps:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;When the user&#39;s code calls to &lt;code class=&#34;code&#34;&gt;Element.write()&lt;/code&gt;, if the object written is a plain &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;Exception&lt;/code&gt;, or &lt;code&gt;JsException&lt;/code&gt;, we&#39;ll pass it though to &lt;code class=&#34;code&#34;&gt;Element.write()&lt;/code&gt; unchanged. This preserves some of the functionality around how PyScript currrently does error handling and presentation.&lt;/li&gt;
        &lt;li&gt;Otherwise, we&#39;ll use a context manager to temporarily redirect &lt;code&gt;stdout&lt;/code&gt; to a buffer, feed the object to &lt;code class=&#34;code&#34;&gt;rich.console.print()&lt;/code&gt;, and capture that output in the buffer.&lt;/li&gt;
        &lt;li&gt;When the context manager closes, it writes its contents to the appropriate element using the original &lt;code class=&#34;code&#34;&gt;Element.write()&lt;/code&gt; functionality.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; I&#39;ve implemented a rudementary &lt;a href=&#34;https://docs.python.org/3/glossary.html#term-file-object&#34;&gt;File-like object&lt;/a&gt; called &lt;code class=&#34;code&#34;&gt;output_buffer&lt;/code&gt; that simply saves anything written to it as a concatenated string. If this isn&#39;t the first thing in the buffer, we insert a &lt;code class=&#34;code&#34;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tag to make it start on a new line. This is admittedly a hack, but it largely gives the right appearance.&lt;/p&gt;
&lt;div class=&#34;mb-6 overflow-y-scroll h-76 lg:mx-4&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# PyScripts OutputCTXManager is used for stdout but does not implement&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# full fill interface; this prevents a warning each time console tries&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# to print&lt;/span&gt;
stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flush &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;##---- Redefine Pyscript.write()---&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;output_buffer&lt;/span&gt;():
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A (inefficient) buffer to capture stdout to a string &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;write&lt;/span&gt;(self, value: &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;internal_buffer &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;br&amp;gt;&amp;#39;&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; value

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;read&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;flush&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@contextmanager&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;stdout_to_buffer&lt;/span&gt;(el:Element, append: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A context manager to manage an output_buffer, writes to an Element on closure&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; stdout &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Usually Pyscript OutputCTXManager at this pont&lt;/span&gt;
    _old_stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stdout
    stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; output_buffer()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;yield&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;finally&lt;/span&gt;:
        el&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_write(stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read(), append)
        stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _old_stdout 

Element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_write &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Allow Element.write() to take an object from rich&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;newWrite&lt;/span&gt;(self, value, append: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A Monkeypatched version of Pyscript&amp;#39;s Element.write(), auto-transforming Rich objects and rendering standard objects. &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;isinstance&lt;/span&gt;(value, (&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;, JsException)):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_write(value, append)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; stdout_to_buffer(self, append):
            get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(value)

Element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newWrite&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;What About ...&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Those who are familiar with the various ways Rich already provides to capture its own output, as well as exporting it as HTML, may have some reasonable questions here. It&#39;s surely possible I&#39;ve missed something in Rich&#39;s expansive API, but I didn&#39;t find a solution that did everything I want without implementing my own context manager. That said, it does feel like there shuold be a simpler way...&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;I wanted to make the default console returned by &lt;code class=&#34;code&#34;&gt;get_console()&lt;/code&gt; have the desired behavior, as well as any consoles the user created in the future. Hence the reason for overriding the _is_jupyter method instead of just making the default console &lt;code class=&#34;code&#34;&gt;force_jupyter=True&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Using &lt;code class=&#34;code&#34;&gt;Console.capture()&lt;/code&gt; captures the entire contents of the console, from which it can be exported (or saved as a file) to HTML, but there isn&#39;t a direct way to save just the user-input-turned-into-HTML as far as I know.&lt;/li&gt;
    &lt;li&gt;Because &lt;a href=&#34;https://github.com/Textualize/rich/blob/8e2da1afab8743d8e3c55b8191492cc5f9905b7f/rich/jupyter.py#L84-L95&#34;&gt;Rich&#39;s jupyter.display() method&lt;/a&gt; tries specifically to write to an iPython display, I needed to override this method to render the objects to HTML and just write those to std.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;With all these pieces put together, now most writes to stdout should be formatted using Rich&#39;s format rules.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;live-updates&#34;&gt;Live Updates&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;While there are lots of things that make running Python inside a browser window different from running in a terminal/desktop environment, one of the most striking is that we only have one event loop and we can&#39;t block it. Ever. Even a simple &lt;code class=&#34;code&#34;&gt;time.sleep(1)&lt;/code&gt; irrevocably blocks the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop&#34;&gt;JavaScript event loop&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is where asyncio comes to the rescue. The Pyodide runtime has a custom event loop (&#34;&lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/webloop.html#module-pyodide.webloop&#34;&gt;Webloop&lt;/a&gt;&#34;) that hooks to the asyncio webloop, allowing nonblock asynchronous operations. For example, we can use &lt;code class=&#34;code&#34;&gt;asyncio.sleep()&lt;/code&gt; instead of &lt;code&gt;time.sleep()&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;asynccontextmanager&lt;/code&gt;s instead of &lt;code&gt;context managers&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Hooking this deep into Rich&#39;s functionality requires some significant rewriting of the &lt;a href=&#34;https://rich.readthedocs.io/en/stable/live.html&#34;&gt;Live class&lt;/a&gt;, as well as an additional helper class that constantly refreshes the live display by adding new callouts to the event loop every quarter second. The full results are below.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you want to use the Live update element in your PyScript page, you&#39;ll want to:
    &lt;ul class=&#34;mb-6 post-ul&#34;&gt;
        &lt;li&gt;Add the following code to a PyScript tag near the top of your page.&lt;/li&gt;
        &lt;li&gt;Use the included &lt;code&gt;Live&lt;/code&gt; class instead of importing from &lt;code&gt;Rich.live&lt;/code&gt;. It has the same interface as Rich.live, though not all features are implemented yet.&lt;/li&gt;
        &lt;li&gt;Avoid using any blocking io calls, instead substituting with their async versions. For an example of how to use the new Live class &lt;a href=&#34;https://rich.readthedocs.io/en/stable/live.html&#34;&gt;in the same way Rich does&lt;/a&gt; (i.e. as a context manager), see the live examples on the &lt;a href=&#34;../../project/richdemo&#34;&gt;Rich Demo&lt;/a&gt; page.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;_livepatch.py&lt;/p&gt;
    
    
    &lt;div class=&#34;overflow-y-scroll h-52&#34;&gt;
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;153
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;154
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;155
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;156
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;157
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;158
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;159
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;160
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;161
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;162
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;163
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;164
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;165
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;166
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;167
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;168
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;169
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;170
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;171
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.console&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Console, RenderableType, ConsoleRenderable
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Type, Optional, Callable, IO, List
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;types&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; TracebackType
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.live_render&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; VerticalOverflowMethod

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;PyscriptRefresher&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(
        self,
        renderable: RenderableType,
        element: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Element&amp;#39;&lt;/span&gt;,
        live: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Live&amp;#39;&lt;/span&gt;,
        refresh_per_second: &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,
    ) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; renderable
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;live &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; live
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; element
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh_per_second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; refresh_per_second
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;done &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;


    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update_live&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Starting update live function&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
            console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;About to write &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh_per_second)


    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Starts the refresh coroutine if it is not already running
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Returns:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            True if the coroutine was successfully created and started
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            False if the coroutine was already running, or not successfully created
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
        loop &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyscript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loop
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;About to start running refresh task&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_task(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;update_live())
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#loop.run_until_complete(self._refresh_task)&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;stop&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Stops the refresh coroutine if it is running&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cancel()
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Live&lt;/span&gt;():
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Renders an auto-updating live display of any given renderable.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Mirrors the API of rich.live.LIVE
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        renderable (RenderableType, optional): The renderable to live display. Defaults to displaying nothing.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        console (Console, optional): Optional Console instance. Default will an internal Console instance writing to stdout. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        auto_refresh (bool, optional): Enable auto refresh. If disabled, you will need to call `refresh()` or `update()` with refresh flag. Defaults to True &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        refresh_per_second (float, optional): Number of times per second to refresh the live display. Defaults to 4. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        transient (bool, optional): Clear the renderable on exit (has no effect when screen=True). Defaults to False. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        redirect_stdout (bool, optional): Enable redirection of stdout, so ``print`` may be used. Defaults to True. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        redirect_stderr (bool, optional): Enable redirection of stderr. Defaults to True. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        vertical_overflow (VerticalOverflowMethod, optional): How to handle renderable when it is too tall for the console. Defaults to &amp;#34;ellipsis&amp;#34;. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        get_renderable (Callable[[], RenderableType], optional): Optional callable to get renderable. Defaults to None. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        element_id (str): The id of a DOM element (often a div) that the live element will be written to
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        The screen parameters of rich.live.Live is not used
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(
        self,
        renderable: Optional[RenderableType] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;,
        element_id: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;,
        rich_console: Optional[Console] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;,
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#screen: bool attribute not used&lt;/span&gt;
        auto_refresh: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;,
        refresh_per_second: &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,
        transient: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;,
        redirect_stdout: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;,
        redirect_stderr: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;,
        vertical_overflow: VerticalOverflowMethod &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ellipsis&amp;#34;&lt;/span&gt;,
        get_renderable: Optional[Callable[[], RenderableType]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;,
        &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs
    ) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; refresh_per_second &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;refresh_per_second must be &amp;gt; 0&amp;#34;&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; renderable
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rich_console &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; rich_console &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; get_console()
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#self._screen = screen&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_alt_screen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_redirect_stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; redirect_stdout
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_redirect_stderr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; redirect_stderr
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_restore_stdout: Optional[IO[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_restore_stderr: Optional[IO[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#self._lock = RLock()&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;auto_refresh &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto_refresh
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;transient &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; transient

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;vertical_overflow &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; vertical_overflow
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_get_renderable &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_renderable

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; element_id &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element(element_id)

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh_per_second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; refresh_per_second
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_thread &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; PyscriptRefresher(renderable &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable, element &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element, live&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;self, refresh_per_second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh_per_second)
        

    &lt;span style=&#34;color:#99f&#34;&gt;@property&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;is_started&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Check if live display has been started.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_thread&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_renderable&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; RenderableType:
        renderable &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_get_renderable()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_get_renderable &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable
        )
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; renderable &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;start&lt;/span&gt;(self, refresh: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Start live rendering display.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            refresh (bool, optional): Also refresh. Defaults to False.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; refresh: self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_thread&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;stop&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Stop live rendering display.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_thread&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stop()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __enter__(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Live&amp;#39;&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start(refresh&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __exit__(
        self,
        exc_type: Optional[Type[&lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;BaseException&lt;/span&gt;]],
        exc_val: Optional[&lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;BaseException&lt;/span&gt;],
        exc_tb: Optional[TracebackType],
    ) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stop()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;renderable&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update&lt;/span&gt;(self, renderable: RenderableType, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;, refresh: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Update the renderable that is being displayed
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            renderable (RenderableType): New renderable to use.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            refresh (bool, optional): Refresh the display. Defaults to False.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Not implemented&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;refresh&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Update the display of the Live Render.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#not implemented&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;process_renderables&lt;/span&gt;(
        self, renderables: List[ConsoleRenderable]
    ) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; List[ConsoleRenderable]:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#not implemented&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
    
&lt;/div&gt;
&lt;py-script src=&#34;_livepatch.py&#34;&gt;&lt;/py-script&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Live Table Demo&lt;/h3&gt;
&lt;div class=&#34;flex flex-col space-x-2 xl:flex-row gap-y-2&#34;&gt;
    &lt;div class=&#34;w-full bg-gray-200 border-2 border-gray-400 xl:w-1/2 &#34;&gt;
        &lt;py-script class=&#34;px-2&#34; src=&#34;scripts/working/livetable.py&#34;&gt;&lt;/py-script&gt;
        &lt;div id=&#34;live-table-output&#34; class=&#34;h-56 overflow-y-auto&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full xl:w-1/2&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;livetable.py&lt;/p&gt;
    
    
    &lt;div class=&#34;overflow-y-scroll h-52&#34;&gt;
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deque
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; random, choice, randint
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.table&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Table
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.emoji&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Emoji
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;datetime&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; datetime
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;faker&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Faker
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#from livepatch import Live&lt;/span&gt;

fake &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Faker()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;):
    table &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Table(width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;80&lt;/span&gt;)
    table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add_column(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;, width&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)
    table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add_column(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Source&amp;#34;&lt;/span&gt;, width&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;)
    table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add_column(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Destination&amp;#34;&lt;/span&gt;, width&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;)

    max_rows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; randint(&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;)
    num_rows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; num_rows &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; max_rows:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; Live(table, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;live-table-output&amp;#34;&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;.3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; random() &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;.6&lt;/span&gt;)
            num_rows &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

            time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;now()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;%S.&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
            time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; time[:&lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(time), &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)]
            source, dest &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fake&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ipv4(), fake&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ipv4()

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#data added here is automatically visible in the Table&lt;/span&gt;
            table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add_row(time, source, dest)         &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
    
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;What Works and What Doesn&#39;t&lt;/h2&gt;
&lt;p class=&#34;italic post-p&#34;&gt;See the &lt;a href=&#34;../../project/richdemo&#34;&gt;demo page&lt;/a&gt; for working examples.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Out of the box, this allows for formatting of most static Rich objects: Text, Lists and Dicts, JSON objets, etc. The various formatting objects that rely on them - Panels, Columns, Layouts etc - also work.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Some specific formatting tags are broken - though personally, I&#34;m not too sad that &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; doesn&#39;t work.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Emoji are also (somewhat) broken, though that&#39;s mostly through me running out of time to look at their implementation in depth. A brief glance at the &lt;a href=&#34;https://github.com/Textualize/rich/blob/master/rich/emoji.py&#34;&gt;Emoji.py source&lt;/a&gt; makes it look like perhaps what I&#39;m doing for output is clobbering the unicode characters that should be output as Emoji? Or perhaps how they&#39;re being rendered - the TL;DR example at the top of the page shows (for me) a successful &#34;hand-pointing-down&#34; but a non-colored &#34;play button&#34;.&lt;/p&gt;
&lt;hr class=&#34;my-6&#34;&gt;    
&lt;h2 class=&#34;post-h3&#34;&gt;Things that Don&#39;t Work&lt;/h2&gt;
&lt;div class=&#34;flex flex-col space-y-6&#34;&gt;
    &lt;div class=&#34;flex flex-col space-x-2 xl:flex-row gap-y-2&#34;&gt;
        &lt;div class=&#34;w-full h-32 bg-red-100 border-2 border-gray-400 xl:w-1/2&#34;&gt;
        &lt;h3&gt;Some Text Formatting Options&lt;/h3&gt;
            &lt;py-script class=&#34;px-2&#34; src=&#34;scripts/not_working/richnonformatted.py&#34;&gt;&lt;/py-script&gt;
        &lt;/div&gt;
        &lt;div class=&#34;w-full xl:w-1/2&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;richnonformatted.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[blink]Blinking Text[/blink]&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex flex-col space-x-2 xl:flex-row gap-y-2&#34;&gt;
        &lt;div class=&#34;w-full h-32 bg-red-100 border-2 border-gray-400 xl:w-1/2&#34;&gt;
        &lt;h3&gt;Emoji&#39;s (Ish)&lt;/h3&gt;
            &lt;py-script class=&#34;px-2&#34; src=&#34;scripts/not_working/richemoji.py&#34;&gt;&lt;/py-script&gt;
        &lt;/div&gt;
        &lt;div class=&#34;w-full xl:w-1/2&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;richemoji.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;:red_heart-emoji:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;:red_heart-text:&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;


&lt;!-- &lt;p class=&#34;line-through post-p&#34;&gt;What breaks, however, is anything that uses threading under the hood to operate: live-updating displays, progress bars, that sort of thing. Since &lt;a href=&#34;https://github.com/pyodide/pyodide/issues/237&#34;&gt;threading isn&#39;t currently supported in Pyodide&lt;/a&gt;, there&#39;s not much of a direct solution here, but some workarounds can be had by using &lt;span class=&#34;italic&#34;&gt;async-await&lt;/span&gt; to concurrently update the state of these objects. Check out the &lt;a href=&#34;#progress-bar&#34;&gt;progress-bar demo&lt;/a&gt; below for an example.&lt;/p&gt;
&lt;p class=&#34;px-2 mx-4 bg-gray-200 border-l-4 border-gray-800 post-p&#34;&gt;Since writing the above, I&#39;ve (almost) completed work on implementing a version of the &lt;a href=&#34;https://rich.readthedocs.io/en/stable/live.html&#34;&gt;Rich Live class&lt;/a&gt; using pyodide&#39;s event loop and async/await instead of threads. That work is detailed in a separate post (coming soon), but there are some previews on twitter in the meantime: &lt;a target=&#34;_blank&#34; href=&#34;https://twitter.com/JeffersGlass/status/1559634350513299456?s=20&amp;t=qHo-w2VcStd_-fWLtSdotQ&#34;&gt;[1]&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://twitter.com/JeffersGlass/status/1559671709250342917?s=20&amp;t=qHo-w2VcStd_-fWLtSdotQ&#34;&gt;[2]&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://twitter.com/JeffersGlass/status/1559682257312423937?s=20&amp;t=qHo-w2VcStd_-fWLtSdotQ&#34;&gt;[3]&lt;/a&gt;. I&#39;ve left the examples below that using async/await directly as an example of what you might do if you want to manage updates more manually.&lt;/p&gt; --&gt;

&lt;!-- &lt;style&gt;
    h3 {
        font-size: 1.5rem/* 24px */;
        line-height: 2rem/* 32px */;
        padding-bottom: 0.5rem;
        width: 100%;
        --tw-bg-opacity: 1;
        background-color: rgba(209, 213, 219, var(--tw-bg-opacity));
        padding-left: 0.25rem;
    }
&lt;/style&gt;

&lt;a id=&#34;patch&#34;&gt;&lt;/a&gt;
&lt;h2 class=&#34;mb-6 post-h2&#34; id=&#34;&#34;&gt;The Code&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s all of the code above compiled into a single .py file. To get Rich output on your own PyScript page, include the following code before any of your outputs, or as a separate file using &lt;code class=&#34;code&#34;&gt;src=&#34;...&#34;&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that you&#39;ll need to have the Rich module in your environment - the easiest way to do this is using &lt;code class=&#34;code&#34;&gt;&amp;lt;py-env&amp;gt; - rich &amp;lt;/py-env&amp;gt;&lt;/code&gt;&lt;/p&gt; --&gt;

    
&lt;/div&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Hugo Shortcodes for Coding Blogs</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-shortcodes/</link>
      <pubDate>Tue, 23 Aug 2022 07:43:03 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-shortcodes/</guid>
      <description>&lt;script defer src=&#34;https://pyscript.net/releases/2022.06.1/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://pyscript.net/releases/2022.06.1/pyscript.css&#34; /&gt;
&lt;script defer src=&#34;https://pyscript.net/releases/2022.06.1/pyscript.css&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;As I&#39;ve been &lt;a href=&#34;tags/pyscript&#34;&gt;diving deep into PyScript&lt;/a&gt; the past couple months, I&#39;ve developed a handful of shortcodes for Hugo that make it quicker and easier to display code snippets on the page in a nicely formatted way.&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;We&#39;ll use the following Python code as the source to be formatted. The code below is displayed by simply wrapped it in a pair of &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt; tags:&lt;/p&gt;
&lt;div class=&#34;p-2 m-2 bg-gray-100 border-2 border-gray-500&#34;&gt;
    &lt;pre&gt;
class hello_sayer:
    def __init__(self, greeting = &#34;Hello&#34;):
        self.greeting = greeting
    def say_hello(self, name):
        print(f&#34;{self.greeting}, {name}!&#34;)

if __name__ == &#34;__main__&#34;:
    h = hello_sayer(&#34;Good morning&#34;)
    h.say_hello(&#34;Jeff&#34;)&lt;/pre&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This really isn&#39;t a bad place to start, but now let&#39;s make it better.&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;All of the following assumes the &lt;a href=&#34;&#34; hef=&#34;https://xyproto.github.io/splash/docs/monokai.html&#34;&gt;monokai syntax highlighting theme&lt;/a&gt; and use of the &lt;a href=&#34;https://v2.tailwindcss.com/&#34;&gt;tailwind css framework&lt;/a&gt;. The custom css-classes used on this page are included &lt;a href=&#34;#css-classes&#34;&gt;at the end&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;highlight&#34; class=&#34;text-2xl&#34;&gt;Built-in &lt;code&gt;{{&amp;lt; highlight &amp;gt;}}&lt;/code&gt;&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can use Hugo&#39;s built-in &lt;code&gt;{{&amp;lt; highlight &amp;gt;}}&lt;/code&gt; shortcode to highlight our code.  This works fairly-well for simple code examples that you&#39;re copying and pasting into the document - it&#39;s also the default behavior if you&#39;re relyingon Markdown code fences to do highlighting for you.&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 space-y-2 lg:space-x-2 lg:space-y-0 lg:grid-cols-2&#34;&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-gray-500&#34;&gt;Code&lt;/p&gt;
        &lt;pre class=&#34;bg-gray-100 border-2 border-gray-500&#34;&gt;
{{ highlight python }}
    class hello_sayer:
        def __init__(self, greeting = &#34;Hello&#34;):
            self.greeting = greeting
        def say_hello(self, name):
            print(f&#34;{self.greeting}, {name}!&#34;)

    if __name__ == &#34;__main__&#34;:
        h = hello_sayer(&#34;Good morning&#34;)
        h.say_hello(&#34;Jeff&#34;)
{{ /highlight }}&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-green-500&#34;&gt;Result&lt;/p&gt;
        &lt;div class=&#34;p-1 border-2 border-green-500&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;hello_sayer&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; greeting
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_hello&lt;/span&gt;(self, name):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;!&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    h &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; hello_sayer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Good morning&amp;#34;&lt;/span&gt;)
    h&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;say_hello(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;loadcode&#34; class=&#34;mt-4 text-2xl&#34;&gt;Import Code with &lt;code&gt;loadcode&lt;/code&gt;&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The first and simplest shortcode I wrote I call &lt;code&gt;loadcode&lt;/code&gt;, which simply takes the contents of an external file and drops it into the current file. The source is:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;layouts/shortcodes/loadcode.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{{ os.ReadFile (.Get 0) | htmlUnescape | safeHTML}}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;If we move our &#34;hello_saver&#34; code into a separate file called &lt;code&gt;hellosayer.py&lt;/code&gt;, we can use &lt;code&gt;loadcode&lt;/code&gt; to dynamically load the text into our page. This allows for using an external code editor to work on the code itself (with autocompletion, linting etc) while keeping the display correct on the page.&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 space-y-2 lg:space-x-2 lg:space-y-0 lg:grid-cols-2&#34;&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-gray-500&#34;&gt;Code&lt;/p&gt;
        &lt;pre class=&#34;bg-gray-100 border-2 border-gray-500&#34;&gt;
&lt;pre&gt;{{&amp;lt; highlight python &amp;gt;}}
{{&amp;lt; loadcode &amp;quot;post/Cloud-Resume-Challenge-Shortcodes/hellosayer.py&amp;quot; &amp;gt;}}
{{&amp;lt; /highlight &amp;gt;}}&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-green-500&#34;&gt;Result&lt;/p&gt;
        &lt;div class=&#34;p-1 border-2 border-green-500&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;hello_sayer&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; greeting
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_hello&lt;/span&gt;(self, name):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;!&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    h &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; hello_sayer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Good morning&amp;#34;&lt;/span&gt;)
    h&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;say_hello(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;showcode&#34; class=&#34;mt-4 text-2xl&#34;&gt;Pleasing Code Displays with &lt;code&gt;{{&amp;lt; showcode &amp;gt;}}&lt;/code&gt;&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course when writing about code, it&#39;s nice for me to have a fairly standard format that code blocks are displayed in, including the title of the included file. The &lt;code&gt;showcode&lt;/code&gt; shortcode accomplishes this: it adds a nicely beveled header tag to the top of the code block, and ensures that if the code is over 20 lines, we prevent it from getting any longer and add a scrollbar. The second and third arguments to &lt;code&gt;showcode&lt;/code&gt; are the language to try to highlight and the highlight options:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;layouts/shortcodes/showcode.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;code-title&amp;#34;&lt;/span&gt;&amp;gt;{{ path.Base (.Get 0) }}&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    {{ $lines :=  len (split (os.ReadFile (.Get 0)) &amp;#34;\n&amp;#34;) }}
    {{ if ge $lines 21 }}
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-scroll h-124&amp;#34;&lt;/span&gt;&amp;gt;
    {{ end }}
    {{ highlight (os.ReadFile (.Get 0) | htmlUnescape | safeHTML) (.Get 1) (.Get 2) }}
    {{ if ge $lines 21 }}
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;post-img-caption&amp;#34;&lt;/span&gt;&amp;gt;Scroll to see complete code&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    {{ end }}
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Applying this to our &lt;code&gt;hellosayer.py&lt;/code&gt; example, we get:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 space-y-2 lg:space-x-2 lg:space-y-0 lg:grid-cols-2&#34;&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-gray-500&#34;&gt;Code&lt;/p&gt;
        &lt;pre class=&#34;bg-gray-100 border-2 border-gray-500&#34;&gt;
&lt;pre&gt;{{&amp;lt; showcode &amp;quot;post/Cloud-Resume-Challenge-Shortcodes/hellosayer.py&amp;quot; &amp;quot;python&amp;quot; &amp;gt;}}&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-green-500&#34;&gt;Result&lt;/p&gt;
        &lt;div class=&#34;p-1 border-2 border-green-500&#34;&gt;
            &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;hellosayer.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;hello_sayer&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; greeting
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_hello&lt;/span&gt;(self, name):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;!&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    h &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; hello_sayer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Good morning&amp;#34;&lt;/span&gt;)
    h&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;say_hello(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;showandrun&#34; class=&#34;mt-4 text-2xl&#34;&gt;Displaying and Running PyScript Code with &lt;code&gt;{{&amp;lt; showandrun &amp;gt;}}&lt;/code&gt;&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;For an upcoming post about integrating the &lt;a href=&#34;https://rich.readthedocs.io/en/stable/&#34;&gt;Rich&lt;/a&gt; terminal formatting library with PyScript, I&#39;d like to be able to run a piece of Python code in PyScript on the page &lt;span class=&#34;italic&#34;&gt;and&lt;/span&gt; display its source code adjacent to it. For this, I use the &lt;code&gt;showandrun&lt;/code&gt; shortcode:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;showandrun&lt;/code&gt; creates a div which displays the source much like &lt;code&gt;showcode&lt;/code&gt; does; however, for my purposes, since it&#39;s intended specifically to run Python code and be formatted a specific way, the language is hardcoded to &#34;python3&#34; and the options are not passed from the shortcode.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The lengthy &lt;a href=&#34;https://v2.tailwindcss.com/&#34;&gt;tailwind&lt;/a&gt; class list in the first div ensures that the code and results live side-by-side on large screens, but get stacked one-over-the-other on smaller/mobile screens. We also accept a &#34;flip&#34; parameter which swaps the placement of the code and results, if desired.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;layouts/shortcodes/shownadrun.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex items-stretch flex-col-reverse space-y-2 {{ if (.Get &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;direction&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;)&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;(.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;direction&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;)&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;flip&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;md:flex-row-reverse&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;md:space-x-2&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;md:space-x-reverse&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;md:flex-row&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;md:space-x-2&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex flex-col items-stretch w-full md:w-1/2&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex-none w-full italic h-7&amp;#34;&lt;/span&gt;&amp;gt;Live PyScript Results:&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124&amp;#34;&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px-2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ path.Base (.Get &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;)&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ strings.TrimSuffix &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;py&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;Base&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;(.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;))&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;-output&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full md:w-1/2&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;code-title&amp;#34;&lt;/span&gt;&amp;gt;{{ path.Base (.Get &amp;#34;file&amp;#34;) }}&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        {{ $lines :=  len (split (os.ReadFile (.Get &amp;#34;file&amp;#34;)) &amp;#34;\n&amp;#34;) }}
        {{ if ge $lines 21 }}
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-scroll h-124&amp;#34;&lt;/span&gt;&amp;gt;
        {{ end }}
        {{ highlight (os.ReadFile (.Get &amp;#34;file&amp;#34;) | htmlUnescape | safeHTML) &amp;#34;python3&amp;#34; &amp;#34;&amp;#34; }}
        {{ if ge $lines 21 }}
        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;post-img-caption&amp;#34;&lt;/span&gt;&amp;gt;Scroll to see complete code&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        {{ end }}
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The result, when applied to &lt;code&gt;hellosayer.py&lt;/code&gt;, is:&lt;/p&gt;

&lt;div class=&#34;grid grid-cols-1 space-y-2&#34;&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-gray-500&#34;&gt;Code&lt;/p&gt;
        &lt;pre class=&#34;bg-gray-100 border-2 border-gray-500&#34;&gt;
&lt;pre&gt;{{&amp;lt; showandrun file=&amp;quot;post/Cloud-Resume-Challenge-Shortcodes/hellosayer.py&amp;quot; direction=&amp;quot;flip&amp;quot; &amp;gt;}}&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-green-500&#34;&gt;Result&lt;/p&gt;
        &lt;div class=&#34;p-1 border-2 border-green-500&#34;&gt;
            &lt;div class=&#34;flex items-stretch flex-col-reverse space-y-2   md:flex-row-reverse md:space-x-2 md:space-x-reverse  &#34;&gt;
    &lt;div class=&#34;flex flex-col items-stretch w-full md:w-1/2&#34;&gt;
        &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
        &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124&#34;&gt;
            &lt;py-script class=&#34;px-2&#34; src=&#34;hellosayer.py&#34;&gt;&lt;/py-script&gt;
            &lt;div id=&#34;hellosayer-output&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:w-1/2&#34;&gt;
        &lt;p class=&#34;code-title&#34;&gt;hellosayer.py&lt;/p&gt;
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;hello_sayer&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; greeting
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_hello&lt;/span&gt;(self, name):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;!&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    h &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; hello_sayer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Good morning&amp;#34;&lt;/span&gt;)
    h&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;say_hello(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;a id=&#34;css-classes&#34;&gt;&lt;/a&gt;
&lt;h2 id=&#34;cssclasses&#34; class=&#34;mt-4 text-2xl&#34;&gt;CSS Classes&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Many of the examples above make use of a couple of &#39;css-classes&#39; in the tailwind style that I&#39;ve defined for ease of use. Their definitions (in both tailwind classes and raw css) are:&lt;/p&gt;
&lt;div class=&#34;pl-4 overflow-y-auto h-124&#34; style=&#34;background-color:#f0f0f0&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;/* in tailwind styles: */
.code-title {
    @apply table-cell px-6 py-1 font-semibold leading-tight text-center text-white rounded-t-xl;
    background-color: #f0f3f3;
}

/* in css: */
.code-title {
    display: table-cell;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
    padding-left: 1.5rem;
    padding-right: 1.5rem;
    color: #ffffff;
    font-weight: 600;
    line-height: 1.25;
    text-align: center;
    border-top-left-radius: 0.75rem;
    border-top-right-radius: 0.75rem;
    background-color: #f0f3f3;
}

/* in tailwind styles: */
.post-img-caption {
    @apply w-auto m-auto italic text-center;
    }

/* in css: */
.post-img-caption {
    font-style: italic;
    text-align: center;
    width: auto;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Pyscript/Pyodide and JS Object Passing</title>
      <link>https://jeff.glass/post/pyscript-js-functions/</link>
      <pubDate>Sun, 21 Aug 2022 07:38:14 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-js-functions/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;A question I&#39;ve been seeing quite a bit over in the &lt;a href=&#34;https://discord.gg/RUYqNXRN&#34;&gt;Unofficial PyScript Community Discord&lt;/a&gt; is: &lt;span class=&#34;italic font-semibold&#34;&gt;How do you pass objects back and forth between JavaScript and PyScript/Pyodide?&lt;/span&gt; So I&#39;ve created recipies below for passing objects back and forth between JavaScript and Python; the specifics are somewhat different depending on whether we&#39;re working in PyScript or directly in Pyodide, so both options are illustrated below.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Currently, you can:
    &lt;ul class=&#34;&#34;&gt;
        &lt;li&gt;✅ Pass objects from JavaScript to Python running in PyScript&lt;/li&gt;
        &lt;li&gt;✅ Pass objects from JavaScript Python running in Pyodide&lt;/li&gt;
        &lt;li&gt;✅ Pass objects from Python running in Pyodide to JavaScript&lt;/li&gt;
        &lt;l1&gt;⚠️ Pass objects from Python running in PyScript to JavaScript, with a little extra work. See the &lt;a href=&#34;#commentary&#34;&gt;commentary&lt;/a&gt; and &lt;a href=&#34;#demo&#34;&gt;live demo&lt;/a&gt; with the code sample below.&lt;/l1&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For our purposes, an &#39;object&#39; is anything that can be bound to a variable (a number, string, object, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function&#34;&gt;function&lt;/a&gt;, etc). Also, recall that the &lt;code class=&#34;code&#34;&gt;import js&lt;/code&gt; or &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; &lt;a href=&#34;https://pyodide.org/en/stable/usage/type-conversions.html#type-translations-using-js-obj-from-py&#34;&gt;in Pyodide&lt;/a&gt; gets objects from the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis&#34;&gt;JavaScript globalThis scope&lt;/a&gt;, so keep the &lt;a href=&#34;https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/&#34;&gt;rules of JavaScript variable scoping&lt;/a&gt; in mind.&lt;/p&gt;
&lt;p class=&#34;info-banner&#34;&gt;This post was originally written for PyScript 2022.06.1; it has been updated with current best practices and code for PyScript 2022.12.1. You can also &lt;a href=&#34;../pyscript-js-functions-original&#34;&gt;view the original post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&#34;text-xl font-semibold post-p&#34;&gt;JavaScript to Python (PyScript)&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can use the simple &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; to import JavaScript objects directly into PyScript.&lt;/p&gt;
&lt;h3 class=&#34;code-title&#34;&gt;Javascript to Python (PyScript)&lt;/h3&gt;
&lt;div class=&#34;mb-6&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//A JS variable
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Define a JS Function
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; addTwoNumbers(x, y){
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; y;
    }
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Import and use JS function in Python&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; name, addTwoNumbers, console
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.Adding 1 and 2 in Javascript: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(addTwoNumbers(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;text-xl font-semibold post-p&#34;&gt;JavaScript to Python (Pyodide)&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can also use &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; to import JavaScript objects directly into Python in Pyodide. The syntax is identical to the PyScript example above - the &amp;lt;py-script&amp;gt; calls the &lt;code class=&#34;code&#34;&gt;runPython&lt;/code&gt; function for us (among other things).&lt;/p&gt;
&lt;h3 class=&#34;code-title&#34;&gt;Javascript to Python (Pyodide)&lt;/h3&gt;
&lt;div class=&#34;mb-6&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//A JS variable
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Define a JS Function
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; addTwoNumbers(x, y){
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; y;
    }

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; main() {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;let&lt;/span&gt; pyodide &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; loadPyodide();
        result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyodide.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            # Import and use JS function in Python
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            from js import name, addTwoNumbers, console
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            console.log(&amp;#34;Hello &amp;#34; + name + &amp;#34;.Adding 1 and 2 in Javascript: &amp;#34; + str(addTwoNumbers(1, 2)))
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        `&lt;/span&gt;);
    }
    main();
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;text-xl font-semibold post-p&#34;&gt;Python (Pyodide) to JavaScript&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Just as we imported objects from the javascript global scope using the &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; syntax, we can create new objects in the global scope by assigning new objects to the js &#34;module&#34;:&lt;/p&gt;
&lt;div class=&#34;mb-6&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; pyodideRuntime &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; loadPyodide();
        pyodideRuntime.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            import js
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            name = &amp;#34;Jeff&amp;#34; # A Python variable
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            # Define a Python function
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            def multiplyTwoNumbers(x, y):
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;                return (x * y)
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            js.mult = multiplyTwoNumbers
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            js.name = name
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        `&lt;/span&gt;);
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Access and call it in JavaScript
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Multiplying 2 and 3 in Python: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; mult(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;));
        console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You&amp;#39;re welcome, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; name)
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Alternatively, once PyScript has initialized the Pyodide runtime, the JS object &lt;code class=&#34;code&#34;&gt;pyodide.globals&lt;/code&gt; is a mapping that represents the global Python namespace. We can use the &lt;code class=&#34;code&#34;&gt;get()&lt;/code&gt; method to retrieve an object from this mapping and make use of it in JavaScript.&lt;/p&gt;
&lt;h3 class=&#34;code-title&#34;&gt;Python (Pyodide) to JavaScript&lt;/h3&gt;
&lt;div class=&#34;mb-6&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; pyodideRuntime &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; loadPyodide();
    pyodideRuntime.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        name = &amp;#34;Jeff&amp;#34; # A Python variable
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        # Define a Python function
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        def multiplyTwoNumbers(x, y):
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            return (x * y)
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    `&lt;/span&gt;);
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Access and call it in JavaScript
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;let&lt;/span&gt; mult &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyodideRuntime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;multiplyTwoNumbers&amp;#39;&lt;/span&gt;);
    console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Multiplying 2 and 3 in Python: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; mult(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;));
    console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You&amp;#39;re welcome, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; pyodideRuntime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;))
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;text-lg font-semibold&#34;&gt;Python (PyScript) to JavaScript&lt;/h3&gt;
&lt;a id=&#34;commentary&#34;&gt;&lt;/a&gt;
&lt;p class=&#34;post-p&#34;&gt;Either of the methods in the Pyodide section above will work for creating JavaScript objects from within PyScript. However, if you wish to be more declarative when creating variables with specific names, you can use a more verbose method, as follows:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;First, we define a javascript function which takes an object and a string, then binds that string as a variable to that object. By calling this function from PyScript (where we have access to the Pyodide global namespace), we can bind JavaScript variables to Python objects without having direct access to that global namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; createObject(object, variableName){
        globalThis[variableName] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; object
    }
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This takes a Python Object and creates a variable pointing to it in the JavaScript global scope. So what if we made a JavaScript variable point at... the Python global namespace?&lt;/p&gt;
&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;exportGlobals.py&lt;/p&gt;
    
    
    &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from js import createObject
from pyodide.ffi import create_proxy
createObject(create_proxy(globals()), &amp;#34;pyodideGlobals&amp;#34;)&lt;/code&gt;&lt;/pre&gt;
    
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This, amazingly, just works. All Python global variables are now accessible at in JavaScript with the syntax &lt;code class=&#34;code&#34;&gt;pyodideGlobals.get(&#39;myVariableName&#39;)&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s see an example running live. The three buttons below print the values of the variables &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; respectively, as looked up in the Python global namespace. Use the REPL to set the values of those variables, and see how JavaScript goes from seeing them as &#34;undefined&#34; to their value in PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve pre-populated an example line in the REPL for you. Click the &#39;&lt;svg id=&#34;&#34; class=&#34;inline&#34; style=&#34;height:20px;width:20px;vertical-align:-.125em;transform-origin:center;overflow:visible;color:green&#34; viewBox=&#34;0 0 384 512&#34; aria-hidden=&#34;true&#34; role=&#34;img&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;g transform=&#34;translate(192 256)&#34; transform-origin=&#34;96 0&#34;&gt;&lt;g transform=&#34;translate(0,0) scale(1,1)&#34;&gt;&lt;path d=&#34;M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 29.99 73.03 39.04L361 215z&#34; fill=&#34;currentColor&#34; transform=&#34;translate(-192 -256)&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&#39; or press &lt;code&gt;shift-enter&lt;/code&gt; to run the current REPL line.&lt;/p&gt;
&lt;a id=&#34;demo&#34;&gt;&lt;/a&gt;
&lt;script src=&#34;createObject.js&#34;&gt;&lt;/script&gt;
&lt;py-script src=&#34;exportGlobals.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2&#34;&gt;
    &lt;div&gt;
        &lt;py-repl auto-generate=&#34;true&#34;&gt;x = &#34;Hello, world!&#34;&lt;/py-repl&gt;
    &lt;/div&gt;
    &lt;div class=&#34;grid grid-cols-1&#34;&gt;
        &lt;input type=&#34;button&#34; id=&#34;x&#34; value=&#34;print(x)&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
        &lt;input type=&#34;button&#34; id=&#34;y&#34; value=&#34;print(y)&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
        &lt;input type=&#34;button&#34; id=&#34;z&#34; value=&#34;print(z)&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;w-full text-yellow-700 bg-yellow-100 border-2 border-yellow-700&#34;&gt;
    &lt;p class=&#34;text-sm italic&#34;&gt;#button-output&lt;/p&gt;
    &lt;div id=&#34;button-output&#34;&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script src=&#34;assignButtons.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;buttons.js&lt;/p&gt;
&lt;div class=&#34;overflow-x-auto&#34;&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;buttonOutput &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;button-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    buttonOutput.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; pyodideGlobals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
});

&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    buttonOutput.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; pyodideGlobals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
});

&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    buttonOutput.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; pyodideGlobals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;mt-4 text-lg font-semibold&#34;&gt;A Deeper Dive&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;We don&#39;t have to export the entire Python global namespace as an object if we don&#39;t want to. The example below shows exporting a single list and a lambda function as JavaScript variables, using the same &lt;code class=&#34;code&#34;&gt;createObject&lt;/code&gt; function above.&lt;/p&gt;
&lt;p class=&#34;info-banner&#34;&gt;Again, this method is significantly more verbose than simple assigning to the &lt;code class=&#34;code&#34;&gt;js&lt;/code&gt; module; however, you may find it useful if you wish to expand/extend the behavior of &lt;code class=&#34;code&#34;&gt;createObject()&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that the names of the JavaScript variable and the Python variable don&#39;t have to be similar/identical/different - I&#39;ve named them similarly (&lt;code&gt;&#39;names&#39;&lt;/code&gt; and &lt;code&gt;&#39;names_js&#39;&lt;/code&gt;, &lt;code&gt;&#39;mutliplier&#39;&lt;/code&gt; and &lt;code&gt;&#39;multiplier_js&#39;&lt;/code&gt;) for readability.&lt;/p&gt;
&lt;span class=&#34;code-title&#34;&gt;Python (PyScript) to JavaScript&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy, to_js

names &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff Glass&amp;#34;&lt;/span&gt;]
js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createObject(create_proxy(names), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;names_js&amp;#34;&lt;/span&gt;)

multiplier &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; z: z &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createObject(create_proxy(multiplier), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;multiplier_js&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The code above binds the JavaScript variable &lt;code class=&#34;code&#34;&gt;names_js&lt;/code&gt; to a PyProxy of the Python list &lt;code class=&#34;code&#34;&gt;names&lt;/code&gt;, and the JavaScript variables &lt;code class=&#34;code&#34;&gt;multiplier_js&lt;/code&gt; to a PyProxy for the Python lambda function &lt;code class=&#34;code&#34;&gt;multiplier&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, this means we have to use the createObject function to &#34;export&#34; the objects from Python before we can use them in JavaScript. But this may be preferred for your use case.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With those objects created, we can refer to/call them like any other JS objects. To see this, let&#39;s add two buttons: one that references our function and list from within JavaScript (&#34;use-python-objects&#34;), and one that adds some names to our list so we can see it change (&#34;add-name&#34;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
    - faker
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;faker&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Faker

fake &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Faker()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_a_name&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    new_name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fake&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name()
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Adding &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;new_name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; to names&amp;#34;&lt;/span&gt;)
    names&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(new_name)

Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;add-name&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_proxy(add_a_name))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;overflow-x-auto&#34;&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;use-python-objects&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
        console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Displaying contents of Python list &amp;#39;names&amp;#39;, calling Python function &amp;#39;multiplier&amp;#39;&amp;#34;&lt;/span&gt;)
        el &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;)
        el.innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//Clear contents of output
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; name &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;of&lt;/span&gt; names_js){
            el.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Name: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br\&amp;gt;&amp;#34;&lt;/span&gt;;
        };
        number &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;Math&lt;/span&gt;.floor(&lt;span style=&#34;color:#366&#34;&gt;Math&lt;/span&gt;.random() &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//random between 1 and 10
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        el.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; number &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; times two is &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; multiplier_js(number) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br\&amp;gt;&amp;#34;&lt;/span&gt;;
    });&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;mt-6 text-lg font-semibold&#34;&gt;Python (PyScript) Individual Objects to JavaScript Demo&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The code in the preceding section is running live on this page. Click &#34;Add Name to List&#34; to append a new name (provided by the Faker library) to the list &lt;code class=&#34;code&#34;&gt;names&lt;/code&gt;; click &#34;Use Python Objects&#34; to reference that list (and the &lt;code class=&#34;code&#34;&gt;multiplier&lt;/code&gt; function) and display the results in the green box. Open your browser&#39;s development console to see additional output.&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 space-x-1 space-y-2 md:grid-cols-2&#34;&gt;
    &lt;div class=&#34;grid grid-cols-2 space-x-1&#34;&gt;
        &lt;input type=&#34;button&#34; value=&#34;Use Python Objects&#34; id=&#34;use-python-objects&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
        &lt;input type=&#34;button&#34; value=&#34;Add a Name&#34; id=&#34;add-name&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full h-auto bg-green-100 border-2 border-green-600&#34;&gt;
        &lt;p class=&#34;text-sm italic text-green-700&#34;&gt;#output:&lt;/p&gt;
        &lt;div  class=&#34;p-1&#34; id=&#34;output&#34;&gt;&lt;br&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;py-config&gt;
    packages = [&#39;faker&#39;]
&lt;/py-config&gt;
&lt;script defer src=&#34;https://pyscript.net/releases/2022.12.1/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://pyscript.net/releases/2022.12.1/pyscript.css&#34; /&gt;

&lt;script src=&#34;createObject.js&#34;&gt;&lt;/script&gt;
&lt;py-script src=&#34;registerJsObjects.py&#34;&gt;&lt;/py-script&gt;
&lt;py-script src=&#34;nameButton.py&#34;&gt;&lt;/py-script&gt;
&lt;script src=&#34;usePythonButton.js&#34;&gt;&lt;/script&gt;
&lt;h3 class=&#34;mt-4 text-lg font-semibold&#34;&gt;Viewing &lt;code&gt;globals()&lt;/code&gt;&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Since we have a reference to the PyScript global namespace, we can also just view its contents from JavaScript. And again so we can see it really changing, let&#39;s add a button that creates new Python objects with random names using &lt;a href=&#34;https://docs.python.org/3/library/functions.html#exec&#34;&gt;exec()&lt;/a&gt;:&lt;/p&gt;&lt;p class=&#34;code-title&#34;&gt;displayGlobals.js&lt;/p&gt;
&lt;div class=&#34;overflow-x-auto&#34;&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;printGlobals&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    console.warn(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Clicked print globals&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;globals&amp;#34;&lt;/span&gt;).innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyodideGlobals;
});&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;my-3&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;makeNewObjects.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; choice, randint
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy, to_js

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;makePythonObject&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([choice(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)])
    value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; randint(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;)
    exec_string &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;global &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
    exec(exec_string)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;makeObject&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_proxy(makePythonObject))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Click the Print Globals button to see the Python global objects visible from JavaScript; click the Make Python Variable to make a new Python variable with a 5-letter name (then click Print Globals again to see it). Since this shares a global namespace with the rest of the PyScript code on this page, you may also see variables like &#39;&lt;code&gt;x&lt;/code&gt;&#39;, &#39;&lt;code&gt;y&lt;/code&gt;&#39;, and &#39;&lt;code&gt;z&lt;/code&gt;&#39; from the example above.&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 my-2 space-x-2 md:grid-cols-2&#34;&gt;
    &lt;input type=&#34;button&#34; value=&#34;Print Globals&#34; id=&#34;printGlobals&#34; class=&#34;col-span-1 p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
    &lt;input type=&#34;button&#34; value=&#34;Make Python Variable&#34; id=&#34;makeObject&#34; class=&#34;col-span-1 p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;w-full col-span-2 bg-blue-200 border-2 border-blue-700&#34;&gt;
    &lt;p class=&#34;text-sm italic text-blue-700&#34;&gt;#globals:&lt;/p&gt;
    &lt;div id=&#34;globals&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;makeNewObjects.py&#34;&gt;&lt;/py-script&gt;
&lt;script src=&#34;showGlobalsButton.js&#34;&gt;&lt;/script&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Uploading and Manipulating Images in Pyscript</title>
      <link>https://jeff.glass/post/pyscript-image-upload/</link>
      <pubDate>Tue, 31 May 2022 12:22:16 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-image-upload/</guid>
      <description>&lt;script defer src=&#34;../ps/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;A curious dev on the &lt;a href=&#34;https://discord.com/invite/TynfPGRwda&#34;&gt;PyScript Discord&lt;/a&gt; (which you should really come check out) asked:&lt;/p&gt;
&lt;blockquote class=&#34;p-2 mx-6 my-4 italic bg-gray-200 border-l-4 border-gray-800&#34;&gt;I am taking file input in HTML where I am selecting image, how to show image when submit button is hit in PyScript?&lt;br&gt;&lt;br&gt;Actually, I need to use that file in PyScript to process. How can I do that?&lt;/blockquote&gt;
&lt;p class=&#34;post-p&#34;&gt;Well, there&#39;s an interesting question. How do we deal with uploaded files in Javascript/Pyscript?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For those looking to skip to the punchline - here&#39;s a working demo. We&#39;ll show off both the ability to upload and display images, as well as manipulating them with &lt;a href=&#34;https://pillow.readthedocs.io/en/stable/&#34;&gt;the Pillow image manipulation library&lt;/a&gt;:&lt;/p&gt;
&lt;py-env&gt;
    - Pillow
&lt;/py-env&gt;
&lt;div class=&#34;p-4 m-auto mt-6 mb-8 bg-blue-100 border-2 justify-items-center&#34;&gt;
    &lt;label for=&#34;File Upload&#34;&gt;Upload an image file here to display it onscreen.&lt;/label&gt;
    &lt;br&gt;&lt;input type=&#34;file&#34; id=&#34;file-upload&#34;&gt;
    &lt;div id=&#34;output_upload&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;./image_upload.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;p-4 m-auto mt-6 mb-8 bg-red-100 border-2 justify-items-center&#34;&gt;
    &lt;label for=&#34;File Upload&#34;&gt;Upload an image file here to display it onscreen with filters&lt;/label&gt;
    &lt;br&gt;&lt;input type=&#34;file&#34; id=&#34;file-upload-pillow&#34;&gt;
    &lt;div id=&#34;output_upload_pillow&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;./image_upload_pillow.py&#34;&gt;&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;If all has gone to plan, images uploaded in the first dialog should just appear onscreen full-size; images uploaded in the second dialog should appear below the upload dialog, having been (1) &#34;embossed&#34;, (2) rotated 45 degrees, (3) had any empty space filled with a dark green background, and (4) been rescaled to 300x300 pixels&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Simple Image Upload and Display&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The HTML portion of this project is very straightforward - an input with &lt;code class=&#34;code&#34;&gt;type=file&lt;/code&gt; and an ID to refer to it by, as well as an empty div for us to shove output in later:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Upload a PNG image&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file-upload&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output_upload&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./image_upload.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;p class=&#34;post-p&#34;&gt;The Pyscript portion of this example is only slightly more involved. We use &lt;code class=&#34;code&#34;&gt;addEventListener()&lt;/code&gt; to trigger a function when the selected file in the input field changes. Then we get the file targetted by that input, and create a temporary URL for it using &lt;code class=&#34;code&#34;&gt;window.URL.createObjectURL()&lt;/code&gt;. Finally, we create a new &lt;code class=&#34;code&#34;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and stick it inside our output div.&lt;/p&gt;
    &lt;p class=&#34;post-p&#34;&gt;If desired, this functionality could be trigged by submitting a form, clicking a separate &#34;Process Image&#34; button, or any other event. This demo just slaps the image up as soon as its chosen, for brevity of example.&lt;/p&gt;
    &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;image_upload.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console, window
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_upload_file_and_show&lt;/span&gt;(e):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Attempted file upload: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)
    file_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;files
    first_item &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; file_list&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;item(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    new_image &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;)
    new_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;src &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; window&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;URL&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createObjectURL(first_item)
    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output_upload&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(new_image)

upload_file &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_upload_file_and_show)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file-upload&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;change&amp;#34;&lt;/span&gt;, upload_file)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;

&lt;h2 class=&#34;mt-8 post-h2&#34;&gt;Image Processing with PILLOW&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Things get slightly more involved if we want to use the Python Image Library (or its kinder wrapper, PILLOW) to work with the images. The HTML looks almost identical, but we do need to add Pillow to a new &lt;code class=&#34;code&#34;&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; tag so that micropip will install Pillow into our environment for us.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
    - Pillow
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Upload a PNG image&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file-upload-pillow&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output_upload_pillow&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./image_upload_pillow.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        &lt;p class=&#34;post-p&#34;&gt;However, the Pyscript in this case is somewhat more involved, getting the bytes back and forth from Pyscript and the browser in formats they like. Full caveat - through testing, I &lt;span class=&#34;italic&#34;&gt;think&lt;/span&gt; all of these castings and conversions are necessary for this to work, but if anyone finds a shorter way, &lt;a href=&#34;https://twitter.com/jeffersglass&#34;&gt;please let me know!&lt;/a&gt;&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;That said, to load the image data into Pillow, we:&lt;/p&gt;
        &lt;ul class=&#34;post-ul&#34;&gt;
            &lt;li&gt;Get the raw bytes of data from the image using &lt;code class=&#34;code&#34;&gt;await item.arrayBuffer()&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Cast that data into a &lt;code class=&#34;code&#34;&gt;bytearray&lt;/code&gt; and then as an &lt;code class=&#34;code&#34;&gt;io.BytesIO&lt;/code&gt; object, which is an in-memory object that behaves as a file-like object for IO purposes.&lt;/li&gt;
            &lt;li&gt;Load that BytesIO object into Pillow using &lt;code class=&#34;code&#34;&gt;Image.open()&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p class=&#34;post-p&#34;&gt;Once we have the image loaded, we can do all of our usual Pillow-based adjustments to it - in this case, I&#39;m having it filter, rotate, fill, and resize the image using a succession of operations.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;Finally, to retrieve the data in a format that we can use in the DOM, we:&lt;/p&gt;
        &lt;ul class=&#34;post-ul&#34;&gt;
            &lt;li&gt;Create another &lt;code class=&#34;code&#34;&gt;BytesIO&lt;/code&gt; file-link object, and use &lt;code class=&#34;code&#34;&gt;Image.save()&lt;/code&gt; to write our image out to it.&lt;/li&gt;
            &lt;li&gt;Create a new &lt;code class=&#34;code&#34;&gt;File&lt;/code&gt; object containing the bytes of our image, with a placeholder name and a MIME type of &lt;code class=&#34;code&#34;&gt;image/png&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Create an URL we can use for this File using &lt;code class=&#34;code&#34;&gt;indow.URL.createObjectURL()&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Use that URL as the src of a new img tag (made with &lt;code class=&#34;code&#34;&gt;document.createElement()&lt;/code&gt;) and append that as a child of our div.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
        &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;image_upload_pillow.py&lt;/p&gt;
    
    
    &lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console, Uint8Array, window, File
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;io&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;PIL&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Image, ImageFilter

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_upload_change_and_show&lt;/span&gt;(e):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Get the first file from upload&lt;/span&gt;
    file_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;files
    first_item &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; file_list&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;item(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Get the data from the files arrayBuffer as an array of unsigned bytes&lt;/span&gt;
    array_buf &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Uint8Array&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; first_item&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;arrayBuffer())

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#BytesIO wants a bytes-like object, so convert to bytearray first&lt;/span&gt;
    bytes_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bytearray&lt;/span&gt;(array_buf)
    my_bytes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; io&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;BytesIO(bytes_list) 

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Create PIL image from np array&lt;/span&gt;
    my_image &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;open(my_bytes)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Log some of the image data for testing&lt;/span&gt;
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;my_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;format&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;my_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;my_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Now that we have the image loaded with PIL, we can use all the tools it makes available. &lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# &amp;#34;Emboss&amp;#34; the image, rotate 45 degrees, fill with dark green&lt;/span&gt;
    my_image &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; my_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;filter(ImageFilter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;EMBOSS)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;rotate(&lt;span style=&#34;color:#f60&#34;&gt;45&lt;/span&gt;, expand&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;, fillcolor&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;))&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;resize((&lt;span style=&#34;color:#f60&#34;&gt;300&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;300&lt;/span&gt;))

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Convert Pillow object array back into File type that createObjectURL will take&lt;/span&gt;
    my_stream &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; io&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;BytesIO()
    my_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;save(my_stream, &lt;span style=&#34;color:#366&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;PNG&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Create a JS File object with our data and the proper mime type&lt;/span&gt;
    image_file &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; File&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new([Uint8Array&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(my_stream&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getvalue())], &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;new_image_file.png&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;})

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Create new tag and insert into page&lt;/span&gt;
    new_image &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;)
    new_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;src &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; window&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;URL&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createObjectURL(image_file)
    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output_upload_pillow&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(new_image)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Run image processing code above whenever file is uploaded    &lt;/span&gt;
upload_file &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_upload_change_and_show)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file-upload-pillow&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;change&amp;#34;&lt;/span&gt;, upload_file)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
    
&lt;/div&gt;
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>7GUIs Pyscript - Explanations and Details</title>
      <link>https://jeff.glass/post/7-guis-pyscript/</link>
      <pubDate>Tue, 10 May 2022 07:16:07 -0500</pubDate>
      
      <guid>https://jeff.glass/post/7-guis-pyscript/</guid>
      <description>&lt;script defer src=&#34;../ps/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;italic post-p&#34;&gt;This post is a companion to my project &lt;a href=&#34;../project/the-7-guis-pyscript/&#34;&gt;The 7 GUIs in PyScript&lt;/a&gt; - I recommend checking out that page first. Viewing on Desktop is highly recommended.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://eugenkiss.github.io/7guis/tasks/&#34;&gt;The Seven Guis&lt;/a&gt; is a set of typical challenges in GUI programming. &lt;a href=&#34;https://eugenkiss.github.io/7guis/implementations&#34;&gt;Implementations abound&lt;/a&gt;, in lower-level frameworks like tcl and Qt to modernist frameworks like React and Svelte. Let&#39;s see what it takes to implement them in PyScript.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;counter-header&#34;&gt;Counter &lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#counter&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;&#34;The task is to build a frame containing a label or read-only textfield T and a button B. Initially, the value in T is “0” and each click of B increases the value in T by one.&#34; &lt;/h3&gt;
&lt;div class=&#34;m-4&#34;&gt;
    &lt;div class=&#34;grid grid-cols-2 p-4 m-auto bg-blue-100 border-2 justify-items-center&#34;&gt;
        &lt;label id=&#34;counter-target&#34; class=&#34;w-full text-center bg-white border-2&#34;&gt;Some Placeholder Text&lt;/label&gt;
        &lt;py-button id=&#34;counter-btn&#34; label=&#34;Count&#34; class=&#34;&#34;&gt;
            def on_click(event):
                add_one()
        &lt;/py-button&gt;
        &lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;counter.py&#34;&gt;&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;We can break the parts of this initial problem into a few key questions, with answers:
&lt;h4 class=&#34;mt-8 text-lg font-semibold&#34;&gt;How do buttons works in PyScript&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;When you add a &lt;span class=&#34;font-bold&#34;&gt;&amp;lt;py-button&amp;gt;&lt;/span&gt; tag to your page, on page-load, PyScript (specifically the code in &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/pyscriptjs/src/components/pybutton.ts&#34;&gt;pybutton.ts&lt;/a&gt; adds a &amp;lt;button&amp;gt; tag to the DOM with all the same classes that the py-button tag had. Then, if the Python code inside the py-button tag defines an &lt;code class=&#34;code&#34;&gt;on_focus&lt;/code&gt; or &lt;code class=&#34;code&#34;&gt;on_click&lt;/code&gt; method, callbacks are registered in Javascript to cause those methods to run on focus/click as appropriate.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, to create a &#34;Count&#34; button to increment our counter, we can do something as simple as:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;on_click&lt;/span&gt;(event):
        add_one()
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;mt-8 text-lg font-semibold&#34;&gt;How do we put output from a script in a specific place on a page?&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, we&#39;ll need to actually define that &lt;code class=&#34;code&#34;&gt;add_one&lt;/code&gt; function somewhere, to add one to... &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well, I guess we&#39;ll want somewhere to display the count as well. Lets add a paragraph tag to our HTML code, and give it an id so we can refer to it later: &lt;pre&gt;&lt;code class=&#34;code&#34;&gt;&amp;lt;p id=&#34;counter-target&#34;&amp;gt;Some Placeholder Text&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We could choose to leave the tag empty for now, or perhaps have a &#34;0&#34; there to hide a bit of ugliness as the page loads, but I having placeholder text will give us a clearer view of what&#39;s happening when.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To actually change the content of our new tag, we can use the &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/bc4581d9e50286f0463285f13c015e487831fa0e/pyscriptjs/src/pyscript.py#L110-L129&#34;&gt;PyScript.write() function&lt;/a&gt;, which takes an &lt;code&gt;element_id&lt;/code&gt; as a string, a &lt;code&gt;value&lt;/code&gt; to replace/append there (another string), and an optional &lt;code&gt;append&lt;/code&gt; argument to tell whether the new content should be appended (as a new div) or replace the existing content.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, to start our count at zero and have it increment each time we press the &#34;Count&#34; button, our code could look something like:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;myPage.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;p &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;counter-target&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;Some Placeholder Text&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;on_click&lt;/span&gt;(event):
        add_one()
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script src&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./counter.py&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;mt-8 text-lg font-semibold&#34;&gt;How do we seperate Python code into external files?&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For cleanliness, let&#39;s put our code in a separate file called &lt;code&gt;counter.py&lt;/code&gt;. To include use this in our html page, we simple use the &lt;code class=&#34;code&#34;&gt;src&lt;/code&gt; attribute of the py-script tag to specify an additional external source. Thus, our complete solution looks like:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;myPage.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;counter-target&amp;#34;&lt;/span&gt;&amp;gt;Some Placeholder Text&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-button&lt;/span&gt;&amp;gt;
    def on_click(event):
        add_one()
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;counter.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;counter.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;internalCount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;counter-target&amp;#34;&lt;/span&gt;
PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(target, &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(internalCount), append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_one&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; internalCount
    internalCount &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(target, &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(internalCount), append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 class=&#34;mt-12 post-h2 &#34; id=&#34;temp-header&#34;&gt;Temperature Converter &lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#temp&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;&#34;The task is to build a frame containing two textfields TC and TF representing the temperature in Celsius and Fahrenheit, respectively. Initially, both TC and TF are empty. When the user enters a numerical value into TC the corresponding value in TF is automatically updated and vice versa. When the user enters a non-numerical string into TC the value in TF is not updated and vice versa. The formula for converting a temperature C in Celsius into a temperature F in Fahrenheit is C = (F - 32) * (5/9) and the dual direction is F = C * (9/5) + 32.&#34; &lt;/h3&gt;
&lt;py-script src=&#34;./temperature.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;m-4&#34;&gt;
    &lt;div class=&#34;grid grid-cols-2 p-4 m-auto bg-blue-100 border-2 justify-items-center&#34;&gt;
            &lt;div&gt;
                &lt;h4 class=&#34;font-semibold&#34;&gt;Fahrenheit&lt;/h4&gt;
                &lt;input id = &#34;f-temp&#34; class=&#34;w-3/4 bg-white border-4&#34;&gt;
            &lt;/div&gt;
            &lt;div&gt;
                &lt;h4 class=&#34;font-semibold&#34;&gt;Celsuis&lt;/h4&gt;
                &lt;input id=&#34;c-temp&#34; class=&#34;w-3/4 bg-white border-4&#34;&gt;
            &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;p class=&#34;post-p&#34;&gt;Since we&#39;re handle user-inputted text for this project, we&#39;ll need to learn a bit about how PyScript interacts with Javascript event listeners. Let&#39;s look at a stripped-down example:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;sample-event-handling.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-input&amp;#34;&lt;/span&gt; style&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;background-color: lightgray;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_log_input_to_console&lt;/span&gt;(e):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;The value of the input is currently &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)

log_input_to_console &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_log_input_to_console)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-input&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, log_input_to_console)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
    .instruction-row{
        background-color: rgb(230, 239, 236);
    }
&lt;/style&gt;
&lt;div class=&#34;grid grid-cols-1 mt-6 gap-y-8 instruction-grid&#34;&gt;
    &lt;div class=&#34;flex flex-col items-center px-2 lg:flex-row gap-x-4 instruction-row&#34;&gt;
        &lt;div class=&#34;w-full lg:w-1/2&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-input&amp;#34;&lt;/span&gt; style&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;background-color: lightgray;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        &lt;p class=&#34;w-full post-p lg:w-1/2&#34;&gt;First, we create the html element we want to target. We&#39;ll give it the unique id &#34;my-input&#34; so we can select it later. (You&#39;ll probably want a more specific descriptor than this.) The styling is just to make it easier to find on the screen, if you drop just this code into a blank page.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex flex-col items-center px-2 lg:flex-row gap-x-4&#34;&gt;
        &lt;div class=&#34;w-full lg:w-1/2&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        &lt;p class=&#34;w-full post-p lg:w-1/2&#34;&gt;Next, we&#39;ll import some useful modules. Through some &lt;a href=&#34;https://pyodide.org/en/stable/usage/type-conversions.html#type-translations-using-js-obj-from-py&#34;&gt;Pyodide dark incantation magic&lt;/a&gt;, importing from JS gives us a Python mapping of a Javascript module directly! So now we have access to the JS &#39;document&#39; and &#39;console&#39; objects, though we could also &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis&#34;&gt;directty import anything in the Javascript global scope&lt;/a&gt;. How cool is that.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex flex-col items-center px-2 lg:flex-row gap-x-4 instruction-row&#34;&gt;
        &lt;div class=&#34;w-full lg:w-1/2&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_log_input_to_console&lt;/span&gt;(e)
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;The value of the input is currently &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)
        
log_input_to_console &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_log_input_to_console)
        
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementByID(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-input&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, log_input_to_console)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        &lt;div class=&#34;w-full lg:w-1/2&#34;&gt;
            &lt;p class=&#34;post-p&#34;&gt;This is where the real magic happens. We&#39;ll define our python function using the usual &lt;code class=&#34;code&#34;&gt;def functionname():&lt;/code&gt; syntax. It will take one parameter, which i&#39;ve called &lt;code class=&#34;code&#34;&gt;e&lt;/code&gt;, which will be passed the &lt;a href=&#34;https://www.w3schools.com/js/js_events.asp&#34;&gt;Javascript event&lt;/a&gt; that triggered this function. These events have &lt;a href=&#34;https://www.w3schools.com/jsref/dom_obj_event.asp&#34;&gt;many, many useful properties and methods&lt;/a&gt; we can access - in this case, the &lt;code class=&#34;code&#34;&gt;value&lt;/code&gt; property gives us the value of the inputbox that triggered this event.&lt;/p&gt;
            &lt;p class=&#34;post-p&#34;&gt;The trick is, because of &lt;a href=&#34;https://pyodide.org/en/stable/usage/type-conversions.html#call-js-from-py&#34;&gt;how Pyodide interacts with Javascript promises&lt;/a&gt;, we can&#39;t just use this Python function as our event handler. We&#39;ll need to create a Javascript proxy object for it using create_proxy. This returns a new proxy object that we can use directly as our event handler. (This issue is common enough that its &lt;a href=&#34;https://pyodide.org/en/stable/usage/faq.html#how-can-i-use-a-python-function-as-an-event-handler&#34;&gt;included in Pyodide&#39;s FAQ&lt;/a&gt;.&lt;/p&gt;
            &lt;p class=&#34;post-p&#34;&gt;Once we have our proxy object, we can again lean on that magic js-to-python mapping to use Javascript&#39;s own &lt;code class=&#34;code&#34;&gt;querySelector&lt;/code&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&#34;&gt;addEventListener&lt;/a&gt; methods to add a callback that will run our method whenever the specified event happens - in this case, &#34;input&#34;. Note that this is not the &#34;on-&#34; version of the event keywords; that is, it&#39;s &#34;input&#34; not &#34;oninput&#34;; &#34;click&#34;, not &#34;onclick&#34;, and so on.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;And here&#39;s that example running live:&lt;/p&gt;
&lt;div class=&#34;w-full p-4 m-4 bg-blue-100&#34;&gt;
    &lt;p class=&#34;post-p&#34;&gt;Open the developer console and type here: &lt;input id=&#34;my-input&#34; class=&#34;bg-white border-2 border-gray-700 &#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;py-script&gt;
from js import document, console
from pyodide import create_proxy

def _log_input_to_console(e):
    console.log(&#34;The value of the input is currently &#34; + e.target.value)

log_input_to_console = create_proxy(_log_input_to_console)

document.getElementById(&#34;my-input&#34;).addEventListener(&#34;input&#34;, log_input_to_console)
&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;With this in place, if you type into the inputbox, you should see its contents being output to the console with each keystroke. If you want to have it log (or take any other action) only when the input is submitted/enter is pressed... I think the best option is to wrap the input in a &lt;code class=&#34;code&#34;&gt;form&lt;/code&gt; tag and use the &#34;submit&#34; event to handle it, but I&#39;m not %100 sure what best practice is there.&lt;/p&gt;

&lt;p class=&#34;post-p&#34;&gt;The full code of the Temperature Converter  is as follows:&lt;/p&gt;
&lt;p class=&#34;mt-4 code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./temperature.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid grid-cols-2 p-4 m-auto bg-blue-100 border-2 justify-items-center&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-semibold&amp;#34;&lt;/span&gt;&amp;gt;Fahrenheit&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id &lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;f-temp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-3/4 bg-white border-4&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-semibold&amp;#34;&lt;/span&gt;&amp;gt;Celsuis&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;c-temp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-3/4 bg-white border-4&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;temperature.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#This is necessary for reasons I don&amp;#39;t understand&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy

write_in_progress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isTemp&lt;/span&gt;(input_temp):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        _ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(input_temp)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; err:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_f&lt;/span&gt;(self, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; write_in_progress
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; write_in_progress:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        write_in_progress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        f_input &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;f-temp&amp;#34;&lt;/span&gt;)
        c_output &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;c-temp&amp;#34;&lt;/span&gt;)
        input_value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; f_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isTemp(input_value):
            c_output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;round&lt;/span&gt;((&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(input_value)) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;), &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            c_output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        write_in_progress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_c&lt;/span&gt;(self, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; write_in_progress
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; write_in_progress:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        write_in_progress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        c_input &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;c-temp&amp;#34;&lt;/span&gt;)
        f_output &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;f-temp&amp;#34;&lt;/span&gt;)
        input_value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; c_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isTemp(input_value):
            f_output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;round&lt;/span&gt;((&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(input_value)) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            f_output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        write_in_progress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

f_change &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_f)
c_change &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_c)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;querySelector(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#f-temp&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, f_change)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;querySelector(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#c-temp&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, c_change)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;

&lt;h2 class=&#34;mt-12 post-h2 &#34; id=&#34;flight-header&#34;&gt;Flight Booker &lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#flight&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;&#34;The task is to build a frame containing a combobox C with the two options “one-way flight” and “return flight”, two textfields T1 and T2 representing the start and return date, respectively, and a button B for submitting the selected flight. T2 is enabled iff C’s value is “return flight”. When C has the value “return flight” and T2’s date is strictly before T1’s then B is disabled. When a non-disabled textfield T has an ill-formatted date then T is colored red and B is disabled. When clicking B a message is displayed informing the user of his selection (e.g. “You have booked a one-way flight on 04.04.2014.”). Initially, C has the value “one-way flight” and T1 as well as T2 have the same (arbitrary) date (it is implied that T2 is disabled).&lt;/h3&gt;
&lt;py-script src=&#34;./flight.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;m-4&#34;&gt;
    &lt;div class=&#34;grid grid-rows-4 p-4 bg-blue-100 border-2 justify-items-left&#34;&gt;
            &lt;div&gt;
                &lt;select name=&#34;flight-mode&#34; id=&#34;flight-mode-select&#34;&gt;
                    &lt;option value=&#34;one&#34;&gt;One Way&lt;/option&gt;
                    &lt;option value=&#34;round&#34;&gt;Round Trip&lt;/option&gt;
                &lt;/select&gt;
            &lt;/div&gt;
            &lt;div&gt;
                &lt;h4 class=&#34;font-semibold&#34;&gt;Departure Date&lt;/h4&gt;
                &lt;input id = &#34;dep&#34; class=&#34;w-3/4 bg-white border-4&#34;&gt;
            &lt;/div&gt;
            &lt;div&gt;
                &lt;h4 class=&#34;font-semibold&#34;&gt;Return Date&lt;/h4&gt;
                &lt;input id=&#34;ret&#34; class=&#34;w-3/4 bg-white border-4&#34;&gt;
            &lt;/div&gt;
            &lt;div&gt;
                &lt;button id=&#34;book-flight&#34; class=&#34;p-2 my-2 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;Book Flight&lt;/button&gt;
                &lt;p id=&#34;flight-info&#34; class=&#34;italic&#34;&gt;Flight Info will go here&lt;/p&gt;
            &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Not too many additional puzzle pieces to fill in here, after the first two examples. We&#39;ll make use of the &lt;code class=&#34;code&#34;&gt;disabled&lt;/code&gt; property to control whether the &#39;return&#39; inputbox is active or not, setting it to &lt;code class=&#34;code&#34;&gt;true&lt;/code&gt; to disable the box. We&#39;ll also use the &lt;code class=&#34;code&#34;&gt;innerText&lt;/code&gt; property of the &lt;code class=&#34;code&#34;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag at the bottom of the GUI to set its text when the user presses the &#39;book-flight&#39; button.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As mentioned in the &lt;a href=&#34;#temperature-header&#34;&gt;Temperature Converter section&lt;/a&gt;, we cannot call our Python functions directly from event handlers - we&#39;ll need to use pyodide.create_proxy to create a Javascript proxy of our function, and have the event trigger that.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The full code of this solution is as follows:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./flight.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid grid-rows-4 p-4 bg-blue-100 border-2 justify-items-left&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-mode&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-mode-select&amp;#34;&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&amp;gt;One Way&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;option&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;round&amp;#34;&lt;/span&gt;&amp;gt;Round Trip&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;option&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;select&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-semibold&amp;#34;&lt;/span&gt;&amp;gt;Departure Date&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id &lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dep&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-3/4 bg-white border-4&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-semibold&amp;#34;&lt;/span&gt;&amp;gt;Return Date&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ret&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-3/4 bg-white border-4&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;book-flight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;p-2 my-2 bg-green-200 border-2 border-gray-400 rounded-lg&amp;#34;&lt;/span&gt;&amp;gt;Book Flight&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-info&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;italic&amp;#34;&lt;/span&gt;&amp;gt;Flight Info will go here&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;flight.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#This is necessary for reasons I don&amp;#39;t understand&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_flight_mode_change&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        currentMode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-mode-select&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; currentMode &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;:
            document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ret&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;disabled &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ret&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;disabled &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
    
    flight_mode_change &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_flight_mode_change)
    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-mode-select&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, flight_mode_change)
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_book_flight&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        currentMode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-mode-select&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        departure &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dep&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        return_flight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ret&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; currentMode &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;:
            document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-info&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You&amp;#39;ve booked a one-way flight departing on &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;departure&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-info&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You&amp;#39;ve booked a round-trip flight departing on &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;departure&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; and returning on &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;return_flight&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.&amp;#34;&lt;/span&gt;
    
    book_flight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_book_flight)
    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;book-flight&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, book_flight)
    
    flight_mode_change()
    
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;

&lt;h2 class=&#34;mt-12 post-h2 &#34; id=&#34;timer-header&#34;&gt;Timer&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#timer&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;The task is to build a frame containing a gauge G for the elapsed time e, a label which shows the elapsed time as a numerical value, a slider S by which the duration d of the timer can be adjusted while the timer is running and a reset button R. Adjusting S must immediately reflect on d and not only when S is released. It follows that while moving S the filled amount of G will (usually) change immediately. When e ≥ d is true then the timer stops (and G will be full). If, thereafter, d is increased such that d &gt; e will be true then the timer restarts to tick until e ≥ d is true again. Clicking R will reset e to zero.&lt;/h3&gt;
&lt;div class=&#34;m-4&#34;&gt;
    &lt;div class=&#34;grid grid-rows-4 p-4 m-auto bg-blue-100 border-2 justify-items-start&#34;&gt;
        &lt;div class=&#34;grid grid-cols-2 justify-items-start&#34;&gt;
            &lt;p&gt;Elapsed Time:&lt;/p&gt;
            &lt;progress id=&#34;progress-bar&#34; value=&#34;32&#34; max=&#34;100&#34;&gt; 32% &lt;/progress&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;p id=&#34;seconds&#34;&gt;Seconds&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class=&#34;flex flex-row justify-items-center&#34;&gt;
            &lt;p&gt;Duration&lt;/p&gt;
            &lt;div class=&#34;w-full m-auto&#34;&gt;&lt;input type=&#34;range&#34; min=&#34;1&#34; max=&#34;100&#34; value=&#34;50&#34; id=&#34;duration-slider&#34; class=&#34;w-72&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;button id=&#34;reset&#34; class=&#34;px-2 my-2 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;RESET&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;We&#39;ll explore a slightly different style of interactivity with this one - using an infinite loop to constantly update the timer as tracked, and update the values of the onscreen label and slider. Before we jump into this infinite loop, we&#39;ll set up an event listener to handle pressing the &#39;reset&#39; button.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But note! By doing this, we&#39;ll trap the Python interpretter in an infinite loop, and it won&#39;t be able to do anything else. Which is fine, so long as you&#39;re only running a single &#34;script&#34; on one page... but if you look at the source of this very page, for example, you&#39;ve notice &lt;code class=&#34;code&#34;&gt;timer.py&lt;/code&gt; is imported at the very end of the &lt;code class=&#34;code&#34;&gt;body&lt;/code&gt; section. Why? Because if we get trapped in an infinite loop at &lt;span class=&#34;italic&#34;&gt;this point&lt;/span&gt; in the page, we&#39;ll never even load the following examples!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Handily, we don&#39;t actually need an separate event handler to handle the changing of the input slider (though that would also be a valid away to do it). Instead, we can directly read the value of the slider each time through out loop using the &lt;code class=&#34;code&#34;&gt;value&lt;/code&gt; property of the slider to get its current value.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The full code of this solution is as follows:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;timer.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid grid-rows-4 p-4 m-auto bg-blue-100 border-2 justify-items-start&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid grid-cols-2 justify-items-start&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;Elapsed Time:&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;progress&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;progress-bar&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;32&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;&amp;gt; 32% &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;progress&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;seconds&amp;#34;&lt;/span&gt;&amp;gt;Seconds&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex flex-row justify-items-center&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;Duration&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full m-auto&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;range&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;min&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;duration-slider&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-72&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;reset&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px-2 my-2 bg-green-200 border-2 rounded-lg&amp;#34;&lt;/span&gt;&amp;gt;RESET&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;timer.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy

my_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
seconds_element &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;seconds&amp;#34;&lt;/span&gt;)
duration_slider &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;duration-slider&amp;#34;&lt;/span&gt;)
progress_bar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;progress-bar&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_reset_time&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Time reset&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; my_time
    my_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

reset_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_reset_time)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;reset&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, reset_time)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;.1&lt;/span&gt;)
    my_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;round&lt;/span&gt;(my_time &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;.1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    seconds_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(my_time) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; Seconds&amp;#34;&lt;/span&gt;

    min_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(duration_slider&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;min)
    max_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(duration_slider&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)

    min_bar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    max_bar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(progress_bar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;max)

    progress_bar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ((my_time &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; min_time) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (max_bar &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; (max_time &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; min_time &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;.01&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;

&lt;h2 class=&#34;mt-12 post-h2 &#34; id=&#34;crud-header&#34;&gt;CRUD&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#timer&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;The task is to build a frame containing the following elements: a textfield Tprefix, a pair of textfields Tname and Tsurname, a listbox L, buttons BC, BU and BD and the three labels as seen in the screenshot. L presents a view of the data in the database that consists of a list of names. At most one entry can be selected in L at a time. By entering a string into Tprefix the user can filter the names whose surname start with the entered prefix—this should happen immediately without having to submit the prefix with enter. Clicking BC will append the resulting name from concatenating the strings in Tname and Tsurname to L. BU and BD are enabled iff an entry in L is selected. In contrast to BC, BU will not append the resulting name but instead replace the selected entry with the new name. BD will remove the selected entry. The layout is to be done like suggested in the screenshot. In particular, L must occupy all the remaining space.&lt;/h3&gt;
&lt;py-script src=&#34;./crud.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;m-4&#34;&gt;
    &lt;div class=&#34;grid p-4 m-auto bg-blue-100 border-2 justify-items-start&#34;&gt;
        &lt;div class=&#34;p-2 m-auto bg-gray-300 rounded-lg&#34;&gt;
            &lt;div id=&#34;upper-content&#34; class=&#34;grid &#34;&gt;
                &lt;div id=&#34;filter-box&#34; class=&#34;grid w-full grid-cols-2&#34;&gt;
                    &lt;p id=&#34;filter-label&#34; class=&#34;px-4&#34;&gt;Filter Prefix:
                    &lt;input type=&#34;text&#34; id=&#34;filter-input&#34; class=&#34;border-2 border-gray-300&#34;&gt;&lt;/p&gt;
                &lt;/div&gt;
                &lt;div id=&#34;middle-section&#34; class=&#34;grid grid-cols-2&#34;&gt;
                    &lt;select id=&#34;listbox&#34; size=&#34;5&#34; class=&#34;h-48 m-4 bg-blue-50&#34;&gt;test&lt;/select&gt;
                    &lt;div id=&#34;name-entry-container&#34; class=&#34;grid grid-rows-2 w-96&#34;&gt;
                        &lt;div id=&#34;firstname-container&#34; class=&#34;grid h-8 grid-cols-2 align-middle justify-items-end&#34;&gt;
                            &lt;p&gt;Name:&lt;/p&gt;
                            &lt;input type=&#34;text&#34; id=&#34;firstname-input&#34;&gt;
                        &lt;/div&gt;
                        &lt;div id=&#34;surname-container&#34; class=&#34;grid h-8 grid-cols-2 align-middle justify-items-end&#34;&gt;
                            &lt;p&gt;Surname:&lt;/p&gt;
                            &lt;input type=&#34;text&#34; id=&#34;surname-input&#34;&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div id=&#34;lower-buttons&#34; class=&#34;grid w-full grid-cols-3&#34;&gt;
                &lt;button id=&#34;create&#34; class=&#34;m-4 bg-green-200 border-2 border-gray-400 rounded-md&#34;&gt;Create&lt;/button&gt;
                &lt;button id=&#34;update&#34; class=&#34;m-4 bg-green-200 border-2 border-gray-400 rounded-md&#34;&gt;Update&lt;/button&gt;
                &lt;button id=&#34;delete&#34; class=&#34;m-4 bg-green-200 border-2 border-gray-400 rounded-md&#34;&gt;Delete&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This is the first challenge where we get to play a little bit with DOM manipulation. So far we&#39;ve only been reading/manipulating the values of inputs and textboxes - now we&#39;ll actually add and remove elements.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To do this, we&#39;ll use the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement&#34;&gt;document.creteElement()&lt;/a&gt; method, which takes a tag name as a string (like &lt;code class=&#34;code&#34;&gt;p&lt;/code&gt; or &lt;code class=&#34;code&#34;&gt;div&lt;/code&gt;) and creates a tag of that type. We can then set the &lt;code class=&#34;code&#34;&gt;value&lt;/code&gt; of that tag (if appropriate for an input-like object), its &lt;code class=&#34;code&#34;&gt;text&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;innerHTML&lt;/code&gt;, and so on. We can then add that tag as a child of an existing DOM element by calling &lt;code class=&#34;code&#34;&gt;myOtherElement.appendChild(myNewTagElement)&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I will admit to somewhat brute-forcing the issue removal and replacement of &#39;database&#39; entries by wiping the list view of all entries and re-displaying them each time the user takes an action the modifies the list. This is certainly not the most efficient way to handle things. For a better example of managing the state of a list of objects, see the &lt;a href=&#34;#circle-header&#34;&gt;Circle Drawer example&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also took the opportunity to introduce &lt;a href=&#34;https://docs.python.org/3/library/dataclasses.html&#34;&gt;Dataclasses&lt;/a&gt; here, a really useful tool if you haven&#39;t encountered them before. They really simply small container classes - no more writing &lt;code class=&#34;code&#34;&gt;__str__&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;__repr__&lt;/code&gt;, or even &lt;code class=&#34;code&#34;&gt;__init__&lt;/code&gt; by hand! There&#39;s a &lt;a href=&#34;https://www.youtube.com/watch?v=vBH6GRJ1REM&#34;&gt;great video about Dataclasses from mCoding&lt;/a&gt; the explains this in greater detail.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The full code of this solution is as follows:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./crud.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid p-4 m-auto bg-blue-100 border-2 justify-items-start&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;p-2 m-auto bg-green-100 rounded-lg&amp;#34;&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;upper-content&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid &amp;#34;&lt;/span&gt;&amp;gt;
                &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;filter-box&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid w-full grid-cols-2&amp;#34;&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;filter-label&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px-4&amp;#34;&lt;/span&gt;&amp;gt;Filter Prefix:
                    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;filter-input&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;border-2 border-gray-300&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
                &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
                &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;middle-section&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid grid-cols-2&amp;#34;&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;listbox&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;h-48 m-4 bg-blue-50&amp;#34;&lt;/span&gt;&amp;gt;test&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;select&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name-entry-container&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid grid-rows-2 w-96&amp;#34;&lt;/span&gt;&amp;gt;
                        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;firstname-container&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid h-8 grid-cols-2 align-middle justify-items-end&amp;#34;&lt;/span&gt;&amp;gt;
                            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;Name:&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
                            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;firstname-input&amp;#34;&lt;/span&gt;&amp;gt;
                        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
                        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;surname-container&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid h-8 grid-cols-2 align-middle justify-items-end&amp;#34;&lt;/span&gt;&amp;gt;
                            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;Surname:&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
                            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;surname-input&amp;#34;&lt;/span&gt;&amp;gt;
                        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
                    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
                &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;lower-buttons&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid w-full grid-cols-3&amp;#34;&lt;/span&gt;&amp;gt;
                &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;create&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;m-4 bg-gray-200 border-2 border-gray-400 rounded-md&amp;#34;&lt;/span&gt;&amp;gt;Create&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
                &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;m-4 bg-gray-200 border-2 border-gray-400 rounded-md&amp;#34;&lt;/span&gt;&amp;gt;Update&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
                &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;delete&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;m-4 bg-gray-200 border-2 border-gray-400 rounded-md&amp;#34;&lt;/span&gt;&amp;gt;Delete&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
            &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;crud.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass, field
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; UserList
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; randint

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;(order&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Entry&lt;/span&gt;():
    surname: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;    
    firstname: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;EntryList&lt;/span&gt;(UserList):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;append&lt;/span&gt;(self, other):
        &lt;span style=&#34;color:#366&#34;&gt;super&lt;/span&gt;()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(other)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data)

entries &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; EntryList()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_get_namefields&lt;/span&gt;():
    first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;firstname-input&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    sur &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;surname-input&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; first, sur

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_update_view&lt;/span&gt;():
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Updating listbox view&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;listbox&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

    filter_text &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;filter-input&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; filter_text &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; filter_text

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; entry &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; entries:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;surname&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;startswith(&lt;span style=&#34;color:#366&#34;&gt;filter&lt;/span&gt;):
            option &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;option&amp;#39;&lt;/span&gt;)
            option&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;firstname &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;surname
            option&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;firstname &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;surname
            &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(option)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_create_entry&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Create clicked&amp;#34;&lt;/span&gt;)
    first, sur &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _get_namefields()
    new_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Entry(firstname &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; first, surname &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; sur)
    entries&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(new_entry)
    _update_view()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_delete_entry&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Delete clicked&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;listbox&amp;#34;&lt;/span&gt;)
    index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selectedIndex
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        entries&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(index)
        _update_view()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_update_entry&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;listbox&amp;#34;&lt;/span&gt;)
    index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selectedIndex

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        entries&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(index)
        _create_entry()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_filter_key&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Filter input changed&amp;#34;&lt;/span&gt;)
    _update_view()

create_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_create_entry)
delete_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_delete_entry)
update_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_update_entry)
filter_key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_filter_key)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;create&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_entry)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;delete&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, delete_entry)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, update_entry)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;filter-input&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, filter_key)
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;

&lt;h2 class=&#34;mt-12 post-h2 &#34; id=&#34;circle-header&#34;&gt;Circle Drawer&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#circle&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;The task is to build a frame containing an undo and redo button as well as a canvas area underneath. Left-clicking inside an empty area inside the canvas will create an unfilled circle with a fixed diameter whose center is the left-clicked point. The circle nearest to the mouse pointer such that the distance from its center to the pointer is less than its radius, if it exists, is filled with the color gray. The gray circle is the selected circle C. Right-clicking C will make a popup menu appear with one entry “Adjust diameter..”. Clicking on this entry will open another frame with a slider inside that adjusts the diameter of C. Changes are applied immediately. Closing this frame will mark the last diameter as significant for the undo/redo history. Clicking undo will undo the last significant change (i.e. circle creation or diameter adjustment). Clicking redo will reapply the last undoed change unless new changes were made by the user in the meantime.&lt;/h3&gt;
&lt;div class=&#34;grid p-4 m-auto bg-blue-100 border-2&#34;&gt;
    &lt;canvas id=&#34;circle-canvas&#34; width=&#34;500&#34; height=&#34;500&#34; class=&#34;m-auto border-2&#34; &gt;&lt;/canvas&gt;
    &lt;div id=&#34;button-holder&#34; class=&#34;flex w-full mt-2 justify-evenly&#34;&gt;&lt;button id=&#34;undo&#34; class=&#34;px-6 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;Undo&lt;/button&gt;&lt;button id=&#34;redo&#34; class=&#34;px-6 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;Redo&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;link rel =&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;./context-menu.css&#34;&gt;
&lt;div id=&#34;right-click-menu&#34; class=&#34;absolute bg-gray-200 border-1&#34; 
    style=&#34;display: none&#34;&gt;
    &lt;div class=&#34;mx-4 my-2&#34;&gt;
        &lt;p id=&#34;circle-slider-label&#34;&gt;Adjust diameter of Circle at (x, y)&lt;/p&gt;
        &lt;div class=&#34;w-full m-auto&#34;&gt;&lt;input type=&#34;range&#34; min=&#34;1&#34; max=&#34;100&#34; value=&#34;50&#34; id=&#34;circle-slider&#34; class=&#34;w-5/6&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;circle.py&#34;&gt;&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;Oh boy we get to play with the canvas! There are almost-certainly Javascript libraries for handling onscreen objects as sprites, with undo-redo perhaps, but the whole point of this challenge is to learn by doing. So I&#39;ll start with a bare canvas object and work up from there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;When thinking about a somewhat-involved challenge like this, it&#39;s useful to break it down into managable chunks. I figured I&#39;d get circles being drawn with a mouse-click, then figure out the right-click-to-change-size functionality, then work on undo/redo.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thanks again to Pyodide&#39;s marvelous JS-to-Python mapping, we can directly use all the methods available in the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D&#34;&gt;CanvasRenderingContext2D&lt;/a&gt; object to draw to our existing canvas. The &lt;code class=&#34;code&#34;&gt;arc&lt;/code&gt; method is perfect for drawing circles, and &lt;code class=&#34;code&#34;&gt;stroke&lt;/code&gt; or &lt;code class=&#34;code&#34;&gt;fill&lt;/code&gt; actually place the drawn strokes on the canvas.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With just those simple functions in place, if we hook up an eventListener to listen for the &lt;code class=&#34;code&#34;&gt;mousedown&lt;/code&gt; event, which relies on our _draw_circle function, we can pretty quickly begin clicking away:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;canvas-context-examples.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;canvas &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-canvas&amp;#34;&lt;/span&gt;)
ctx &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getContext(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_clear_screen&lt;/span&gt;():
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillStyle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillRect(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width, canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_draw_circle&lt;/span&gt;(x, y, radius):
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beginPath();
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;arc(x, y, radius, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;pi)
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stroke()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_draw_filled_circle&lt;/span&gt;(x, y, radius):
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beginPath();
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;arc(x, y, radius, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;pi)
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillStyle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;gray&amp;#34;&lt;/span&gt;
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fill()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_on_click&lt;/span&gt;(e):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;button &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#left mouse button&lt;/span&gt;
        _make_new_circle(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetX,e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetY, randint(&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;70&lt;/span&gt;))

on_click &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_on_click)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-canvas&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mousedown&amp;#34;&lt;/span&gt;, on_click)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;As far as handling the custom right-click menu, I found &lt;a href=&#34;https://www.geeksforgeeks.org/how-to-add-a-custom-right-click-menu-to-a-webpage/&#34;&gt;this guide from geeksforgeeks&lt;/a&gt; to be useful. Basically, you create a &lt;code class=&#34;code&#34;&gt;div&lt;/code&gt; somewhere on your page that holds the contents of your new menu. Then you set its style to &lt;code class=&#34;code&#34;&gt;display:none&lt;/code&gt; so it doesn&#39;t actually appear. When you want it to show up, to change its &lt;code class=&#34;code&#34;&gt;left&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;top&lt;/code&gt; properties to match the current position of the mouse and set its display stlye to &lt;code class=&#34;code&#34;&gt;block&lt;/code&gt;. Voila, the div appears where you clicked.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The nice thing about handing the menu as a div (as opposed to, say, defining our own custom piece of interactive GUI) is that we can make use of all the functionality that native HTML elements provide already. Our menu can have labels, inputs of any kind, even addtional canvases.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s a little extra legwork to do to make sure that the browser&#39;s native right-click menu doesn&#39;t also appear. With &lt;code class=&#34;code&#34;&gt;e&lt;/code&gt; as the event that the eventListener passed to our function, we can prevent the default right-click menu from opening by calling &lt;code class=&#34;code&#34;&gt;e.preventDefault()&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;e.stopPropagation()&lt;/code&gt;, and returning &lt;code class=&#34;code&#34;&gt;false&lt;/code&gt; from our handler function.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, for the undo/redo functionality, we need to actually start tracking our circles as objects. This is the point when Circle became a Dataclass in the code. We also need to track the changes-in-diameter that are made to the circles, so a ResizeOperation Dataclass was born. Each time the user takes an action, a new object (Circle or ResizeOperation) is appended to a list of actions, and a pointer to the most-recent action is incremented by one. When the user presses undo, if the pointed-to action is a ResizeOperation, we reverse the resizing of the appropriate Circle, and either way, the pointer is decremented by 1. We then set the rendering function to only draw circles that exist earlier than our pointer in our list of actions. A redo operation is similar, resizing circles as necessary and incrementing the pointer. Finally, we adjust out functions for drawing new circles and resizing them to always truncate the list of actions after the current point, and set the pointer to the end of our list of actions.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If the preceding paragaph was just so much word-spaghetti, the full code of this solution is as follows:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid p-4 m-auto bg-blue-100 border-2&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;canvas&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-canvas&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;500&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;500&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;m-auto border-2&amp;#34;&lt;/span&gt; &amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;canvas&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;button-holder&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex w-full mt-2 justify-evenly&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;undo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px-6 bg-green-200 border-2 rounded-lg&amp;#34;&lt;/span&gt;&amp;gt;Undo&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;redo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px-6 bg-green-200 border-2 rounded-lg&amp;#34;&lt;/span&gt;&amp;gt;Redo&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;rel &lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./context-menu.css&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right-click-menu&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute bg-gray-200 border-1&amp;#34;&lt;/span&gt; 
    &lt;span style=&#34;color:#309&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;display: none&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mx-4 my-2&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider-label&amp;#34;&lt;/span&gt;&amp;gt;Adjust diameter of Circle at (x, y)&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full m-auto&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;range&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;min&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-5/6&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;circle.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;153
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;154
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;155
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;156
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;157
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;158
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;159
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;160
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;161
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;162
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;163
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;164
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;165
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;166
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;167
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;168
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;169
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;170
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;171
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;172
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;173
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;174
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;175
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;176
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;177
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;178
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;179
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;180
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;181
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;182
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;183
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;184
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;185
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;186
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;187
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;188
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;189
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;190
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;191
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;192
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;193
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;194
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;195
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;196
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;197
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;198
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;199
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;200
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;201
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;202
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console, window
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;math&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; pi, sqrt
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; randint
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass, field

canvas &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-canvas&amp;#34;&lt;/span&gt;)
ctx &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getContext(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Fill background with white&lt;/span&gt;
ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillStyle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;
ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillRect(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width, canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height)

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Circle&lt;/span&gt;():
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    radius: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;UndoQueue&lt;/span&gt;:
    index : &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    q : &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;() &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; field(default_factory &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;)

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;ResizeOperation&lt;/span&gt;:
    circle: Circle
    previous_size: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    new_size: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

uq &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; UndoQueue(index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
currentResize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ResizeOperation(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

my_circles &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
closest_circle_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_clear_screen&lt;/span&gt;():
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillStyle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillRect(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width, canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_draw_circle&lt;/span&gt;(x, y, radius):
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beginPath();
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;arc(x, y, radius, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;pi)
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stroke()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_draw_filled_circle&lt;/span&gt;(x, y, radius):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Drawing filled circle at &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;x&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;y&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, with radius &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;radius&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beginPath();
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;arc(x, y, radius, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;pi)
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillStyle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;gray&amp;#34;&lt;/span&gt;
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fill()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_redraw_all&lt;/span&gt;():
    _clear_screen()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(my_circles):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; closest_circle_index &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
            c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; my_circles[closest_circle_index]
            _draw_filled_circle(c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; my_circles:
            _draw_circle(c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_make_new_circle&lt;/span&gt;(x, y, radius):
    new_circle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Circle(x, y, radius)
    my_circles&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(new_circle)

    uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q[:uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
    uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(new_circle)
    uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;uq&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_on_click&lt;/span&gt;(e):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; my_circles
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetX) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetY))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right-click-menu&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;block&amp;#34;&lt;/span&gt;): _hide_menu(e)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;button &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#left mouse button&lt;/span&gt;
        _make_new_circle(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetX,e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetY, randint(&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;70&lt;/span&gt;))
        _redraw_all()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#if (document.getElementById(&amp;#34;right-click-menu&amp;#34;).style.display == &amp;#34;block&amp;#34;): _hide_menu(e)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; closest_circle_index &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: _show_menu(e)
        e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;preventDefault()
        e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stopPropagation()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_no_context&lt;/span&gt;(e):
    e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;preventDefault()
    e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stopPropagation()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;oncontextmenu &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _no_context
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right-click-menu&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;oncontextmenu &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _no_context

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_show_menu&lt;/span&gt;(event):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Right mouse button clicked, showing menu&amp;#34;&lt;/span&gt;)
    menu &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right-click-menu&amp;#34;&lt;/span&gt;)
    menu&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;block&amp;#34;&lt;/span&gt;
    menu&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(event&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pageX) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px&amp;#34;&lt;/span&gt;
    menu&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;top &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(event&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pageY) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px&amp;#34;&lt;/span&gt;

    c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; my_circles[closest_circle_index]

    label &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider-label&amp;#34;&lt;/span&gt;)
    label&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Adjust diameter of Circle at (&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;)&amp;#34;&lt;/span&gt;

    slider &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider&amp;#34;&lt;/span&gt;)
    slider&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; my_circles[closest_circle_index]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; currentResize
    currentResize&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;previous_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; slider&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    currentResize&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;circle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; c

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_change_radius&lt;/span&gt;(_):
    slider &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider&amp;#34;&lt;/span&gt;)
    new_radius &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; slider&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    my_circles[closest_circle_index]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; new_radius
    _redraw_all()
    

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_hide_menu&lt;/span&gt;(e):
    slider &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; currentResize
    currentResize&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; slider&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value

    uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q[:uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
    uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(currentResize)
    uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    currentResize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ResizeOperation(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right-click-menu&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
    _recalc_nearest_circle(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetX, e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetY)
        
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_on_move&lt;/span&gt;(e):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Do not reselect circle when menu is open&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right-click-menu&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;block&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; 
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(my_circles):
        _recalc_nearest_circle(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetX, e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetY)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_recalc_nearest_circle&lt;/span&gt;(mouse_x, mouse_y):
        closest_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        closest_distance &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1000000&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(my_circles):
            dist &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; sqrt((mouse_x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (mouse_y &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; dist &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; closest_distance: 
                closest_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; i
                closest_distance &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dist
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; closest_circle_index
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; closest_index &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; closest_circle_index:
            closest_circle_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; closest_index
            _redraw_all()

on_click &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_on_click)
on_move &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_on_move)
change_radius &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_change_radius)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-canvas&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mousedown&amp;#34;&lt;/span&gt;, on_click)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-canvas&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mousemove&amp;#34;&lt;/span&gt;, on_move)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, change_radius)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_press_undo&lt;/span&gt;(e):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Nothing more to undo&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;uq&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;

    op_to_undo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q[uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;(op_to_undo) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Circle:
        my_circles&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
        uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(my_circles):
            _recalc_nearest_circle(&lt;span style=&#34;color:#f60&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;500&lt;/span&gt;) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#A hack, bottom of the canvas&lt;/span&gt;
        _redraw_all()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;(op_to_undo) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ResizeOperation:
        op_to_undo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;circle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; op_to_undo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;previous_size
        uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        _redraw_all()
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;After Undo &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;uq&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;my_circles&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_press_redo&lt;/span&gt;(e):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;REDO &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;uq&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;my_circles&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: 
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Nothing more to redo&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;uq&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;

    op_to_redo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q[uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;(op_to_redo) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Circle:
        my_circles&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Circle(op_to_redo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, op_to_redo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, op_to_redo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius))
        uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;(op_to_redo) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ResizeOperation:
        op_to_redo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;circle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; op_to_redo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new_size
        uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(my_circles):
        _recalc_nearest_circle(&lt;span style=&#34;color:#f60&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;500&lt;/span&gt;)   

    _redraw_all()
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;After Redo &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;uq&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;my_circles&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


press_undo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_press_undo)
press_redo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_press_redo)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;undo&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, press_undo)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;redo&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, press_redo)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;

&lt;h2 class=&#34;mt-12 post-h2 &#34; id=&#34;cells-header&#34;&gt;Spreadsheet&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#cells&#34;&gt;&lt;img src=&#34;../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;The task is to create a simple but usable spreadsheet application. The spreadsheet should be scrollable. The rows should be numbered from 0 to 99 and the columns from A to Z. Double-clicking a cell C lets the user change C’s formula. After having finished editing the formula is parsed and evaluated and its updated value is shown in C. In addition, all cells which depend on C must be reevaluated. This process repeats until there are no more changes in the values of any cell (change propagation). Note that one should not just recompute the value of every cell but only of those cells that depend on another cell’s changed value. If there is an already provided spreadsheet widget it should not be used. Instead, another similar widget (like JTable in Swing) should be customized to become a reusable spreadsheet widget.&lt;/h3&gt;
&lt;link rel =&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;./cells-table.css&#34;&gt;
            &lt;div class=&#34;grid w-full p-4 m-auto bg-blue-100 border-2 rounded-md&#34;&gt;
                &lt;div id=&#34;spreadsheet-wrapper&#34; class=&#34;overflow-x-auto overflow-y-auto h-72&#34;&gt;
                    &lt;table id=&#34;spreadsheet&#34; style=&#34;empty-cells:show&#34; class=&#34;m-auto bg-white border-2&#34;&gt;
                        &lt;thead&gt;&lt;/thead&gt;
                        &lt;tbody&gt;&lt;/tbody&gt;
                    &lt;/table&gt;
                &lt;/div&gt;
            &lt;/div&gt;
&lt;py-env&gt;
- paths:
    - ./spreadsheet.py
    - ./formula_parser.py
&lt;/py-env&gt;
&lt;py-script src=&#34;./cells-table.py&#34;&gt;
&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;I will entirely own to not-quite-finishing this challenge, in that I didn&#39;t actually implement the &#39;cells-can-refer-to-other-cells&#39; component of it that actually makes it a Spreadsheet and not a big grid of calculators. Ah well, perhaps you&#39;ll forgive me. &lt;span class=&#34;font-bold&#34;&gt;The error handling is also quite bad.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is the first time I&#39;ve had cause to use the &lt;code class=&#34;code&#34;&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; tag in these challenges. This takes a toml-style list of additional modules to import from PYPI (via &lt;a href=&#34;https://pyodide.org/en/stable/usage/loading-packages.html&#34;&gt;micropip&lt;/a&gt;), as well as a list of additional local paths that one can import from. In my case, I broke out my code into a couple of additional Python files, so my &lt;code class=&#34;code&#34;&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; tag looked like this:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;py-env-example.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
- paths:
    - ./spreadsheet.py
    - ./formula_parser.py
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./cells-table.py&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;post-p&#34;&gt;I could spend a whole post talking about the logic in &lt;code class=&#34;code&#34;&gt;formula-parser.py&lt;/code&gt;, but since this is really more of a PyScript adventure and not so much just Python, I&#39;ll leave you to explore that code on your own if you&#39;re interested. Let&#39;s talk about the setup/HTML parts.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The grid cells themselves are all &lt;code class=&#34;code&#34;&gt;input&lt;/code&gt; tags, which are generated at runtime by the &lt;code class=&#34;code&#34;&gt;create_cells()&lt;/code&gt; function. Each one is assigned an ID based on its column and row, which we&#39;ll use later to read and assign contents to it. We&#39;ll store the representation of our data separately as a Spreadsheet object, and use that to render the contents of each input as needed.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The Spreadsheet object has to be a bit clever, since it seeds to be able to hold both the input the user typed into a cell, as well as determine the value of an input (if it&#39;s an equation) and present that back to the interface. To that end, the UI can ask either &lt;code class=&#34;code&#34;&gt;getRawValue()&lt;/code&gt; to retrieve what the user actually typed in, or &lt;code class=&#34;code&#34;&gt;getRenderedValue()&lt;/code&gt; to process the equation represented by the raw value, if any.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The full code of this solution is as follows:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;rel &lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./cells-table.css&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid w-full p-4 m-auto bg-blue-100 border-2 rounded-md&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;spreadsheet-wrapper&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-x-auto overflow-y-auto h-72&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;spreadsheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;empty-cells:show&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;m-auto bg-white border-2&amp;#34;&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;thead&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;thead&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;tbody&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;tbody&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;table&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
- paths:
    - ./spreadsheet.py
    - ./formula_parser.py
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./cells-table.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;cells-table.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;spreadsheet&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Spreadsheet
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

columnIndices &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;&lt;/span&gt;

document_sheet &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;spreadsheet&amp;#34;&lt;/span&gt;)

sheet &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Spreadsheet()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_handle_input_change&lt;/span&gt;(e):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Processing Cell&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id))
    render_table(sheet)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_handle_cell_enter&lt;/span&gt;(e):
    code &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;keyCode
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; code &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;13&lt;/span&gt;:
        e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;blur()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_handle_cell_blur&lt;/span&gt;(e):
    column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;cell-(\w)-(\d+)&amp;#39;&lt;/span&gt;, e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;cell-(\w)-(\d+)&amp;#39;&lt;/span&gt;, e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    sheet&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;set((column, row), e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)
    _handle_input_change(e)

handle_cell_enter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_handle_cell_enter)
handle_input_blur &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_handle_cell_blur)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_handle_cell_focus&lt;/span&gt;(e):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; gained focus&amp;#34;&lt;/span&gt;)
    _handle_input_change(e)

handle_cell_focus &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_handle_cell_focus)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;render_table&lt;/span&gt;(s: Spreadsheet):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; location &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data:
        &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cell-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(location[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(location[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])
        cell_input &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; cell_input &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;activeElement: 
            cell_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getRawValue(location)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            cell_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getRenderedValue(location)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;create_table&lt;/span&gt;(num_x, num_y):
    create_header(num_x)
    create_cells(num_x, num_y)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;create_header&lt;/span&gt;(num_x):
    header &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;querySelector(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#spreadsheet &amp;gt; thead&amp;#34;&lt;/span&gt;)
    upperLeft &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;th&amp;#34;&lt;/span&gt;)
    header&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(upperLeft)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(num_x):
        heading &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;th&amp;#34;&lt;/span&gt;)
        heading&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; columnIndices[i]
        header&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(heading)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;create_cells&lt;/span&gt;(num_x, num_y):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(num_y):
        row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;tr&amp;#34;&lt;/span&gt;)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-x-hidden&amp;#34;&lt;/span&gt;)
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Create row label&lt;/span&gt;
        cell &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;td&amp;#34;&lt;/span&gt;)
        label &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;)
        label&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-bold&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-right&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px-2&amp;#34;&lt;/span&gt;)
        label&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; y
        cell&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(label)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(cell)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(num_x):
            sheet&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;set((columnIndices[x], y), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(x)&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(y))
            cell &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;td&amp;#34;&lt;/span&gt;)
            cell&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;border-2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;border-gray-300&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-48&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;h-6&amp;#34;&lt;/span&gt;)
            new_input &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;)
            new_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-48&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;h-6&amp;#34;&lt;/span&gt;)
            new_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cell-&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;columnIndices[x]&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;y&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            new_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;keydown&amp;#34;&lt;/span&gt;, handle_cell_enter)
            new_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;blur&amp;#34;&lt;/span&gt;, handle_input_blur)
            new_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;focus&amp;#34;&lt;/span&gt;, handle_cell_focus)
            cell&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(new_input)
            row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(cell)
        document_sheet&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(row)

create_table(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(columnIndices),&lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;)
render_table(sheet)
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;spreadsheet.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;formula_parser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; FormulaParser, TokenType
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Spreadsheet&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data : &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;set&lt;/span&gt;(self, location: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;, value: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data[location] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; value
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getRawValue&lt;/span&gt;(self, location: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data[location]

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getRenderedValue&lt;/span&gt;(self, location: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;):
        value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data[location] 
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data[location][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;:
            tokens &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tokenize(value[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:])
            console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Tokens: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;tokens&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;([t&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_CELL &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; tokens]):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;solve_with_references(tokens, self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;solve_full_expression(tokens)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; value
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;formula_parser.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;153
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;154
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;155
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;156
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;157
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;158
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;159
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;160
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;161
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;162
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;163
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;164
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;165
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;166
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;167
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;168
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;169
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;170
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;171
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;172
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;173
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;174
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;175
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;176
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;177
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;178
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;179
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;180
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;181
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;182
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;183
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;184
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;185
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;copy&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deepcopy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Enum, auto
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;TokenType&lt;/span&gt;(Enum):
    T_NUM &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_EMPTY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_PLUS &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_MINUS &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_DIVIDE &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_MULT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_LEFTP &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_RIGHTP &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_CELL &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_END &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_EXPRESSION &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()

arithmetic &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; : TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_PLUS,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; : TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_MINUS,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; : TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_DIVIDE,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; : TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_MULT,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; : TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_LEFTP,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt; : TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_RIGHTP,
}

parens_types &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_LEFTP, TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_RIGHTP}
my_dear &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_MULT : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x,y: x&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;y, TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_DIVIDE: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x, y: x&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;y}
aunt_sally &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_PLUS: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x,y: x&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;y, TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_MINUS: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x, y: x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; y}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;quiet_index&lt;/span&gt;(i: Iterable, obj):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(obj)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; err:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; index

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;ParseError&lt;/span&gt;(&lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Node&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, token_type, value&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, children&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; token_type
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; value
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; children &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;: self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; children
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Node (&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;):&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; children: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;__str__()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_value&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_NUM:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Could not derive value of token &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;FormulaParser&lt;/span&gt;():
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#re_ident = r&amp;#34;[a-zA-Z_]\w*&amp;#34; #matches identifiers&lt;/span&gt;
    re_decimal &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-?\d+(\.\d*)?&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#matches decimal numbers&lt;/span&gt;
    re_cell &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;([a-zA-Z])(\d+)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#group 1 is column, group 2 is row&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#re_range = re_cell + &amp;#34;:&amp;#34; + re_cell #matches a range like A2:B4&lt;/span&gt;
    re_operators &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[\+\-\/\*\(\)]&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tokenize&lt;/span&gt;(value: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(value) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
        value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(value&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#remove all whitespace&lt;/span&gt;

        tokens &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(value) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
            token &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
            match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; match &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;re_cell, value):
                token &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_CELL, value&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group())
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; match &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;re_operators, value):
                token &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(token_type&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;arithmetic[match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group()], value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group())
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; match &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;re_decimal, value):
                token &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_NUM, value&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group()))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No further tokens found in &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
            tokens&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(token)
            value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; value[match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end():]
            
        tokens &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [Node(token_type&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_LEFTP, value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; tokens &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [Node(token_type&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_RIGHTP, value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;)]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; tokens

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_referenced_cells&lt;/span&gt;(token_list: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [node &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; token_list &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;isinstance&lt;/span&gt;(node, Node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_CELL]

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_closest_parens&lt;/span&gt;(token_list:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;:
        leftIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        rightIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, token &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(token_list):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; token&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_LEFTP:
                leftIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; i
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; token&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_RIGHTP:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; leftIndex &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; leftIndex, i
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Left and right parentheses do not match&amp;#34;&lt;/span&gt;)
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#-----------------------------------------#&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_full_expression&lt;/span&gt;(token_list:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;:
        original_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; deepcopy(token_list)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;([t&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; parens_types &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; token_list]):
            left_p, right_p &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;find_closest_parens(token_list)
            result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;evaluate_simple_expression(token_list[left_p&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:right_p])
            token_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (token_list[:left_p] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; left_p &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; []) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [result] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (token_list[right_p &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (right_p &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(token_list) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; [])
            

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(token_list) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; token_list[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; ParseError(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Failed to parse full expression &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;original_list&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;Final tokens were &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;token_list&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;evaluate_simple_expression&lt;/span&gt;(token_list:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
        original_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; deepcopy(token_list)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(token_list) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; token_list[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]

        token_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;evaluate_for_single_opset(token_list, my_dear)
        token_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;evaluate_for_single_opset(token_list, aunt_sally)
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(token_list) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; token_list[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; ParseError(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Failed to parse simple expression &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;original_list&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;Final tokens were &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;token_list&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;evaluate_for_single_opset&lt;/span&gt;(token_list:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;, operators:&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;(ops_to_do &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; [t&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; operators &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; token_list]):
            op_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ops_to_do&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
            func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; operators[token_list[op_location]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type]

            result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; func(token_list[op_location&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value, token_list[op_location&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)
            new_node &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_NUM, value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; result)

            token_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (token_list[:op_location&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; op_location &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; []) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [new_node] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (token_list[op_location &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;:] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; op_location &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(token_list) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; [])
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; token_list

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tokenize_and_solve&lt;/span&gt;(expression:&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;solve_full_expression(FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tokenize(expression))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_with_references&lt;/span&gt;(token_list:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;, data: &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;, already_referenced:&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Not yet implemented&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;solve_full_expression(token_list)

        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Psuedocode:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Get list of all references in tokens
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            if any of these area in our already-referenced set, we have a loop and cannot solve this. Bail!
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Recursively get the values of each of those cells.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            If the cell is a striaght numerical value, just get a node with that value
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            If the cell is not a number or tokenizable, BAIL! #REF error
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            Tokenize their destination
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            If they have references, call this again with self added to the list of referenced cells
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            If not, solve them normally with solve_full_expression
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        solve_full_expression of this normal expression
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Return
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;



&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    values &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2 + 3&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2 * 3&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2 + 3 * 4&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2 * 3 + 4&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2 * (3 + 4)&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(2 * 3) + 4&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(2 + 3) * (4 + 5)&amp;#34;&lt;/span&gt;
    ]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; values:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;v&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tokenize_and_solve(v)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;ve made it this far down the page, I&#39;m truly honored. &lt;a href=&#34;https://twitter.com/jeffersglass&#34;&gt;I&#39;m just a guy who loves Python and playing with code&lt;/a&gt;, and I&#39;d love to hear what you think of PyScript.&lt;/p&gt;
&lt;py-script src=&#34;timer.py&#34;&gt;&lt;/py-script&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Pyscript Intro</title>
      <link>https://jeff.glass/post/pyscript-intro/</link>
      <pubDate>Mon, 02 May 2022 07:36:11 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-intro/</guid>
      <description>&lt;script defer src=&#34;../ps/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;Installation is simple, as noted on the &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;Github repository&lt;/a&gt;: clone the repo, cd into the pyscriptjs folder, run &lt;code class=&#34;code&#34;&gt;npm install&lt;/code&gt; and you&#39;re good to go. &lt;code class=&#34;code&#34;&gt;npm run dev&lt;/code&gt; starts a live server for playing with code or examples. You can also just include Pyscript via CDN.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Looking at the core part of the hello_world example shows us a few things:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;hello_world.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
    Hello world! &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;br&lt;/span&gt;&amp;gt;
    This is the current date and time, as computed by Python:
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
from datetime import datetime
now = datetime.now()
now.strftime(&amp;#34;%m/%d/%Y, %H:%M:%S&amp;#34;)
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;firstoutput.PNG&#34; alt=&#34;A screenshot of the pyscript Hello World app, with generated HTML source code clipped from the inspector&#34; class=&#34;mb-4 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems that, REPL-like, the raw string output of... the final line? Is printed to the sceen. In our case,  inside a div with what looks like a UUID:&lt;/p&gt;

&lt;img src=&#34;firsthtml.PNG&#34; alt=&#34;A screenshot of the pyscript Hello World app, with generated HTML source code clipped from the inspector&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems that this is only true for raw, literal values. That is, adding &lt;code class=&#34;code&#34;&gt;test_name = &#34;test&#34;&lt;/code&gt; to the end of the py-script tag means that nothing is output, but just adding &lt;code class=&#34;code&#34;&gt;&#34;test&#34;&lt;/code&gt; prints &lt;span class=&#34;italic&#34;&gt;test&lt;/span&gt; to the screen.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;&amp;lt;py-script&amp;gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;datetime&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; datetime
now &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;now()
now&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;%m/&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;/%Y, %H:%M:%S&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;testoutput.PNG&#34; alt=&#34;&#34; class=&#34;my-4 post-img&#34;&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s look at a slightly more complicated example with the simple clock:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;&amp;lt;py-script&amp;gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-mono&amp;#34;&lt;/span&gt;&amp;gt;start time: 
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-mono&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-mono&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv&amp;#34;&lt;/span&gt;&amp;gt;
import utils
utils.now()
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; now
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;foo&lt;/span&gt;():
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    output &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; now()
    pyscript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv2&amp;#34;&lt;/span&gt;, output)
    
    out3 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv3&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; output[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt;]:
      out3&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;It&amp;#39;s espresso time!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
      out3&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clear()

pyscript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run_until_complete(foo())&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;simple_clock_output.gif&#34; alt=&#34;&#34; class=&#34;my-4 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;What&#39;s going on here? Well, the static text that is the start time of the program comes from the first py-script tag, again using that &#34;final value is exported as a string&#34; thing we saw before. The second py-script takes care of of the constatntly updating time, as well as printing &#34;It&#39;s espresso time!&#34; if the final character in the datetime string is a 0, 4, or 8. We&#39;re using &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep&#34;&gt;asynchio.sleep&lt;/a&gt; to handle the timing&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Out of curiousity, I replaced &lt;code class=&#34;code&#34;&gt;await asyncio.sleep(1)&lt;/code&gt; with &lt;code class=&#34;code&#34;&gt;import time&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;time.sleep(1)&lt;/code&gt;, and not only does the program not wake up after 1 second to continue running, the entire chrome tab is frozen. I can&#39;t even right-click to inspect/view source. And if I try to close it or rfresh the page, I get a &#34;page not responsive&#34; error and the option to kill the process. So time.sleep, it seems, is right out.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Other things I&#39;m noticing - the &lt;code class=&#34;code&#34;&gt;pyscript.write&lt;/code&gt; function, which apparently puts takes an element id and a value, and stuffs the value into a div within that element id. Let&#39;s look at the source to see what&#39;s actually happening here. &lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;src/pyscript.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;PyScript&lt;/span&gt;:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#...&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;write&lt;/span&gt;(element_id, value, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;, exec_id&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;):
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Writes value to the element with id &amp;#34;element_id&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;APPENDING: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;append&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; ==&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;element_id&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; --&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; append:
            child &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
            element &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;querySelector(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;#&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;element_id&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; element:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
            exec_id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; exec_id &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;childElementCount &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
            element_id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;element_id&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;exec_id&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;;
            element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(child);

        element &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(element_id)
        html, mime_type &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; format_mime(value)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; mime_type &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;application/javascript&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;):
            scriptEl &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createRange()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createContextualFragment(html)
            element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(scriptEl)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; html&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;So the &lt;code class=&#34;code&#34;&gt;pyscript.write&lt;/code&gt; static method takes an element id and value, as well as two optional arguments. The &lt;code class=&#34;code&#34;&gt;append&lt;/code&gt; argument specifies whether to append the value as an additional div, as the final child of the given element, or simply set the innerHTML of the provided element to the value given. And the exec-id seems to be an index of which child of the given element is being modified, though it&#39;s also auto-incremented when appending, so probably one wouldn&#39;t set this manually much.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Adding &lt;code class=&#34;code&#34;&gt;append = True&lt;/code&gt; to the final pyscript.write statement behaves as expected:&lt;/p&gt;
&lt;img src=&#34;simple_clock_output_append.gif&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;And since this particular app is built with Svelte and includes tailwind, we can use all the familiar tailwind classes to start formatting the output, to make it a little more clear where our data is coming from. Let&#39;s make the first div red, the second green, and the &#39;espresso time&#39; div blue:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;simple_clock.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-mono bg-red-200&amp;#34;&lt;/span&gt;&amp;gt;start time: &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-mono bg-green-200&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-mono bg-blue-200&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;colorful_append.gif&#34; alt=&#34;&#34; class=&#34;my-4 post-img&#34;&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;As long as we&#39;re in the source, let&#39;s see whatever methods and classes live in pyscript.py.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It looks like the &lt;span class=&#34;font-bold&#34;&gt;PyScript class&lt;/span&gt; has only two methods: write and run_until_complete, i.e. loop forever.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s also the &lt;span class=&#34;font-bold&#34;&gt;Element class&lt;/span&gt;, which seems to be the internal, pythonic representation of a DOM element, with basic write, clear, and select method, as well as a clone(duplciate) method&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, there&#39;s quite a few functions that appear to deal with the output formatting of various objects based on their &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&#34;&gt;MIME types&lt;/a&gt;, allowing rendering of objects to the screen.&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;&lt;code class=&#34;code&#34;&gt;PyScript.write&lt;/code&gt; calls &lt;code class=&#34;code&#34;&gt;format_mime&lt;/code&gt; to get the properly formatted HTML for an object (in theory) before stuffing it into (or appending it to) the targetted element. If the object is a string, it simply returns that string with the MIME type &#39;text/plain&#39;. Otherwise, the &lt;code class=&#34;code&#34;&gt;eval_formatter&lt;/code&gt; method is called to determine if the object has a &lt;code class=&#34;code&#34;&gt;print_method&lt;/code&gt; attribute.&lt;/li&gt;
&lt;li&gt;In most cases, &lt;code class=&#34;code&#34;&gt;eval_formatter&lt;/code&gt;, just returns the objects &lt;code class=&#34;code&#34;&gt;print_method&lt;/code&gt; attribute, if it has one. But if the object&#39;s print_method is &#39;savefig&#39;, it stuffs the image into a base64-encoded png and returns that as well. Neat!&lt;/li&gt;
&lt;li&gt;Once the content (possibly text, or a now-base64-encoded image) and MIME type are determined, some additional transformations on the content may be made. The &lt;code class=&#34;code&#34;&gt;MIME_RENDERERS&lt;/code&gt; dict maps MIME types to functions, some of which are the identity function, and some of which add additional html tags or boilerplate around the contetn so it will display properly. At this point, &lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;code-title&#34;&gt;pyscript.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;render_image&lt;/span&gt;(mime, value, meta):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;data:&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;mime&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;;charset=utf-8;base64,&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;
    attrs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{k}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{v}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; meta&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;items()])
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;img src=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;attrs&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/img&amp;gt;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;identity&lt;/span&gt;(value, meta):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; value


MIME_RENDERERS &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;: identity,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt; : identity,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; value, meta: render_image(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;, value, meta),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; value, meta: render_image(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt;, value, meta),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;image/svg+xml&amp;#39;&lt;/span&gt;: identity,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;: identity,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;application/javascript&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; value, meta: &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/script&amp;gt;&amp;#39;&lt;/span&gt;
} &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;So, the flow is:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;PyScript.write finds the element with the given element_id&lt;/li&gt;
&lt;li&gt;PySript.write calls format_mime to get the appropriate html-formatted representation of the value passed to PyScript.write&lt;/li&gt;
&lt;li&gt;If the value was a string, format_mime just returns it with a mime_type of &#39;text/plain&#39;&lt;/li&gt;
&lt;li&gt;Otherwise, format_mime calls eval_formatter to get the print_method&#39;s of the object, and possibly the base64 representation of it if it&#39;s an iamge.&lt;/li&gt;
&lt;li&gt;Once format_mime has these methods, it looks up the repr names in its MIME_METHODS dict to map the presence of __repr__ methods to a probably mime type&lt;/li&gt;
&lt;li&gt;Once the mime type is known, the value may optionally be transformed by the functions that are the values in the MIME_RENDERERS dictionary&lt;/li&gt;
&lt;li&gt;Finally, if the type turned out to be either application/javascript or text/html, the given value is wrapped up in a next html or script element and stuffed into the desired element in the DOM. Otherwise, the content is simply overwritten/appended to the elements innerHTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;I dug through all this as I was digging into &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/103&#34;&gt;Issue #103&lt;/a&gt; on the PyScript Github, and learned a few things about Python on the way. Namely, print() is pretty much just a wrapper to sys.stdout.write() (or any other file-like object, if specified). And while print() can be called with any number of positional arguments and will send them all to stdout, it does so as &lt;span class=&#34;italic&#34;&gt;individual calls to stdout.writer()&lt;/span&gt;. So programs (like PyScript) that interrupt that output to do other things with may get results that look off if they behave differently than the line-o&#39;-text that a terminal would display.&lt;/p&gt;
&lt;div id=&#34;my_canvas&#34;&gt;&lt;canvas class=&#34;m-auto&#34;&gt;&lt;/canvas&gt;&lt;/div&gt;
&lt;py-env&gt;
- paths:
  - ./pathing.py
&lt;/py-env&gt;
&lt;py-script&gt;
from js import document
from pathing import PathFollower

canvas = document.querySelector(&#34;#my_canvas canvas&#34;)
canvas.style.display = &#34;block&#34;
width = canvas.width
print(width)

p = PathFollower(canvas, width, 250)
p.start(interval = 100)
&lt;/py-script&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;If all has gone well (and you&#39;re viewing this on a compatible browser), you should see my final experiment of the day, a line jumping around on an HTML canvas, powered entirely by Python (well, via JS too, but I didn&#39;t have to write any).&lt;/p&gt;
&lt;p class=&#34;my-8 code-title&#34;&gt;pyscript-intro.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
    - paths:
      - ./pathing.py
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    from js import document
    from pathing import PathFollower
    
    canvas = document.querySelector(&amp;#34;#my_canvas canvas&amp;#34;)
    canvas.style.display = &amp;#34;block&amp;#34;
    width = canvas.width
    print(width)
    
    p = PathFollower(canvas, width, 250)
    p.start(interval = 100)
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;my-8 code-title&#34;&gt;pathing.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; randint
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; setInterval, document, DOMParser
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;PathFollower&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, canvas, width, height, numPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;numPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; numPoints
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; width
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; height
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ctx &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getContext(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;)
        
        canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;width&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
        canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;height&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;

        canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; width
        canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; height
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;randomizePath()
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getNewPoint&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (randint(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;), randint(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;randomizePath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getNewPoint() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;numPoints)]

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;movePath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getNewPoint())

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;clearPath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clearRect(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;)
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;drawPath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beginPath()    
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;moveTo(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lineTo(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;point)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stroke()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;remakePath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clearPath()
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#self.randomizePath()&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;movePath()
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;drawPath()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;start&lt;/span&gt;(self, interval):
        setInterval(create_proxy(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remakePath), interval)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Improving Website Experience with AWS Cloudfront Stats</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-improving-hits/</link>
      <pubDate>Sun, 13 Mar 2022 17:54:43 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-improving-hits/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I was digging around in the available statistics for this very site on &lt;a href=&#34;post/Cloud-Resume-Challenge-Cloudfront-for-HTTPs&#34;&gt;my Cloudfront Distribution&lt;/a&gt;, when I came across an interesting chart.&lt;/p&gt;
&lt;img src=&#34;dailyhits.PNG&#34; alt=&#34;A chart showing the total requests per day for this website. The hits range from roughly one thousand to over 2500&#34; class=&#34;post-img lg:w-2/5&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Wow, almost 2500 hits to my Cloudfront cache on 3/8! My site must be getting so much traffic!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Or is it? Let&#39;s dig futher into the cache stats and see what&#39;s happening. The next charge on this page shows percentage of viewer requests by result type and... it doesn&#39;t look good. Especially if I stretch it out cover the last month.&lt;/p&gt;
&lt;img src=&#34;hitsmisses2.PNG&#34; alt=&#34;A chart showing the percentage of hits, misses, and errors for users (hosts) requesting pages from this site. Before March 2 they are mostly misses, but on March 2 the errors shoot up wildly.&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Well, double dang. Two things that jump out immediately:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Before about March 2nd, roughly 60% of the requests to the site were generating misses. That&#39;s fine, just means that content wasn&#39;t being accessed all that often. But:&lt;/li&gt;
    &lt;li&gt;After about March 2nd, roughly 50% of the requests to the site were generating errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;That March 2nd date makes some sense - that&#39;s when I officially switched over all (most) of my content from my old wordpress site to this hugo-made site. I finalized this while &lt;a href=&#34;../project/usitt2022&#34;&gt;sitting in a convention hall in Baltimore&lt;/a&gt;, so I guess it&#39;s not 100% surprising that something was left unaccounted for. And I know that there are a couple pieces of content that I haven&#39;t ported over at time of writing (specially, links to the Electronics Bash class pages.) But let&#39;s see if we can determine exactly what&#39;s failing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &#39;Popular Objects&#39; view gives a pretty straightforward view of what users (or scrapers) are looking for. Anything that has only 4xx responses (and/or zero cache hits) is likely to be something that doesn&#39;t exist on our site. And if necessary, we can compare this list to the view of the past month (before and after changeover-day) to see what resources are no longer being found.&lt;/p&gt;
&lt;div class=&#34;flex&#34;&gt;&lt;img src=&#34;popularmisses1.PNG&#34; alt=&#34;A chart of the most popularly acessed objects on my site in the last 7 days. The most common hits and misses are mentioned in the text.&#34; class=&#34;post-img lg:w-2/5&#34;&gt;&lt;img src=&#34;popularmisses2.PNG&#34; alt=&#34;A chart of the most popularly acessed objects on my site in the last 7 days. The most common hits and misses are mentioned in the text.&#34; class=&#34;post-img lg:w-2/5&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Wow, almost 2000 requests for &lt;code class=&#34;code&#34;&gt;/feed&lt;/code&gt; in the last week that have gone nowhere. This makes sense - it&#39;s a default URL for RSS feeds in a wordpress site. It doesn&#39;t look like that&#39;s something I broke specifically at my Wordpress transition, but it&#39;d be nice to allow scrapers looking for wordpress sites to actually find my feed, I think. Since the default RSS feed in a Hugo build are at &lt;code class=&#34;code&#34;&gt;/index.xml&lt;/code&gt;, I&#39;d like to &lt;a href=&#34;../post/cloud-resume-challenge-aliases/&#34;&gt;add a redirect&lt;/a&gt; to make that happen. Unfortunately, it seems like &lt;a href=&#34;https://discourse.gohugo.io/t/rss-url-or-an-alias/35501/2&#34;&gt;redirects/aliases in Hugo can only create aliases with an html extention&lt;/a&gt;, so I&#39;ll need to go about this another way.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;I was a little worried that I&#39;d hit a dead-end at this point. After all, I&#39;m hosting this static site through S3 specifically to eliminate the need for a webserver, but I assumed I&#39;d need an actual server to create proper 301 redirects. Thankfully, it seems &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/how-to-page-redirect.html&#34;&gt;S3 has basic redirect capabilities built in&lt;/a&gt; after all. (&lt;span class=&#34;italic&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Update:&lt;/span&gt; on later examination this method has some issues - skip to the next Update tag for the new method.&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;There are options for redirect rules (up to 50), which can handle redirecting by prefix, postfix, error code, etc, though only 50 rules are allowed per site. Individual objects can also be setup to redirect to other objects, which seems like perhaps what we want in this case.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll start by createing a file at &lt;code class=&#34;code&#34;&gt;/static/feed&lt;/code&gt; (no suffix), which will appear on my site at &lt;code class=&#34;code&#34;&gt;https://jeff.glass/feed&lt;/code&gt;, the address I want to redirect. I&#39;ll &lt;a href=&#34;post/cloud-resume-challenge-hugo/&#34;&gt;build my site&lt;/a&gt; and &lt;a href=&#34;post/cloud-resume-challenge-github-for-frontend/&#34;&gt;push it to the GitHub Repo that stores the site&#39;s code&lt;/a&gt;, where a GitHub action automatically pushes it to my S3 bucket within a couple mintues.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Once the new feed object appears in the S3 bucket, we can pretty easily &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/how-to-page-redirect.html#redirect-requests-object-metadata&#34;&gt;follow the steps outlined here&lt;/a&gt; to create a redirect. We simply edit the objects metadata, add a key of type &lt;code class=&#34;code&#34;&gt;x-amx-website-redirect-location&lt;/code&gt; with a value of the new URL we wish to point to. &lt;span class=&#34;italic&#34;&gt;That key is available in a dropdown, no need to type it.&lt;/span&gt;&lt;/p&gt;
&lt;img src=&#34;redirectfeed.PNG&#34; alt=&#34;The metadata field of an object in a S3 bucket, showing the redirect key and value described in the text&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Now if you go to &lt;a href=&#34;https://jeff.glass/feed&#34;&gt;https://jeff.glass/feed&lt;/a&gt;, you (or an RSS reader) will be redirected to &lt;code class=&#34;code&#34;&gt;/index.xml&lt;/code&gt; where the actual RSS feed lives. Pretty slick!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One thing I tested at this point is whether the object will retain its metadata even if the underlying object is changed. I tweaked the text of the &lt;code class=&#34;code&#34;&gt;/feed&lt;/code&gt; object some, rebuilt the site and reuploaded it, and unfortunately the answer is &lt;span class=&#34;font-bold&#34;&gt;no&lt;/span&gt;. However, because the &lt;a href=&#34;https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3/sync.html&#34;&gt;AWS CLI Sync Action&lt;/a&gt; which is used under the hood by &lt;a href=&#34;https://github.com/jakejarvis/s3-sync-action&#34;&gt;Jake Jarvis&#39; Github to S3 Sync Action&lt;/a&gt; only overwrites new files, so long as we don&#39;t modify the static &lt;code class=&#34;code&#34;&gt;/feed&lt;/code&gt; object, that metadata should remain indefinitely.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Update:&lt;/span&gt; It seems that some of what I determined about the persistance of the object metadata is not true, and that the metadata is getting wiped whenever I rebuild and re-upload the site. Which is a shame, this would have been a nice clean way to handle this case. Thankfully, we can still use the site Redirection Rules in the Static Site settings of our S3 bucket to redirect from /feed to /index.xml as follows. The three seperate rules are required to make sure we can handle requests for both &lt;code class=&#34;code&#34;&gt;/feed&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;/feed/&lt;/code&gt; requests, the latter being the location of my feed under the old Wordpress site.&lt;/p&gt;
&lt;pre class=&#34;w-auto px-4 mx-4 mb-4 bg-gray-200&#34;&gt;
    [
    {
        &#34;Condition&#34;: {
            &#34;KeyPrefixEquals&#34;: &#34;feed/&#34;
        },
        &#34;Redirect&#34;: {
            &#34;HostName&#34;: &#34;index.xml&#34;,
            &#34;HttpRedirectCode&#34;: &#34;301&#34;
        }
    },
    {
        &#34;Condition&#34;: {
            &#34;KeyPrefixEquals&#34;: &#34;feed&#34;
        },
        &#34;Redirect&#34;: {
            &#34;ReplaceKeyPrefixWith&#34;: &#34;index.xml&#34;
        }
    },
    {
        &#34;Condition&#34;: {
            &#34;KeyPrefixEquals&#34;: &#34;index.xml/&#34;
        },
        &#34;Redirect&#34;: {
            &#34;ReplaceKeyPrefixWith&#34;: &#34;index.xml&#34;
        }
    }
]
&lt;/pre&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;The resource with the next-most 4xx responses is for &lt;code class=&#34;code&#34;&gt;robots.txt&lt;/code&gt;. This is a page that tells crawlers that obey the &lt;a href=&#34;https://en.wikipedia.org/wiki/Robots_exclusion_standard&#34;&gt;Robots Exclusion Standard&lt;/a&gt; what they are and aren&#39;t allowed to crawl on your site. We can &lt;a href=&#34;https://gohugo.io/templates/robots/&#34;&gt;generate it in Hugo very simply&lt;/a&gt; by adding &lt;code class=&#34;code&#34;&gt;enableRobotsTXT = true&lt;/code&gt; to our &lt;code class=&#34;code&#34;&gt;config.toml&lt;/code&gt; file. We could also add a &lt;code class=&#34;code&#34;&gt;robots.txt&lt;/code&gt; file to our templates folder to override the default Hugo template (which allows everything to be crawled), but I think the default is fine in my case.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code class=&#34;code&#34;&gt;xmlrpc.php&lt;/code&gt; is apparently a &lt;a href=&#34;https://www.hostinger.com/tutorials/xmlrpc-wordpress&#34;&gt;long-outdated way of accessing Wordpress sites remotely&lt;/a&gt;. I don&#39;t know if it has any legitimate uses anymore, but since my site is in no way Wordpress-ed, I don&#39;t need it.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That said, perhaps it would be nice if the site showed something more testful than server-garbge when an inaccessible page was requested.&lt;/p&gt;
&lt;img src=&#34;whatishere.PNG&#34; alt=&#34;A server error message reading &#39;404 Not Found&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Hugo has capablities to help us with this too. By adding a &lt;code class=&#34;code&#34;&gt;layouts/404.html&lt;/code&gt; page, we can &lt;a href=&#34;https://gohugo.io/templates/404/&#34;&gt;customize what&#39;s shown to the end user&lt;/a&gt; when they request a page that can&#39;t be found. There are some opinions online, however, that &lt;a href=&#34;https://moonbooth.com/hugo/custom-404/&#34;&gt;maybe this isn&#39;t the best thing to do.&lt;/a&gt; But I&#39;m not going to bite off more than I can chew at this point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To give my 404 page a little more life and interest, I&#39;ll have it include cards for 5 pages on the site. While I initially thought these should be random, like the oneoffs on the index page, I think perhaps its better that they represent the best content on the site in a curated way. I can somewhat reuse the &#34;card&#34; layout I built for the index page for this.&lt;/p&gt;
&lt;img src=&#34;nice404.PNG&#34; alt=&#34;A screenshot of the 404 page of the website showing 5 content cards: cloud resume challenge, Demilight, Setting Up and Electronics Lab, Advent of Code, and Soft Shutdown and Consistent Boot on Power Loss&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;I did have to learn a bit more about Hugos range and slice capabilities so I could store the selected pages in an array, rather than inserting them all individually into the template. The final syntax is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;{{ &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pages &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; slice &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/project/demilight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;post/setting-up-an-electronics-lab-tools/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;post/advent-of-code-2021/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;post/quick-dirty-system-power/&amp;#34;&lt;/span&gt; }}
{{ &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;pages }}
    {{ with &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;.GetPage . }}
        {{ .Render &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;card&amp;#34;&lt;/span&gt; }}
    {{ end }}
{{ end }}  
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Because the Cloud Resume Challenge page is actually a list page, I inserted it manually with some HTML.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, there&#39;s a small amount of configuration to be done in the S3 bucket to clarify that &lt;code class=&#34;code&#34;&gt;404.html&lt;/code&gt; is indeed the error page.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;So, that takes care of the assorted wordpress holdovers I no longer need. The only remaining items that are giving 404-responses are a number of links to images of various sizes, all to &lt;code class=&#34;code&#34;&gt;/wp-content/uploads/&lt;/code&gt;. At first I was worried that this was someone hotlinking to these images from outside my domain, but a quick search of my site proved me wrong.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;When I &lt;a href=&#34;http://localhost:1313/post/cloud-resume-challenge-porting-wordpress-blogs-to-hugo/&#34;&gt;ported this blog to Hugo using Python&lt;/a&gt;, I missed the fact that, in many posts created on wordpress, images are embedded as thumbnails which link to larger versions of the original image. I failed to remove or update those links, so the images on my site were still linking to the (now dead) wordpress images. Thankfully, a quick regex find-and-replace (&lt;code class=&#34;code&#34;&gt;&amp;lt;a href=\&amp;quot;.+wp-content/uploads/.+&amp;gt;(.+)&amp;lt;/a&amp;gt;&lt;/code&gt; replaced with &lt;code class=&#34;code&#34;&gt;$1&lt;/code&gt;) cleared up almost all of these instances. One more with irregular formatting was swatted by hand.&lt;/p&gt;
&lt;img src=&#34;changeview.PNG&#34; alt=&#34;A screenshot of VS Code showing the find-and-replace interface for multiple replacement. Lines to be added are color-coded green, those being deleted are color-coded red.&#34; class=&#34;post-img&#34;&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;And with that, hopefully I&#39;ve nipped all those pesky 404 responses in bud. I know there are some remaining pages I have left to port over from Wordpress, but since they aren&#39;t seeing many hits on Cloudflare, I&#39;m not feeling terribly urgent about them. Besides, the new 404 page makes the response to missing content much cleaner.&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Soft Shutdown and Consistent Boot on Power Loss</title>
      <link>https://jeff.glass/post/quick-dirty-system-power/</link>
      <pubDate>Sun, 13 Mar 2022 00:05:00 -0500</pubDate>
      
      <guid>https://jeff.glass/post/quick-dirty-system-power/</guid>
      <description>&lt;p class=&#34;italic post-p&#34;&gt;Tl;DR Computers hate having their power abruptly cut. A UPS, an Adafruit Feather board, and some python hackery keeps computers booting and shutting down gracefully when power is yanked and restored, deliberately or not.&lt;/p&gt;
&lt;p class=&#34;font-bold post-p&#34;&gt;Update: The &lt;a href=&#34;https://hackaday.com/2022/03/18/power-cycling-museum-computers-on-the-cheap/&#34;&gt;comments on the Hackaday post&lt;/a&gt; had a lot of other interesting solutions, some of which I&#39;d considered and some of which I didn&#39;t. Skip to the &lt;a href=&#34;#othersolutions&#34;&gt;Other Solutions&lt;/a&gt; for evaluation of these.&lt;/p&gt;
&lt;hr/&gt;
&lt;p class=&#34;post-p&#34;&gt;My dayjob involves solving technical problems for a large, multi-acre education facility with over 400 computer-driven interactives. To prolong the life of these devices (many of which are built around off-the-shelf computers and monitors), we like to power them down after operating hours and start them up in the morning. These are mostly windows machines, and just like a desktop they &lt;span class=&#34;italic&#34;&gt;love&lt;/span&gt; to be rebooted.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What makes this challenging is both the number and placement of these devices. While many are in dedicated control rooms with &lt;a href=&#34;&#34;&gt;linked KVM systems&lt;/a&gt;, even using a mouse and keyboard to manually shut down 400 PCs would take the onsite staff far longer than designed, and could be error-prone. Worse, some computers are embedded inside consoles, cabinets, and displays, making the process of walking around and hitting power buttons (where accessible) or using a wireless keyboard (where not) even longer. The same is true of startup, except that a wireless keyboard isn&#39;t an option in that case. A central startup and shutdown solution is essential.&lt;/p&gt;
&lt;div class=&#34;max-w-xl px-10 mx-auto xl:float-right&#34;&gt;
    &lt;img src=&#34;medialon.jpg&#34; alt=&#34;A complex touchscreen controller based around a Medialon control system&#34; class=&#34;post-img&#34;&gt;
    &lt;p class=&#34;max-w-xl post-img-caption&#34;&gt;Not from my workplace, but grabbed from google images - just as an example of how involved a software-defined control system can be.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, there are many ways to make this happen. The most ideal, when the money is available, is to use a central controller, like a &lt;a href=&#34;https://medialon.com/products/showmaster-pro/&#34;&gt;Medialon System&lt;/a&gt;, &lt;a href=&#34;https://www.crestron.com/Products/Control-Hardware-Software/Hardware&#34;&gt;Creston Controller&lt;/a&gt;, &lt;a href=&#34;https://derivative.ca/&#34;&gt;TouchDesigner interface&lt;/a&gt;, or similar. The control is put in charge of signalling the computers to wake up (via Wake-on-LAN), shut down (through  proprietary software modules), and handles cycling &lt;a href=&#34;https://www.se.com/us/en/product-range/7340-powerlink-intelligent-panelboards/#overview&#34;&gt;remotely-controller AC breakers&lt;/a&gt;, turning projcets on and off via various ethernet protocols, and so on. The dream is for whoever&#39;s operating the system to press one button (or click one button on a screen) to have the whole system turn on, or off.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Life is rarely a dream.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We sometimes run into a situation where, for reasons of cost, planning, location, or timing, there is no exterior control of any kind. There&#39;s just a breaker in a panel (which may or may not be remote controlled) providing power to an installed cabinet. And as much as PC&#39;s love to be rebooted, they &lt;span class=&#34;italic&#34;&gt;hate&lt;/span&gt; having their power yanked unexpectedly.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So the challenge is: &lt;span class=&#34;font-bold&#34;&gt;given only control over their power, can we create a system that soft-starts and soft-shuts-down a PC?&lt;/span&gt; &lt;span class=&#34;italic&#34;&gt;(Yes we can, or this would be a very short post.)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-h2&#34;&gt;Shutdown&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Getting a PC to soft shutdown on power loss is relatively straightfoward. There are (fairly fancy) &lt;a href=&#34;https://www.apc.com/shop/us/en/categories/power/uninterruptible-power-supply-ups-/ups-management/ups-network-management-cards/N-o7asnt&#34;&gt;networkable UPS systems and add-on cards&lt;/a&gt; that are meant just for this kind of thing. When mains power is killed, the UPS kicks into keep the computer(s) in question on, while sending a network message to do... whatever you want. Wait a minute then hibernate, run a backup, dump memory, etc.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Unfortunately, these solutions are somewhat cost-prohibitive, and also rather large. They seem designed for rackmount systems where they could be used to manage a bank of servers. The particular situation that I&#39;m building this for for is very tightly space-confired, and doing it for less than a grand would be great.&lt;/p&gt;
&lt;div class=&#34;max-w-lg px-10 mx-auto xl:float-left&#34;&gt;
    &lt;img src=&#34;apcups.jpg&#34; alt=&#34;A complex touchscreen controller based around a Medialon control system&#34; class=&#34;post-img&#34;&gt;
    &lt;p class=&#34;max-w-xl post-img-caption&#34;&gt;A cheap, off the shelf, 300W / ~30wH UPS. At time of writing, about $60 shipped.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, there&#39;s a way to make this work on a cheaper and smaller UPS. Many off-the-shelf UPS&#39;s have the abilitiy to connect directly to a single PC via USB connection. APC, who makes consumer UPSes, has such a connection on even their &lt;a href=&#34;https://amzn.to/31ciSpg&#34;&gt;very basic units&lt;/a&gt;. They even include &lt;a href=&#34;https://www.apc.com/shop/us/en/categories/power/uninterruptible-power-supply-ups-/ups-management/powerchute-personal-edition/N-1b6nbpp&#34;&gt;some basic software (Powerchute)&lt;/a&gt; that can tell the computer to hibernate, shutdown, wait a few minutes and shutdown, etc when the batteries kick in. Sounds perfect, no?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Not quite - we only have the ability to hook one computer directly to the UPS, but we&#39;d like to power multiple small computers &lt;a href=&#34;https://www.intel.com/content/www/us/en/products/details/nuc.html&#34;&gt;(often NUCs)&lt;/a&gt; off a single UPS. And there&#39;s no obvious way to hook into the Powerchute software directly. Having one UPS per computer would be an option, but a needlessly expensive one. Sometimes there&#39;s not even enough room for that to be possible.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The workaround is straightfoward - the Powerchute software logs an event to the Window System Log when it swtches to battery power. We can use Window&#39;s built-in task scheduling service to fire off a script of our choosing when this event occurs. Then it&#39;s just a matter of crafting some very basic network scripts to allow the UPS-connected computer to tell other computers to shut down, then shut itself down.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s what I came up with. It&#39;s not terrible robust, secure, or debuggable, but it&#39;s getting the job done for now. The client script runs on the computer connected to a UPS, and is triggered when the UPS switches to battery power. The server runs on as many connected computers as we want, and should be set to run at startup. The (static) IPs of the computers running the server script must be enterred in the client script.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;client.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;This is one of a pair of programs meant to allow one computer to shutdown many computers in an exhibit context.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;This program (&amp;#39;client&amp;#39;) is meant to run on the singular computer that recveives a set signal to shutdown the exhibit. This signal may come from a button or switch, a system log (Say, via UPS), etc, which then runs this script.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;The server program should be running on any computers that need to be shutdown in this context.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;This client program steps through the list of provided servers and tells them to shut down, then shuts itself down.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;socket&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;os&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; sleep

socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;setdefaulttimeout(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;)
PORT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1933&lt;/span&gt;
MSG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;SHUTDOWN NOW&amp;#39;&lt;/span&gt;
RSP &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;SHUTDOWN CONFIRMED&amp;#34;&lt;/span&gt;

deviceIPs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;172.16.0.2&amp;#34;&lt;/span&gt;
]
attempts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
MAX_ATTEMPTS &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Client program is contacting remote computers to shut them down&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(deviceIPs) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
    attempts &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; attempts &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; MAX_ATTEMPTS:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;System could not shut down the following IPs: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;deviceIPs&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Shutting down self in 15 seconds&amp;#34;&lt;/span&gt;)
        sleep(&lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ip &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; deviceIPs:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;socket(socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;AF_INET, socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;SOCK_STREAM) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; s:
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Attempting to connect tp &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;ip&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, attempt &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;attempts&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; of &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;MAX_ATTEMPTS&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; (timeout is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getdefaulttimeout())&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;s)&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
                s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;connect((ip, PORT))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;TimeoutError&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; err:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Connection timed out&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Connection successful, sending message: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;MSG&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
            s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sendall(MSG)
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#f60&#34;&gt;1024&lt;/span&gt;)
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Received &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;repr&lt;/span&gt;(data)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; data[:&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(RSP)] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; RSP:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Received shutdown confirmation message from host at ip &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;ip&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
                deviceIPs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(ip)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Got some other message than we expected from host at ip &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;ip&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Successfully shut down all remote IPs, shutting down self in 10 seconds&amp;#34;&lt;/span&gt;)
    sleep(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;)
os&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;shutdown /s /f /t 10&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;pb-8 post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;server.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;This is one of a pair of programs meant to allow one computer to shut down many computers in an exhibit context.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;This program (&amp;#39;server&amp;#39;) runs on any computer that is NOT receiving the direct singal to shut down.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;The &amp;#39;client&amp;#39; program should run on the singular computer in the exhibit context that receives the signal to shutdown the exhibit (from a UPS, switch, etc)
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;socket&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;os&lt;/span&gt;

HOST &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
PORT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1933&lt;/span&gt;
MSG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;SHUTDOWN NOW&amp;#34;&lt;/span&gt;
RSP &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;SHUTDOWN CONFIRMED&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Server program is listening for shutdown commands from primary client&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;socket(socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;AF_INET, socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;SOCK_STREAM) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; s:
    s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;bind((HOST, PORT))
    s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;listen()
    conn, addr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;accept()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; conn:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Connected by &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;addr&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#f60&#34;&gt;1024&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; data[:&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(MSG)] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; MSG:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Got shutdown MSG &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
                conn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sendall(RSP)
                os&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;shutdown /s /f /t 10&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: 
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Got &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; instead of expected &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data[:&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(MSG)]&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; data:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;post-h2&#34;&gt;Startup&lt;/p&gt;
&lt;div class=&#34;max-w-lg px-10 mx-auto xl:float-right&#34;&gt;
    &lt;img src=&#34;feather.jpg&#34; alt=&#34;A complex touchscreen controller based around a Medialon control system&#34; class=&#34;post-img&#34;&gt;
    &lt;p class=&#34;max-w-xl post-img-caption&#34;&gt;An Adafruit ESP-32 Featherwing - the purple Neopixel light indicates the unit has booted but does not see an attached ethernet cable&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Almost every BIOS has the ability to wake the system when power is restored following an unexpected power loss. Most have the ability to boot the computer when power is removed and restored, regardless of whether the computer was gently shut down or rudely had its power cut. Unfortunately, neither of these options work for us - since the computer is on a UPS, as far the the power supply is concerned,&lt;span class=&#34;italic&#34;&gt; the computer never loses power.&lt;/span&gt; So, we&#39;ll have to rely on some other mechanism to detect when power is restored to cause the computer(s) to boot.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The hammer for this particular nail is a small, ethernet-capable microcontroller that sends out Wake-on-LAN packets at regular intervals whenever its powered on. We plug this microcontroller into an outlet &lt;span class=&#34;underline&#34;&gt;not&lt;/span&gt; backed by the UPS - when power is lost, the microcontroller shuts off almost immediately, allowing the computers to shut down as above. When power is restored, the microcontroller starts up and, after a brief delay, starts sending out Wake-On-LAN messages to all the MAC addresses it knows about.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I chose the &lt;a href=&#34;https://www.adafruit.com/product/5000&#34;&gt;Adafruit ESP-32 Feather&lt;/a&gt; for a couple reasons. One, Python is &lt;a href=&#34;../tags/python&#34;&gt;my language of choice&lt;/a&gt; for hacking things together, and I was excited to play more with &lt;a href=&#34;https://circuitpython.readthedocs.io/en/latest/README.html&#34;&gt;CircuitPython&lt;/a&gt;. Second, Adafruit&#39;s commitment to documentation and process is just great, and I wanted to get this project up on its feet quickly. And third, Adafruit&#39;s Featherwing line of accessory boards (specifically the &lt;a href=&#34;https://www.adafruit.com/product/3201&#34;&gt;Ethernet Featherwing&lt;/a&gt;) made it easy to get an Ethernet Stack and PHY running with minimal custom effort.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, I bashed together the following code to wake up, establish a network connection, and send a Wake-On-LAN message to each MAC address in a given array every 15 seconds or so:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;code.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# SPDX-License-Identifier: MIT&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;board&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;busio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;digitalio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;neopixel&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; sleep

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;adafruit_wiznet5k.adafruit_wiznet5k&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; WIZNET5K, SNMR_UDP, SNSR_SOCK_UDP
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;adafruit_wiznet5k.adafruit_wiznet5k_socket&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;socket&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;adafruit_requests&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;requests&lt;/span&gt;

pixel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; neopixel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;NeoPixel(board&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;NEOPIXEL, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

targetMACs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
    [&lt;span style=&#34;color:#f60&#34;&gt;0x12&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x34&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x56&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x78&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x9A&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0xBC&lt;/span&gt;], &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Computer NW&lt;/span&gt;
    [&lt;span style=&#34;color:#f60&#34;&gt;0x12&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x34&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x56&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x78&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x9A&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0xBD&lt;/span&gt;], &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Computer NE&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#... more computers as necessary&lt;/span&gt;
    ]

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Initialize ethernet interface with DHCP&lt;/span&gt;
cs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; digitalio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;DigitalInOut(board&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;D10)
spi_bus &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; busio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;SPI(board&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;SCK, MOSI&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;board&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;MOSI, MISO&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;board&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;MISO)
eth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; WIZNET5K(spi_bus, cs, is_dhcp&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

ip &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;172.16.0.10&amp;#34;&lt;/span&gt;)
subnet_mask &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;255.255.0.0&amp;#34;&lt;/span&gt;)
gateway &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;172.16.0.10&amp;#34;&lt;/span&gt;)
dns &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;172.16.0.10&amp;#34;&lt;/span&gt;)
eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ifconfig &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ip, subnet_mask, gateway, dns)
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If using DHCP, uncomment the following line&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#eth.ifconfig = (ip, subnet_mask, None, None)&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Assigned Ethernet Address: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pretty_ip(eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ip_address)))

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Built-in neopixel will be purple while waiting for Ethernet to connect&lt;/span&gt;
pixel[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;255&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;255&lt;/span&gt;)

retry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; retry:
    retry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;socket_connect(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;172.16.255.255&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#f60&#34;&gt;556&lt;/span&gt;, conn_mode&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;SNMR_UDP)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;AssertionError&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; err:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(err) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;, retrying in 10 Seconds&amp;#34;&lt;/span&gt;)
        retry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        sleep(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;)

    status &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;socket_status(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(b) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; status] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; [SNSR_SOCK_UDP]:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Socket 0 connected as UDP&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Socket not connected, status is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;status&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        retry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        sleep(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Built in neopixel will be blue when standing by to send WOL packets&lt;/span&gt;
pixel[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;255&lt;/span&gt;)
sleep(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Built in neopixel will be green when sending WOL packets&lt;/span&gt;
    pixel[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;255&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, target &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(targetMACs):
        
        fullPacket &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bytearray&lt;/span&gt;([&lt;span style=&#34;color:#f60&#34;&gt;0xFF&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; target &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Sending WoL packet to computer &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; with mac address &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pretty_mac(target)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;socket_write(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, fullPacket, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
        
        sleep(&lt;span style=&#34;color:#f60&#34;&gt;.1&lt;/span&gt;)

    pixel[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;255&lt;/span&gt;)
    sleep(&lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;)

eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;socket_close(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;re making use of this code yourself, you&#39;ll need the following libraries in your CIRCUITPY/libs folder:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;adafruit_wiznet5k&lt;/li&gt;
    &lt;li&gt;adafruit_requests.mpy&lt;/li&gt;
    &lt;li&gt;neopixel.mpy&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;And, if it&#39;s helpful, here is the basic process of getting the ESP32-S2 feather up and running (summarized from &lt;a href=&#34;https://learn.adafruit.com/adafruit-esp32-s2-feather/install-uf2-bootloader&#34;&gt;Adafruit&#39;s excellent guide&lt;/a&gt;):&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Download the appropriate &lt;a href=&#34;https://circuitpython.org/board/adafruit_feather_esp32s2/&#34;&gt;Bootloader .BIN File&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://learn.adafruit.com/adafruit-esp32-s2-feather/install-uf2-bootloader#step-2-place-your-board-in-bootloader-mode-3089837-8&#34;&gt;Put the board in bootloader mode&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Use the online &lt;a href=&#34;https://adafruit.github.io/Adafruit_WebSerial_ESPTool/&#34;&gt;Adafruit ESPTool and Webserial&lt;/a&gt; tool to burn BIN file to the ESP32&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;Reset the feather - it will appear as an attached USB drive called CIRCUITPY, onto which the above code can be dropped&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;pb-4 post-h2&#34;&gt;System Diagram&lt;/p&gt;
&lt;img src=&#34;networkMap.png&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-h2&#34;&gt;Step-by-Step Instructions&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For those who came here looking for an actual step-by-step how-to, here&#39;s the full process of getting this system set up. (This is based on my particular steps with the Intel NUCs and APC UPS in the most recent setup - some steps, especially relating to the BIOS, may need to be adjusted for your hardware.)&lt;/p&gt;
&lt;p class=&#34;pb-2 post-h3&#34;&gt;Computer Info Gathering&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Identify the MAC addresses of the relevent NICs on all the computers you intend to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;pb-2 post-h3&#34;&gt;Feather Prep&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Solder headers onto the Adafruit ESP32 Feather and Ethernet featherwing, as necessary. Attach the two together.&lt;/li&gt;
    &lt;li&gt;Using the steps above, prepare the feather with its bootloader.&lt;/li&gt;
    &lt;li&gt;Load the code above onto the Feather.&lt;/li&gt;
    &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li class=&#34;italic&#34;&gt;Modify the list of MAC addresses in the code to include all of the MAC addresses you previously identified.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/ul&gt;
&lt;p class=&#34;pb-2 post-h3&#34;&gt;Physical Install&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Install the UPS, connected to the (switchable or unpredicable) power source. It may need to charge for several hours before it&#39;s usable.&lt;/li&gt;
    &lt;li&gt;Install the network switch, plugged into the battery-backed power on the UPS. A cheap unmanaged switch will do.&lt;/li&gt;
    &lt;li&gt;Install the computer(s). Plug them into the battery-backed power on the UPS&lt;/li&gt;
    &lt;li&gt;Plug the Feather assembly you prepped earlier into the NON-battery-backed power on the UPS.&lt;/li&gt;
    &lt;li&gt;Use CAT cables to attach the computers and Feather to the network switch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;pb-2 post-h3&#34;&gt;Wake on Lan Setup&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;In both computer&#39;s BIOS&#39;s&#34;:&lt;/li&gt;
    &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li&gt;Make sure &#39;Wake on LAN from S4/S5 is set to &#39;Power On - Normal Boot&#39;&lt;/li&gt;
        &lt;li&gt;Make sure &#39;Deep S4/S5&#39; is Off&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;In both computer&#39;s Device Managers:&lt;/li&gt;
    &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li&gt;Find the network interface that is plugged into the network switch, and open its settings.&lt;/li&gt;
        &lt;li&gt;In the Power Management Tab:&lt;/li&gt;
        &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
            &lt;li&gt;Make sure &#39;Allow the computer to turn off this device&#39; is OFF&lt;/li&gt;
            &lt;li&gt;Make sure &#39;Allow this device to wake the computer&#39; is ON&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;In the Advanced Tab: Make sure &#39;Wake on Magic Packet&#39; is ENABLED&lt;/li&gt;
    &lt;/ul&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-h3&#34;&gt;Control Computer Setup&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;This will be the computer listening to the status of the UPS, and telling the other computers to turn off. There should be only one per setup.&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Assign the computer a static IP on the NIC you&#39;re using. The code above assumes this is &lt;code class=&#34;code&#34;&gt;172.16.0.1&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Plug the USB cable from the UPS into the control computer.&lt;/li&gt;
    &lt;li&gt;If not prompted, manually download and install the &lt;a href=&#34;https://www.apc.com/shop/us/en/categories/power/uninterruptible-power-supply-ups-/ups-management/powerchute-personal-edition/N-1b6nbpp&#34;&gt;Powerchute Control Software&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Unplug the UPS from wall-power once and plug it back in, to log the necessary events in the System Log.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Install Python&lt;/a&gt;. I used Python 3.10.0 at time of writing, but any later version should also be fine.&lt;/li&gt;
    &lt;li&gt;Copy the &lt;code class=&#34;code&#34;&gt;client.py&lt;/code&gt; code from above to a convienient file location on the computer (desktop, My Documents, etc).&lt;/li&gt;
    &lt;li&gt;In Task Scheduler, add a new event:&lt;/li&gt;
    &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li&gt;Title: Shutdown on Power Loss to UPS&lt;/li&gt;
        &lt;li&gt;Triggers:&lt;/li&gt;
        &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
            &lt;li&gt;On an Event&lt;/li&gt;
            &lt;li&gt;Log: Application&lt;/li&gt;
            &lt;li&gt;Source: APC UPS Service&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Actions:&lt;/li&gt;
        &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
            &lt;li&gt;Start a Program&lt;/li&gt;
            &lt;li&gt;Select &lt;code class=&#34;code&#34;&gt;client.py&lt;/code&gt; script from wherever you put it&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/ul&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-h3&#34;&gt;Target Computer Setup&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;These computers will run a script on boot that listens for commands from the client computer to shut down. There can be as many of these per system as you like.&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Assign the computer a static IP on the NIC you&#39;re using. The code above assumes this is &lt;code class=&#34;code&#34;&gt;172.16.0.2&lt;/code&gt;; if you add additional computers, you will need to add them to them to the deviceIPs array in the &lt;code class=&#34;code&#34;&gt;client.py&lt;/code&gt; script.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Install Python&lt;/a&gt;. I used Python 3.10.0 at time of writing, but any later version should also be fine.&lt;/li&gt;
    &lt;li&gt;Copy the &lt;code class=&#34;code&#34;&gt;server.py&lt;/code&gt; code from above to a convienient file location on the computer (desktop, My Documents, etc).&lt;/li&gt;
    &lt;li&gt;Create a shortcut to the &lt;code class=&#34;code&#34;&gt;server.py&lt;/code&gt; script in your startup folder. In Windows 10, this is located by default at: &lt;code class=&#34;code&#34;&gt;C:/users/{username}/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup.&lt;/code&gt; Any shortcuts/executables in this folder get executed automatically when Windows boots.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;othersolutions&#34; class=&#34;post-h2&#34;&gt;Other Solutions Considered (March 21, 2022)&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The commenters &lt;a href=&#34;https://hackaday.com/2022/03/18/power-cycling-museum-computers-on-the-cheap/&#34;&gt;over at Hackaday&lt;/a&gt; had some opinions and thoughts about other ways to accomplish this - which is great! It&#39;s certainly a fairly large nail and there are lots of hammers. Hackaday Columnist Chris Wilkinson even asked readers &#34;how [they] would have tackled this problem? Sound off in the comments below.&#34; And boy did they. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, let me address some of the proposed solutions and concerns, with some background that I didn&#39;t provide in the original post.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Scheduled Shutdown&lt;/h3&gt;
&lt;img src=&#34;commentschedule.PNG&#34; alt=&#34;A screenshot of a hackaday comment, of a use suggesting that scheduled shutdown would be better&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Many, many of the comments suggested using some version of Windows&#39; scheduled shutdown feature to turn the computers off at the same time every day. This is a very reasonable suggestion, and in fact &lt;span class=&#34;italic&#34;&gt;was the solution in place before I undertook this project.&lt;/span&gt; There was a scheuled shutdown at 4:10pm every day (shortly after &#34;normal&#34; closing) and another at midnight (after &#34;the latest the museum could be open&#34;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The issue is that the museum&#39;s span-of-day changes wildly day-to-day, week-to-week, and month-to-month without notice. Sometimes closing is at 5:30pm. Sometimes 8:00pm or 11:00pm for an event. Sometimes it needs to be shut off at 3pm for photo sessions in the space. While I wish we had the ability to accurately describe the closing time of the museum on a day-to-day basis, like any large public-facing institution with an events staff, things change quickly and regularly. This pretty much ruled out scheduled shutdown.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Remote Management Commands&lt;/h3&gt;
&lt;img src=&#34;commentactive.PNG&#34; alt=&#34;A screenshot of a hackaday comment, saying that one should use Active Directory commands&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;I wrestled with this solution for a fairly long time, but ultimately deemed it unsuccesful in Windows 10 personal (the OS I&#39;m forced to use). To be honest, I can&#39;t recall what every single obstacle was, but some were:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Needing to address each computer by hostname, with the hostnames having some character restrictions (which I could not change)&lt;/li&gt;
    &lt;li&gt;Not having an Active Directory/Domain setup in this environemnt. For any number of reasons, we keep interactives isolated from our workplace domain system, so there&#39;s no Active Directory to be used.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.groovypost.com/howto/remote-shutdown-restart-windows-10/#:~:text=Enter%20your%20username%20on%20the,on%20the%20switches%20you%20choose.&#34;&gt;Several&lt;/a&gt; &lt;a href=&#34;https://www.maketecheasier.com/remote-shutdown-restart-windows-10/&#34;&gt;Resources&lt;/a&gt; suggest needing to make registry changes to enable remote shutdown, and while I tried several of these, none were successful. This also doesn&#39;t seem like the most durable/transportable solution. The various uses of batch files and services at affect the same didn&#39;t work for me either - not saying there wasn&#39;t something I missed, but it wasn&#39;t anywhere near as simple as run &lt;code class=&#34;code&#34;&gt;shutdown /r /m \\pc2&lt;/code&gt; and walk away.&lt;/li&gt;
    &lt;li&gt;One of the comments suggested using &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;, which I may have to give a look.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;UPS With Lan Card&lt;/h3&gt;
&lt;img src=&#34;commentupslan.PNG&#34; alt=&#34;A screenshot of a hackaday comment, suggesting using a UPS with build in LAN card&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;A couple users encouraged me to look at UPS&#39; that can be directly connected to a network, which would save the whole client-server model of the hacky python scripts above.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is something we looked at as well, but discarded for space reasons. The entire space inside the primary enclosure this project was designed for is only 5&#34; deep, which ruled out any rackmount components, which seem to be the major source of UPS&#39; with LAN interfaces. The standalone UPS&#39; with LAN attachability were either too large or two expensive for this project.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Read Only Harddrives&lt;/h3&gt;
&lt;img src=&#34;commentreadonly.PNG&#34; alt=&#34;A screenshot of a hackaday commnet, suggesting making the hard drives read-only&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s something I hadn&#39;t thought about - making the hard drives read only to prevent damage in the case of an untimely shutdown. Didn&#39;t know that was a thing! Stil not sure it&#39;s a thing, will have to look into it more.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;RTS/CTS Signalling&lt;/h3&gt;
&lt;img src=&#34;commnetmultipleserial.PNG&#34; alt=&#34;A screenshot of a hackaday comment, suggesting using one RTS/CTS line among multiple computers&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Another expansion of an idea I had discarded - the UPS&#39; all have some varient of serial lines on them, but I assumed using serial to connect to the UPS&#39; was out for the same multi-computer reason that lead to me using the client/server model. But if it&#39;s really just a binary on/off signal on one of the control lines, there&#39;s no reason I couldn&#39;t read that simultaneously on several machines. Interesting!&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Virtualization&lt;/h3&gt;
&lt;img src=&#34;commentvirtualized.PNG&#34; alt=&#34;A screenshot of a hackaday comment, suggesting using virtualization to run all the interactives&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Make all the intereactives virtualized and run in their own VMs?? Now there&#39;s something that would never have crossed my mind. It&#39;s probably way out of scope for the kind of retrofit work that I&#39;ve been tasked with doing, but it&#39;s a nifty idea if we had the will and archetechture to handle it.&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Aliases</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-aliases/</link>
      <pubDate>Fri, 04 Mar 2022 12:32:00 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-aliases/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;As part of transitionining from my old wordpress site to this new one created with Hugo, I wanted to be sure to preserve any external links that pointed to URLs that may no longer exist in Hugo&#39;s content structure. In partilcular, the format of permalinks to my blog posts has changed from &lt;code class=&#34;code&#34;&gt;/year/date/post-name&lt;/code&gt; to just &lt;code class=&#34;code&#34;&gt;/post/post-name&lt;/code&gt;. Additionally, I had created 301 redirects from several short URLS like &lt;code class=&#34;code&#34;&gt;/demilight&lt;/code&gt; to unique pages; I wanted those links to be preserved as well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, Hugo has some simple functionality to help with this in the form of &lt;a href=&#34;https://gohugo.io/content-management/urls/#aliases&#34;&gt;aliases&lt;/a&gt;. By including a relative path in any page&#39;s front matter, Hugo will create a redirect link from that relative path to the current page.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For example, I would like users who visit &lt;code class=&#34;code&#34;&gt;https://jeff.glass/demilight&lt;/code&gt; to be redirected to  &lt;code class=&#34;code&#34;&gt;https://jeff.glass/project/demilight&lt;/code&gt;. To do this, I simply add the following in front matter of the index.html file of the demilight project:&lt;/p&gt;
&lt;pre class=&#34;block w-auto px-4 mx-4 border-2 border-gray-300 bg-green-50&#34;&gt;aliases:
    - /demilight/
&lt;/pre&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, if you head to &lt;a href=&#34;https://jeff.glass/demilight&#34;&gt;https://jeff.glass/demilight&lt;/a&gt;, you should be taken to the correct project page.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since everything in Hugo is a page, including list pages and other programmatically generated content, this can be used in lots of ways. For example, with the old wordpress site, my blog posts were at &lt;code class=&#34;code&#34;&gt;jeff.glass/blog&lt;/code&gt;, but Hugo puts them at &lt;code class=&#34;code&#34;&gt;jeff.glass/post&lt;/code&gt;. To create this redirect, I create a &lt;code class=&#34;code&#34;&gt;_index.md&lt;/code&gt; file at the root of the &lt;code class=&#34;code&#34;&gt;post&lt;/code&gt; folder with the following frontmatter:&lt;/p&gt;
&lt;pre class=&#34;block w-auto px-4 mx-4 border-2 border-gray-300 bg-green-50&#34;&gt;
---
    title: &#34;Blog Posts&#34;
    aliases:
      - /blog/
---
&lt;/pre&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, I could make these modifications programmatically (and probably should have done so &lt;a href=&#34;../post/cloud-resume-challenge-porting-wordpress-blogs-to-hugo/&#34;&gt;when I was porting things from Wordpress to Hugo&lt;/a&gt;, but there are few enough of them and enough edge cases that I&#39;m just going through and handling them by manually editting frontmatter. Like good ole &lt;a href=&#34;https://xkcd.com/1205/&#34;&gt;XKCD 1205&lt;/a&gt; says, automation just isn&#39;t always worth it.&lt;/p&gt;
&lt;img src=&#34;https://imgs.xkcd.com/comics/is_it_worth_the_time.png&#34; alt=&#34;A comic from XKCD showing a chart describing how long a task takes to automate, how much time it saves, and how often you&#39;d have to do the task to make automating it worthwhile.&#34; class=&#34;self-center p-2 mx-auto&#34;&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Winter Field Day 2022</title>
      <link>https://jeff.glass/post/winter-field-day-2022/</link>
      <pubDate>Sun, 30 Jan 2022 16:30:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/winter-field-day-2022/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;In January 2022, I had the pleasure of operating in the &lt;a href=&#34;https://www.winterfieldday.com/&#34;&gt;Winter Field Day 2022&lt;/a&gt; ham radio event. The event, a volunteer run spinoff of the long-running &lt;a href=&#34;http://www.arrl.org/field-day&#34;&gt;ARRL Field Day&lt;/a&gt; encourages operators to move their radios out in the the wider, chillier world. While the ARRL field day has an explicit emphasis on disaster preparedness and mobility, Winter Field Day is as much about having a fun contest in the middle of the colder months as it is about actual field deployment. At least, that&#39;s how it seemed to me.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That said, I&#39;m a sucker for an excuse to get out an operate in a park. So I opted to set up in the &lt;a href=&#34;https://www2.illinois.gov/dnr/Parks/Pages/DesPlaines.aspx&#34;&gt;Des Plaines State Fish and Wildlife Area&lt;/a&gt;, POTA park number &lt;a href=&#34;https://pota.app/#/park/K-4120&#34;&gt;K-4120&lt;/a&gt;, and snag some activation counts while also participating in Field Day. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I tried out a new antenna for this activation, incorporating a &lt;a href=&#34;https://www.spiderbeam.com/product_info.php?info=p3_Spiderbeam%20HD%2012m%20fiberglass%20pole.html&#34;&gt;Spiderbeam 12m Fiberglass Pole&lt;/a&gt;, an &lt;a href=&#34;https://www.dxengineering.com/parts/ldg-rba-1-1&#34;&gt;LDG Electronics 1:1 Balun&lt;/a&gt;, and a bunch of 20AWG speaker wire to form a linked dipole. I made a quick 3 minute video about its construction:&lt;/p&gt;
&lt;div class=&#34;w-3/4 m-auto border-2&#34;&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/15W8mZYZ4YI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;All in all, over about 8 hours of total operating time, I claimed 534 QSOs on 15, 20, and 40 meters, with the vast majority being on 20m SSB. With the bonus points available from operating outdoors and with low power (less than 100W), I claimed just over 7000 points total.&lt;/p&gt;
&lt;hr/&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, a couple months later, the&lt;a href=&#34;https://www.winterfieldday.com/wfd-2022-outdoor&#34;&gt; preliminary processed results are in&lt;/a&gt;! &lt;/p&gt;
&lt;p&gt;Of course, this event was much more of an excuse to try new things, to get out into the great outdoors and have a great time. That said, I love an excuse to crunch through some data. So let&#39;s see how things stacked up.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of my 534 claimed QSOs, &lt;span class=&#34;font-bold&#34;&gt;28 were busted&lt;/span&gt; in one way or another. The breakdown is as follows:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;7  not in log&lt;/li&gt;
&lt;li&gt;17   incorrect calls&lt;/li&gt;
&lt;li&gt;4  incorrect exchanges&lt;/li&gt;
&lt;li&gt;0   missing exchanges&lt;/li&gt;
&lt;li&gt;9   duplicates removed&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;That left me with  &lt;span class=&#34;font-bold&#34;&gt;504 Valid QSOs&lt;/span&gt; and exactly &lt;span class=&#34;font-bold&#34;&gt;6500 Points&lt;/span&gt;. So how does this stack up against the rest of the field?&lt;/p&gt;
&lt;hr/&gt;
&lt;div class=&#34;pb-4 mb-4 bg-yellow-100 md:px-8&#34;&gt;
    &lt;p class=&#34;pb-0 post-p&#34;&gt;For &lt;span class=&#34;font-bold&#34;&gt;points in Illinois&lt;/span&gt; I came in &lt;span class=&#34;font-bold&#34;&gt;4th&lt;/span&gt;, and 2nd in Illinois behind Tony KB9LLD for outdoor stations:
    &lt;ul class=&#34;scorebox&#34;&gt;
        &lt;li&gt;&lt;pre&gt;    WT2P/1H  18330 pts,   387 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;  KB9LLD/1O  15276 pts,   131 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;    K9TA/3I  10324 pts,   120 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li class=&#34;font-bold&#34;&gt;&lt;pre&gt;  KK9JEF/1O   6500 pts,   506 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;  WB9UGX/1H   4072 pts,   259 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;    N9WH/2H   3846 pts,   662 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;    W0FQ/1O   3744 pts,    90 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;    KQ9L/1O   3404 pts,    59 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;  KD9KHA/1O   2524 pts,    66 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;   AC9XX/1O   2347 pts,    72 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;/ul&gt;&lt;/p&gt;
&lt;div class=&#34;h-12&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;pb-0 post-p&#34;&gt;For &lt;span class=&#34;font-bold&#34;&gt;number of QSOs in Illinois&lt;/span&gt; I came in &lt;span class=&#34;font-bold&#34;&gt;2nd&lt;/span&gt;, and 1st among outdoor and 1-transmitter stations (!) :
&lt;ul class=&#34;scorebox&#34;&gt;
    &lt;li&gt;&lt;pre&gt;    N9WH/2H   3846 pts,   662 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li class=&#34;font-bold&#34;&gt;&lt;pre&gt;  KK9JEF/1O   6500 pts,   506 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;    WT2P/1H  18330 pts,   387 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;  WB9UGX/1H   4072 pts,   259 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;     K9T/2I   1324 pts,   176 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;    NF9Z/1H    846 pts,   142 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;  KB9LLD/1O  15276 pts,   131 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;    K9TA/3I  10324 pts,   120 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;    N9HQ/1H    864 pts,   110 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;   N9BBE/1H   2000 pts,    94 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;div class=&#34;h-12&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;pb-0 post-p&#34;&gt;For &lt;span class=&#34;font-bold&#34;&gt;points in all regions&lt;/span&gt; I came in &lt;span class=&#34;font-bold&#34;&gt;140th&lt;/span&gt;:
&lt;ul class=&#34;scorebox&#34;&gt;
    &lt;li&gt;&lt;pre&gt;   1      W6ZE/6O  96720 pts,  1630 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;   2     N5AEX/5I  54208 pts,  1654 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;   3     W8MAI/7H  39204 pts,   578 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;                 ...&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt; 138     W4KLY/1H   6552 pts,   413 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt; 139     K0IIT/1O   6504 pts,   749 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt; 140  &lt;span class=&#34;font-bold&#34;&gt;  KK9JEF/1O   6500 pts,   506 Qs&lt;/span&gt;&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt; 141     W8EHH/4I   6484 pts,   357 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt; 142     KE8PX/1H   6480 pts,   198 Qs&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;h-12&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;pb-0 post-p&#34;&gt;For &lt;span class=&#34;font-bold&#34;&gt;number of QSOs in all regions&lt;/span&gt; I came in &lt;span class=&#34;font-bold&#34;&gt;59th&lt;/span&gt;:
    &lt;ul class=&#34;scorebox&#34;&gt;
    &lt;li&gt;&lt;pre&gt;   1     N5AEX/5I  54208 pts,  1654 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;   2      W6ZE/6O  96720 pts,  1630 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;   3     WR4MG/5O  28860 pts,  1271 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;                 ...&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;  57    VE3GJP/1H   3066 pts,   513 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;  58    VE2CRO/2I  26058 pts,   512 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;  59  &lt;span class=&#34;font-bold&#34;&gt;  KK9JEF/1O   6500 pts,   506 Qs&lt;/span&gt;&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;  60     K0TSA/1I   5064 pts,   505 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;  61     N9DPP/2H   2946 pts,   503 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;div class=&#34;h-12&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;pb-0 post-p&#34;&gt;For &lt;span class=&#34;font-bold&#34;&gt;number of QSOs for 1-Outdoor stations&lt;/span&gt; I came in &lt;span class=&#34;font-bold&#34;&gt;7th&lt;/span&gt;:
    &lt;ul class=&#34;scorebox&#34;&gt;
        &lt;li&gt;&lt;pre&gt;   1     K0IIT/1O   6504 pts,   749 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;   2     W4GSO/1O   5856 pts,   729 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;   3       W0F/1O  12860 pts,   682 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;   4     KY4CW/1O  23054 pts,   548 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;   5      N8XC/1O   9326 pts,   533 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;   6     W9MPX/1O   6750 pts,   518 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;   7  &lt;span class=&#34;font-bold&#34;&gt;  KK9JEF/1O   6500 pts,   506 Qs&lt;/span&gt;&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;   8    VA3ACE/1O   3228 pts,   431 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;   9      K7SH/1O  13252 pts,   413 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;  10     N4LCA/1O   3334 pts,   386 Qs&lt;/pre&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;div class=&#34;h-12&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;pb-0 post-p&#34;&gt;And finally, for &lt;span class=&#34;font-bold&#34;&gt;number of points for 1-Outdoor stations&lt;/span&gt; I came in &lt;span class=&#34;font-bold&#34;&gt;7th&lt;/span&gt;:
    &lt;ul class=&#34;scorebox&#34;&gt;
        &lt;li&gt;&lt;pre&gt;   1     KY4CW/1O  23054 pts,   548 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;   2     K5TXM/1O  22320 pts,   224 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;   3      KA5D/1O  18844 pts,   174 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;                 ...&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;  11     W9MPX/1O   6750 pts,   518 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;  12     K0IIT/1O   6504 pts,   749 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;  13  &lt;span class=&#34;font-bold&#34;&gt;  KK9JEF/1O   6500 pts,   506 Qs&lt;/span&gt;&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;  14     W4GSO/1O   5856 pts,   729 Qs&lt;/pre&gt;&lt;/li&gt;
        &lt;li&gt;&lt;pre&gt;  15    KG5SQJ/1O   5330 pts,   382 Qs&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;And finally, for those interested in my QSO breakdown by band and successful busted, here it is:&lt;/p&gt;
&lt;style type=&#34;text/css&#34;&gt;
    .tg  {border-collapse:collapse;border-spacing:0;}
    .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
      overflow:hidden;padding:10px 25px;word-break:normal;}
    .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
      font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
    .tg .tg-0lax{text-align:left;vertical-align:top}
    &lt;/style&gt;
&lt;table class=&#34;m-auto tg&#34;&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th class=&#34;tg-0lax&#34;&gt;&lt;/th&gt;
        &lt;th class=&#34;tg-0lax&#34;&gt;Band&lt;/th&gt;
        &lt;th class=&#34;tg-0lax&#34;&gt;QSOs&lt;/th&gt;
        &lt;th class=&#34;tg-0lax&#34;&gt;Qso Points&lt;/th&gt;
        &lt;th class=&#34;tg-0lax&#34;&gt;Mult&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;Raw&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;40M&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;200&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;203&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;Final&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;40M&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;188&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;185&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;Raw&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;20M&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;332&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;337&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;Final&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;20M&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;316&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;313&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;Raw&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;15M&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;2&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;2&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;Final&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;15M&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;2&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;2&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;Raw&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;All&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;534&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;542&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;Final&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;All&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;506&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;500&lt;/td&gt;
        &lt;td class=&#34;tg-0lax&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
    &lt;/table&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Auto-Generated YouTube Thumbnails</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-google-playlists/</link>
      <pubDate>Sun, 12 Dec 2021 19:46:36 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-google-playlists/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;One thing I&#39;d like to have for both my &lt;a href=&#34;project/demilight&#34;&gt;Demilight project page&lt;/a&gt; and the homepage is an automatically generated gallery of thumbnails of my recent YouTube uploads, either from a specific playlist or from all of my uploads. Unfortunately, this doesn&#39;t seem to be a straightfoward thing to do with YouTube&#39;s built-in embedding tools. But perhaps we can figure out a way to do so using the &lt;a href=&#34;https://developers.google.com/youtube/v3&#34;&gt;YouTube Data Api&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As one might guess from my approach to the &lt;a href=&#34;tags/codeadvent&#34;&gt;Advent of Code challenges&lt;/a&gt;, my preferred language for bashing together solutions like this is Python. So I&#39;ll be following the &lt;a href=&#34;https://developers.google.com/youtube/v3/quickstart/python&#34;&gt;Python Quickstart Guide&lt;/a&gt; for the YouTube Data API to see if that gets me anywhere.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since I prefer to work inside a pipenv, I&#39;ll start by running &lt;code class=&#34;code&#34;&gt;pipenv install google-api-python-client --python 3.10&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;pipenv install google-auth-oauthlib google-auth-httplib2&lt;/code&gt; to get the prerequisite libraries set up.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;On the Google Cloud Platform API page, I&#39;ll click the project button at the top and create a new project called &#34;hugo-youtube-playlists&#34;. In the library panel, I&#39;ll enable the YouTube Data API v3 for this new project as well.&lt;/p&gt;
&lt;div class=&#34;px-4 bg-yellow-100&#34;&gt;
&lt;p class=&#34;italic post-p&#34;&gt;Editors note - the following 3 steps turned out to be unnecessary, and are included here for posterity. Feel free to skip ahead to the next editor&#39;s note.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The next step, according to the guide, creating an oauth2 clientID, is a a bit more involved, as I first need to configure my consent screen.&lt;/p&gt;
&lt;img src=&#34;configureconsent.PNG&#34; alt=&#34;A screenshot of the GCP dialog instruciting the user to configure a consent screen before creating an OAuth client ID&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;And since I&#39;m not a &lt;span class=&#34;italic&#34;&gt;Google Workspace User&lt;/span&gt;, I can apparently only create &#34;External&#34; apps, which means I&#39;ll have to manually add users to the list of tes users who can use my app... which should be fine, since the only user will be me, I expect.&lt;/p&gt;
&lt;img src=&#34;internalexternal.PNG&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;The settings for creating a consent screen don&#39;t seem to arduous, and most are optional besides the application name and some contact email information. The only scope I expect the app to need access to is read-only access to the YouTube Data API v3; thankfully, the filtering function on the 34-pages of possible scopes helps find that.&lt;/p&gt;
&lt;img src=&#34;readonlyscope.PNG&#34; alt=&#34;A window on GCP showing the ability to select scopes that a user app will access, with only the YouTube Data API V3 readonly option selected&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, I&#39;ll add myself as a &#34;test&#34; user (though up to 100 are allowed, I only need 1).&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;italic post-p&#34;&gt;Editor&#39;s note: actually necessary steps pick up here.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;line-through&#34;&gt;Now, I&#39;ll head over to the YouTube data API&#39;s sample for listing channel data and copy that over into a script&lt;/span&gt;. Actually, though the YouTube API explorer allows you to run code using just an API key and returns a valid response, the sample code provided only works for OAuth authentication. Thankfully, &lt;a href=&#34;https://stackoverflow.com/questions/57531368/where-do-you-specify-your-api-key-when-making-a-request-with-the-google-api-pyth&#34;&gt;Stack Overflow comes to the rescue&lt;/a&gt; as it so often does, with a simple bit of code that uses an API key to make a request. From there, I built a couple of useful utility functions that get, for a given Channel ID, the playlist representing All Uploads and, for a given playlist, get the most recent X videos (5 by default).&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;yt-request.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;json&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prebuild&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;googleapiclient.discovery&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; build
    
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;config.json&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
            config &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;load(infile)
        api_key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; config[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;yt_api_key&amp;#39;&lt;/span&gt;]  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Please set your API key&lt;/span&gt;
    
        api_service_name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;youtube&amp;#34;&lt;/span&gt;
        api_version &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;v3&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; build(api_service_name, api_version, developerKey&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;api_key)
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getPlaylistVideos&lt;/span&gt;(playlistID, maxVids &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
        youtube &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; prebuild()
    
        request &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; youtube&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;playlistItems()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;list(
            part&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;snippet,contentDetails&amp;#34;&lt;/span&gt;,
            maxResults&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;maxVids,
            playlistId&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;playlistID
        )
    
        response &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;execute()
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(json.dumps(response, indent=4))&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (response)
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getUploadsPLFromChannelID&lt;/span&gt;(channelID):
        youtube &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; prebuild()
    
        request &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; youtube&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;channels()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;list(
            part&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;snippet,contentDetails,statistics&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;channelID
        )
        response &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;execute()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;(response[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;items&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;contentDetails&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;relatedPlaylists&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;uploads&amp;#39;&lt;/span&gt;])
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(getUploadsPLFromChannelID(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;UCjgmTMVx2B5_DOB3bCZBq7A&amp;#34;&lt;/span&gt;))
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(getPlaylistVideos(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;UUjgmTMVx2B5_DOB3bCZBq7A&amp;#34;&lt;/span&gt;))
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In this case, the API key I created earlier is stored in the config.json file, which I&#39;ve of-course added to my .gitignore file so it doesn&#39;t pop up on Github and do all kinds of nefarious things. The YouTube ID in the above code snippet is also the default one provided.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With these methods created, it&#39;s pretty straightforward to write a little script that just pulls the 5 most recently uploaded videos from my youtube channel and stashes the data in a json file.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;generateAll.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;ytgallery&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
    
    myChannelID &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;UCjgmTMVx2B5_DOB3bCZBq7A&amp;#34;&lt;/span&gt;
    myUploads &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;UUjgmTMVx2B5_DOB3bCZBq7A&amp;#34;&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;generateIndexGallery&lt;/span&gt;():
        videos &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; getPlaylistVideos(myUploads, maxVids&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)
        info &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; vData &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; videos[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;items&amp;#39;&lt;/span&gt;]:
            vid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;: vData[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;snippet&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;resourceId&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;videoId&amp;#39;&lt;/span&gt;],
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;: vData[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;snippet&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;],
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;thumbnailURL&amp;#39;&lt;/span&gt;: vData[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;snippet&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;thumbnails&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;high&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;]
                }
            info&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(vid)
    
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;../../data/indexvideos.json&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w+&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;dump(info, outfile)
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main&lt;/span&gt;():
        generateIndexGallery()
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        main()
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, I can create a list of recent videos. Now how to display them on the homepage? Thankfully, Hugo has built-in functionality for working with json/toml/yaml data in the form of &lt;a href=&#34;https://gohugo.io/templates/data-templates/&#34;&gt;Data Templates&lt;/a&gt;. It took quite a bit of bumbling around to work out the proper syntax, but here&#39;s what I worked out:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Data (as json, yaml, or toml file) goes into the /data folder (optionally into subfolders). For me, this is in a file at data/indexvideos.json &lt;span class=&#34;italic&#34;&gt;for videos that will be embedded into index.html&lt;/span&gt;.&lt;/li&gt;
    &lt;li&gt;We range over the data &lt;span class=&#34;underline&#34;&gt;in a particular file&lt;/span&gt; using syntax like &lt;code class=&#34;code&#34;&gt;range $.Site.Data.indexvideos&lt;/code&gt;. Note the lack of file extension.&lt;/li&gt;
    &lt;li&gt;Within that range, we reference our partial, &lt;span class=&#34;underline&#34;&gt;and we pass it the current context using the &#39;.&#39; operator&lt;/span&gt;. This allows the partial to receive the data from the current &#34;object&#34; the range function is operating over.&lt;/li&gt;
    &lt;li&gt;Within each partial, we can refer to individual attributes using double-mustache syntax, with using the dot operator to refernece the current context as in &lt;code class=&#34;code&#34;&gt;{{ .id }}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;That&#39;s a bit of a word jumble, but perhaps it will be more clear visually. Here is the directory structure of files, a selected part of the template file (index.html) and the partial (yt_index.html):&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Directory Structure&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;my-hugo-project
├── data
│   ├── yt
│   │   ├──indexvideos.json
├── layouts
│   ├── index.html
│   ├── partials    
│   │   ├──yt_index.html 
&amp;#39;   &amp;#39;   &amp;#39;
&amp;#39;   &amp;#39;   &amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;h-4&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;code-title&#34;&gt;indexvideos.json &lt;span class=&#34;italic&#34;&gt;(partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
    {
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r3Z6bVylrbs&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Using Analog Dials in your Projects&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;thumbnailURL&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://i.ytimg.com/vi/r3Z6bVylrbs/hqdefault.jpg&amp;#34;&lt;/span&gt;
    },
    {
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;E-TAz610T0c&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Wireless DMX LED Pixel Control #Shorts&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;h-4&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;code-title&#34;&gt;index.html &lt;span class=&#34;italic&#34;&gt;(partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex flex-col space-y-2 md:space-y-0 md:space-x-2 md:flex-row&amp;#34;&lt;/span&gt;&amp;gt;
    {{ range $.Site.Data.indexvideos }}
&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;        {{ partial &amp;#34;yt_index.html&amp;#34; . }}
&lt;/span&gt;    {{ end }}
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;The dot after the name of the partial is &lt;span class=&#34;underline&#34;&gt;crucial&lt;/span&gt;; it passes the current context to the partial template so the partial has access to all the data it needs.&lt;/p&gt;
&lt;div class=&#34;h-4&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;code-title&#34;&gt;yt_index.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://www.youtube.com/watch?v={{ .id }}&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;border-2 border-gray-400&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ .thumbnailURL }}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Youtube Video: {{ .title }}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-auto&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;m-auto text-sm italic text-center&amp;#34;&lt;/span&gt;&amp;gt;{{ .title }}&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;a&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;All this put together creates a series of divs on the front-page corresponding to my 5 most recently uploaded YouTube videos.&lt;/p&gt;
&lt;img src=&#34;autovideos.PNG&#34; alt=&#34;A screenshot of the various youtube videos that appear automatically on the front-page&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m currently relying on the fact that the script which generates the json file populates it with 5 videos, but I could also have limited it to 5 videos in the range command using something like &lt;code class=&#34;code&#34;&gt;range first 5...&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Speaking of which, the next step in automation is to have my script that pulls the 5 most recent videos run every time I build the site. Ideally, it would also fail gracefully in the case that it can&#39;t retrieve the new videos, i.e. if it can&#39;t connect to YouTube&#39;s API for some reason. But it turns out that running a Python script from npm is non-trivial - there are a number of ways to do it, including the &lt;a href=&#34;https://www.npmjs.com/package/python-shell&#34;&gt;python-shell&lt;/a&gt; package, but it seems like a chunky project in its own right.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This being a static site and all, this isn&#39;t exactly always my latest 5 uploaded videos. It&#39;s the 5 most recently uploaded videos &lt;span class=&#34;italic&#34;&gt;at the last time Hugo built the site&lt;/span&gt;. But that&#39;s a decent enough tradeoff for me.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2021</title>
      <link>https://jeff.glass/post/advent-of-code-2021/</link>
      <pubDate>Tue, 30 Nov 2021 02:30:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2021/</guid>
      <description>&lt;script src=&#34;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;fixed flex items-center w-2/3 h-10 align-top center top-14 z-15&#34;&gt;
    &lt;div id=&#34;toc-tab&#34; class=&#34;px-8 py-2 m-auto text-xl text-center text-green-200 transition-all duration-300 bg-green-800 opacity-0 flex-0 rounded-b-2xl&#34;&gt;&lt;a href=&#34;#TOC&#34; class=&#34;no-style-link&#34;&gt;Back to Table of Contents&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
    $(document).scroll(function() {
        var y = $(this).scrollTop();
        var startOfPosts = document.querySelector(&#34;div#day1&#34;).getBoundingClientRect()
        if (y &gt; startOfPosts.bottom + 600) {
            $(&#39;div#toc-tab&#39;).addClass(&#39;opacity-100&#39;)
            //console.log(&#34;unhide tab&#34;)
        } else {
            $(&#39;div#toc-tab&#39;).removeClass(&#39;opacity-100&#39;)
            //console.log(&#34;unhide tab&#34;)
        }
        });
&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;Is it Advent of Code time again? Well, here goes nothing. Let&#39;s see wha we can cook up.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m planning on completing most (all) of this year&#39;s challenges in Python, &lt;a href=&#34;../post/advent-of-code-2020/&#34;&gt;same as last year&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;w-auto pt-2 pb-4 pl-2 mr-2 -ml-2 align-top bg-gray-200 md:w-130&#34;&gt;
    &lt;p class=&#34;text-2xl relative-anchor&#34;&gt;Table of Contents&lt;/p&gt;
    &lt;div class=&#34;ml-8 font-semibold&#34;&gt;
        &lt;p&gt;&lt;a href=&#34;#day1&#34;&gt;Day 1 - Sonar Sweep&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day2&#34;&gt;Day 2 - Dive!&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day3&#34;&gt;Day 3 - Binary Diagnostic&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day4&#34;&gt;Day 4 - Giant Squid&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day5&#34;&gt;Day 5 - Hydrothermal Venture&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day6&#34;&gt;Day 6 - Lanternfish&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day7&#34;&gt;Day 7 - The Treachery of Whales&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day8&#34;&gt;Day 8 - Seven Segment Search&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day9&#34;&gt;Day 9 - Smoke Basin&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day10&#34;&gt;Day 10 - Syntax Scoring&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day11&#34;&gt;Day 11 - Dumbo Octopus&lt;/a&gt;&lt;/p&gt;        
        &lt;p&gt;&lt;a href=&#34;#day12&#34;&gt;Day 12 - Passage Pathing&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day13&#34;&gt;Day 13 - Transparent Origami&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day14&#34;&gt;Day 14 - Exteded Polymerization&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day15&#34;&gt;Day 15 - Chiton&lt;/a&gt;&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 16 - Packet Decoder (In Progress)&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day17&#34;&gt;Day 17 - Trick Shot&lt;/a&gt;&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 18 - Snailfish (In Progress)&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 19 - Beacon Scanner (In Progress)&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 20 - Trench Map (In Progress)&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 21 - Dirac Dice (In Progress)&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 22 - Reactor Reboot (In Progress)&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day1&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto pb-1 border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 1 - Sonar Sweep&lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I feel like it&#39;s Advent of Code tradition for me to read in the input from file (as strings) and try to do comparisons on it like ints, forgetting to cast them to intergers. Which means I was comparing textually, instead of numerically, so my answer was off by &lt;span class=&#34;italic&#34;&gt;two&lt;/span&gt;. Absurd. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;You really could do &lt;a href=&#34;https://adventofcode.com/2021/day/1&#34;&gt;today&#39;s challenge&lt;/a&gt; entirely in one line, but I think it&#39;s slightly more readable broken up as I&#39;ve done. Here&#39;s the complete code:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day1/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(t) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]
&lt;/span&gt;
numDecreases &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([pair &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(data[:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]])

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;numDecreases&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;The offending line, where I remembered to cast the input to ints.&lt;/p&gt;
&lt;h4 class=&#34;pt-4 pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Part 2 could also probably be inlined, but the list-comprehension-within-list-comprehension is, again, not the most readable thing, I think. Breaking out the three key steps (creating triples of the data, finding their sums, and finding where adjacent sums are decreasing) into 3 lines of code I think makes the solution more parsable.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day1/Part2.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(t) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

triples &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(data[:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;], data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], data[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;:])
windowSums &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(t)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; triples]

numDecreases &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([t &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(windowSums[:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], windowSums[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; t[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; t[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]])

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;numDecreases&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day2&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 2 - Dive!&lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The first part of today&#39;s challenge has us dealing with a list of things that happen sequentially (tracking the horizontal and vertical movements of our submarine), but the answer only has to do with summing them in some specific ways. This smells strongly of a &#39;gotcha&#39; coming in part 2 - if we can the easy, just-sum-it-up route for part 1, we won&#39;t be able to reuse any code for part 2 when the order actually matters. But that&#39;s alright, I guess, we&#39;ll take the easy route on this one.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s a fair amount of repetition in my list comprehensions here, but for a 7-line program I don&#39;t terribly feel like factoring it out.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day2/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# data is a list of tuples; each tuple is of form (&amp;#39;instruction&amp;#39;, int) where &amp;#39;instruction&amp;#39; is forward, down, up&lt;/span&gt;
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

horizontal &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([step[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; step[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;forward&amp;#39;&lt;/span&gt;])
depth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([step[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; step[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;down&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([step[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; step[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;up&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Solution product is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;horizontal &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; depth &lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As expected, we&#39;re paying the (small) price for not doing the first part iteratively. That&#39;s alright, we can implement it now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This does give me a chance to play with a new feature of Python 3.10: structural pattern matching. It&#39;s like a switch-case structure on steroids. To make sure I&#39;m running this code in Python 3.10 specifically, I&#39;ll use pipenv to lock the version to 3.10.0 by running &lt;code class=&#34;code&#34;&gt;pipenv install --python 3.10&lt;/code&gt; on the command line.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Our code is ultimately fairly simple; thankfully, I encountered no &#34;unmatched instruction&#34; errors, which means I parsed the input correctly.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day2/Part2.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# data is a list of tuples; each tuple is of form (&amp;#39;instruction&amp;#39;, int) where &amp;#39;instruction&amp;#39; is forward, down, up&lt;/span&gt;
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

horizontal, depth, aim &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
    match d:
        case (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;down&amp;#39;&lt;/span&gt;, num):
            aim &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; num
        case (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;up&amp;#39;&lt;/span&gt;, num):
            aim &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; num
        case (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;forward&amp;#39;&lt;/span&gt;, num):
            horizontal &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; num
            depth &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; aim &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; num
        case _:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unmatched instruction &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;d&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Solution is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;horizontal&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;depth&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day3&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 3 - Binary Diagnostic &lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah, day 3 of Advent of Code, where we traditionally get into nested-processing, working with binary, and parsing numbers based on their digits. I don&#39;t know that this literally happens on day 3 every year, but it seems a familiar progression in the early days of an Advent of Code challenge. My first thought is - let&#39;s make sure we iterate through the entire input as few times as possible, something made easier by the fact that epsilon and gamma are, in some sense, complements of each other.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This one&#39;s not too hard - using a &lt;code class=&#34;code&#34;&gt;defaultdict&lt;/code&gt; from the &lt;code class=&#34;code&#34;&gt;collections&lt;/code&gt; module makes the process of adding up the number of &#34;1&#34;&#39;s in all the input numbers a little cleaner.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day3/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; defaultdict

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

numInputs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)
onesCount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Count the number of &amp;#34;1&amp;#34;&amp;#39;s at each digit position in all of the input numbers&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, digit &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(num):
        onesCount[i] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(digit)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Calculate gamma, epison as lists of strings (&amp;#34;1&amp;#34; and &amp;#34;0&amp;#34;)&lt;/span&gt;
gamma &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; onesCount[i] &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; (numInputs &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(onesCount))]
epsilon &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; gamma[i] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(onesCount))]

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Concatenate lists, as 0b to represent binary, cast to int&lt;/span&gt;
result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;0b&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(gamma), &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;0b&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(epsilon), &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;gamma&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;epsilon&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;result&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Now we&#39;re moving into the realm of processing some input data with multiple passes, while restricting which data is in each pass based on our processing of previous steps. My initial solution was a little cumbersome, but I think gets the intention accross pretty well. &lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day2/Part2.py (Version 1)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    inputdata &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;mostCommonDigitInPosition&lt;/span&gt;(data, position):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num[position]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;


oxyData &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [d &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; inputdata]
co2Data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [d &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; inputdata]

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#find Oxygen Rating&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(inputdata[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(oxyData) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
    MCD_o2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mostCommonDigitInPosition(oxyData, i)
    oxyData &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [t &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; oxyData &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; t[i] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; MCD_o2]

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#find CO2 Rating&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(inputdata[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(co2Data) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
    MCD_co2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mostCommonDigitInPosition(co2Data, i)
    co2Data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [t &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; co2Data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; t[i] &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; MCD_co2]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(oxyData) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: oxygenRating &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(oxyData[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Oxygen Data should only have one element, instead was &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;oxyData&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(co2Data) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: co2Rating &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(co2Data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;CO2 Data should only have one element, instead was &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;co2Data&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Product: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;oxygenRating&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; * &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;co2Rating&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;oxygenRating &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; co2Rating&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;We can refactor this a bit, so that the logic of reducing the list of input values is done in a function called &lt;code class=&#34;code&#34;&gt;calculateRating&lt;/code&gt;, which takes a list of data as well as a function. The function tells us, for a given digit position, what value at that position should be used to keep values in our data for our next round of culling.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While we could also get a little fancy and combine &lt;code class=&#34;code&#34;&gt;mostCommonDigitInPosition&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;leastCommonDigitInPosition&lt;/code&gt;, I think we&#39;d actually be in danger of making things &lt;span class=&#34;italic&#34;&gt;too&lt;/span&gt; concise. The difference between &lt;code class=&#34;code&#34;&gt;&gt;=&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;&gt;&lt;/code&gt; in each case is critical, and I think factoring that out might be too reductive.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day3/Part2.py (Version 2)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    inputdata &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;mostCommonDigitInPosition&lt;/span&gt;(data, position):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num[position]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;leastCommonDigitInPosition&lt;/span&gt;(data, position):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num[position]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;calculateRating&lt;/span&gt;(data, digitFunc):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        digitToMatch &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; digitFunc(data, i)
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [t &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; t[i] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; digitToMatch]

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Function calculateRating should termiante with one element, instead was &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

oxygenRating &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; calculateRating(inputdata, mostCommonDigitInPosition)
co2Rating &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; calculateRating(inputdata, leastCommonDigitInPosition)

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Product: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;oxygenRating&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; * &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;co2Rating&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;oxygenRating &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; co2Rating&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day4&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 4 - Giant Squid&lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Today my biggest obstacle was, as is often the case, myself trying to be too clever and concise. &lt;a href=&#34;https://adventofcode.com/2021/day/4&#34;&gt;Today&#39;s challenge&lt;/a&gt; invovled parsing a somewhat more involved text file of inputs, and then further processing that input to make it into a useful data structure. Rather than load each bingo card as a 2D array, I used the input data to create two separate arrays, one indexed by rows, the other by columns, with boards at the same position representing the same board. Determining whether a board is winning (given a list of called numbers) is a simple as asking whether any of the lines (rows or columns) in that board have all their members in the called numbers.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Had I simply constructed each type of input using &lt;code class=&#34;code&#34;&gt;for&lt;/code&gt; loops, this would have been fairly simply, but I wanted everything packaged up nice in a list comprehension... which took me a spell to troubleshoot and get right. Ah well.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day4/part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
        inputChunks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#---Parse the Input to make it useful----&lt;/span&gt;
    
    allCalledNumbers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; inputChunks[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]
    boards &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(chunk&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; chunk &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; inputChunks[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#get boards&lt;/span&gt;
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Make board list of ints instead of long string by splitting every 3 characters&lt;/span&gt;
    intBoards &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(b[n:n&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(b), &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; boards]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#boardrows is a list of boards, each of which are a list of rows in each board,&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#each of which is a list of ints&lt;/span&gt;
    boardRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[b[index:index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; intBoards]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#boardcols is a list of boards, each of of which is a list of columns in each board,&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#each of which is a list of ints&lt;/span&gt;
    boardCols &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[[b[row][index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; boardRows]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#---Define some functions to help us solve the problem as written---&lt;/span&gt;
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#For a given board (by row or column), are any of its lines made up only of numbers in &amp;#39;calledNums&amp;#39;?&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isBoardAWin&lt;/span&gt;(board, calledNums):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;([&lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;([num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; calledNums &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; board])
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Score is (sum of uncalled numbers on board) * (last number called)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;calcScore&lt;/span&gt;(board, calledNumbers):
        unusedNumbers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [num &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; board &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; calledNumbers]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(unusedNumbers) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; calledNumbers[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doWin&lt;/span&gt;(board, calledNumbers):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Score is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;calcScore(b, calledSoFar)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        exit()
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#---Find solution---&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(allCalledNumbers)):
        calledSoFar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; allCalledNumbers[:i]
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Searching for wins with numbers &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;calledSoFar&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        winner &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; boardRows:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isBoardAWin(b, calledSoFar):
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Winner board by row! &lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;b&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
                doWin(b, calledSoFar)
    
    
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; boardCols:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isBoardAWin(b, calledSoFar):
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Winner board by column! &lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;b&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
                doWin(b, calledSoFar)
    
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No winners after &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; numbers, calling next number&amp;#34;&lt;/span&gt;)
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, the infrastructure I built for part 1 of this puzzle was very useful for part to. Basically, instead of iterating through increasingly long lists of called numbers until the &lt;span class=&#34;italic&#34;&gt;first&lt;/span&gt; winning is found, keep going until only 1 board has not won, recall that it&#39;s the winner, then keep adding called numbers until it does win.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since all of the setup and parsing steps are the same, I&#39;ll only include the solution finding part of the code, for brevity:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day2/Part2.py &lt;span class=&#34;italic&#34;&gt;(Partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#---Find solution---&lt;/span&gt;

hasWon &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; boards]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(allCalledNumbers)):
    calledSoFar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; allCalledNumbers[:i]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x, b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(boardRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isBoardAWin(b, calledSoFar):
            hasWon[x] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
            
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x, b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(boardCols):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isBoardAWin(b, calledSoFar):
            hasWon[x] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;After calling &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; numbers,&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; hasWon&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
        winningIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; hasWon&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;found last board to win at index: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;winningIndex&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; hasWon&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;This board wins after &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; numbers called,&amp;#34;&lt;/span&gt;,)
        doWin(boardCols[winningIndex], calledSoFar)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;hasWon&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; boards have not won&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day5&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 5 - Hydrothermal Venture &lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;One of the gotchas on this day is making incorrect assumptions about the ordering of points in a given line. For eaxmple, for a line with endpoints (3,5) and (3,0), doing something like: &lt;code class=&#34;code&#34;&gt;for y in range(point1.y, point2.y)&lt;/code&gt; will generate exactly one point &lt;code class=&#34;code&#34;&gt;(3.5)&lt;/code&gt;, because the ending y coordinate is less than the starting one. This can be fixed by either ranging over the values in a consistent direction (always from lesser to great, say) or by pre-sorting the line coordinates so that the first coordinate is always less than the second for the given axis. I chose to do the former.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Unrelatedly, I&#39;m personally a fan of &lt;a href=&#34;https://regex101.com/&#34;&gt;Regex101&lt;/a&gt; for working out regexes. It makes the process of fleshing out a given pattern visual and intuitive, and the built-in reference guides and regex tips are invaluable.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day5/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; namedtuple

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

Line &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Line&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;p1x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;p1y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;p2x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;p2y&amp;#39;&lt;/span&gt;])
parsedData &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
    reg &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;(.+),(.+) -&amp;gt; (.+),(.+)&amp;#39;&lt;/span&gt;, d)
    parsedData&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Line(p1x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)), p1y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)), p2x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)), p2y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;))))

horizontalLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [l &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; parsedData &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2y]
verticalLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [l &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; parsedData &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2x]

coveredOnce, coveredMany &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(), &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; horizontalLines:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; xCoord &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2x), &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2x)&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        point &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (xCoord, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If the point is already covered by multiple lines, we don&amp;#39;t need to do anything more with it, but&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; coveredMany:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If we haven&amp;#39;t see it at all, we should mark that we&amp;#39;ve now seen it once.&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; coveredOnce:
                coveredOnce&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(point)
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Otherwise, we should mark that we&amp;#39;ve now seen it in multiple lines&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                coveredOnce&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(point)
                coveredMany&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(point)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; verticalLines:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; yCoord &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2y), &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2y)&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        point &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x, yCoord)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If the point is already covered by multiple lines, we don&amp;#39;t need to do anything more with it, but&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; coveredMany:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If we haven&amp;#39;t see it at all, we should mark that we&amp;#39;ve now seen it once.&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; coveredOnce:
                coveredOnce&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(point)
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Otherwise, we should mark that we&amp;#39;ve now seen it in multiple lines&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                coveredOnce&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(point)
                coveredMany&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(point)
                
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Solution is: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(coveredMany)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;italic post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Having selected to iterate over the points in a line in a consistent way in the first half, I felt it might be easier to pre-process the diagonal lines in the second half. That is, I swapped the endpoints of each diagonal line as necessary to ensure the point with the lower X coordinate was first. Then, if the second y coordinate is great  than the first, each time we increase the x coordinate by 1, we will by definition incrase the y coordinate by 1. If the second y coordinate is less than the first, y decreased by 1 for each increase of the x coordinate. Other than that, the processing of each point to see if it&#39;s been covered already is the same as in part one.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For brevity, I&#39;ve only included the addititional processing necessary for part 2 of today&#39;s challenge.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day5/Part2.py &lt;span class=&#34;italic&#34;&gt;(Partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;diagonalLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [l &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; parsedData &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; verticalLines &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; horizontalLines]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; diagonalLines:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Make sure the first coordinate of each line is left of the second coordinte&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2x &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x: l &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Line(p1x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2x, p1y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2y, p2x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x, p2y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y)
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Determine if y increases or descreases with increasing X&lt;/span&gt;
    yDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2y &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; yDelta, xCoord &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2x&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)):
        point &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (xCoord, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (yDelta&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;yDir))

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; coveredMany:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If we haven&amp;#39;t see it at all, we should mark that we&amp;#39;ve now seen it once.&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; coveredOnce: 
                coveredOnce&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(point)
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Otherwise, we should mark that we&amp;#39;ve now seen it in multiple lines&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                coveredOnce&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(point)
                coveredMany&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(point)

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Solution is: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(coveredMany)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day6&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 6 - Lanternfish&lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Part one of &lt;a href=&#34;https://adventofcode.com/2021/day/6&#34;&gt;today&#39;s puzzle&lt;/a&gt; was deceptively simple. It asks the challenger to calculate the number of lanternfish present after a given number of steps of an iterative process. The way the puzzle&#39;s data is displayed in the examples presented, one might be tempted to keep the data as a long list of individual fish listed by the number of days till they next reproduce; then, for each step, iterate over the list and take the appropriate action. While this shold generate a solution, the list would quickly balloon out of the control. The key insight is that each fish that will, say, generate a new fish in 4 days, is identical to every other fish that will spawn a new fish in four days. So really, we don&#39;t need to track individual fish, just the total count of fish that will reproduce in a given number of days. For every day that passes, each of those counts of fish reduce their count by one, and we do some special accounting to the fish that are reproducing today, and iterate.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This quick and simple approach does make one worry that part 2 will require more convoluted reasoning though.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day6/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    inputdata &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]

fishcounts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [inputdata&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(num) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)]
daysToRun &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;80&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(daysToRun):
    newfishcounts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fishcounts[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [fishcounts[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]]
    newfishcounts[&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; fishcounts[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    fishcounts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newfishcounts

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;After &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;daysToRun&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; days there are &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(fishcounts)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; lanternfish&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah! We&#39;ve gotten lucky here and avoided the &#39;gotcha&#39; that the puzzle writer was thinking of. The second step asks to calculate the number of fish present after 256 steps; if one had taken the &#34;process the whole list&#34; technique in part one, one would be screwed in part two as the exponential growth of the fish population really takes off. But with a condensed, iterative process like we used in part 1, one only has to change the &lt;code class=&#34;code&#34;&gt;daysToRun&lt;/code&gt; value to 256, and our answer pops out in less than a quarter of a second! Excellent. I&#39;m not even going to include the code a second time, since it is &lt;span class=&#34;italic&#34;&gt;identical to part 1 except for the value of &lt;code class=&#34;code&#34;&gt;daysToRun&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day6/Part2.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#See Day6/Part1.py, above&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day7&#34;&gt;Day 7 - The Treachery of Whales &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Just to humblebrag a bit (well, really, to brag; but hey, it&#39;s my website), I solved part 1 of day&#39;s challenge in the shower. My reasoing went something like the following:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;We&#39;re looking to select a point &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; that minimizes the function &lt;img src=&#34;day7/p1mineq.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;, as presented in problem setup.&lt;/li&gt;
    &lt;li&gt;Taking the derivative of this sum is somewhat complicated, but there&#39;s actually a better way to reason about it.&lt;/li&gt;
    &lt;li&gt;Looked at another way, we&#39;re looking to find a point &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; such that moving that point will only cause the total crab-distance traveled to increase; a local minimum.&lt;/li&gt;
    &lt;li&gt;Picture our point where our crabs our converging at a point &lt;img src=&#34;day7/x.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; on the number line, with &lt;img src=&#34;day7/n.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; crabs less than x and &lt;img src=&#34;day7/totalcrabsminusn.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; crabs great than &lt;img src=&#34;x.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; &lt;/li&gt;
    &lt;li&gt;As we slide our alignment point along the number line in a continuous fashion, if it moves a small distance &lt;img src=&#34;day7/deltax.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; in, say the positive direction:
        &lt;li class=&#34;pl-8&#34;&gt;We add &lt;img src=&#34;day7/ndeltax.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; units of additional crab travel, as we move further from the crabs at positions less than our alignment point, but&lt;/li&gt;
        &lt;li class=&#34;pl-8&#34;&gt;We subtract &lt;img src=&#34;day7/totalcrabsub.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; as we move closer to the crabs greater than our alignment point&lt;/li&gt;
    &lt;/li&gt;
    &lt;li&gt;And similarly, if &lt;img src=&#34;day7/deltax.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; is negative, we get closer to &lt;img src=&#34;day7/n.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; crabs and futher from &lt;img src=&#34;day7/totalcrabsminusn.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; crabs.&lt;/li&gt;
    &lt;li&gt;So, if &lt;img src=&#34;day7/ngreater.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;, increasing &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; will cause the total crab distance to descrease. And if &lt;img src=&#34;day7/nless.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;, decreasing &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; with cause thte total crab distance to increase.&lt;/li&gt;
    &lt;li&gt;But recall, what we want is to find a point where neither of those things is true; where &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; is at a mimumum, so any movement of it causes the total crab distance to incerase. This is only true where neither of the above inequalities is statisfied, i.e. when &lt;img src=&#34;day7/nequal.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;.&lt;/li&gt;
    &lt;li&gt;Moving some terms around, we find that the total crab distance travelled is at a mimimum when &lt;img src=&#34;day7/div2.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;, in other words, when the number of crabs greater than and less than the alignment point are equal. This is true when &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; is the median of the crab points.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;All that thinking in a warm shower yeilded a very short (and working) bit of code.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day7/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;statistics&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; median

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]

median &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; median(data)
minFuel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([&lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(d&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;median) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data])

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;minFuel&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Sadly, my brain failed me when trying to come up with a similarly clever solution for part 2, so I ended up implementing the crab-fuel-expenditure function as described in the problem statement and iteratively increasing and decreasing the alignment point value until a minimum was found. I had the code start at the median value of the list, somewhat arbitrarily, but the code still finishes in under a quarter of a second and yields the correct answer.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I skipped a couple of obvious optimizations. 
    &lt;ul class=&#34;pb-6 post-ul&#34;&gt;
        &lt;li&gt;Incrementing the position that we&#39;re currently testing the crab-distance of by only 1 unit each time probably isn&#39;t optimal (for my inputs, I had to evaluate 140 positions before finding a minimum). Perhaps some variation on Newton&#39;s method could have been used to estimate a better delta for &lt;code class=&#34;code&#34;&gt;testVal&lt;/code&gt;?&lt;/li&gt;
        &lt;li&gt;There might be a more ideal value to start the search at (the mean perhaps?).&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day7/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;statistics&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; median
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;fuelUsed&lt;/span&gt;(crabPositions, position):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([(&lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(d &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; position)&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(d&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;position)&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crabPositions])
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;lazyDict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__ (self, factory):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;factory &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; factory
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __missing__ (self, key):
            self[key] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;factory(key)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self[key]
    
    fuelToReach &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lazyDict(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x: fuelUsed(data, x))
    
    med &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; median(data)
    fuelToReach[med] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fuelUsed(data, med)
    testVal &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; med
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; ((fuelToReach[testVal] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; fuelToReach[testVal&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; (fuelToReach[testVal] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; fuelToReach[testVal&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; fuelToReach[testVal&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; fuelToReach[testVal]: testVal &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; fuelToReach[testVal&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; fuelToReach[testVal]: testVal &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Something has gone wrong&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;fuelToReach&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Minimum required fuel is reached at position &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;testVal&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; with &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;fuelToReach[testVal]&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; fuel used&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Calculated &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(fuelToReach)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; potential positions&amp;#34;&lt;/span&gt;)
    
    
    
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day8&#34;&gt;Day 8 - Seven Segment Search &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Whenever the first part of an AoC challenge says &lt;code class=&#34;code&#34;&gt;For now...&lt;/code&gt; you know you&#39;re in for an expansion of that area of the challenge in part 2. Today&#39;s part one specifcally says to &lt;code class=&#34;code&#34;&gt;For now, focus on the easy digits&lt;/code&gt;, meaning the hard digits are coming right down the pipe.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Part 1 is indeed pretty easy - it breaks down to parsing the input, throwing away half of it, then counting the members of a list that have a length of 2, 3, 4, or 7 letters. I had a feeling we&#39;d be parsing the actual digit information in part 2, so I fleshed out a bit of a dataclass to hold the input values, assuming I&#39;d expand this in part 2.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day8/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;displayRun&lt;/span&gt;:
    hookups: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]
    outputs: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    runs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [displayRun(hookups &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;), outputs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

totalUnique &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(segments) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; segments &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;outputs]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; runs])
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;totalUnique&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah, here we go, let&#39;s parse some digits. We&#39;ll need to figure out which actual segments (from &lt;code class=&#34;code&#34;&gt;&#39;abcdefg&#39;&lt;/code&gt;) are represented by which letters in the input rows.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll start by organizing the &#34;hookups&#34; (sequences of letters describing the segments lit up for a given digit) ina dictionary by the number of letters in each. This will help us tease apart which segment is which by looking at which segments are in how members members of each of thes lists.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For example, as part 1 illustrates, there is only 1 hookup with 2 segments (&#34;1&#34;) and 1 hookup with 2 segments (&#34;7&#34;). The segment connected to the &lt;code class=&#34;code&#34;&gt;a&lt;/code&gt; illuminator is present in the &#34;7&#34; hookup, but not in the &#34;1&#34; hookup, and that&#39;s their only difference, so it&#39;s easy to find what&#39;s wired to the &#34;a&#34; segment.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The remainder of the deductions are slightly more complicated. For example:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;In the 3 digits with 5 segments illuminated (2, 3, 5), there are three segments common to all three (segments, &lt;code class=&#34;code&#34;&gt;a&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;d&lt;/code&gt;, and &lt;code class=&#34;code&#34;&gt;g&lt;/code&gt;).&lt;/li&gt;
        &lt;li&gt;We&#39;ve already found what&#39;s hooked up to segment &lt;code class=&#34;code&#34;&gt;a&lt;/code&gt;, as above. So the remaining two common segments correspond to illuminators &lt;code class=&#34;code&#34;&gt;d&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;g&lt;/code&gt;, in some order.&lt;/li&gt;
        &lt;li&gt;The segment corresponding to &lt;code class=&#34;code&#34;&gt;d&lt;/code&gt; will be present in the single hookup with 4 illuminated sigments (which corresponds to the digit &#34;4&#34;); the segment corresponding to &lt;code class=&#34;code&#34;&gt;g&lt;/code&gt; will not. So we have established which segments should be wired now to &lt;code class=&#34;code&#34;&gt;d&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;g&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Similar logic allows us to work out:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;Segments &lt;code class=&#34;code&#34;&gt;e&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;b&lt;/code&gt; (both are in a single digit with 5 illuminated segments, with &lt;code class=&#34;codce&#34;&gt;e&lt;/code&gt; present in 2 hookups with 6 illuminated segments and &lt;code class=&#34;codce&#34;&gt;b&lt;/code&gt; present in 3).&lt;/li&gt;
        &lt;li&gt;Segments &lt;code class=&#34;code&#34;&gt;c&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;f&lt;/code&gt; (both are present in two digits with 5 illuminated segments, with &lt;code class=&#34;codce&#34;&gt;c&lt;/code&gt; present in 2 hookups with 6 illuminated segments and &lt;code class=&#34;codce&#34;&gt;f&lt;/code&gt; present in 3).&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There may be a more concise way of working this out, but this method worked out for me.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Once we know the mappings from poorly-wired-segments to true segments, we can iterate over all our input rows, transform the messed-up wirings to true wirings using this mapping, map the true mappings to digits, then sum them up.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day8/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;(kw_only&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;displayRun&lt;/span&gt;:
    hookups: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]
    outputs: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]
    segmentAssigns : &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;](default_factory&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    runs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [displayRun(hookups &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;), outputs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;), segmentAssigns &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;numFromSegmentsOn&lt;/span&gt;(segmentsOn):
    sortedLetters &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;([letter &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; letter &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; segmentsOn]))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcefg&amp;#39;&lt;/span&gt;   : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;cf&amp;#39;&lt;/span&gt;       : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;acdeg&amp;#39;&lt;/span&gt;    : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;acdfg&amp;#39;&lt;/span&gt;    : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;bcdf&amp;#39;&lt;/span&gt;     : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abdfg&amp;#39;&lt;/span&gt;    : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abdefg&amp;#39;&lt;/span&gt;   : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;acf&amp;#39;&lt;/span&gt;      : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;  : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdfg&amp;#39;&lt;/span&gt;   : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Sorted letters &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;sortedLetters&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; do not match any digit pattern&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; runs:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Determine display: control wire mapping&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#{&amp;#34;actual illuminated output: wire that currently controls it&amp;#34;}&lt;/span&gt;
    hookupsWithLen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        hookupsWithLen[i] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [h &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;hookups &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(h) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; i]

    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#know wiring of segment a]&lt;/span&gt;

    d_or_g &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([h &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;])] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#based on hookups with 5 segments&lt;/span&gt;
    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; d_or_g &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#based on single length-4 hookup&lt;/span&gt;
    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; d_or_g &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;]][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]


    b_or_e &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([h &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#based on hookups with 5 segments on&lt;/span&gt;
    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b_or_e &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([h &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#based on hookups with 5 segments and knowing &amp;#39;b&amp;#39; already&lt;/span&gt;
    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b_or_e &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;]][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]


    c_or_f &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([h &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#based on hookups with 5 segments on&lt;/span&gt;
    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; c_or_f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([h &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; c_or_f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;]][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#convert miswired digits to real digits, then to numbers, and sum up&lt;/span&gt;
    rowSum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, digit &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;outputs):
        rewiredDigit &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[seg] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; digit])
        rewiredNum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; numFromSegmentsOn(rewiredDigit)
        rowSum &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; rewiredNum &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;i)
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; rowSum

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Total of all rewired numbers: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;

&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day9&#34;&gt;Day 9 - Smoke Basin &lt;/h2&gt;&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Another classic evolution of the Advent of Code is working with adjacent items in a grid, with the biggest connundrum/gotcha being how to deal with the edges/corners. While the list comprehension I&#39;ve put together here isn&#39;t necessarily the most readable at first glance, nor the most efficient (it generates 9 positions, of which 4 are usable), it gets the job done.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day9/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; defaultdict

data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    raw &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    numRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(raw)
    numCols &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(raw[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(raw):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c, col &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            data[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(col)

total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print([(r + deltar, c + deltac) for deltar in [-1, 0, 1] for deltac in [-1, 0, 1] if (deltar*deltac == 0 and deltar != deltac)])&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;([data[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; data[(r &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, c &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (deltar&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;deltac &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; deltar &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; deltac)]):
            total &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; data[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;total&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The second part of today&#39;s challenge is essentially a flood-fill algorithm starting from the points we identified in part 1, ending when we reach the edges of the input data or a &#39;9&#39; in the data itself. By appending new points of interest to the end of the list (and only adding them if we haven&#39;t included them in the basin points already), we don&#39;t run into the issue of constantly checking points from each other.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Again, the meat of this solution is contained in a really long list comprehension. Probably not the most readable, as its checking four separate conditions to see if it should add a new point. Two have to do with generating the neighboring points, one to check if the newly checked point is a &#39;9&#39;, and one to check if we&#39;ve already included this point in the basin we&#39;re looking at.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Once we&#39;ve found the sizes of all the basins, we take the three largest sizes, multiply them together, and we have our answer.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day9/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; defaultdict
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;math&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; prod

data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    raw &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    numRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(raw)
    numCols &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(raw[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(raw):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c, col &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            data[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(col)

basins &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Find the low point for each bsain (as in part 1)&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;([data[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; data[(r &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, c &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (deltar&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;deltac &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; deltar &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; deltac)]):
            basins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append([(r, c),])

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Flood fill each basin until it hits a wall&lt;/span&gt;
basinLengths &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; basins:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pos &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b:
        b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;extend([(pos[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, pos[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (deltar&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;deltac &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; deltar &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; deltac &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; data[(pos[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, pos[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac)] &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; (pos[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, pos[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b)])
    basinLengths&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(b))

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Solution: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;prod(&lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(basinLengths, reverse&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)[:&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;])&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day10&#34;&gt;Day 10 - Syntax Scoring&lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Today&#39;s part 1 is not too hard if you understand the concept of a stack - a list from which things are only added or removed from the end. Our latest character can always be an opening bracket of some kind (starting a new chunk) or a closing bracket. For a closing bracket, if it matches the last opening bracket in our stack, pop the last opening bracket off the stack and throw both of them away. If it doesn&#39;t match, we&#39;ve found our first illegal character and can stop and score.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day10/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-96&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

lefts  &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; ]
rights &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; ]
points &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,       &lt;span style=&#34;color:#f60&#34;&gt;57&lt;/span&gt;,     &lt;span style=&#34;color:#f60&#34;&gt;1197&lt;/span&gt;,   &lt;span style=&#34;color:#f60&#34;&gt;25137&lt;/span&gt;]

totalScore &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
    stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; lefts:
            stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(char)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; rights:
            lastLeft &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; lefts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(lastLeft) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; rights&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(char):
                totalScore &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; points[rights&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(char)]
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unkown character &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;totalScore&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For part 2, we&#39;ll score our incomplete lines if and only if there are no corrupt characters in the line; that is, if we reach the end of iterating through the line without hitting a corrupt character. This is what the &lt;code class=&#34;code&#34;&gt;for...else&lt;/code&gt; syntax achieves. We hand off these incomplete lines to the &lt;code class=&#34;code&#34;&gt;autocompleteScore&lt;/code&gt; method for scoring, append those scores to the list, and find the middle (median) element at the end.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day10/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;statistics&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; median

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

lefts  &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; ]
rights &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; ]
points &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,       &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,      &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,      &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;   ]

scores &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;autocompleteScore&lt;/span&gt;(stack):
    score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; stack[::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
        score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (score &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; points[lefts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(item)]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; score

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
    stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; lefts:
            stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(char)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; rights:
            lastLeft &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; lefts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(lastLeft) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; rights&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(char):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unkown character &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        scores&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(autocompleteScore(stack))

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;median(scores)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day11&#34;&gt;Day 11 - Dumbo Octopus &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;We&#39;re getting deeper and deeper into coding ideas now; today&#39;s part 1 introduces a challenge which requires is to iterate over a data set, performing a unique operation as many times as we&#39;re able until we&#39;re unable to any longer.&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;Once again I&#39;m making sure of a dataclass to hold the state of each octopus, as well as lazy dictionary which allows us to treat the grid points outside of our area of interest as infinite sinks of energy.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day11/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt; 
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;OctoData&lt;/span&gt;:
    intensity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    flashedThisStep: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;lazyDict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __missing__ (self, key):
        self[key] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; OctoData(intensity&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self[key]

grid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lazyDict()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

numRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)
numCols &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Load data into dict&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt; (numCols):
        grid[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; OctoData(intensity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(data[r][c]), flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printGrid&lt;/span&gt;(printFlashes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt; ):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
            val &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; val &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(val, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

numSteps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;
numFlashes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numSteps):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Increment by 1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
            grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        anyFlashesThisRound &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
        
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Flash as necesasry&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;:
                    grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
                    numFlashes &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
                    anyFlashesThisRound &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
                        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
                            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt;(deltar &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; deltac &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;): grid[(r &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, c &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

        fts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols)]

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; anyFlashesThisRound: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep: grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
            grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;--&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;final:&amp;#34;&lt;/span&gt;)
printGrid()
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Number of Flashes: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;numFlashes&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Part 2 is very similar to part 1, except instead of tracking the total number of octopus flashes, we want to know on what step all the octopuses flash at once. The code is quite similar; I&#39;ve highlighted the key changes in the following code&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day11/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;OctoData&lt;/span&gt;:
    intensity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    flashedThisStep: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;lazyDict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __missing__ (self, key):
        self[key] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; OctoData(intensity&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self[key]

grid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lazyDict()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

numRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)
numCols &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Load data into dict&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt; (numCols):
        grid[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; OctoData(intensity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(data[r][c]), flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printGrid&lt;/span&gt;(printFlashes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt; ):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
            val &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; val &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(val, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;stepNumber &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;
printGrid()
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;--&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    stepNumber &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Increment by 1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
            grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        anyFlashesThisRound &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Flash as necesasry&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;:
                    grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
                    anyFlashesThisRound &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
                        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
                            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt;(deltar &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; deltac &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;): grid[(r &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, c &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

        fts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols)]

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; anyFlashesThisRound: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep: grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
            grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols)]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;--&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;final:&amp;#34;&lt;/span&gt;)
printGrid()
&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;All flashed on step &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;stepNumber&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day12&#34;&gt;Day 12 - Passage Pathing &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m not 100% proud of my solution to today&#39;s problems, though it definitely works. Mostly, the way I&#39;m generating the possible-next routes from the currently-arrived-at-room for any given path is just a little hacky. I&#39;m getting a list of all paths (pairs of connected caves) that include the current cave, then finding the element in that path that isn&#39;t the current cave. I have to loop through the full list of cave connections every time I want to do this, rather than generating a list of possible connections for each cave out the outset. The efficiency hit here is significant, but for the data size in the problem, it turns out to be fine. &lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day12/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Route&lt;/span&gt;():
    pathSoFar: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;
    currentCave: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    smallCavesVisited: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;

startingPaths &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [path &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; path]
routesInProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [Route(pathSoFar&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[s], smallCavesVisited&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;([item &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; item&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lower() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; s])) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; s, currentCave &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(s) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;})[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; startingPaths]
completeRoutes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(routesInProgress) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;):
    nextRoutes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; routesInProgress:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;currentCave &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;:
            completeRoutes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(r)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Get all path segments including hte current room&lt;/span&gt;
            nextPaths &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [path &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;currentCave &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; path]
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; nextPaths:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Get the room this path segment would lead to (it&amp;#39;s the room that&amp;#39;s not our current room)&lt;/span&gt;
                nextCave &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [item &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; p &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; item &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;currentCave][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Can&amp;#39;t go to a little room twice&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited:
                    newPath &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathSoFar &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [p]
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; nextCave&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lower():
                        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If we&amp;#39;re now going to be in a little room, add it to the list of little rooms we&amp;#39;ve visited&lt;/span&gt;
                        newSmallCaves &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [nextCave]
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Otherwise, the list of little rooms visited doens&amp;#39;t change&lt;/span&gt;
                        newSmallCaves &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited
                    nextRoutes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Route(pathSoFar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newPath, smallCavesVisited &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newSmallCaves, currentCave &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; nextCave))
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    routesInProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; nextRoutes

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Total routes: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(completeRoutes)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For part 2, we&#39;ll need to track not only which small caves we&#39;ve visited, but how many times we&#39;ve visited them. So we&#39;ll need the Route object to have, not just a list of small caves, but a &lt;code class=&#34;code&#34;&gt;dict&lt;/code&gt; with keys as small caves and values of how many times we&#39;ve been there. Then, we&#39;ll change the criteria for whether we can visit a small cave next to include the possibility of visited a small cave twice if we&#39;ve yet to visit any small cave twice.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day12/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Route&lt;/span&gt;():
    pathSoFar: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;
    currentCave: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    smallCavesVisited: &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#[&amp;#39;a&amp;#39;, numberOfTimesVisited]. This is the key change&lt;/span&gt;

startingPaths &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [path &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; path] 
routesInProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; startingPaths:
    route &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;copy()
    s &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;copy()
    s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;)
    current &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; s[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; s[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; s[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lower(): smalls &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(s[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]):&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;}
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: smalls &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;}
    routesInProgress&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Route(pathSoFar&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(route), smallCavesVisited &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; smalls, currentCave &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; current))

completeRoutes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(routesInProgress) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;):
    nextRoutes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; routesInProgress:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;currentCave &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;:
            completeRoutes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(r)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            nextPaths &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [path &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;currentCave &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; path &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; path]
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; nextPaths:
                nextCave &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [item &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; p &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; item &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;currentCave][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]

                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited[nextCave] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;([(v &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;values()])):
                    newPath &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathSoFar &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; nextCave 
                    newSmallCaves &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;copy()
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; nextCave&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lower():
                        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited:
                            newSmallCaves[nextCave] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
                        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                            newSmallCaves[nextCave] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
                    nextRoutes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Route(pathSoFar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newPath, smallCavesVisited &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newSmallCaves, currentCave &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; nextCave))

    routesInProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; nextRoutes

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Total routes: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(completeRoutes)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day13&#34;&gt;Day 13 - Transparent Origami &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A surprisingly easy challenge for day 13, I thought. Basically, for a list of points, which have (x or y as appropriate) coodinates greater than a given number, then reflect that point over a given line. So we do a little data parsing, and we use Python &lt;code class=&#34;code&#34;&gt;sets&lt;/code&gt; to eliminate duplicates.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day13/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

points &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)])

foldPattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;fold along (.)=(\d+)&amp;#39;&lt;/span&gt;
folds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(foldPattern, line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(foldPattern, line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;))) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;executeFold&lt;/span&gt;(points, f):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; f[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; doXFold(points, f)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; f[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; doYFold(points, f)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Expected fold in x or y, got fold &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;f&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doXFold&lt;/span&gt;(points, f):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([p &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; f[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; (f[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; (p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; points])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doYFold&lt;/span&gt;(points, f):
    retSet &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; points:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; f[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]: retSet&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(p)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: retSet&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add((p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], f[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; (p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; retSet

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printPoints&lt;/span&gt;(points):
    maxX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;([p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; points])
    maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;([p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; points])
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(maxY&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(maxX&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (x, y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; points: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(executeFold(points, folds[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;And, since the first part sets up the general mechanics of the problem, all we need to do for part 2 is execute all the folds, then print out the formatted output.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For brevity, here&#39;s the only change required for part 2:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day13/Part2.py &lt;span class=&#34;italic&#34;&gt;(Partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; folds:
        points &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; executeFold(points, f)
    printPoints(points)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day14&#34;&gt;Day 14 - Extended Polymerization &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There were lots of jokes on  &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;/r/adventofcode&lt;/a&gt; today about this being a return to the lanternfish we saw on &lt;a href=&#34;#day6&#34;&gt;day 6&lt;/a&gt;. Indeed, it has a similar flavor, with an expotentially-increasing processing space that you can brute-force your way through in part 1, if you want, but that will hose you for part 2.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The brute-forcing is easy though! For each pair of letters in the current step, we add a new letter in between them based on the rules given in our input. This means our list of letters doubles in length every step, but at only 10 steps, we should be fine, right?&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Counter

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

template &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
rules &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;):
    r &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;(..) -&amp;gt; (.)&amp;#39;&lt;/span&gt;, line)
    rules[r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doStep&lt;/span&gt;(template):
    additions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(template)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(template[:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])):
        letterPair &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; template[i:i&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; letterPair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; rules: additions[i] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rules[letterPair]
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([val &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(template, additions) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; val &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pair] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [template[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;):
    template &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; doStep(template)

counts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Counter(template)
lCount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(counts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;items(), key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x: x[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])

minimum, maximum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lCount[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], lCount[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Result is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;maximum &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; minimum&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;...oh, now it&#39;s 40 steps. Dang.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, just like with those dang lanternfish, we don&#39;t actually have the store the whole list of letters between each round. The key observation is that each pair of letters geneates a unique pair of pairs of letters for the next step. E.g., for the example input, the pair &lt;code class=&#34;code&#34;&gt;NN&lt;/code&gt; combined with the rule  &lt;code class=&#34;code&#34;&gt;NN -&gt; C&lt;/code&gt; means that if there is a one pair NN at the beginning of a step, there will be one &lt;code class=&#34;code&#34;&gt;NC&lt;/code&gt; and one &lt;code class=&#34;code&#34;&gt;CN&lt;/code&gt; after that step. Or at least, one of each contributed by the &lt;code class=&#34;code&#34;&gt;NN&lt;/code&gt;, as there could be more &lt;code class=&#34;code&#34;&gt;CN&lt;/code&gt;&#39;s and &lt;code class=&#34;code&#34;&gt;NC&lt;/code&gt;&#39;s generated by other rules.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But, we can store the possible letter combinations in a dictionary which tracks their count, and then apply these rules at each step to get our answer. We do have to be a little clever about counting up letters at the end - if we total up the counts from each pair a given letter is in, we&#39;ll get double our answer... except for the first and last characters of our string, which will be counted exactly 1 less time. Thankfully, the first and laster letters never change under any rule, so we can note those right at the beginning of our code and account for them later.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

firstLetter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
lastLetter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]

template &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        letterPair &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][i:i&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]
        template[letterPair] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (template[letterPair] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; letterPair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; template &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

rules &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;):
    r &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;(..) -&amp;gt; (.)&amp;#39;&lt;/span&gt;, line)
    rules[r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;), r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doStep&lt;/span&gt;(template):
    newTemplate &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pairOfLetters &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; template:
        nextPairOne &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rules[pairOfLetters][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        newTemplate[nextPairOne] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (newTemplate[nextPairOne] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; template[pairOfLetters]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextPairOne &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; newTemplate &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; template[pairOfLetters]

        nextPairTwo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rules[pairOfLetters][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
        newTemplate[nextPairTwo] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (newTemplate[nextPairTwo] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; template[pairOfLetters]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextPairTwo &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; newTemplate &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; template[pairOfLetters]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; newTemplate

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getLetterCounts&lt;/span&gt;(template):
    letterCounts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; template:
        letterCounts[pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (template[pair] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; letterCounts[pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; letterCounts &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; template[pair]
        letterCounts[pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (template[pair] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; letterCounts[pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; letterCounts &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; template[pair]
    letterCounts[firstLetter] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    letterCounts[lastLetter] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; {key: val&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; key, val &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; letterCounts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;items()}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;):
    template &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; doStep(template)

lCount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(getLetterCounts(template)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;items(), key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x: x[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])
minimum, maximum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lCount[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], lCount[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Result is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;maximum &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; minimum&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;

&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day15&#34;&gt;Day 15 - Chiton &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Dolor velit incididunt cillum incididunt sint amet reprehenderit commodo magna Lorem proident duis do.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#some code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Pariatur incididunt veniam tempor eiusmod sunt id labore occaecat nostrud fugiat.&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;At this point, I thought it might be useful to try to optimize my algorithm a little bit by tweaking my heuristic distance function.
&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#some code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;

&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day15&#34;&gt;Day 15 - Chiton &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A pathfinding day! We&#39;ll use a modified A* pathfinding algorithm to start this one, but where the H-value of each space (the heurtistic that&#39;s usually based on cartesian distance to the endpoint) is zero.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As part of the development and debugging process, I took the opportunity to explore some terminal-based display methods, using the curses library. (Well, on windows, the windows-curses port of the same). The map-utils file and the mapDisplay class allow for single-stepping the map pathfinding while exploring the value at each space.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day15/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;97
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Any
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;termcolor&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; colored, cprint
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;maputils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; mapDisplay
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;astarutils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; calc_h_cost

showMaps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

risk &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x, val &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        risk[(x, y)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(val)

maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)
maxX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;PointData&lt;/span&gt;():
    f_cost: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    parent: Any

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getNeighbors&lt;/span&gt;(point):
    nList &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; delta &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)]:
        testPoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (point[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;delta[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], point[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; delta[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; testPoint[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; maxX) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; testPoint[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; maxY): nList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(testPoint)
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nList

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printMap&lt;/span&gt;(openPoints, closedPoints, activePoint):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(maxY):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(maxX):
            val &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; risk[(x,y)]
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (x,y) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; activePoint: cprint(val, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;grey&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;on_green&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; closedPoints: cprint(val, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; openPoints: cprint(val, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:cprint(val, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;findPath&lt;/span&gt;(start, end):
    locationScores &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {start: PointData(f_cost &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)}
    openPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {start}
    closedPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    oldSelection &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; showMaps:
            m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mapDisplay(maxX, maxY, risk, locationScores&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;locationScores, openPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;openPoints, closedPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;closedPoints, oldSelection &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; oldSelection)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: exit()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: oldSelection &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;selection&amp;#39;&lt;/span&gt;]

        costList &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;([p &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; openPoints], key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; p:locationScores[p]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;f_cost)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(costList) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: lowestCostPoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; costList[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#???&lt;/span&gt;

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#printMap(openPoints, closedPoints, lowestCostPoint)&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Cheapest next point is {lowestCostPoint}:{locationScores[lowestCostPoint]}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; lowestCostPoint &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; end: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt; 

        closedPoints&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(lowestCostPoint)
        openPoints&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(lowestCostPoint)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; newPoint &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; getNeighbors(lowestCostPoint):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; newPoint &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; closedPoints:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Exploring neighbor {newPoint} of {lowestCostPoint}&amp;#34;)&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; newPoint &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; openPoints: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#  or (risk[newPoint] + cost(lowestCostPoint, closedPoints[lowestCostPoint])) &amp;lt; 100000000: #TODO or new path to neighbor is cheaper&lt;/span&gt;
                    newFCost &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; locationScores[lowestCostPoint]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;f_cost &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; calc_h_cost(newPoint, end) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; risk[newPoint]
                    locationScores[newPoint] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; PointData(f_cost&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;newFCost, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lowestCostPoint)
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; newPoint &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; openPoints:
                        openPoints&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(newPoint)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    scoringPoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lowestCostPoint
    totalRisk &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    pathPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [scoringPoint]
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;Calculating Path Score:&amp;#34;)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; locationScores[scoringPoint]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; showMaps:
            m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mapDisplay(maxX, maxY, risk, locationScores&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;locationScores, openPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;openPoints, closedPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;closedPoints, pathPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;pathPoints, oldSelection &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; oldSelection, pathLength&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;totalRisk)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: exit()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: oldSelection &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;selection&amp;#39;&lt;/span&gt;]

        totalRisk &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; risk[scoringPoint]
        scoringPoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; locationScores[scoringPoint]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
        pathPoints&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(scoringPoint)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#totalRisk -= risk[(0,0)]&lt;/span&gt;

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;totalRisk&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    findPath((&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;), (maxX&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, maxY&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;pt-8 code-title&#34;&gt;Day15/maputils.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;curses&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; sleep
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;astarutils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; calc_h_cost

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;mapDisplay&lt;/span&gt;():
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, maxX, maxY, risk, locationScores&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[], openPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[], closedPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[], pathPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [], oldSelection&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, pathLength &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;):
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; maxX
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; maxY
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;risk &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; risk
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;locationScores &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; locationScores
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;openPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; openPoints
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;closedPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; closedPoints
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; oldSelection
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pathPoints
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathLength &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pathLength
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;selection&amp;#39;&lt;/span&gt;: self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; end &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (maxX&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, maxY&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; end

    screen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;initscr()
    screen&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;keypad(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)

    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start_color()
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#color pair 0 is white on black standard&lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_GREEN, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#1 - open points&lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_RED, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#2 - closed points&lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_YELLOW, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#3 - end point &lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_MAGENTA, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#4 -  final path&lt;/span&gt;

    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_WHITE) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#11 - open points highlighted&lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;11&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_GREEN) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#11 - open points highlighted&lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_RED) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#12 - closed points highlighted&lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;13&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_YELLOW) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#13 - end point &lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_MAGENTA) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#14 - final path&lt;/span&gt;


    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;map_pad &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;newpad(maxY&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,maxX&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;newpad(&lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Coords:&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;F_Cost:&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;G_Cost:&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;H_Cost:&amp;#34;&lt;/span&gt;)

    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instruction_pad &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;newpad(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instruction_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Arrow keys to move&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instruction_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Enter to advance&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instruction_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Esc to hard quit&amp;#34;&lt;/span&gt;)

    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;open_pad &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;newpad(&lt;span style=&#34;color:#f60&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;open_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Open Points&amp;#34;&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;A_UNDERLINE)
        
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;noecho()
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;redraw()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; screen&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getch()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Enter to continue&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;27&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Escape to quit&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#d&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;redraw()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;456&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#numpad down&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, maxY)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;redraw()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;450&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#numpad up&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;redraw()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;452&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#numpad left&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;redraw()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;454&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#numpad right&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, maxX)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;redraw()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;redraw&lt;/span&gt;(self): &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#pad, maxX, maxY, risk, locationScores=[], openPoints=[], closedPoints=[], selection=[0,0]):&lt;/span&gt;
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;updateMapPad()
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;update_info_pad()
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;update_instruction_pad()
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;update_open_pad()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;updateMapPad&lt;/span&gt;(self):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxX):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt; (self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxY):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; [x, y] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (x,y) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;13&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;openPoints: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;11&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;closedPoints: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (x,y) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints: color&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;openPoints: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;closedPoints: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
            
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;map_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addch(y, x, &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;risk[(x,y)]), color)

    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;map_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;LINES&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update_info_pad&lt;/span&gt;(self):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Coordinates&lt;/span&gt;
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;          &amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection))

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#F Cost&lt;/span&gt;
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;          &amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;locationScores:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;locationScores[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;f_cost) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;      &amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;locationScores[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;g_cost) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;      &amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unknown&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unknown&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#H Cost&lt;/span&gt;
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;         &amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(calc_h_cost(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection, self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end)))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; []:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Path Length:&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathLength))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Searching...&amp;#34;&lt;/span&gt;)

    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;80&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update_instruction_pad&lt;/span&gt;(self):
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instruction_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;60&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update_open_pad&lt;/span&gt;(self):
    pointList &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;openPoints[:&lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;openPoints), &lt;span style=&#34;color:#f60&#34;&gt;99&lt;/span&gt;)], key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x:self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;locationScores[x]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;f_cost)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(pointList):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;open_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(i&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;p&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; - &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;locationScores[p]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;f_cost&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;open_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;70&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, the algorithm from part 1 is efficient enough to be used in the larger data size in part 2. For brevity, here&#39;s just the input-generating lines of part 2; the algorithm is the same.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day15/Part2.py &lt;span class=&#34;italic&#34;&gt;(partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

originalRisk &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x, val &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        originalRisk[(x, y)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(val)

original_maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)
original_maxX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])

risk &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x_copy &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y_copy &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(original_maxX):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(original_maxY):
                risk[(x_copy&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;original_maxX &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; i, y_copy&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;original_maxY &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; j)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (originalRisk[(i,j)] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; x_copy &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; y_copy &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; original_maxY &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;
maxX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; original_maxX &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;
totalPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; maxY &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; maxY&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;

&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day17&#34;&gt;Day 17 - Trick Shot&lt;/h2&gt; --&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Part one of today&#39;s challenge can be solved by logical deduction with a minimum of coding. With the movement described, a probe moving upward will always pass though y=0 on its way back down; the fastest speed it can reach at this point is when its next step &lt;span class=&#34;italic&#34;&gt;just&lt;/span&gt; clips the bottom of the target area, ie. when its downward speed is equal to the lower y coordinate of our input. Because the y speed increases downward by 1 unit per timestep, the highest point on its trajectory is the sum of all speeds up to and including this one. That is, our solution will be the sum of all numbers up to and including our lower-y bound.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I solved this one using the Python REPL as a calculator using &lt;code class=&#34;code&#34;&gt;sum(range(maxY))&lt;/code&gt;, but as an actual script it might look like:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day17/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()

maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;y=(-?\d+)&amp;#39;&lt;/span&gt;, data)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(maxY))))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There might be a similarly clever way to reason about part 2, but I elected to just find the solutions by iterating over the (fairly reasonable) possibilities for the starting velocity. I got a little fancy with a dataclass and NamedTuple for the current location and target area, but that&#39;s not strictly necessary.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day17/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()

reg &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x=(\d+)\.\.(\d+), y=(-?\d+)\.\.(-?\d+)&amp;#39;&lt;/span&gt;, data)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;region&lt;/span&gt;(NamedTuple):
    minX: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    maxX: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    minY: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    maxY: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;pointIn&lt;/span&gt;(self, x, y):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minX &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxX) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; (self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minY &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; y &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxY)

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;point&lt;/span&gt;():
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; region(minX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)), maxX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)), minY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)), maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)))
&lt;span style=&#34;color:#366&#34;&gt;input&lt;/span&gt;(target)

validInitialVelocities &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Highest Y initial speed is abs(maxY) as in part 1&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Lowest Y initial speed is minY&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Highest X initial speed is abs(maxX) (or we&amp;#39;ll definitely overshoot)&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Lowest X initial speed is 1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; initialSpeed_X &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxX&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; initialSpeed_Y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minY, &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minY)):
        currentXSpeed &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; initialSpeed_X
        currentYSpeed &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; initialSpeed_Y
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Examining intial speed {(initialSpeed_X, initialSpeed_Y)}&amp;#34;)&lt;/span&gt;
        loc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; point(x&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; (loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minY &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxX&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pointIn(loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y):
                validInitialVelocities&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add((initialSpeed_X, initialSpeed_Y))
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Found valid velocity {(initialSpeed_X, initialSpeed_Y)}&amp;#34;)&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
            loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; currentXSpeed
            loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; currentYSpeed
            currentXSpeed &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(currentXSpeed &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
            currentYSpeed &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(validInitialVelocities)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt; --&gt;

&lt;!-- &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;dayxxx&#34;&gt;Day xxx - xxx &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Dolor velit incididunt cillum incididunt sint amet reprehenderit commodo magna Lorem proident duis do.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#some code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Pariatur incididunt veniam tempor eiusmod sunt id labore occaecat nostrud fugiat.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#some code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt; --&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Dockerfiles</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-dockerfiles/</link>
      <pubDate>Mon, 29 Nov 2021 12:36:07 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-dockerfiles/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I&#39;m setting out to rectify a pretty silly part of my workflow. Namely, when I want to push new content to the site that I&#39;ve built with hugo, I:&lt;/p&gt;
&lt;ol class=&#34;post-ol&#34;&gt;
    &lt;li&gt;Clean my current hugo build locally (removing /public, /resources/ and /dist). Slightly unnecessary, but has cleared some issues in the past.&lt;/li&gt;
    &lt;li&gt;Rebuild all files using &lt;code class=&#34;code&#34;&gt;npx hugo&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Add all files to git using &lt;code class=&#34;code&#34;&gt;git add -A&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Commit the new files using &lt;code class=&#34;code&#34;&gt;git commit -m &#34;Commit Message Here&#34;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&#34;post-p&#34;&gt;This pushes the new files to github, which triggers a github action to upload the files in the ./public folder to s3.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There must be a better way.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And I&#39;m confident there is - I&#39;d love to use some like &lt;a href=&#34;https://github.com/JeffersGlass/hugo-build-action&#34;&gt;Jake Jarvis&#39; Hugo Build Action&lt;/a&gt; to automatically rebuild the site whenever new code is pushed to Github or merged into the main branch. The issue is, the Docker image that Jarvis has used doesn&#39;t happen to include tailwind as part of its build. So, I think the way forward is for me to learn enough about docker and dockerfiles to add Tailwind to a fork of Jarvis&#39; action, and use that to build my site.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The dockerfile for this action is remarkably short:&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# https://github.com/jakejarvis/hugo-docker&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; ghcr.io/jakejarvis/hugo-extended:0.89.4&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;hugo&amp;#34;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;From what I understand, this is using a pre-built docker image stored online (via Github?) to improve the speed of this action. That seems like quite a deep rabbit hole to go down, though an interesting one, but let&#39;s see if there&#39;s a faster way.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One thing that occurs to me is to see if anyone else has forked this repo, to make their own changes in the way I&#39;m interesed in. And indeed, I&#39;m the 10th person to fork this action, and several of them are X commits &lt;span class=&#34;italic&#34;&gt;ahead&lt;/span&gt; of the original (as well as being several behind), meaning they&#39;ve made some tweaks and changes. Let&#39;s look at &lt;a href=&#34;https://github.com/willbicks/hugo-build-action/commit/96b801e40324dc378775d648a2d202ea244837ce&#34;&gt;one of these commits from willbicks&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;ruby \
&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;{&lt;span style=&#34;color:#fc3&#34;&gt;HUGO_EXTENDED&lt;/span&gt;:&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;libc6&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;compat libstdc&lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;} &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
update&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;ca&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;certificates &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; npm install &lt;span style=&#34;color:#555&#34;&gt;--&lt;/span&gt;global postcss&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;cli autoprefixer @babel&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;core @babel&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;cli &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; npm install &lt;span style=&#34;color:#555&#34;&gt;--&lt;/span&gt;global postcss postcss&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;cli autoprefixer @babel&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;core @babel&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;cli &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
&lt;/span&gt;pip3 install &lt;span style=&#34;color:#555&#34;&gt;--&lt;/span&gt;upgrade &lt;span style=&#34;color:#360&#34;&gt;Pygments&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;* &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
gem install asciidoctor &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
wget &lt;span style=&#34;color:#fc3&#34;&gt;https&lt;/span&gt;:&lt;span style=&#34;color:#3aa&#34;&gt;//&lt;/span&gt;github&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;gohugoio&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;hugo&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;releases&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;download&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;v&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;{&lt;span style=&#34;color:#360&#34;&gt;HUGO_VERSION&lt;/span&gt;}&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;hugo_&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;{&lt;span style=&#34;color:#fc3&#34;&gt;HUGO_EXTENDED&lt;/span&gt;:&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;extended_}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;$&lt;/span&gt;{&lt;span style=&#34;color:#360&#34;&gt;HUGO_VERSION&lt;/span&gt;}_Linux&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;64&lt;/span&gt;bit&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;gz &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Hang on, that&#39;s alredy way longer than the Dockerfile in my fork! But it also looks like something I could actually modify...ah, it looks like back in &lt;a href=&#34;https://github.com/JeffersGlass/hugo-build-action/commit/0aeee3828f8f0d61ab36cfc57f8a30190c70a57b&#34;&gt;commit #0aeee38&lt;/a&gt;, Jarvis switched from using a fully-written-out dockerfile to a version which is hosted as one of these prebuilt images. Let&#39;s see if we can put that old, fully-written-out docker file into use with the most recent version of hugo.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll start by copy-pasting the last longhand version of the Dockerfile that Jarvis wrote. Then I&#39;ll update the Hugo version to 0.89.4 (the latest at time of writing), and add &#34;tailwindcss&#34; to the npm command the Dockerfile runs. Finally, I&#39;ll change the action.yml file to point to the local Dockerfile, instead of the prebuilt image. Finally, I&#39;ll commit all the changes to git and push them back upstream to Github.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll create a new workflow for this instead of blowing away my old one (that just manually published a folder to s3), called hugoBuildAndUpload.yml. I&#39;ll also disable the previous action on Github, so it doesn&#39;t try to run when the new action uploads. Having saved that new yaml file, I&#39;ll push it to Github and see what happens...&lt;/p&gt;
&lt;img src=&#34;noTailwind.PNG&#34; alt=&#34;An error message saying Docker cannot find tailwindcss&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Drat, not quite. Hugo seems to be running, but it still can&#39;t find tailwind, even though it should be installed via NPM now... perhaps my install order is wrong? By adding &lt;code class=&#34;code&#34;&gt;require(&#39;tailwindcss/nesting&#39;)&lt;/code&gt; to my postcss requirements and re-pushing, I can see that Hugo/postcss are indeed attempting to build the site, but aren&#39;t able to find the required tailwind dependencies. This time the error is: &lt;code class=&#34;code&#34;&gt;Error: Error building site: POSTCSS: failed to transform &#34;css/style.css&#34; (text/css): Error: Cannot find module &#39;tailwindcss/nesting&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s see if tailwind isn&#39;t installing successfully, or if postcss can&#39;t find it for some reason. I&#39;ll add a line to the Dockerfile which should just run the -help command for tailwind on the command line, and error out if it breaks:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;RUN&lt;/span&gt; hugo version &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;hugo env &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;postcss --version &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;tailwindcss -h &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;autoprefixer --version &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;babel --version &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;pygmentize -V &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;asciidoctor --version&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And indeed, in the action&#39;s output I can see the full help info from tailwindcss. A bit verbose perhaps, but I can at least see that tailwind is being installed successfully via npm&lt;/p&gt;
&lt;img src=&#34;tailwind-h.PNG&#34; alt=&#34;A console log showing TailwiindCSS&#39;s help output on Github Actions&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;On a whim, and after some internet cruising, I ran across &lt;a href=&#34;https://discourse.gohugo.io/t/postcss-error-cannot-find-module-tailwindcss/34581/4&#34;&gt;a post on the Hugo forums&lt;/a&gt; where a user was similarly having issues with Hugo not recognizing that tailwind was installed. The user had identified that the NODE_PATH was being set to a Yarn installation folder, and that changing it to an NPM path solved the issue. While that was related to a local build, I wondered if perhaps the Dockerfile installing yarn was screwing up my pathing? Unfortunately, removing the yarn install didn&#39;t fix the issue. There were &lt;a href=&#34;https://github.com/dirkolbrich/hugo-theme-tailwindcss-starter/issues/5&#34;&gt;some references from a couple years ago&lt;/a&gt; to similar services having issues with node modules when installed globally, but removing the &lt;code class=&#34;code&#34;&gt;--global&lt;/code&gt; flag from the npm install step didn&#39;t fix anything&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Some other things that didn&#39;t work:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Trying to install via &lt;code class=&#34;code&#34;&gt;npm install package.json&lt;/code&gt; with various versions of &lt;code class=&#34;code&#34;&gt;--save&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;--save-dev&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;--global&lt;/code&gt; etc&lt;/li&gt;
    &lt;li&gt;Trying to install by specifying packages, and using &lt;code class=&#34;code&#34;&gt;--dev&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;--save-dev&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Moving the tailwindcss install to after the postcss install in the RUN npm install line of the docker file&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems I will indeed need to dive deeper into docker to understand what&#39;s going on. I&#39;ll install &lt;a href=&#34;https://docs.docker.com/desktop/windows/install/&#34;&gt;Docker Desktop for Windows&lt;/a&gt; and see about loading up this Dockerfile. I&#39;m hoping it&#39;s something small, like a path being off or a module being in one folder and not another, but we shall see...&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Docker&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The install process was painless, just download and run an exe. It wanted me to walk through a tutorial, but there will be plenty of time to learn how to craft my own image from scratch later - right now I really want to know how to run a preexsiting dockerfile. Thankfully, &lt;a href=&#34;https://developer.toradex.com/getting-started/module-3-creating-my-own-container/writing-your-first-dockerfile-windows&#34;&gt;a post from Toradex&lt;/a&gt; pointed me the right direction - just using &lt;code class=&#34;code&#34;&gt;docker build .&lt;/code&gt; in the directory where a dockerfile is is sufficient to build it for use. I&#39;ll revert the npm installation text back to what it was for now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Using &lt;code class=&#34;code&#34;&gt;Get-Content Dockerfile | docker build - -t hugodebug&lt;/code&gt; we can use a local Dockerfile for &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/&#34;&gt;building a new image&lt;/a&gt; with the kernel specified in our Dockerfile, with the name hugodebug. Where exactly this image goes I&#39;m not sure, but Docker Desktop sure spots it and lets me open it up. I&#39;ll give it a name &lt;span class=&#34;line-through&#34;&gt;and access to ports 80:80 as well.&lt;/span&gt; (&lt;span class=&#34;italic&#34;&gt;Turns out, opening a port was both unneccesary and caused Docker to throw up. So scratch that.&lt;/span&gt;)&lt;/p&gt;
&lt;img src=&#34;dockerstart.PNG&#34; alt=&#34;The open-image window of Docker Desktop&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;It does seem that the container is happy to open in docker desktop, once I eliminated the port mapping (which was unnecessary) but it&#39;s closing right away. Which makes some sense - the &#34;entrypoint&#34; (which I gather is the singular command to run) is &lt;code class=&#34;code&#34;&gt;hugo&lt;/code&gt;, which terminates. I&#39;ll change that to &lt;code class=&#34;code&#34;&gt;sh&lt;/code&gt; to drop into a shell, which keeps the container running.&lt;/p&gt;
&lt;img src=&#34;imageShell.PNG&#34; alt=&#34;The shell of a container image running, with ls commands showing&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Alright, we&#39;re in! And I can test commands against this command line to see what did and didn&#39;t install correctly. Come to think of it, in theory I could deploy this as its own image online... but one step at a time. Let&#39;s figure out how to get our website source in here.&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;Curiously, I happened to switch to a differnt development machine at this point and... the container just would not stay running, with the same Dockerfile? Or rather, it will stay running when run from the docker desktop UI but not via Powershell. Which makes me think I&#39;m just running the wrong command. Hmmm.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I gather from &lt;a href=&#34;https://www.youtube.com/watch?v=gAkwW2tuIqE&#34;&gt;a video from Fireship.io&lt;/a&gt; that perhaps the thing to do is to put the Dockerfile right in my development environment, and mount the local source directly to it using the COPY command. So let&#39;s try that! According to the &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile Reference&lt;/a&gt;, we can use the copy directive, simply with &lt;code class=&#34;code&#34;&gt;copy . . &lt;/code&gt; to copy the files in the current directory to the image home directory. But since there are some files (like our local node_modules folder, the /public build folder, github workflows etc), we&#39;ll add them to a .dockerignore file.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And that&#39;s where I hit a bit of wall, since, &lt;a href=&#34;https://forums.docker.com/t/docker-desktop-wont-work-on-windows-10-home/103187/5&#34;&gt;according to a post on the Docker forums&lt;/a&gt;, Windows 10 Home is incapable of running docker desktop. A brief pause here while I switch back to the other machine...&lt;/p&gt;
&lt;img src=&#34;oneeternity.jpg&#34; alt=&#34;The &#39;one eternity later&#39; image from Spongebob Squarepants&#34; class=&#34;w-1/2 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Oh, the other machine is also Windows 10 home. Well dang. Perhaps this is a dead end.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But wait, there&#39;s &lt;a href=&#34;https://www.docker.com/blog/docker-desktop-for-windows-home-is-here/&#34;&gt;an official post from Docker&lt;/a&gt; in March of 2020 saying that Docker should for work Windows 10 home users above build 19040 (I&#39;m on 19042). So what the heck?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Gosh this post is going to be a mess. I&#39;ve just noticed that &lt;a href=&#34;https://github.com/jakejarvis/hugo-build-action/issues/4&#34;&gt;the one open issue on the original hugo-site-build action&lt;/a&gt; references pretty much exactly the issue I&#39;m having! In the words of moritzheiber:&lt;/p&gt;
&lt;p class=&#34;post-blockquote&#34;&gt;&lt;code class=&#34;code&#34;&gt;postcss&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;postcss-cli&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;autoprefixer&lt;/code&gt; are globally installed modules. Unfortunately, if the theme has a &#34;local&#34; &lt;code class=&#34;code&#34;&gt;postcss.config.js&lt;/code&gt; (e.g. like the docsy theme) npm fails to resolve the global module path and therefore thinks the autoprefixer module is missing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are further refernces to some &lt;a href=&#34;https://discourse.gohugo.io/t/hugo-pipes-postcss-how-to-use-global-autoprefixer/15699/11&#34;&gt;references&lt;/a&gt; and &lt;a href=&#34;https://github.com/regolith-linux/website/commit/8622ae384cc20f17c7de819663a829a8aaf13ade&#34;&gt;examples&lt;/a&gt;  listed in that issue as well&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Mobile Friendly Design</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-mobile-friendly-design/</link>
      <pubDate>Tue, 23 Nov 2021 04:36:07 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-mobile-friendly-design/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;The site&#39;s coming along well now! But there&#39;s just one small problem - specifically, how the site looks on mobile devices, or even just devices smaller than fullscreen. In short, bad.&lt;/p&gt;
&lt;img class=&#34;m-auto&#34; src=&#34;uglymobile.PNG&#34; alt=&#34;A mobile-representative view of the site - text overlapping other text, buttons colliding. It looks awful.&#34;&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;That design is just straight-up mobile antagonistic.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, Chrome&#39;s dev tools have a very handy device toolbar that forces the sites dimensions to be that of any of a number of common mobile devices, or allows the user to set a custom screen size. It also enables things like touch/click to scroll, to allow a dev to get the feeling of what the site will be like on a mobile touchscreen. I say &#34;get the feeling&#34; because nothing will quite mimick the actual feeling of holding the site on your hand and interacting with it at arms length; this is more of a tool to explore layouts than UI.&lt;/p&gt;
&lt;img src=&#34;devicetoolbar.PNG&#34; alt=&#34;A screenshot of Chrome&#39;s device-selector toolbar&#34; class=&#34;m-auto&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;So, let&#39;s see how tailwindcss can handle mobile-responsive designs. It seems that I&#39;ve actually being going at the framework somewhat backward from how tailwind thinks about attributes. Any css attributes that do not have a size selector (sm, md, lg, xl, or 2xl) apply to all sizes of page; any attributes that &lt;span class=&#34;italic&#34;&gt;do&lt;/span&gt; have a selector will apply on &lt;span class=&#34;italic&#34;&gt;that screen size and above.&lt;/span&gt; So, as I&#39;m going back and shoehorning mobile-friendliness into my site, I&#39;ll mostly be applying size selectors (probably lg or xl) to my existing css attributes, then adding new, un-size-tagged attributes that are mobile-appropriate.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s start on the homepage (index.html). Even at reasonable large monitor sizes, like those found on quite compact laptops or uses in a larger-resolution setting, we start to see issues created by fixed-width elements and non-responsible flexboxes.&lt;/p&gt;
&lt;img class=&#34;p-2 m-auto bg-gray-200 rounded-md&#34; src=&#34;768_issues.gif&#34; alt=&#34;A gif showing the site at 1024x768 resolution, where some page elements overlap poorly&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;So, let&#39;s figure out what we can do about this. I&#39;ll start by changing those blog-post cards from w-96 to w-auto, so they automatically shrink in size. That helps, but leaves us with an awkward issue where the text runs off the bottom of the card.&lt;/p&gt;
&lt;img class = &#34;p-2 m-auto bg-gray-200 rounded-md&#34; src=&#34;runoff.PNG&#34; alt=&#34;Some HTML &#39;cards&#39; representing blog posts - the text flows off the bottom of the cards&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Interstingly, the divs that contain this text already have the &#39;overflow-hidden&#39; property. If I delete that for the moment, the overflow only gets worse!&lt;/p&gt;
&lt;img class=&#34;p-2 m-auto bg-gray-200 rounded-md&#34; src=&#34;worseoverflow.PNG&#34; alt=&#34;Some HTML &#39;cards&#39; representing blog posts - the text flows off the bottom of the cards and completely overlaps the next section of the page&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Although, now I can see that Hugo is indeed putting the default number of words into each summary (75 I think?) and adding the &#34;read more&#34; link to the end of the next, as I&#39;d expect from my card code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex-grow w-auto&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;p-2 m-1 bg-gray-100 border-2 border-gray-300 rounded-3xl h-96 drop-shadow-xl&amp;#34;&lt;/span&gt;&amp;gt;
        {{ if isset .Params &amp;#34;static_slug&amp;#34; }}
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;staticslug&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ .Params.static_slug }}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;object-cover w-full border-2 border-gray-400 rounded-3xl h-36&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;a&lt;/span&gt;&amp;gt;
        {{ else if isset .Params &amp;#34;slug_image&amp;#34; }}
            {{ $img := (.Page.Resources.GetMatch .Params.slug_image) }}
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ $img.RelPermalink }}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;object-cover w-full border-2 border-gray-400 rounded-3xl h-36&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;a&lt;/span&gt;&amp;gt;
        {{ else }}
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/svg/notfound.svg&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;object-cover w-full border-2 border-gray-400 rounded-3xl h-36&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;a&lt;/span&gt;&amp;gt;
        {{ end }}
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-center&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-2xl&amp;#34;&lt;/span&gt;&amp;gt;{{ .Title }}&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h1&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;italic text-center&amp;#34;&lt;/span&gt;&amp;gt;Posted: &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ .Date.Format &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;2006-01-02T15:04:05&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&amp;#34;&lt;/span&gt;&amp;gt;{{ .Date | time.Format &amp;#34;:date_long&amp;#34; }}&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;time&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;h-24 col-span-2 text-justify&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;                {{ if .Slug}}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;                    {{ .Slug }}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;                {{ else }}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;                    {{ .Summary }}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;                    {{ if .Truncated }}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;                        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&amp;gt;Read more...&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;                    {{ end }}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;                {{ end }}
&lt;/span&gt;        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;article&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;I&#39;ve also starting integrating Hugo&#39;s builtin code-highlighting functionality to show blocks of code like this one! The process is getting a bit meta now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One thing I&#39;m noticing is that I have a number of elements with fixed heights in these blog-post cards - the card itself is h-96, and the images are all h-36 - but the &amp;lt;a&amp;gt; tag title, the &amp;lt;p&amp;gt; tag for the posting date, and the actual summary text are variable in size. And for some reason, aren&#39;t being constrained to wihin the div that surrounds the whole thing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Changing the summaryLength variable in the general Hugo config (config.toml, in my case) does change the number of words included. It seems to really want to split on a punctuation mark though.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It was at this point that I decided on a change of tactics. I already have the option in the snippet above to include a custom &#39;slug&#39; of text for each post, which will always be the priority for each summary. If that&#39;s not there, I want to default to the auto-generated summary of each post.... but is that really the right behavior on the homepage? Perhaps simply the title, post date, and a list of associated tags is more correct? I&#39;ll borrow from code from how tags are displayed on posts themselves (in layout/post/single.html) to try that out.&lt;/p&gt;
&lt;img class=&#34;p-2 m-auto bg-gray-200 rounded-md&#34; src=&#34;withtags.PNG&#34; alt=&#34;Cards for the blog posts, with no summary, just tags&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;I think this is better, but not great? Especially since I think if I add too many tags it&#39;ll overflow again...&lt;/p&gt;
&lt;img class=&#34;p-2 m-auto bg-gray-200 rounded-md&#34; src=&#34;overflowtag.PNG&#34; alt=&#34;&#34;&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Yes, yes it does overflow.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Perhaps I need a slightly less brute-force approach. Let&#39;s see how somewhere like &lt;a href=&#34;https://tailblocks.cc&#34;&gt;Tailblocks.cc&lt;/a&gt; does it. It seems they have a &#39;flex-flex&#39; wrap&#39; dive, with simple divs underneath it that are md:w-1/3 with no width qualifiers at smaller sizes?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After mucking around with some margin and padding settings, this setup does seem to essentially work. There are (currently 5) blog cards side-by-side on the main page whne the screen is above a certain size; below that, they snap to being one above the other.&lt;/p&gt;
&lt;img src=&#34;cardstacking.gif&#34; alt=&#34;A window changing sizes, showing how html &#39;cards&#39; stack one above the other&#34; class=&#34;p-2 m-auto bg-gray-200 rounded-md&#34;&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Remembering to add &#39;w-auto&#39; in all the right places fiex that one &#34;refactoring&#34; blog post card that&#39;s too small.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We can do the same thing to the project cards as well. There&#39;s still some minor formatting errors, but so far this is basically working. And since the list pages are all flexbox based, they look not-too-shabby when the screen width gets smaller.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Mobile Menu&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The navbar, as designed, isn&#39;t particularly mobile-friendly. It isn&#39;t even small-monitor friendly. But we can use some basic css and Javascript to fix that. Using a combination of tailwinds&#39; responsive tags, and some Javascript to show and high menu&#39;s on various clicks, we can implement three different versions of the navbar for large, medium, and smaller screens.&lt;/p&gt;
&lt;img src=&#34;navbarsizing.gif&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;


</description>
      &lt;
    </item>
    
    <item>
      <title>Porting Wordpress Blogs to Hugo</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-porting-wordpress-blogs-to-hugo/</link>
      <pubDate>Mon, 22 Nov 2021 18:36:07 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-porting-wordpress-blogs-to-hugo/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;As the site gains more and more content, it seems like it&#39;s only a matter of time before I port my previous blog(s) over to the Hugo framework that I&#39;m enjoying so much. This would include at least the current Wordpress blog hosted at Jeff.Glass, as well as potentially importing old posts from my ham radio blog, kk9jef.wordpress.com.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The Hugo documentation has &lt;a href=&#34;https://gohugo.io/tools/migrations/&#34;&gt;some information on exporting from Wordpress to Hugo&lt;/a&gt;. The first listed option, wordpress-to-hugo-exporter, didn&#39;t work well - it returned an error code 500 timeout after about 5 minutes of trying to export. And the second option, exitwp-for-hugo wasn&#39;t working, since it relies on Python 2 and some of its dependencies (notably) html2text no longer support Python 2. So I&#39;m pursuing an alternative, using the Wordpress-to-Jekyll exporter and converting to Hugo from there... but that too is 500-erroring. So... let&#39;s do this the hard way and parse the XML file?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Using python and the elementTree library, this isn&#39;t too bad? It think the most painful part will be porting the images over, since those will have to move from the Wordpress media library to Hugo&#39;s page bundles... but the actual parsing of the XML isn&#39;t too bad. Here&#39;s the script I hacked together, which finds all the post-objects in XML, pulls out their title and content and draft status and tags, and exports them with some basic frontmatter:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/8b02a6fab79d4418f101fd973e21bd5c.js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;Let me be clear, this is a pretty hacky thing. But thankfully, this is just a timesaver to do some pre-processing that I should only have to do once. So if it&#39;s a bit of a hack and it works.... it works. It also separates the posts previously marked as &#34;draft&#34; into their own folder, while marking all posts as &#34;draft: true&#34; for the purposes of Hugo, so that I can vet each post before I mark it to go live, while preserving the old, draft, never-published posts. (Which at the time of writing includes these very words.) I also realized I could make my life easier my only exporting the actually live posts instead of all the content in a single XML file.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I later modified this script to add some tags by default to paragraph, image, and list elements, then styled those tags using tailwind to create some basic formatting. I used BeautifulSoup4 to grab the appropriate tags and modify/add to their classes. The full script is below:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/c9e89c313081b88574ebb759d7e3e72e.js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;Once this was done, and some minor title-formatting was adjusted (removing extraneous punctuation and other things that might cause URL issues), I imported all of the post folders into my content/post folder. And voila, a blog is born.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-4040 post-img&#34; height=&#34;689&#34; src=&#34;firstpos.png&#34; width=&#34;739&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Not a very pretty blog yet, mind, but I don&#39;t think there&#39;s a way around doing much of the correction by hand.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I did use some VS-code search-and-replace-with-regexes to adjust how captions were being handled. In particular, I used:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;search: &lt;code class=&#34;code&#34;&gt;&amp;lt;figcaption&amp;gt;(.*)&amp;lt;\/figcaption&amp;gt;&amp;lt;\/figure&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;replace with: &lt;code class=&#34;code&#34;&gt;&amp;lt;/figure&amp;gt;&amp;lt;p class=&#34;post-img-caption&#34;&amp;gt;$1&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To move the image caption into a new paragraph outside of the figure, and then used CSS to center/style it.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Similarly, I used some regex to move the contents of another style of captions into their own paragraph.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code class=&#34;code&#34;&gt;search: \/&amp;gt;(.*?\[\/caption\])&amp;lt;\/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;replace with:&lt;code class=&#34;code&#34;&gt; &amp;lt;\/p&amp;gt;&amp;lt;p class=&#34;post-img-caption&#34;&amp;gt;$1&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also learned some new useful keyboard shortcuts in VS Code. Namely, Cntl-K Cntl-F to auto-format a section of text, which helps break up spacing and tabbing on nested tables/divs.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Overall, the process of converting my 42 existing blog posts to Hugo formatting took roughly 2 hours of manual processing - adjusting tags, changing image format and list layout, using shortcodes for video links, and so on. This first pass does &lt;em&gt;not&lt;/em&gt; include the process of moving all the images over from Wordpress to Hugo... which I did as a separate process. The script for is as follows:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/c08a5784abb0de6e67fdf61028ab4a78.js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;Again, not necessarily a script anyone else would want to use vertbatim, just something I hacked together in half an hour that got the job done.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;At this point, it seemed silly to continue editing my drafts of these very posts in wordpress, so I endevoured to port them over to Hugo as well. This essentially involved repeating the process above, but with a selected set of the draft posts instead of the published blog posts.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In fact, as of &lt;span class=&#34;italic&#34;&gt;these very words&lt;/span&gt;, I&#39;m currently writing my blog posts directly into static files for generation via Hugo! So long, Wordpress! I&#39;ll just redirect the previous external link on my header.html partial to point to my list of blog posts, and voila. It&#39;s gone.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Removing the Default Theme</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-removing-the-default-theme/</link>
      <pubDate>Thu, 18 Nov 2021 15:28:54 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-removing-the-default-theme/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;At this point, I feel I have the theming and functionality of hugo pretty well in hand. So I&#39;ll delete the &#34;Blank&#34; theme that I started with, remove references to it from Config.toml and .gitmodules, and see what breaks. Looks like it&#39;s just the &#34;pagination&#34; partial, which I&#39;m using to drive the list page layouts. I&#39;ll just copy the pagination.html partial back in from the blank theme and... we&#39;re now theme-free! It&#39;s all natural jeffcode at this point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll also add a favicon to the site to it shows up nicely in the user&#39;s browser tabs. Tutsplus has a nice &lt;a href=&#34;https://www.creativebloq.com/illustrator/create-perfect-favicon-12112760&#34;&gt;tutorial on creating favicons in Affinity Designer&lt;/a&gt;; combined with &lt;a href=&#34;https://favicon.io/favicon-converter/&#34;&gt;facivon.io&lt;/a&gt;, the process of creating a basic favicon was very quick. Then adding a quick&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;lang-html s-code-block post-paragrpah&#34;&gt;&lt;code class=&#34;hljs language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;rel&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;icon&#34;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;href&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;/favicon.ico?v=2&#34;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;to the baseof.html template forces the cached favicon to be refreshed on page load.&lt;/p&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Page Bundles and Image Processing</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-page-bundles-and-image-processing/</link>
      <pubDate>Fri, 05 Nov 2021 16:16:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-page-bundles-and-image-processing/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As I figure out my workflow for creating pages, especially the &#34;One Offs&#34;, I want to keep things as simple and straightforward as can be for adding new content. The intention of the One Offs is a place to memorialize small, interesting things - things that shouldn&#39;t disappear into twitter, but aren&#39;t a full project writeup. To that end, I&#39;d like to have some standard formatting for all of their individual pages that makes it simple to add a new piece of content. So let&#39;s work on the /layouts/small/single.html layout.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It turns out that there is no style being applied to external links currently, which is something I imagine I might want. So I&#39;ll add a css rule for &amp;lt;a&amp;gt; tags... and then add an ID to the label &#34;Jeff Glass&#34; in the header so it doesn&#39;t also get styled, and use a:not(#header-name) to prevent it from getting snagged by this new rule.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To make things a little easier at this point, I&#39;ll add the postcss-nesting module following &lt;a href=&#34;https://tailwindcss.com/docs/using-with-preprocessors&#34;&gt;the steps in the Tailwind docs&lt;/a&gt;. This did require refactoring my postcss.config.js file to use a list of require() statements instead of a map, as illustrated &lt;a href=&#34;https://tailwindcss.com/docs/using-with-preprocessors&#34;&gt;in the Tailwind Docs&lt;/a&gt;:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;/* Old version&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;module.exports = {&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;  plugins: {&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    tailwindcss: {},&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    autoprefixer: {},&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;  },&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;}*/&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;//New, working version&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;module.exports = {&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;  plugins: [&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    require(&#39;tailwindcss/nesting&#39;),&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    require(&#39;tailwindcss&#39;),&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    require(&#39;autoprefixer&#39;),&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;  ]&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m also borrowing &lt;a href=&#34;https://davidwalsh.name/external-links-css&#34;&gt;a bit of code from David Walsh&lt;/a&gt; to automatically style external links with the &#34;external link&#34; symbol... well, I would have except it seems embedded html inside markdown files is a bit cumbersome in Hugo. It seems its markdown renderer, Goldmark, only allows directly adding HTML attributes to &lt;em&gt;header&lt;/em&gt; tags via markdown. Thankfully, Ana Ulin came to the rescue with their &lt;a href=&#34;https://anaulin.org/blog/hugo-raw-html-shortcode/&#34;&gt;Raw HTML Shortcode&lt;/a&gt;.... Or rather, that was the plan, but the ::after selector is fiddly in some way I can&#39;t understand yet. So for now I&#39;m just a css class called &#34;no-style-link&#34; to exclude links I don&#39;t want to be formatted using the :not() operator. I&#39;m moving on.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(Some resources for when I come back to this: &lt;a href=&#34;https://stackoverflow.com/questions/45691117/how-can-i-add-a-svg-as-content-on-before-pseudo-element-of-an-element&#34;&gt;Stack Overflow&lt;/a&gt;, &lt;a href=&#34;https://www.geeksforgeeks.org/how-to-use-svg-with-before-or-after-pseudo-element/&#34;&gt;Geeks for Geeks&lt;/a&gt;, &lt;a href=&#34;https://css-tricks.com/gotchas-on-getting-svg-into-production/&#34;&gt;css-tricks&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems like the preferred way to keep image content near site content is through what Hugo calls &lt;a href=&#34;https://gohugo.io/content-management/page-bundles/&#34;&gt;Page Bundles&lt;/a&gt;, where a page is represented by &lt;a href=&#34;https://cloudcannon.com/community/learn/hugo-tutorial/page-bundles-and-shortcodes/#practical-work-creating-page-bundles-and-shortcodes&#34;&gt;a folder containing the content&lt;/a&gt; or &lt;a href=&#34;https://www.hackification.io/software-development/hugo/page-bundles/the-basics/&#34;&gt;a folder containing an _index.md file if the hierarchy is nested further&lt;/a&gt;. It looks like, if I just move my current &#34;small&#34; projects markdown files (Parks.md, meterclock.md) into folders with the same name and rename the files to &#34;index.md&#34;, all of the formatting and templating work I&#39;ve done so far is preserved. Well that&#39;s good at least.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-4018 post-img&#34; height=&#34;440&#34; src=&#34;page-bundles.png&#34; width=&#34;518&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, I&#39;ll chose a small project to work on. How about the Votive Fence Hooks project? I&#39;ll just drop a couple of pictures from my phone into the weddinghooks folder. And by using the following range commands, I can get all the images to appear nicely formatted on the page (&lt;a href=&#34;https://www.regisphilibert.com/blog/2018/01/hugo-page-resources-and-how-to-use-them/&#34;&gt;this write-up was very helpful&lt;/a&gt;):&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            &amp;lt;p&amp;gt;{{ .Content }}&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                {{ with .Page.Resources.ByType &#34;image&#34; }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                &amp;lt;div class=&#34;flex flex-wrap pt-4&#34;&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                    {{ range . }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                        &amp;lt;img src=&#34;{{ .RelPermalink }}&#34; class=&#34;flex my-4 mr-8 max-h-60&#34;&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                    {{ end }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                {{ end }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I then rebuilt and pushed my site to Github and... something I&#39;ve done has broken the formatting/sorting of the small cards on the frontpage, and the auto-generating of the tags. Basically all my work from the previous post. Which is frustrating, but my generation code is still there. So something I&#39;ve done recently has broken that functionality. I wonder if it was moving the content into Page Bundles?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Interestingly, the code still works when I serve locally with hugo... Oh, I must not have rebuilt with the -D flag on. That&#39;s better. Gotta remember that.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So now onto image display. Currently, I&#39;m loading the whole, large image to the end user, then using CSS to scale it down, when what I&#39;d like to do is have the image be rescaled at build-time and served at that size. It seems that, once again, Hugo Pipes are the answer, but sadly, there doesn&#39;t seem to be a way to intregrate pipes functionality with page bundling. There&#39;s a &lt;a href=&#34;https://hugo-mini-course.netlify.app/sections/optimizing/images/&#34;&gt;Hugo Mini-Course on image processing&lt;/a&gt; that seems the right track for that, but again, it specifies the images must be in the /assets folder.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Instead, let&#39;s look at &lt;a href=&#34;https://christianspecht.de/2020/08/10/creating-an-image-gallery-with-hugo-and-lightbox2/&#34;&gt;Christian Sprecht&#39;s post on integrating Lightbox with Hugo&lt;/a&gt;. And the lightbox documentation makes it seem like a simple-enough process. &lt;del&gt;&lt;em&gt;I&#39;ll start by installing lightbox via npm using npm install lightbox2 --save-dev. Then I&#39;ll add the requisite references to the lightbox.css and lightbox.js files inside of my baseof.html template, so it&#39;s present on every page.&lt;/em&gt;&lt;/del&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In actuality, it turns out to be easier to reference this CSS and JS from CDN&#39;s. Then, in my /layouts/small/single.html template, I&#39;ll transform the range code to the following:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre&gt;{{ if gt (len (.Page.Resources.ByType &#34;image&#34;)) 0 }}    &lt;br/&gt;    &amp;lt;h2 class=&#34;pt-6 text-xl&#34;&amp;gt;Images&amp;lt;/h2&amp;gt;&lt;br/&gt;    {{ with .Page.Resources.ByType &#34;image&#34; }}&lt;br/&gt;    &amp;lt;div class=&#34;flex flex-wrap pt-4&#34;&amp;gt;&lt;br/&gt;        {{ range . }}&lt;br/&gt;            &amp;lt;a href=&#34;{{ .RelPermalink }}&#34; data-lightbox=&#34;image-set&#34;&amp;gt;&amp;lt;img src=&#34;{{ .RelPermalink }}&#34; class=&#34;flex mb-4 mr-8 max-h-60&#34;&amp;gt;&amp;lt;/a&amp;gt;&lt;br/&gt;        {{ end }}&lt;br/&gt;    &amp;lt;/div&amp;gt;&lt;br/&gt;    {{ end }}&lt;br/&gt;{{ end}}&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This ensures that the h2 &#34;Images&#34; header only appears if there are actually images to display, and turns all the loaded images into Lightbox links. The links all get their data-lightbox attribute set to the same thing (in this case &#34;image-set&#34;, but it could be anything) so that the lightbox gallery that pops up is scrollable directly between pictures.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-4021 post-img&#34; height=&#34;597&#34; src=&#34;lightbox.gif&#34; width=&#34;600&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that wasn&#39;t too hard! Now any images that live inside a small-project folder will be automatically added to a lightbox. Neato!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;During some cleanup, I encounted an odd issue with how the slug images were appearing/being found on the main page. This Stack Overflow post cleared up &lt;a href=&#34;https://stackoverflow.com/questions/34247337/object-fit-not-affecting-images/34247563&#34;&gt;some things about how object-cover works&lt;/a&gt;, and I found some guidance on &lt;a href=&#34;https://www.markusantonwolf.com/blog/guide-for-different-ways-to-access-your-image-resources/&#34;&gt;how to reference images in the same folder as content&lt;/a&gt;. During this modification, I accidently screwed up the default summary.html template (I editted it instead of the summary.html template for the &#39;small&#39; taxonomy), but I found a &lt;a href=&#34;https://stackoverflow.com/questions/338436/how-can-i-view-an-old-version-of-a-file-with-git&#34;&gt;Stack Overflow post on using git to view past versions of files&lt;/a&gt;, which helped me find the previous syntax and restore things. Since I figured the issue was in a single line, I didn&#39;t do anything fancy like a &lt;a href=&#34;https://www.metaltoad.com/blog/beginners-guide-git-bisect-process-elimination&#34;&gt;git bisect&lt;/a&gt;, but that&#39;s a tool in the pocket for the future.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;aslkhad&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Javascript Beginnings</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-javascript-beginnings/</link>
      <pubDate>Thu, 04 Nov 2021 12:32:00 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-javascript-beginnings/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I&#39;ve written very little Javascript up to this point, but now I&#39;ve found a use case for some. The One-Off project cards I&#39;ve added to the homepage would be improved by a filtering system. Let&#39;s say by default the page shows the last 10 added One-Offs, but there are some buttons the user can flick to filter the cards by specific categories (tags?). Maybe Radio, Theatrical, Electronics, etc. Not sure if this list will be hard-coded or auto-generated - hard coded to start, for sure, and then we can look into generation.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since this is going to be a hardcoded example to start, I&#39;ll embed a script tag right inside my Index.html template for now. I&#39;m also going to take the &#34;first 5&#34; limiter out of the range function that displays the cards - I&#39;ll want all the cards to load (probably), then constrain which ones are actually visible with Javascript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Alright, well let&#39;s see about getting a little JQuery going. I&#39;ll add&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;tagnamecolor&#34;&gt;&lt;span class=&#34;tagcolor&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&#34;attributecolor&#34;&gt; src&lt;span class=&#34;attributevaluecolor&#34;&gt;=&#34;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;tagcolor&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;tagnamecolor&#34;&gt;&lt;span class=&#34;tagcolor&#34;&gt;&amp;lt;&lt;/span&gt;/script&lt;span class=&#34;tagcolor&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To the head tag in my baseof.html template to include it. Then, in my index template, I&#39;ll use a little script tag:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    &amp;lt;script&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        $(document).ready(function() {&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            console.log(&#34;Hello, world&#34;);&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        })&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    &amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;And voila, a console log:&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;img alt=&#34;&#34; class=&#34;size-full wp-image-3980 aligncenter post-img&#34; height=&#34;162&#34; src=&#34;hellolog.png&#34; width=&#34;234&#34;/&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s see about finding all the cards on the page. &lt;a href=&#34;https://stackoverflow.com/questions/55521589/how-to-filter-bootstrap-cards-based-on-search-box&#34;&gt;This Stack Overflow answer&lt;/a&gt; suggests doing something like this with data-roles, which seem like an easy way of grabbing DOM elements. And since I&#39;m generating an article per one-off, I can add the data-role=&#34;small-card&#34; param to each card by adding it to the summary.html template for the one-offs. I think. Let&#39;s try something like:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        $(document).ready(function() {&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            console.log($(&#39;article[data-role=&#34;small-card&#34;]&#39;));&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        })&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;And indeed I can see we&#39;ve selected 7 articles, corresponding to the 7 One-Offs generated on the page.&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;img alt=&#34;&#34; class=&#34;size-full wp-image-3981 aligncenter post-img&#34; height=&#34;292&#34; src=&#34;articlesJquery.png&#34; width=&#34;240&#34;/&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With the help of the &lt;a href=&#34;https://api.jquery.com/&#34;&gt;JQuery Documentation&lt;/a&gt; and the &lt;a href=&#34;https://www.w3schools.com/jquERy/default.asp&#34;&gt;W3 Schools JQuery reference&lt;/a&gt;, I can use a JQuery selector to grab, for example, all the articles whose content contains the word &#34;Meter&#34; (since I happen to have two of them) and hide them like so:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3982 size-full post-img&#34; height=&#34;156&#34; src=&#34;hide.png&#34; width=&#34;559&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And, it hides those two cards! Progress! (&lt;em&gt;Although I note that the list page &#34;Smalls&#34; is also included in there...&lt;/em&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;size-medium wp-image-3986 aligncenter post-img&#34; height=&#34;217&#34; src=&#34;5cards-300x217.png&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, now we need some buttons that dynamically do the same thing based on... something. So let&#39;s start by adding an &#34;All&#34; button that makes everything visible. I&#39;ll throw a couple of addition buttons next to it for now, just for formatting&#39;s sake&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3987 post-img&#34; height=&#34;229&#34; src=&#34;demobuttons.png&#34; width=&#34;359&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, let&#39;s get that All button to do a thing. I started by creating a couple of hard-coded classes that would do the filtering I wanted - one specifically for the &#34;All&#34; button (show everything) and one that would contain only the cards that contained the word &#34;Meter&#34;. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3992 post-img&#34; height=&#34;281&#34; src=&#34;functions.png&#34; width=&#34;685&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Then I refactored that code into a single function that looks at the ID of when the button was clicked, and filters the one-off cards based on that:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3989 post-img&#34; height=&#34;299&#34; src=&#34;filter-gifs.gif&#34; width=&#34;400&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(&lt;em&gt;This is also the point when I discovered &lt;a href=&#34;http://blog.bahraniapps.com/gifcam/&#34;&gt;GifCam&lt;/a&gt; - to enable Gif representations of my progress as things get more interactive.)&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So now... how to dynamically generate this list of tags?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s start with some light theft. &lt;a href=&#34;https://discourse.gohugo.io/t/list-all-tags-categories/17765/2&#34;&gt;This post from the Hugo discord&lt;/a&gt; has a solution for just generating a list of all the tags with their number of tagged items.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;size-full wp-image-3994 aligncenter post-img&#34; height=&#34;189&#34; src=&#34;taglistcode.png&#34; width=&#34;901&#34;/&gt;&lt;img alt=&#34;&#34; class=&#34;size-full wp-image-3993 aligncenter post-img&#34; height=&#34;133&#34; src=&#34;taglistresult.png&#34; width=&#34;143&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, how to turn this into buttons? Well, first I can take out the parts that use the Count variable (though maybe I&#39;ll want to add that back in later). And we&#39;ll turn that href into a button and remove the div, like so:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3995 post-img&#34; height=&#34;97&#34; src=&#34;buttonautos.png&#34; width=&#34;1145&#34;/&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And that generates the buttons, at least.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3996 post-img&#34; height=&#34;69&#34; src=&#34;tagbuttons.png&#34; width=&#34;563&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And because our earlier script applies to any button on the page, it&#39;s already filtering on the cards based on these tags! Sadly, the cards don&#39;t have that tag information yet, so all of those buttons blow away all the cards. But I&#39;ll bet we can fix that by editing the summary.html renderer for those cards. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After a bit of trouble because Hugo (Go?) templating interprets single-quotes as instructions to translate characters into their Ascii (Unicode?) equivalents, and some funking around with&lt;a href=&#34;https://stackoverflow.com/questions/4547363/jquery-filter-by-an-attribute-value&#34;&gt; how the Jquery interacts&lt;/a&gt; with the (invented) data-tags attribute, and the &lt;a href=&#34;https://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element&#34;&gt;unfortunate behavior of the .attr() function&lt;/a&gt; to return undefined if the block doesn&#39;t have that attribute, I came up with:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3999 post-img&#34; height=&#34;109&#34; src=&#34;autoButtons.png&#34; width=&#34;957&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-4000 post-img&#34; height=&#34;387&#34; src=&#34;buttonClick.png&#34; width=&#34;735&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This does mean that all the tags I use in my frontmatter have to have the same cannonical form as Hugo&#39;s tag pages, ie all lowercase, no spaces (hyphens ok). But that&#39;s fine for now, I can figure out how to style the text later.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-4002 post-img&#34; height=&#34;337&#34; src=&#34;filteringauto.gif&#34; width=&#34;1130&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Interestingly, the &#34;Smalls&#34; list page is included in all of the current filters, which isn&#39;t desirable. But I can fix this by just not rendering that card in the first place, by wrapping the  {{ .Render &#34;summary&#34; }} statement that actually renders the small cards in a &lt;a href=&#34;https://gohugo.io/variables/page/#page-variables&#34;&gt;{{ if .IsPage }}&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s still some slightly funky things happening with the spacing of the small cards, but I&#39;ll figure that out at some point. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;asdsadsa&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Refactoring the Site</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-refactoring-the-site/</link>
      <pubDate>Wed, 03 Nov 2021 12:41:35 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-refactoring-the-site/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;At this point, I transitioned between a couple of different computers; in fact, I&#39;m likely to be bouncing back and forth between two and even 3 computers over the course of this project. Thankfully, git, Github, and npm have my back here. When I sat down at a new computer tonight (with VS Code and my plugins already installed), I used git to clone my remote repo to my local machine. Then &lt;strong&gt;npm install &lt;/strong&gt;brings down all my necessary node modules. A quick &lt;strong&gt;npx hugo &lt;/strong&gt;(&lt;em&gt;well, after making sure my file path had no spaces - a known error in POSTCSS) (and updating node to v 17.0.1 using npx) &lt;/em&gt;and we have our site rebuilt on a new machine. Well, almost:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3964 post-img&#34; height=&#34;463&#34; src=&#34;oneimage.png&#34; width=&#34;541&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Weirdly, only one of three project images appears on the main page. And the same &#34;gooddogs.jpg&#34; image is the only one that appears on the projects list-page. Curious... The gooddogs image is the one I&#39;m currently using as a placeholder if the project content file doesn&#39;t specify a slug_image. If I change that standin, the standin images do appear in the projects page... and now two images appear on the main page! After using each image one-by-one as the standin slug_image, now all the images are appearing correctly... which implies to me that the images are not actually being correctly generated by Hugo, but instead are being cached between builds, leading to the appearance of correct behavior. Indeed, if I delete the public and resources folders are restart the server, we see a very similar issue with the image currently being used as the project standin:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3965 post-img&#34; height=&#34;373&#34; src=&#34;newimage.png&#34; width=&#34;423&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah, I see &lt;a href=&#34;https://gohugo.io/hugo-pipes/introduction/&#34;&gt;here in the documentation that&lt;/a&gt; &#34;assets will only be published if .Permalink or .RelPermalink is used.&#34; Which explains why I was only seeing the placeholder image - it was the only one reference via permalink in the summary.html renderer. Changing that image reference code to the following:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt; {{ if isset .Params &#34;slug_image&#34; }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ $img := resources.Get .Params.slug_image }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        &amp;lt;img src=&#34;{{ $img.RelPermalink }}&#34; alt=&#34;&#34; class=&#34;...&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Worked, since all the images are reference via Permalink.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To help make things less confusing, I&#39;m going to change the &#34;image not found&#34; image to something that&#39;s not an image I&#39;m already using for something elsewhere - a nice SVG of a flash borrowed again from Heroicons.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3966 post-img&#34; height=&#34;163&#34; src=&#34;flask.png&#34; width=&#34;369&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To accomplish this, I added the SVG to a new /static/svg folder, then used a simple &lt;span style=&#34;color: initial;&#34;&gt;&amp;lt;img src=&#34;../svg/notfound.svg&#34; .... tag (with proper tailwind formatting) to use it as the slug_image not present option.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Ok, but actually on to refactoring the page now. I realize that what I&#39;ve been creating is something between a resume page and a new actual homepage for my website, leaving it somewhat in limbo between the two. It&#39;s a bit odd to have job-history on the front page of a personal site, for example, but it should absolutely be on a resume page. So I&#39;ll create a new page that&#39;s strictly resume oriented, and refactor the index.html page into being a proper homepage.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, I&#39;ll create a new file in my content called &#34;/resume/resume.md&#34;, as well as a new file in my layouts folder called resume.html.html... except I can tell by poking at the content of these two files that resume.md is being used as the content within the default single.html template. So let&#39;s try this another way around - I&#39;ll create a /layouts/resume/_index.md file with frontmatter for my new resume page, and a layouts/resume/list.html file. That way, the {{site}}/resume URL points to the &#34;list page for resumes&#34;... which will just be my resume page. It seems like perhaps there&#39;d be a better way to do this, but this certainly works.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3970 post-img&#34; height=&#34;343&#34; src=&#34;resumepage.png&#34; width=&#34;283&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll move the job history and skills list over from the main page to the resume page, and reformat the header to just link to the resume page. Since that header is included as a partial, it&#39;ll update &lt;em&gt;everywhere at once&lt;/em&gt;. Oh and what the heck, I&#39;ll add a link to my twitter as well&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3973 post-img&#34; height=&#34;57&#34; src=&#34;fullnavbar.png&#34; width=&#34;921&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that took about two minutes, most of which was finding the Twitter logo SVG on Ionicons. Awesome!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Much more tinkering occurred here, including a joyous crowdsourcing session to name the selection of small projects.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3975 post-img&#34; height=&#34;171&#34; src=&#34;crowdsource.png&#34; width=&#34;625&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I learned some (but not all) about {{ range }} operator used to list pages, and that the summary layout can be distinct to each type of content (as well as having a default or fallback format, which is handy). So I created a small summary format for small projects, and embedded a few sample ones on the homepage. By using the {{ .RelPermalink }} template, each card on the homepage links to the appropriate piece of content.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;lksdf&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-hugo/</link>
      <pubDate>Tue, 02 Nov 2021 20:01:47 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-hugo/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Since I&#39;ve been using npm for the other parts of this project, I wanted to see if there was a straightforward way to install the Hugo static site generator with npm. The &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;official install instructions&lt;/a&gt; don&#39;t mention it, but thankfully &lt;a href=&#34;https://www.blogtrack.io/blog/powerful-blog-setup-with-hugo-and-npm/&#34;&gt;this post from Blocktrack.io does&lt;/a&gt;. It seems it&#39;s as simply as the usual &lt;em&gt;npm init&lt;/em&gt;, walking through the options, then running&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm install --save-dev hugo-bin&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Running npx hugo version lets us see that hugo v0.88.1 was indeed installed. Apparently, since we haven&#39;t installed the hugo binaries directly, we&#39;ll use the &#34;npx&#34; command to make npm invoke the hugo binary we installed.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, we run &lt;strong&gt;npx hugo new site . --force &lt;/strong&gt;to generate the starting hugo sites.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The blocktrack.io module suggests initializing git and using it to download a theme at this point, but since I&#39;m interested in building one up from scratch, I&#39;ll just initialize git here with &lt;strong&gt;git init.&lt;/strong&gt; I&#39;ll add a .gitignore file to exclude the /node_modules path, and make an initial commit to the repo.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Following along with our Blocktrack friends once more, I&#39;ll add a few scripts to the package.json file that will allow us to easily build, serve, and clean up the Hugo site. Of course, building and serving the site now gives us an empty page, since we have no content yet, and also shows a warning in the terminal where we started the server: &#34;found no layout file for &#34;HTML&#34; for kind &#34;home.&#34; Makes sense.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So let&#39;s create a homepage of some kind. Following along with &lt;a href=&#34;https://www.youtube.com/watch?v=ut1xtRZ1QOA&#34;&gt;this video from Giraffe Academy,&lt;/a&gt; I&#39;ll create an index.html file in at /layouts/index.html.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3921 size-full post-img&#34; height=&#34;269&#34; src=&#34;hp2.png&#34; width=&#34;502&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that&#39;s better! We have a very small, very bad website on localhost again!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll go ahead and replace that with some boilerplate via VSCode, and we&#39;ll start figuring out this hugo thing from the beginning. I&#39;m going to create this as a whole separate site, then work out how to merge what I&#39;ve learned here with my oh-so-beautiful site I was creating using Tailwind.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After repopulating the index.html page with some boilerplate HTML, let&#39;s see if we can&#39;t get something like the projects pages working.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3923 post-img&#34; height=&#34;391&#34; src=&#34;boilerplate.png&#34; width=&#34;540&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s try the loraDMX project first. If I run &lt;strong&gt;npx hugo new .\content\projects\loraDMX.md&lt;/strong&gt;, I get a new file with just a little bit of what hugo calls &#34;Frontmatter&#34; - metadata about the content of the page. Next, I&#39;ll create a projects-page layout at /layouts/projects/single.html with very simply syntax copied from this &lt;a href=&#34;https://cloudcannon.com/community/learn/hugo-tutorial/layouts-in-hugo/#reusable-layouts-block-and-define&#34;&gt;cloudcannon tutorial&lt;/a&gt;:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre&gt;&amp;lt;main&amp;gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    {{ block &#34;main&#34; .}}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    {{end}}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&amp;lt;/main&amp;gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;and I&#39;ll fill in my loraDMX.md page with:&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- Using a block in a child page --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;	{{ define &#34;main&#34; }}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;This will be inserted into the block&lt;span class=&#34;nt&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;	{{ end }} &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now if I run npm run hugo:build... hmmm, it seems to be broken. But what quick google search recommends adding templates to _default.... hmmm, no good either.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s go about this another way - let&#39;s download a simple hugo theme and see what we can learn by messing with it. I&#39;ll delete my content and template for now, and follow the steps on the &lt;a href=&#34;https://themes.gohugo.io/themes/hugo-theme-codex/#codex&#34;&gt;Codex hugo theme&lt;/a&gt; to get it installed. I&#39;ll also recreate a very, very basic index.md file as recommending in those install steps, so that something shows up.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3927 post-img&#34; height=&#34;339&#34; src=&#34;codex1.png&#34; width=&#34;395&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that&#39;s slightly better, there is indeed a webpage here now. Let&#39;s see what&#39;s going on in these theme files, and where this content is actually coming from.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Under /themes/hugo-theme-codex, it looks like we have index.html and 404.html files. Adding text to the index.html layout adds it to the homepage, so it seems that&#39;s what we&#39;re looking at. There&#39;s also this hilarious comment to give us a clue where to add our content:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3928 post-img&#34; height=&#34;204&#34; src=&#34;replace.png&#34; width=&#34;358&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We can go directly to localhost:1313/404.html to view what seems to be the 404 page defined in themes/hugo-theme-codex/layouts/404.html, which is good. But it looks like both index.html and 404.html aren&#39;t full pages, but rather pieces of content, which define {{ styles }} and {{ main }} blocks to populate into a template somewhere else. Let&#39;s see if we can&#39;t find those.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The (only?) file with an actual html layout lives in /layouts/_default/baseof.html. That is, it starts with &amp;lt;!DOCTYPE html&amp;gt;, has body and head tags, and seems to be including other page elements within itself. The other members of /layouts/_default (list.hml and single.html) seem to be layouts for single and list page contents, without being full pages in their own right. From what I can glean, from this and the hugo documentation, these are the styles for basic single and list pages, the two fundamental types of content in hugo.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m feeling pretty good about trying again to roll my own theme here, but while I&#39;ve got it installed, let&#39;s look at the remaining folders under /layouts/ in the Codex theme. The partials folder contains a bunch of small html/Go pages, while look like they&#39;re meant to be pulled into other pages. Things like nav.html, social-icons.html, burger.html, etc. Some are pure HTML, others have hugo-style (Go?) scripts to pull in further details or enumerate pages, I think. Finally, the /layouts/taxonomy folder has a single file, tag.html, while seems like it would list all the pages and present them? Unclear how this is working currently.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, let&#39;s delete this theme and get back to writing our own. In the layouts folder, I&#39;ll create a new _defaults folder, and within that, baseof.html (with boilerplate) and single.html and list.html (both empty for now). The content I&#39;ve created in these basic pages isn&#39;t visible yet, and interestingly, sometimes I&#39;m seeing build warnings about &#34;found no layout file for kind taxonomy&#34; and sometimes I&#39;m not. I notice the example site from the theme calls its homepage content &#34;_index.md&#34;... but changing that in my site makes no difference...&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Aha! Some sleuthing through the Hugo Forums indicates that not only do I need to &lt;em&gt;build&lt;/em&gt; the draft pages (the index is a draft, currently), but also to &lt;em&gt;serve&lt;/em&gt; them. By running, in my case, npx hugo server -D, I can now see some index.html content! Woohoo!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3932 post-img&#34; height=&#34;217&#34; src=&#34;indexx.png&#34; width=&#34;407&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Shortly after the above, I lost patience, and decided to see if there was a faster way to get started. I wiped everything, and went back to the quickstart guide, and installed the &lt;a href=&#34;https://github.com/Vimux/blank&#34;&gt;&#34;blank&#34; theme from Vimux&lt;/a&gt;. Building and serving this locally worked as expected.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;OK. So let&#39;s start from &lt;em&gt;where I think is the beginniing&lt;/em&gt;, with the baseof.html layout. I can see, in the &amp;lt;head&amp;gt; section, the &lt;span style=&#34;color: initial;&#34;&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt; inclusion. Changing the title value in config.toml does indeed change the value of the page title, so at long last, I&#39;m able to make little changes. Somewhere. To something. Similarly, adding &amp;lt;p&amp;gt;Hello World&amp;lt;/p&amp;gt; to the body makes it show up in the page. And adding in some plain content to index.html makes it show up on this index page as well. Ok.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, now to try to add some CONTENT! Following strictly along with the quickstart, I&#39;ll run &lt;strong&gt;npx hugo new pots/my-first-post.md&lt;/strong&gt;, and create some basic content in there. Re-serving the page:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3936 post-img&#34; height=&#34;346&#34; src=&#34;firstpost.png&#34; width=&#34;313&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s try to understand what&#39;s going on here and where each of these pieces comes from&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;The link at the top is created in the &lt;em&gt;header.html &lt;/em&gt;partial, which auto-generates the URL and text based on the config file. This header is included in the &lt;em&gt;baseof.html&lt;/em&gt; template.&lt;/li&gt;
&lt;li&gt;The Hello, world text is hardcoded into the baseof.html template itself&lt;/li&gt;
&lt;li&gt;The words &#34;This content is in index.html&#34; is hardcoded into the index.html template, and included as the &#34;main&#34; block of the baseof.html template in this case&lt;/li&gt;
&lt;li&gt;The index.html also includes the $paginator method... which I don&#39;t entirely understand yet.
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;I&#39;m also realizing I don&#39;t entirely understand the difference between a black include and a partial. It seems like the blocks are pieces of relevant content included from content pages, whereas partials are separate pieces of HTML etc. included from the separate partials folder?&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;The &#34;LATEST POST&#34; section is actually from the sidebar.html partial, which seems to list the last 5 latest posts using the {{ range }} function, which I&#39;ll need to learn more about&lt;/li&gt;
&lt;li&gt;Finally, the footer partial is responsible for the copyright indication and final link, also included via the baseof.html layout.&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;And now, some experiments.&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Making changes in the /themes/blank/static/style.css file does reflect on the page, but does require a rebuild.&lt;/li&gt;
&lt;li&gt;Let&#39;s see about overriding some of the theme files using our own. If I make a /layouts/partials/header.html file, copy and paste the header.html file&#39;s contents into it and make changes... we have changes! Similarly with the _default/baseof.html file.&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3939 post-img&#34; height=&#34;270&#34; src=&#34;separate.png&#34; width=&#34;342&#34;/&gt;&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;It looks like the &#34;blank&#34; template I installed is including the header, main, and footer blocks within the &#34;baseof&#34; file. Which I might or might-not want - the individual project pages (and blog pages, if I ever port those over) probably want a different header. So I may want to move those includes over to different templates.&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, the process from here looks like taking the rough layout I built with tailwind, and breaking some of its components apart into blocks to fit better within the Hugo mentality. For now, I&#39;m doing to just manually copy my css built with Tailwind into the proper place (build/css) and then work on integrating Hugo and Tailwind later on&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;First, I&#39;ll make it so baseof.html only really includes some basic metaconent, a reference to the CSS file, and an include to the {{ main }} block on a given page. Then I&#39;ll slim down the index.html file some as well by commenting out the pagination... and then blow it up again by copying everything from my &amp;lt;body&amp;gt; tag in my current version of the site over. After figuring out that the Tailwind-built CSS should go into static/css.style.css, it&#39;s mostly kinda working! Well, the images in the project cards are broken, but that&#39;s not surprising. Let&#39;s see if I can figure out where those should go.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Huh! So just copying my existing /images folder into /static/images worked! So the html tag with src=&#34;./images/workshop.jpg&#34; is referencing the image at /static/images/workshop.jpg. Good to know. I imagine there&#39;s a way to dynamically work with file names - as in, for a project file, load the image from such-and-such folder with the same name? I&#39;ll get to that later.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3942 post-img&#34; height=&#34;399&#34; src=&#34;imageswork.png&#34; width=&#34;524&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s see about breaking the header out into it&#39;s own partial. I think this may be the only page that uses this header, but it still seems like a good process to learn. I also see that Hugo has a &#34;Menus&#34; functionality... perhaps also good to look into at some point. But for now, I&#39;ll add {{ partial &#34;header.html }} to the very top of my index.html file, just inside the {{ define &#34;main }} tag. Then I&#39;ll copy my &#34;Green Navbar&#34; html code over from my Index.html file, and seeing that it works, removing it from Index.html....&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And hey! Everything looks the same! So the header is now broken out into its own partial file, ready for re-use if I want to - neat! I&#39;ll do the same for the footer in the footer.html partial.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s see about how we would use Hugo to make the management of our Projects easier. The ideal setup would allow:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Writing up a project page in markup or html for each project&lt;/li&gt;
&lt;li&gt;Having each project page have consistent formatting via a common template&lt;/li&gt;
&lt;li&gt;Having each project page contain the data necessary to generate a card on the index.html page&lt;/li&gt;
&lt;li&gt;Have a pretty list page containing all the projects, generated automatically from the project pages. Possibly categorized?&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m not quite sure how to proceed... so let&#39;s mess around!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If I make an empty loradmx.md file in a new content/projects folder, and look at the sitemap.xml, I can see two new pages have been generated: /projects/ and /projects/loradmx. They are... very barebones at the moment, but at least they appear. I hear the right way to do this is to use hugo new, so let&#39;s see what that creates:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3946 post-img&#34; height=&#34;181&#34; src=&#34;hugonew.png&#34; width=&#34;396&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Just a little bit of what Hugo calls &#34;Frontmatter&#34; - metadata about the content in question. I&#39;m thinking this is where I can stash the slug text for the cards that appear on the homepage and the projects page. Rebuilding the page with this frontmatter causes it to disappear from the default hugo server build, unless draft is set to false or I run &lt;strong&gt;npx hugo serve -D.&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3944 post-img&#34; height=&#34;205&#34; src=&#34;barebones.png&#34; width=&#34;217&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s try figuring out how these pages are being generated by adding our footer to them. As a place to start, at least.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems the content in /projects/loradmx is currently based on the theme/layouts/_defaults/single.html file. So, like before, I&#39;ll make a copy of it in my own layouts/_defaults folder. Similarly, I&#39;ll copy /layouts/_defaults/list.html. By making small changes to those files, I can confirm that the template files are indeed taking effect.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So now what? Well, let&#39;s start by adding our header and footer templates to both pages. I&#39;ll probably want to change this around some later, but it&#39;s an alright place to start.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And now is the post where I&#39;d really like to have the ability to work with Tailwind inside this project, so as I&#39;m making changes to styling these pages with Tailwind I can see the results live on the Hugo pages. Following &lt;a href=&#34;https://praveenjuge.com/blog/use-tailwind-jit-with-hugo/&#34;&gt;the post from Praveen Juge&lt;/a&gt;, I&#39;ll run&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;npm install tailwindcss@latest postcss@latest postcss-cli@latest autoprefixer@latest --save&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To install the requisite Tailwind packages in via npm. I&#39;ll use npx tailwind init -p to create the basic tailwind.config.js and postcss.config.js files, then copy the varients over from my other working project. Finally, again as suggested by Praveen, I&#39;ll set my purge settings to&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;content: [&#34;./layouts/**/*.html&#34;, &#34;./content/**/*.md&#34;, &#34;./content/**/*.html&#34;],&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So that all the relevent css is captured.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;Sometime later after much poking around...&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, here&#39;s how you integrate Tailwind CSS into the Hugo build process after the above. Any relevant tailwind-style CSS wants to go in your &lt;a href=&#34;https://gohugo.io/getting-started/configuration/&#34;&gt;/assets folder&lt;/a&gt;, which is where Hugo looks for resources involved in &lt;a href=&#34;https://gohugo.io/hugo-pipes/&#34;&gt;Hugo Pipes&lt;/a&gt;, which may be transformed upon rebuild. The above commands take care of installing the necessary dependencies. Then, in wherever you reference your CSS file (in my case, in baseof.html), use:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    {{ $css := resources.Get &#34;css/style.css&#34; }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    {{ $style := $css | resources.PostCSS }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    &amp;lt;link rel =&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;{{ $style.RelPermalink }}&#34;&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To dynamically link to your generated CSS. Now you can write all the tailwind code you want and, so long as you&#39;re not working with custom classes in your css, it will all just work. There seems to be an outstanding issue working with Tailwind JIT compilation in Hugo, so I&#39;m not going to attempt that now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now that the projects page is rendering ok, I&#39;ll see about how to apply formatting to it. Looking at the &lt;a href=&#34;https://gohugo.io/templates/pagination/&#34;&gt;Paginator documentation&lt;/a&gt; is a bit confusing, so let&#39;s dig around a bit. The list template I pulled out of the blank theme has the following:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            {{ range .Paginator.Pages }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                {{ .Render &#34;summary&#34; }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            {{ end }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Which I take to mean - using the built-in Pagination function, get all the pages (assumedly only the projects pages?), then render them using the &lt;a href=&#34;https://gohugo.io/templates/views&#34;&gt;alternative view&lt;/a&gt; &#34;summary&#34; (which is in /layouts/_default/summary.html). Making a copy of that them file in my /layouts folder, I can see that that is indeed the case. Creating a few more project files use &lt;strong&gt;npx hugo new project/gooddog.md &lt;/strong&gt;(for example), all of the new project pages show up in the paginator, which is good. And now I can go through formatting the summary.html file to apply formatting to all of the listed projects!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3954 post-img&#34; height=&#34;514&#34; src=&#34;summaries.png&#34; width=&#34;536&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One curious thing is that Hugo is doing its own truncation of longer bits of Lorem Ipsum and adding a &#34;read more&#34; link. Presumably that&#39;s what this structure does:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ .Summary }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ if .Truncated }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            &amp;lt;a href=&#34;{{ .Permalink }}&#34;&amp;gt;Read more...&amp;lt;/a&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ end }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So let&#39;s learn more about that. It seems that the&lt;a href=&#34;https://gohugo.io/content-management/summaries/&#34;&gt; page .Summary functionality&lt;/a&gt; is one of Hugo&#39;s &lt;a href=&#34;https://gohugo.io/variables/page/&#34;&gt;built in page variables&lt;/a&gt;. It seems Hugo will default to using the first 70 words of a piece of content as a summary (or another value, if specified in the configuration). Or, one can override this with a custom summary in Frontmatter. OR, one can override THAT with a &amp;lt;!--more--&amp;gt; tag in the content to specify where the content should be split. Let&#39;s try out that second option on the Demilight page. By adding a summary key to the frontmatter of demilight.md, we can override the generated page summary so it shows up more cleanly.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3956 post-img&#34; height=&#34;206&#34; src=&#34;Custom-Summary.png&#34; width=&#34;386&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/how-to-display-a-custome-page-variable/1557&#34;&gt;A post from the Hugo forums&lt;/a&gt; suggests that it&#39;s possible to use one&#39;s own custom keys in the frontmatter as well. So, by adding the slug key to some frontmatter in a couple of the content files, and rewriting the summary section like so:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    &amp;lt;div&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ if .Slug}}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            {{ .Slug }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ else }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            {{ .Summary }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            {{ if .Truncated }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                &amp;lt;a href=&#34;{{ .Permalink }}&#34;&amp;gt;Read more...&amp;lt;/a&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            {{ end }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ end }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s possible to have the list page display the hand-written slug if one was provided, or the generated summary if one wasn&#39;t! Neat!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(We can also point the &#34;more projects&#34; card on the homepage to &#34;/project&#34; to link it to this generated page.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now to associate an image with each of these individual project cards, we can do something like:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt; {{ $img := resources.Get &#34;images/goodogs.jpg&#34; }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&amp;lt;img src=&#34;{{ $img.RelPermalink }}&#34; alt=&#34;&#34; class=&#34;col-span-1&#34;&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Which makes the LoraDmx image associated with each and every card. Which is effective, but not exactly communicative. To improve this, we can use an additional front matter parameter called &#34;slug_image&#34; which specifies an image file path like &#34;images/loradmx.jpg&#34;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;HOLD THE PHONE. After another much fiddling around, I realize I made a silly error in the previous sentence. Did you spot it? Using a path like &#34;images/loradmx.jpg&#34; means the browser will look for the resource &lt;em&gt;relative to our current page&lt;/em&gt;. If we want to look in the images directory, we should specify the image as &lt;strong&gt;/&lt;/strong&gt;images/loradmx.jpg (note the leading slash). Oof. 25 minutes gone on that one. I found &lt;a href=&#34;https://www.markusantonwolf.com/blog/guide-for-different-ways-to-access-your-image-resources/&#34;&gt;this post on how to access your image resources in Hugo&lt;/a&gt; very helpful.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now that we have a barebones project list page, it would probably be nice to format some actual project pages, yeah? Currently they&#39;re just using the default single.html template, which isn&#39;t terribly attractive. Let&#39;s create a new layout for project pages specifically, which should go in (according to the &lt;a href=&#34;https://gohugo.io/templates/lookup-order/&#34;&gt;template lookup order page&lt;/a&gt;) /layouts/project/single.html&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After much fiddling with Tailwind, something like a decent layout starts to emerge. I also added an additional piece of project content in HTML, just to verify that yes, indeed, that&#39;s possible.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;fghfghfghg&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Content with HTML, CSS</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-content-with-html-css/</link>
      <pubDate>Tue, 26 Oct 2021 16:33:45 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-content-with-html-css/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Now that I have the barebones of a publication workflow going, it&#39;d be nice if there was something to actually look at on this new site. I&#39;ve been looking for an excused to try out &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;TailwindCSS&lt;/a&gt;, a CSS framework where you compose styles through small utility classes instead of writing large ones. Let&#39;s start there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems like Tailwind CSS is most easily managed via npm (the Node Package Manager), which the &lt;a href=&#34;https://docs.npmjs.com/downloading-and-installing-node-js-and-npm&#34;&gt;npm resources recommend&lt;/a&gt; installing via a node version manager. I arbitrarily chose &lt;a href=&#34;https://github.com/coreybutler/nvm-windows&#34;&gt;nvm-windows&lt;/a&gt; and installed it using its installer. While it didn&#39;t work via Windows Powershell immediately, after restarting powershell the &lt;em&gt;nvm&lt;/em&gt; command worked fine.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3884 post-img&#34; height=&#34;406&#34; src=&#34;npmcommand.png&#34; width=&#34;841&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Then, by running nvm install latest, I had node.js 16.11.1 (64-bit) installed on my machine.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Based on some things I&#39;ve read, I&#39;ll &#39;cd&#39; into a new folder in powershell, and then run the &lt;em&gt;npm init&lt;/em&gt;&lt;strong&gt; &lt;/strong&gt;command to generate a basic &lt;em&gt;package.json&lt;/em&gt; file to hold some settings related to this project. The questions that this command prompts  all seem fairly straightforward, though I don&#39;t know what to include for the &#39;test&#39; command yet.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3885 post-img&#34; height=&#34;356&#34; src=&#34;npminit.png&#34; width=&#34;495&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Next, I&#39;ll try installing the tailwind package using the command recommended on the tailwind website:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;language-shell post-paragrpah&#34;&gt;&lt;code class=&#34;language-shell&#34;&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -D tailwindcss@latest postcss@latest autoprefixer@latest&lt;/code&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Which downloads a whole bunch of packages into the node_modules folder and creates a package-lock.json file. The latter appears to track all of the included/required node modules, like an env file say. From here, following along with &lt;a href=&#34;https://www.youtube.com/watch?v=UBOj6rqRUME&#34;&gt;a pretty speedy crash course video from Traversy Media,&lt;/a&gt; I&#39;ll create a couple of files. First is /src/style.css, which gets three lines as specified by the tailwind documentation:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre class=&#34;language-css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@tailwind&lt;/span&gt; base&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@tailwind&lt;/span&gt; components&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@tailwind&lt;/span&gt; utilities&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Also, empty files /src/index.html and /public/style.css, to be populated by our site html and tailwind&#39;s output css, respectively. Finally, I&#39;ll change the test script in the package.json file to &lt;em&gt;&lt;span style=&#34;color: initial;&#34;&gt;&#34;build:css&#34;: &#34;tailwind build src/style.css -o public/style.css&#34; &lt;/span&gt;&lt;/em&gt;&lt;span style=&#34;color: initial;&#34;&gt;and from the root folder run &lt;em&gt;npm run build:css&lt;/em&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After about 6 seconds, the process completes, and wow is there a lot in our output style.css file now! Over 180K lines of css! Well that&#39;s intense. Presumably we&#39;ll be eliminating a lot of this as we package the site up for publication.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Over in the empty index.html file, typing ! and hitting enter gives us a very basic HTML boilerplate page, to which I&#39;ll add a reference to the (output) stylesheet and just a little bit of content to play with for now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3888 post-img&#34; height=&#34;283&#34; src=&#34;very-basic-page.png&#34; width=&#34;643&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;language-shell post-paragrpah&#34;&gt;After installing the Live Server VS Code extension, I can right-click anywhere in this file and immediately open it in a Chrome tab for local viewing. And now we have a little playground for messing around with tailwind!&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The first experiments are never pretty, but that&#39;s the point really. They&#39;re educational.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3896 size-full post-img&#34; height=&#34;671&#34; src=&#34;firstailwinsc.png&#34; width=&#34;510&#34;/&gt;&lt;/p&gt;
&lt;!-- &lt;p class=&#34;post-p&#34;&gt;XXXX Add version of Tailwind site here??? XXXX&lt;/p&gt; --&gt;
&lt;p class=&#34;post-p&#34;&gt;I experimented with tailwind&#39;s @apply directive, which allows for the creation of custom subsets of CSS that you might want to commonly re-use. For a start, I tried creating a shortcut to a main site color and a secondary site color.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3897 post-img&#34; height=&#34;160&#34; src=&#34;primarysecondary.png&#34; width=&#34;335&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And futhermore, playing around with styling buttons in a navbar in the same way. But since this was taking ~6 seconds to regenerate the output CSS file each time, this was not at all a fast way to work.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, Tailwind has a new JIT mode that generates only the necessary styles on demand, reducing the build time to ~150ms. This is as simple as adding mode: &#39;jit&#39; to the tailwind.config.js file, and making sure the &#39;purge&#39; selection is correct.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After the initial flexbox exploration, I settled in for awhile playing around with navbar options. I took some inspiration from both &lt;a href=&#34;https://v1.tailwindcss.com/components/navigation&#34;&gt;tailwinds&#39; own Navigation Bar suggestions&lt;/a&gt; and &lt;a href=&#34;https://daisyui.com/&#34;&gt;DaisyUI&#39;s Components&lt;/a&gt;. For the sake of learning, I didn&#39;t use DaisyUI at this stage, but I think I may integrate their components when I start to build the actual resume page.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;A couple of useful resources were: &lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;this page on &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Aligning_Items_in_a_Flex_Container&#34;&gt;Flexbox Alignment&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/796087/make-a-div-into-a-link&#34;&gt;This Stack Overflow article on making a whole div clickable&lt;/a&gt;, which allowed me to extend the clickable idea to other parts of the header&lt;/li&gt;
    &lt;li&gt;The &lt;a href=&#34;https://github.com/ionic-team/ionicons&#34;&gt;Ionicon Icons&lt;/a&gt; and &lt;a href=&#34;https://heroicons.com/&#34;&gt;Hero Icons&lt;/a&gt;sets&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt=&#34;&#34; class=&#34;mt-8 aligncenter size-full wp-image-3904 post-img&#34; height=&#34;228&#34; src=&#34;3menus.png&#34; width=&#34;744&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After homing in on the Green menubar as one I liked best, I separated it out into a new HTML file to get to work prototyping some actual content for the page. I created my four major sections (Introduction, Projects, CV, and Skills), each with a header with an ID and a &amp;lt;p&amp;gt; tag for the text. I fleshed out each section with a little Lorem Ipsum text, and arbitrarily decided that I wanted to start with the projects section.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I spent quite a bit of time mucking around with the Flexbox layout before deciding to simplify things by moving to a Grid layout. I&#39;ve got 4 &#34;cards,&#34; each with an image, title, and blurb, that grow slightly when moused-over, and a fifth card that will link to a larger projects page. I do think I&#39;ll need to go back to something like Flexbox to make the site more responsive on smaller screens, but I&#39;ll cross that bridge down the road. Ideally, these cards would be auto-populated using something like Hugo, but I think fleshing this entry-page out first would be better.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-3911 post-img&#34; height=&#34;323&#34; src=&#34;projects-1024x460.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also ran into an issue with the anchor links in the navbar. Because the navbar is held in a fixed position, using an anchor link to, say the h1 tag with id &#39;projects&#39;, clicking the #projects link sends that header to the top of the page... which is behind the navbar! Thankfully, &lt;a href=&#34;https://stackoverflow.com/questions/10732690/offsetting-an-html-anchor-to-adjust-for-fixed-header&#34;&gt;this stack overflow post&lt;/a&gt; has a clever solution that uses CSS&#39;s :before selector to position the anchor links lower on the page by a set offset. I made a new tailwind component for this css, applied to to all my page headers, and voila, problem solved.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, none of those cards actually link anywhere yet. But by using a full-size &amp;lt;span&amp;gt; element that fills the entire card at a higher z-value, each box is clickable as a link. This is not a particularly accessible solution, something I&#39;ll have to address at some point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Next, I roughed in the skills section, using some basic indenting and some categories that I&#39;ll probably change later. One VSCode plugin that I found very useful at this point is the &lt;a href=&#34;https://github.com/Tyriar/vscode-lorem-ipsum&#34;&gt;Lorem Ipsum plugin by Daniel Imms&lt;/a&gt;. Particularly because it generates different text at each multi-cursor position, it was simple to add a bunch of placeholder text for each of my skills subsections at this point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;At some point in this mucking around, I got interested in how one strips away some of that giant 180K-line mess of CSS to use just what&#39;s actually on the site. Following tailwind&#39;s own &lt;a href=&#34;https://tailwindcss.com/docs/optimizing-for-production&#34;&gt;Optimizing for Production&lt;/a&gt; post, I first ran &lt;strong&gt;npx tailwindcss init&lt;/strong&gt; to create a tailwind.config.js file. Then, within that file, I added the path &#39;./src/**/*.html&#39; to my purge list. From my upstanding, this means that any class referenced in any html file in the public folder will be preserved, and all the others will be purged when building for production.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems there are many ways to manipulate the NODE_ENV variable to switch between production and non-production stages, but one can&#39;t do it within the scripts in package.json, since the environment variable needs to be set before npm runs. So, to build the css for production, i&#39;ll now run &lt;strong&gt;&lt;code class=&#34;hljs language-javascript&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;$env&lt;/span&gt;:&lt;span class=&#34;hljs-variable constant_&#34;&gt;NODE_ENV&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;production&#34;; npm run build:css&lt;/span&gt;&lt;/code&gt; &lt;/strong&gt;on windows, or . Setting the environment variable back to something else (like &#34;dev&#34;) and re-running the build command restores our burgeoning 180K lines of css.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3891 post-img&#34; height=&#34;404&#34; src=&#34;sofewlines.png&#34; width=&#34;576&#34;/&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Once I&#39;m a little happier with the design (which I&#39;m just playing around with using VC Code&#39;s Live Server extension) I&#39;ll need to adjust my CD pipeline on GitHub so that, when I push a new HTML file, tailwinds auotmatically rebuilds the css file for production and pushes it to S3. But one thing at a time.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;(It&#39;s unclear to me whether the above is actually best practices - probably not with a public repository, though I could see myself using a private repo to store the contents of a static site in future.)&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Visitor Counter with JS, Lambda, and DynamoDB</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-visitor-counter-with-js-lambda-dynamodb-and-sam/</link>
      <pubDate>Mon, 18 Oct 2021 02:42:20 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-visitor-counter-with-js-lambda-dynamodb-and-sam/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I&#39;ve been spending a lot of shower-thoughts on what the actual content of my resume page should be. A single-page, hand-written HTML/CSS page would probably be fastest, but I&#39;d also like to explore using a static-site generator. But then, do I port my whole site/blog over to that static-site format? And also, what should the actual layout/priority of the resume page be? While I stew on such things, I&#39;m going to continue implementing  the functions of the Cloud Resume Challenge that implement an on-site visitor counter.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;DynamoDB&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Starting off in the &lt;a href=&#34;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&#34;&gt;DynamoDB Documentation&lt;/a&gt;, it seems like our database can, for this use case, be really simple. Possibly just a single table with a single Item consisting of a scalar value (number) that we&#39;ll read, increment, and update. Possibly this is oversimplifying things, but let&#39;s jump in assuming things will be simple. We can see how wrong we are later.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Assuming at some point I might want to track some other kinds of stats for this site, I&#39;ll create a table called &#34;cloud-resume-stats&#34; with a partition key called &#34;stats&#34; from the DynamoDB UI. At first, the only &#34;stat&#34; will be the visitor count, but perhaps there will be other things to track later. Or not.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3868 post-img&#34; height=&#34;396&#34; src=&#34;cloudstats.png&#34; width=&#34;457&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As recommended in the Cloud Resume Challenge, I&#39;ll select to use Dynamic Pricing - since I imagine very few reads/writes overall, this should end up costing me close to nothing. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With the table setup, I&#39;ll add a single Item with the stat &#34;view-count&#34; and starting at quantity zero. This for now will be the only item in our database, and will track our view-count.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3869 post-img&#34; height=&#34;266&#34; src=&#34;attribute-1024x440.png&#34; width=&#34;620&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well, I guess that&#39;s the table set up, for now. Now let&#39;s look at modifying the data in that table with a Lambda serverless function.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Lambda Function&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Going into Lambda function UI in the AWS console and clicking &#39;Create Function&#39; gives us a variety of selections and default options. I&#39;ll create a new function with a Python 3.9 runtime (since I&#39;m more comfortable in Python than in Node, Ruby, or Go for example). I&#39;ll also take advantage of the option to create a new IAM role based on templates to make a new role with the &#34;Simple Microservice Permissions&#34; policy for lambdas; I&#39;ll need to inspect those permissions a little closely later on.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3870 post-img&#34; height=&#34;410&#34; src=&#34;newLambda-1024x728.png&#34; width=&#34;577&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;From the little I&#39;d looked into using AWS Lambdas before, I don&#39;t recall the nifty visual input/output editor that pops up here - neat! Let&#39;s see what our options are for triggers.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It looks like one of the options for triggers is via the AWS API Gateway, which is handy, since that&#39;s another piece of the Cloud Resume Challenge. And when selected, an option appears to select an existing API... or create a new one right here. Well that&#39;s handy.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3871 post-img&#34; height=&#34;308&#34; src=&#34;createAPI.png&#34; width=&#34;625&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As for what the difference is between an HTTP API and a REST API in this context, I&#39;ll have to consult Amazon&#39;s &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html#services-apigateway-apitypes&#34;&gt;Choosing an API Type&lt;/a&gt; documentation, and the related &lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html&#34;&gt;Choosing Between HTTP APIs and REST APIs&lt;/a&gt; document. Given that both options appear to allow requests from public HTTP endpoints, and the HTTP API is described as &#34;lightweight&#34; (as opposed to the REST API&#39;s &#34;feature rich&#34;), I think that&#39;s where I&#39;ll start.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The next question is &#34;Security,&#34; which sounds like an important... so what the heck is a JWT authorizer??&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3872 post-img&#34; height=&#34;293&#34; src=&#34;jwt.png&#34; width=&#34;625&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Another Amazon guide to the rescue: &lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-jwt-authorizer.html&#34;&gt;Controlling Access to HTTP APIs with JWT Authorizers&lt;/a&gt;. It seems that JWT is JSON Web Token, and is part of a method of validating requests to API&#39;s using OATH or OpenID connect. Since biting off a full mouthful of OATH is probably more than I should try to tackle at this stage, I&#39;ll leave the API open for now, and look into whether rate-limiting requests to it/the Lambda function/the database is an option.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, I&#39;ll enable Cross Origin Resource Sharing to allow access to the API from outside the domain of the lambda... I think. I&#39;m not entirely sure if this will be necessary, since I&#39;ll be accessing this lambda from within my own site in the S3 bucket I own. But I&#39;ll turn it on for now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I now have a long, auto-generated endpoint name for the API associated with this Lambda - I&#39;ll want to see later about reconfiguring that to be somewhat more readable, but all in good time. Let&#39;s get back to writing that Lambda function.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What I&#39;ll want is to be able to make a request to the API endpoint which accesses the current visitor count stored in our database, increments it by one, stores that value back in the database, and returns the new value to the frontend. There&#39;s some handy starter code over in some &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.get_item&#34;&gt;DynamoDB documentation&lt;/a&gt;; let&#39;s just start by seeing if we can retrieve the value of the visitor count from our table:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/291dc45533b08a53d7e1a7ff9e858cad.js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;And we can see in the response results that yes, indeed, we&#39;re pulling the results out of our database as expected:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3875 post-img&#34; height=&#34;490&#34; src=&#34;response.png&#34; width=&#34;715&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(Another handy resource was this &lt;a href=&#34;&lt;script src=&#34;https://gist.github.com/gene1wood/4a052f39490fae00e0c3&#34;&gt;gist to list all available Python libraries in the default Python environment&lt;/a&gt;)..js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;And now, via the magic of the the AWS API&#39;s ADD action, we can write the increment action as follows, returning the resulting new viewpoint to the API:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/5af18f0f3927056abbca1e714afead71.js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;Alright, we can call this API endpoint and get an incremented and update viewcount back. That&#39;s good. But that URL sure is ugly - it&#39;d be nice if I could target something like &lt;strong&gt;api.jeff.glass/incrementViewcount.&lt;/strong&gt; Let&#39;s see if that&#39;s possible. Apparently, this requires a certificate for that domain in the Amazon Certificate Manager. I had hoped I could use the certificate I used for Cloudfront certification, but since that&#39;s in the us-east-1 region and the lambda is in us-east-2, it looks like I&#39;ll need another certificate. No worries though; it&#39;s easy enough to do that via the prompt in the API Gateway UI.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Currently, any request type to the API endpoint will return this incremented information - for cleanliness, I&#39;ll make it so only a GET request actually causes this to happen. Any other request type returns a 403 response code via another (very simple) Lambda.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3878 post-img&#34; height=&#34;382&#34; src=&#34;twolambda.png&#34; width=&#34;468&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve also redirected api.jeff.glass to this API endpoint to hopefully make things cleaner, using the Custom Domain Names section of the UI and a new CNAME entry in my DNS manager pointing to the API ARN. And while I seem to able to query the enpoint via that URL, all I&#39;m getting is Status 500 Internal Server Errors. &lt;a href=&#34;https://aws.amazon.com/premiumsupport/knowledge-center/api-gateway-lambda-stage-variable-500/&#34;&gt;This AWS help article&lt;/a&gt; implies that&#39;s an issue with permissions, but I&#39;d have thought (and the UI seems to confirm) that by configuring the API Gateway when I create the Lambda functions themselves, the appropriate permissions/roles should be automatically created. When I go to check the logs, it seems I&#39;ll need to have a Cloudwatch resource of some kind as a destination for them. So, over to Cloudwatch it is.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Creating a new Log Group is straightforward, with all the default options. Feeding that ARN into the API Gateway&#39;s settings allows logs to start popping up whenever I hit the API endpoint. And, as expected, I&#39;m seeing 500-status errors in the logs as well:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/0185a8c3e0b4505097c21d6d16503a6c.js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;At least I can confirm that the API Gateway is seeing a GET request as expected. Ah, and if I make a request to &lt;strong&gt;https://api.jeff.glass/incrementViewcount, &lt;/strong&gt;i get the incremented and returned view count as expected. And if I configure the /error URL to trigger the seperate error lambda (which just returns code 403), I can trigger that as well. But clearly there&#39;s something I don&#39;t understand about the way the /ANY route acts to route to integrations. When I create a route like ANY /{greedy}, the Cloudwatch logs do show the correct route being selected. But I still get a code 500 internal server error, as if the Lambda itself isn&#39;t running. On the other hand, this additional error handling Lambda is overkill, so I can just bin it. I&#39;ll make a mental post-it note to deepen my understanding of the ANY and {greedy} functionality though.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>GitHub for Frontend</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-github-for-frontend/</link>
      <pubDate>Sun, 17 Oct 2021 18:22:52 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-github-for-frontend/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;From an outside perspective, it seems that one of the goals of the Cloud Resume Challenge is to introduce new pracitioners to tools that will make their lives easier in developing future projects. Tools like GitHub processes, Continuous Integration/Continuous Development, infrastructure as code... all ways that seem apply grease to the sticky gears of development.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The piece that feels most approachable and useful to me at this early stage is the front end continuous development pipeline. The goal will be: any code that gets pushed to the main branch on a GitHub repository will be pushed to my S3 bucket to instantly become the new static site. It seems this will hopefully be quite straightforward using GitHub actions - let&#39;s try.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Starting a GitHub repository from the GitHub UI is very straightforward. Choose a name. Choose public vs. private. Generate some default files (or not). Hit create. Boom.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3829 post-img&#34; height=&#34;715&#34; src=&#34;frontend_github.png&#34; width=&#34;731&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So that&#39;s the familiar part, now into the unknown.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, Github has a very approachable page titled &lt;a href=&#34;https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions&#34;&gt;Understanding GitHub Actions&lt;/a&gt;, which provides a lot of context and vocabulary upfront for how to get started with Actions. And as usual, I suspect I&#39;ll be better off learning with dirty hands. So I&#39;ll start by initializing the minimum viable workflow and see what that looks like:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3832 post-img&#34; height=&#34;367&#34; src=&#34;minimumWorkflow.png&#34; width=&#34;481&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well let&#39;s see what that gets us. It looks like it automatically populates a file called &#34;blank.yml&#34; in the ./github/workflows directory. The contents is:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/4e6b1a042a4484b5e86fd99823dfce54.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, thanks to lots of generous comments, it seems we have a GitHub action to launches an Ubuntu instance, checks out the code in the repository, echoes a handful of messages to the logs, then shuts down. This should happen whenever a push or pull request to the main branch occurs. That should be pretty straightforward to test by making changes to the Readme.md file we created during repository setup.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3835 post-img&#34; height=&#34;470&#34; src=&#34;runAction.png&#34; width=&#34;542&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that sure was easy. As expected - an instance was launched, the Repo&#39;s code was cloned, a handful of Echo commands got executed.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So now, let&#39;s see if we can&#39;t figure out how to use an action to push content to our S3 bucket. For now, I think I&#39;m going to set it up to just push &lt;em&gt;all&lt;/em&gt; of the content in a specific folder to a bucket, but ultimately, I&#39;m contemplating using a static site generator like &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; or &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; to generate the site, and integrate that build process into a GitHub action of its own.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In several places, I&#39;ve seen it suggested to create an User using the Identity Manager in AWS to generate access keys that will only allow GitHub actions the bare minimum functions necessary to complete their role. Spinning up a new role is easy in IAM, and I&#39;m duplicating the minimum permissions in GitHub&#39;s &lt;a href=&#34;https://docs.github.com/en/enterprise-server@3.0/admin/github-actions/enabling-github-actions-for-github-enterprise-server/enabling-github-actions-with-amazon-s3-storage&#34;&gt;Enabling GitHub Actions with Amazon S3&lt;/a&gt; article:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3837 post-img&#34; height=&#34;438&#34; src=&#34;policy.png&#34; width=&#34;563&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With that out of the way, and with my new role&#39;s Access Key and Secret Access Key written down, it&#39;s back over to GitHub to implement the action.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Like any good process, I&#39;ll start by stealing someone else&#39;s good idea. In this case, I&#39;ll use the &lt;a href=&#34;https://github.com/marketplace/actions/s3-sync&#34;&gt;S3 Sync Action&lt;/a&gt; available in the GitHub marketplace. This was easy enough to drop into my repo, and to set the relevant AWS access keys as GitHub secrets so they&#39;re not publicly visible.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3840 post-img&#34; height=&#34;291&#34; src=&#34;secrets.png&#34; width=&#34;359&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/e80776b515e04a31146f21849cafa448.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Error oh no!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3842 post-img&#34; height=&#34;151&#34; src=&#34;actionError.png&#34; width=&#34;381&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Typo in Workflow file (extra &#39;-&#39;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3843 post-img&#34; height=&#34;563&#34; src=&#34;S3-Sync-Error.png&#34; width=&#34;623&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Error in permissions - needed to specify all objects in bucket are valid, as well as adding a couple of additional permissions per &lt;a href=&#34;https://stackoverflow.com/a/36272287&#34;&gt;this StackOverflow post&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Curiously, accessing directly via the Index.html object URL shows me one thing, but going to resume.jeff.glass shows the original content:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3844 post-img&#34; height=&#34;370&#34; src=&#34;TwoDifferentResults.png&#34; width=&#34;650&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Ahhh, of course - directly accessing the resource shows the contents of the bucket, but resume.jeff.glass is pointing to the Cloudflare distribution I created, which still has cached content. So I need to invalidate the Cloudflare cache as part of this workflow as well, so that users will always see the most recent content when requested.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, that&#39;s something I can do manually in the Cloudflare console:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3846 post-img&#34; height=&#34;298&#34; src=&#34;createinvalidation.png&#34; width=&#34;640&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And now everything looks right:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3847 post-img&#34; height=&#34;374&#34; src=&#34;successfulIinvalid.png&#34; width=&#34;515&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But of course, the whole point is to automate this step. Let&#39;s see if we can work out how to add this functionality to the workflow we already have. Indeed, it looks like there&#39;s an &lt;a href=&#34;https://github.com/jakejarvis/s3-sync-action/pull/32&#34;&gt;outstanding pull request&lt;/a&gt; with exactly this functionality, by InscribeAI and Jake Garth. So really, what I need to figure out is the proper syntax for using this version of the action, as opposed to the original version.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For one thing, I&#39;ll add the CF Distribution ID as a repository secret. Then I&#39;ll change the action to point at InscribeAI version via some textual changes - just changing the author&#39;s name and adding the necessary environment key and secret.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This seems to have run successfully - let&#39;s make one more change to the Index.html file and see if our changes happen in when viewed from the Cloudfront Distribution:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well, sadly no, no Cloudfront distribution.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well, looks like it&#39;s time to fork this GitHub repo and see about forming our own action. (There are surely other actions on the GitHub marketplace, but this seems like I challenge I could learn from.)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;First things first, let&#39;s fork the repo that we&#39;ve been using so far to grab our own version.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3851 post-img&#34; height=&#34;139&#34; src=&#34;forked.jpg&#34; width=&#34;618&#34;/&gt;And I&#39;ll use the Git GUI program to grab a copy of the code from the Repo to work with locally. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3852 post-img&#34; height=&#34;261&#34; src=&#34;vscode.jpg&#34; width=&#34;444&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Just to make sure that I am indeed running the action from my local repository clone of the action (instead of the original jakejarvis version because there&#39;s something I might not understand), I&#39;ll add an output to the action.yml file to get a string output from the action. This is all per the &lt;a href=&#34;https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions&#34;&gt;GitHub Actions Metadata Syntax page&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3853 post-img&#34; height=&#34;230&#34; src=&#34;firstChange.jpg&#34; width=&#34;568&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll also add a few echo statements to the entrypoint.sh file that runs in the Docker container, to hopefully validate that this shell script is running and whether it&#39;s entering the cloudfront invalidation step. Basically, I want to know if my setup (workflow, actions, and script) isn&#39;t properly creating a Cloudfront invalidation, or whether it&#39;s not running at all.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3854 post-img&#34; height=&#34;176&#34; src=&#34;cf-echos.jpg&#34; width=&#34;538&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Hmm, the results of those echo commands don&#39;t appear in our output. And neither does the output of the aws cloudfront command that the shell script is using. Which, according to the &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-invalidation.html&#34;&gt;AWS CLI Reference,&lt;/a&gt; should be pretty verbose. I&#39;m also not seeing the output from the lone echo command I stuck at the top of the shell script. Maybe this script isn&#39;t actually running?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s add a RUN echo command to the Dockerfile in our action to see if we can get that output.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3855 post-img&#34; height=&#34;202&#34; src=&#34;noecho.jpg&#34; width=&#34;645&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And no, it doesn&#39;t seem like we can - we should see that echo command right here between the Pip invocation and adding the entrypoint. So whatever action I&#39;m running, it doesn&#39;t seem to be the one I&#39;m modifying in this dockerfile. Let&#39;s se if we can&#39;t figure out why.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One thing that stands out is that I&#39;m targeting a specific release version of this action - namely, 0.5.1 just like the action I forked. Perhaps I need to create a new release with these changes, and then target that? I&#39;ll use the GitHub UI to create a 0.5.1.1 release and see if I can target that successfully and see the results of my echo commands.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3857 post-img&#34; height=&#34;225&#34; src=&#34;invalidcfcensored-1024x340.png&#34; width=&#34;678&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Aha! There&#39;s the echos, and a new error to track down! So I was committing new code to the repo, but because the action was referencing a previous release of the action, none of it made any difference. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems the action specification allows for targeting a branch of the action, rather than a specific release, which would make development more straightforward for sure. Just for yucks, let&#39;s see what happens when I remove any specifier and just use &lt;strong&gt;uses:JeffersGlass/s3-sync-action:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3858 post-img&#34; height=&#34;148&#34; src=&#34;errortag.png&#34; width=&#34;654&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Ahh, very broken. But setting it to target &lt;strong&gt;JeffersGlass/s3-sync-action@master&lt;/strong&gt; works as intended. Well, the error with the Cloudfront distribution is the same, but at least I can now see changes to the action as soon as I commit them, rather than needing to create another release.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This seems to be a permissions issue, given the language &#34;... is not authorized to perform cloudfront:CreateInvalidation on resource.&#34; Which makes sense - I&#39;ll go back into the IAM policy setup and add a handful of Cloudfront-related permissions to the policy that the GitHub action is using, and rerun the action.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3859 post-img&#34; height=&#34;208&#34; src=&#34;successfulCF.png&#34; width=&#34;546&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That looks a much better result! And the invalidation appears in the Cloudfront distribution&#39;s Invalidations tab as well. As a final test, let&#39;s make some further small changes to the index.html file, push them, and see if they&#39;ll update/invalidate the CF distribution in real time.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3861 post-img&#34; height=&#34;297&#34; src=&#34;pushedsuccess.png&#34; width=&#34;621&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Success! Now, any time a change is pushed to the main branch in the repo, the GitHub Action will push the contents of the public folder to the S3 bucket, and invalidate the associated CloudFront distribution so the results appear for all viewers in realtime. And that was our goal, after all.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Like I mentioned, I ultimately would be interested in using a simple static site generator to create the formatting for the site, rather than uploading raw html/css/js. And that will require some additional CD actions, as well as modifying the target of this push-to-s3 action. But I&#39;ve solved a fundamental component of a productive workflow, and I&#39;m thrilled.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Custom Domain</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-custom-domain/</link>
      <pubDate>Wed, 13 Oct 2021 19:27:02 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-custom-domain/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Since I already have a custom domain at &lt;strong&gt;jeff.glass &lt;/strong&gt;&lt;em&gt;(which is likely where you&#39;re reading this, if you&#39;re reading this around the time of posting&lt;/em&gt;), I&#39;d like to figure out how to point a subdomain of that site at my nascent Cloudfront/S3 static site. While I should probably also learn how to register a new domain through Amazon&#39;s Route 53 service, I think the end product will be cleaner.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I currently have the domain registered through NameCheap, and pointing to the DNS servers provided via my hosting at iWebFusion. The first thing I&#39;ll try is just using a CNAME to point &lt;strong&gt;resume.jeff.glass&lt;/strong&gt; to the URL provided by my Cloudfront distribution.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But alas:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-3813 post-img&#34; height=&#34;305&#34; src=&#34;403-1024x434.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Some sites suggest that fixing this could be as simple as modifying a setting in the Cloudfront distribution settings:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3814 post-img&#34; height=&#34;169&#34; src=&#34;alternate.png&#34; width=&#34;564&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3815 post-img&#34; height=&#34;204&#34; src=&#34;trusted-cert.png&#34; width=&#34;825&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The key resource here is the article &lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html&#34;&gt;Using Alternate Domains and HTTPS&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But it turns out, requesting certificates from the Amazon Certificate Manager is pretty simple. Click request certificate and specify what domains it applies to (which allows for using wildcard characters!). To validate that you do indeed control the domain you&#39;re requesting the certificate for, the ACM uses what they call &#34;DNS Validation,&#34; which involves adding a single CNAME record to your DNS Zone records. Essentially, they give you a long, random-looking &#34;subdomain&#34; URL to redirect to a long, random-looking amazon URL. Then, by querying whether your site actually performs the redirect as requested, they can verify that you were indeed able to modify the DNS behavior of the site and therefore are the owner of that domain.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One trick is that, to use the generated certificate with Cloudfront, the certificate must be requested in the us-east-1 region, which may not be the region your bucket is in. (Since my most recent bucket is in us-east-2, it seems like my certificates were defaulting there as well. Or perhaps its geolocating me? Unclear). In any case, the simplest thing to do is use the &#34;request certificate&#34; link on the Cloudfront distribution settings, which automatically launches the wizard to request a new certificate in us-east-1.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3819 post-img&#34; height=&#34;127&#34; src=&#34;request-certificate.png&#34; width=&#34;301&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With that certificate selected and the settings saved, my new site is available at &lt;a href=&#34;https://resume.jeff.glass/&#34;&gt;https://resume.jeff.glass&lt;/a&gt;! Not that it&#39;s terribly interesting at the time of writing, but now it&#39;s got a tasteful URL.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3822 post-img&#34; height=&#34;98&#34; src=&#34;helloworld-big.png&#34; width=&#34;226&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Part of the reason I&#39;m trying to document all the twists and turns of this process has to do with a later goal of the Cloud Resume Challenge. Namely, goal 11, which reads in full:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;h2 class=&#34;italic&#34;&gt;12. Infrastructure as Code&lt;/h2&gt;
&lt;p class=&#34;italic post-p&#34;&gt;You should not be configuring your API resources – the DynamoDB table, the API Gateway, the Lambda function – manually, by clicking around in the AWS console. Instead, define them in an &lt;a href=&#34;https://aws.amazon.com/serverless/sam/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;AWS Serverless Application Model (SAM) template&lt;/a&gt; and deploy them using the AWS SAM CLI. This is called “&lt;a href=&#34;https://www.hashicorp.com/resources/what-is-infrastructure-as-code/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;infrastructure as code&lt;/a&gt;” or IaC. It saves you time in the long run.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This will be an entirely new area of exploration for me, and from just a little examination will involve encapsulating chunks of the existing setup work in a format that it can be recreated automatically. Which parts of the setup? Unclear. It doesn&#39;t seem like HTTPS and Cloudfront setup are part of that, but I figure it can&#39;t hurt to write down the edge cases doing this by hand. I&#39;d like to not trip over them again when I go to automate things. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Cloudfront for HTTPs</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-cloudfront-for-https/</link>
      <pubDate>Wed, 13 Oct 2021 16:28:31 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-cloudfront-for-https/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;To a layman&#39;s eye, using AWS Cloudfront to enable HTTPs on a website seems like using a bazooka to blast a butterfly - massively overkill with far more power than necessary. But this challenge is meant to use a pocket-sized project to explore big powerful tools, so hey, why not?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems like getting started with Cloudfront is relatively straightforward for my tiny, simple usecase. They&#39;ll even transfer up to 50 GB / 2 million requests for free each month as part of the AWS free tier, which is awfully nice of them.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-3801 post-img&#34; height=&#34;256&#34; src=&#34;cf1-300x256.png&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The Origin setup here seems straightforward, mostly selecting which resources want to get distributed out via Cloudfront&#39;s distribution network. I&#39;m not quite sure what an Origin Access Identity is - it seems like possibly this is a way to allow content to be distributed to low-latency access areas without it being directly accessible by the public? Perhaps for content used by a site but not directly accessed? More for me to learn there.&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3803 size-full post-img&#34; height=&#34;726&#34; src=&#34;origin.png&#34; width=&#34;789&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The default caching behaviors all seem plausible, but I&#39;ll opt to redirect http requests to https, so that all traffic is ultimately flowing over https.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3805 post-img&#34; height=&#34;279&#34; src=&#34;Viewer.png&#34; width=&#34;401&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While I don&#39;t currently see a use for edge functions in my simple website, I did spend some time digging into just what the heck they are for my own learning. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll set the distribution to just US and Europe - no sense paying extra for the random scrape that might come in from overseas, it can take the slow route to Ohio. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It looks like there are options for custom SSL certificates if desired, but I&#39;m just as happy to let Amazon handle that.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3807 post-img&#34; height=&#34;166&#34; src=&#34;enabled.png&#34; width=&#34;631&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And with that... it looks like my distribution is up and running, behind https... but is it really?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Going to https://.... gives me that little lock icon by the address bar that I need, but I can still access the http:// version unsecurely, which isn&#39;t ideal. Ah, perhaps I should try accessing the site via the new Cloudfront URL?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Oh.&lt;/p&gt;
&lt;figure class=&#34;wp-block-image size-large&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-3809 post-img&#34; src=&#34;deniedd-1024x183.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that&#39;s not great.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, &lt;a href=&#34;https://serverfault.com/a/776143&#34;&gt;Stack Overflow comes to the rescue&lt;/a&gt;. Turns out, I was using the &lt;em&gt;bucket&lt;/em&gt; url instead of the &lt;em&gt;static website&lt;/em&gt;&lt;em&gt; &lt;/em&gt;url as the origin for the Cloudfront distribution. Copying over the correct URL from the S3 bucket solved the issue, and I can now access my (VERY SMALL) website via the generated Cloudfront URL over HTTPS.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m getting the feeling that comes with the start of lots of new domains: checking the boxes and accomplishing the bare minimum for this challenge seems like it won&#39;t be too hard, but the real learning will come from going deep and looking for actual understanding and nuance in all of these disparate services and processes. So, I&#39;ll need to find a balance. Sometimes it&#39;ll be good to plow through things and get placeholders up, so long as I come back to deepen my learning later.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Getting Started with AWS</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-getting-started-with-aws/</link>
      <pubDate>Tue, 12 Oct 2021 19:46:36 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-getting-started-with-aws/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I&#39;m always looking for ways to expand my skillset, and in an increasingly digital, work-from-home oriented world, having a firmer grasp on web technologies seems like not a bad thing. But, as someone who considers themselves a technically competent nerd with no real credentials to speak of, where to get started?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://cloudresumechallenge.dev/&#34;&gt;The Cloud Resume Challenge&lt;/a&gt; seems like a useful, self-guided way to start, or at least a roadmap toward building a &#39;complete&#39; resume project. So here we go!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h1 class=&#39;text-2xl&#39;&gt;The Challenge: 16 Steps&lt;/h1&gt;
&lt;p class=&#34;post-p&#34;&gt;Completion of the challenge requires ticking 14 boxes to set up a simple static website on AWS with a required subset of features, acquiring a AWS Certified Cloud Practitioner certification, and wrapping it all up with a blog post about your experiences. Starting at the beginning, as usual, here&#39;s the start of the blog posts!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The AWS certificate requires a $100 investment and a genuine exam worth studying for, it seems. Something I imagine would be significantly easier to start studying for &lt;em&gt;after&lt;/em&gt; completing the legwork of the rest of the challenge. So we&#39;ll set that requirement aside for most of the following.&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Why AWS?&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;The Cloud Resume Challenge currently offers versions tailored to AWS, GCP, and Azure. I&#39;ve chosen to go with AWS for the moment, but I&#39;ll admit, this is a fairly arbitrary choice based on my naïve impressions of the Amazon/GCP/Azure offerings. I&#39;m sure I&#39;ll revise these opinions down the road, but my sense is:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Amazon has a wider array of services offered, more industry reach, and a longer history of cloud presence. It seems to have a reputation for harder-to-parse naming and access conventions.&lt;/li&gt;
&lt;li&gt;GCP has a somewhat friendly access/account model, but less industry reach and a shorter real world knowledgebase.&lt;/li&gt;
&lt;li&gt;Microsoft Azure seems (again, from an outsider&#39;s perspective) to be targeted at existing businesses that are used to Microsoft&#39;s products and tools&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;AWS, Azure and GCP: Market Shares and Growth Rate&#34; class=&#34;post-img&#34; height=&#34;393&#34; src=&#34;https://www.veritis.com/wp-content/uploads/2018/05/aws-azure-gcp-cloud-market-share.jpg&#34; width=&#34;700&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Image from Veritis.com, Oct 2020&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For a self-guided project, a deep well of online resources is really appealing. It doesn&#39;t look like I&#39;ll run into any significant limitations with any of the three platforms with this basic a project. With AWS seeming to be a market leader, it feels like I may as well go that way, and hopefully, what I learn will be semi-transferrable knowledge.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h1 class=&#34;text-2xl&#34;&gt;Setting up a Static Website on AWS S3&lt;/h1&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Getting Oriented&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;The cloud resume challenge page directs users to this page on AWS helpfully titled &#34;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html&#34;&gt;Hosting a Static Website using Amazon S3&lt;/a&gt;.&#34; Neat!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since this is a static website (i.e. made up only of static resources like HTML and CSS, possibly with some client-side Javascript but no server-side action), it seems that a static website on S3 is essentially a bunch of files plopped into a folder on Amazon&#39;s servers that people can point their web browsers at and view. Well, I&#39;m sure a &#34;bucket&#34; is more complicated than just being a &lt;em&gt;folder&lt;/em&gt;... but I&#39;ll cross that bridge when I need to.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s look through the AWS info documents listed on that page.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteEndpoints.html&#34;&gt;Website Endpoints&lt;/a&gt; page indicates that, by making the contents of a bucket publicly accessible, anyone can point their browser at a fiddly URL like&lt;em&gt; http://&lt;span style=&#34;color: #ff0000;&#34;&gt;bucket-name&lt;/span&gt;.s3-website-&lt;span style=&#34;color: #ff0000;&#34;&gt;Region&lt;/span&gt;.amazonaws.com&lt;/em&gt; and have access to that content. It goes on to talk a little about how to point ones DNS provider of choice at these specific resources, to use a more human-friendly URL. Or, one might use Amazon&#39;s Route 53 to.... accomplish the same thing? The distinction eludes me at this point, but that feels like something I can come back to.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/EnableWebsiteHosting.html&#34;&gt;Enabling Website Hosting&lt;/a&gt; page seems to clarify a little more the steps needed to make a bucket available as website, saying: &#34;&lt;em&gt;When you configure a bucket as a static website, you must enable static website hosting, &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/IndexDocumentSupport.html&#34;&gt;configure an index document&lt;/a&gt;, and &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteAccessPermissionsReqd.html&#34;&gt;set permissions&lt;/a&gt;.&#34; &lt;/em&gt;It seems any of these steps can be done in the online S3 console, using API requests, via Amazon&#39;s SDK via code, or using their command line interface. While I&#39;m sure programmatic access to these tools is really useful if you&#39;re spinning up sites in an automated fashion, I imagine I&#39;ll mostly be using the S3 console.&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;A Placeholder Page&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;None of this seems terribly complicated - I need to put some files in a bucket, then configure some settings so Amazon knows where to point people when they access my (very fiddly) URL. So I&#39;ll start by creating a very basic placeholder page to upload and play with. Time to get my hands dirty and learn.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For most of my scripting work at my day job, I use VS Code, which I happen to know has an HTML Boilerplate extension. The very generic HTML it generates is:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/c8b4479f21195de12ec59cb2f94f17ef.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, we&#39;ve got our basic HTML document, with a &amp;lt;head&amp;gt; tag to start off, a &amp;lt;body&amp;gt; with basically no content yet... and that&#39;s it. Plus some commenty-things that seem to be dealing with older versions of internet explorer.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s also a lot in here I don&#39;t understand yet, especially in the &amp;lt;head&amp;gt; section. What is a &amp;lt;meta&amp;gt; tag? Why do I need a viewport? I&#39;ll add these to my list of questions to answer down the road. I&#39;m just diving forward to get this thing online at this point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll add a brief &amp;lt;p&amp;gt; tag to the above boilerplate with the text &#34;Hello, world!&#34; That&#39;s it. That&#39;s the whole website for now.&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Making a Bucket&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;If this whole process is really as simple as allowing the public to see the files in one of my buckets, it feels like I&#39;ll need this file (&lt;em&gt;now called index.html&lt;/em&gt;) to be in an S3 bucket. Let&#39;s figure out how to do that.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Searching for &#34;S3&#34; in the top search bar on AWS brings up a listing for the Simple Scalable Storage page...&lt;/p&gt;
&lt;figure class=&#34;wp-block-image size-full&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-3768 post-img&#34; src=&#34;image.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;...which has a create bucket button!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I think &#34;Hello_World&#34; would be a good name for this bucket... oh, except bucket names can only have lowercase letters, numbers, periods, and hyphens... and must be unique Alright, &#34;hello-world-jg-cr-1&#34; it is. I don&#39;t know what the advantages to the different regions are, but given that I&#39;ll likely be the only traffic to this site, I&#39;ll chosen US East (Ohio) us-east-2 since I&#39;m in the US Midwest.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3774 post-img&#34; height=&#34;313&#34; src=&#34;bucketname.png&#34; width=&#34;641&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Aha! The next section talks about access settings. I recall from the earlier page that setting permissions to allow public access is something I&#39;ll need to do to allow the site to be publicly available. Seems I&#39;m able to do that right now, though I do have to check a big scary box saying I understand the risks.&lt;/p&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3775 size-full post-img&#34; height=&#34;664&#34; src=&#34;access.png&#34; width=&#34;780&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are some further options here. Versioning, which seems like it will store &lt;em&gt;every change to an object&lt;/em&gt; unless otherwise specified, which seems like overkill for this tiny bad website. Tags, which may be interesting later. Encryption, which, again, overkill. And object locking, to prevent the accidental deletion of objects, which would probably be more useful if I were adding/removing objects programmatically. I&#39;ll leave all those features as default for now.&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Uploading&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Hey, I&#39;ve got a bucket! With nothing it, it, but it is indeed, as promised, a bucket. And it seems I can just upload my &lt;em&gt;index.html &lt;/em&gt;file using the WebUI...&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah, here&#39;s some things I&#39;ll definitely want to go deep on at some point: &lt;strong&gt;permissions &lt;/strong&gt;and &lt;strong&gt;storage types&lt;/strong&gt;. I know the different types of storage will cost differerent amounts and have different restrictions, but I&#39;ll leave this as the default &#34;Standard&#34; for now. There are a couple of pre-defined &lt;em&gt;access control lists&lt;/em&gt;, but given that the &#34;Setting Permissions for Website Access&#34; page earlier has a specific setup recommended, I&#39;m going to leave this predefined as Private for now and change things momentarily, I think.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-3778 post-img&#34; height=&#34;122&#34; src=&#34;succeeded-300x122.png&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Upload succeeded! Of course, trying to access that file online at the moment only yields an Access Denied error, but that was to be expected. I haven&#39;t completed all the required steps yet.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src =&#34;https://gist.github.com/JeffersGlass/103390d195bc0e4352458043a474a5e1.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Static Website Hosting&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Going back into the list of buckets, selecting my newly formed bucket, and clicking on its Properties tab, it&#39;s dead easy to enable the &#34;Static Website Hosting&#34; setting as recommended:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-3780 post-img&#34; height=&#34;260&#34; src=&#34;static-300x260.png&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems this step also takes care of the &#34;Configuring an Index Document&#34; step I anticipated from above. I enter &#34;index.html&#34; as my index document, so AWS knows what file to serve up when users access the &#34;root&#34; of the bucket.&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Permissions&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Since I elected not to configure my permissions automatically before, I&#39;ll go back and do that now, following along with the &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteAccessPermissionsReqd.html&#34;&gt;Setting Permissions for Website Access&lt;/a&gt; page. This is essentially copying and pasting the pre-generated permissions text into the in-browser permissions editor window and hitting save. &lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-3781 post-img&#34; height=&#34;300&#34; src=&#34;permsisions-300x300.png&#34; width=&#34;300&#34;/&gt;&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Success&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, if I go to &lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-3782 post-img&#34; height=&#34;56&#34; src=&#34;helloworld-300x56.png&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Alright! My first website hosted on AWS! So clean, so crisp, so minimalistic. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h1 class=&#34;text-2xl&#34;&gt;Next Steps&lt;/h1&gt;
&lt;p class=&#34;post-p&#34;&gt;Very loosely speaking, this checks off one-and-a-half of the 16 points on the Cloud Resume Challenge checklist:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(4) Static Website&lt;/strong&gt; - Your HTML resume should be deployed online as an Amazon S3 Static Website.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(16) Blog Post&lt;/strong&gt; - Link a short blog post describing some of the things you learned. (Of course, this is not that blog post, but is a starting point and framework for them).&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To my eye, the remaining 14 goals fall into 5 separate topics. Here&#39;s what I think each entails, and which bullet points on the Cloud Resume Challenge they tick off:&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Site Content&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;As catchy as &#34;Hello World&#34; is, a resume it is not. This chunk involves making the website into meaningful content, formatted in a nice way. Possibly with basic, general HTML, possibly with some kind of interesting framework. But content should the primary focus of this chunk. I&#39;m not sure what form that will take, to be honest, but something better than boilerplate would of course be necessary.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This covers goals:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(2) HTML&lt;/strong&gt; - Your resume needs to be written in HTML&lt;br/&gt;&lt;strong&gt;(3) CSS&lt;/strong&gt; - Your resume needs to be styled with CSS&lt;/p&gt;&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Basic AWS Infrastructure&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;A cumbersome URL sitting in a bucket is not the most user friendly interface, nor the most secure. I&#39;ll need to set up a proper DNS address for my new site, and use something like Cloudfront to serve the site over https. Since I&#39;m already somewhat familiar with these processes outside of AWS, I hope this will be both educational and fairly straightforward.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This covers goals:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(5) HTTPS&lt;/strong&gt; - The S3 Website URL should use HTTPs for security&lt;br/&gt;(&lt;strong&gt;6) DNS&lt;/strong&gt; - Point a custom DNS domain name to the site.&lt;/p&gt;&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Site Features&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s a half-dozen goals in the Challenge that seem oriented toward exposing the participant to slightly more advanced website design. The result is a simple visitor counter, but it uses Javascript to query a database via an API and a Lambda written in python, that should be well tested and defined using a Serverless Application Model. I&#39;m sure I&#39;ll find out what a SAM is along the way; I know what most of the other words are at least.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This covers goals:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(7) Javascript&lt;/strong&gt; - Your resume webpage should include a visitor counter that displayed how many people have accessed the site.&lt;br/&gt;&lt;strong&gt;(8) Database&lt;/strong&gt; - The visitor counter will need to retrieve and update its count in a database somewhere.&lt;br/&gt;&lt;strong&gt;(9) API&lt;/strong&gt; - You will need to create an API that accepts requests from your web app and communicates with the database.&lt;br/&gt;&lt;strong&gt;(10) Python&lt;/strong&gt; - Write a bit of Python code in the Lambda function to achieve the API functionality.&lt;br/&gt;&lt;strong&gt;(11) Tests&lt;/strong&gt; - Include some tests for your Python code&lt;br/&gt;&lt;strong&gt;(12) Infrastructure as Code&lt;/strong&gt; - Define your database, API Gateway, and Lambda function in an AWS Serverless Application Model (SAM) template and deploy them&lt;/p&gt;&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Source Management/Deployment&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;You&#39;re telling me that manually uploading &lt;em&gt;index.html&lt;/em&gt; from my hard-drive to a bucket isn&#39;t website development best-practices? Rude.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This chunk actually involves creating two separate GitHub repositories: one to manage the actual content of the site; the other for the backend features developed above. Both will apparently be able to be automatically deployed to their respective parts of the AWS infrastructure, and to only do so if the corrects tests pass. Neat!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This covers goals:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(13) Source Control&lt;/strong&gt; - Create a GitHub repository for your backend code.&lt;br/&gt;&lt;strong&gt;(14) CI/CD Back End&lt;/strong&gt; - Set up GitHub actions such that when you push an update to your Serverless Application Model template or Python code, your tests get run, and, if passing, the changes get packaged and pushed to AWS.&lt;br/&gt;&lt;strong&gt;(15) CI/CD Front End&lt;/strong&gt; - Create a second GitHub repository for your frontend code; configure Github actions so that when you push new code, your website gets updated.&lt;/p&gt;&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Certification&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;To have formally completed the Cloud Resume challenge, one needs to finish the required AWS certification. I suspect this will be the final thing I complete, as its sort of separate from the process of actually constructing the site.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This covers goal:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(1) Certification&lt;/strong&gt; - Your resume needs to have the AWS Cloud Practitioner Certification on it.&lt;/p&gt;&lt;/p&gt;
&lt;h1 class=&#34;text-2xl&#34;&gt;Onward&lt;/h1&gt;
&lt;p class=&#34;post-p&#34;&gt;So where to go next? My impulse is to start with with the GitHub repositories, to make development easier and since I&#39;m already fairly competent with git / GitHub as a workflow. Perhaps then I&#39;ll dig into HTTPS/DNS next, since hopefully those straightforward. That leaves what feels like the larger development fronts - actual content, and all the backend voodoo to implement the guest tracker. Which may actually be nice to bounce between, to keep the juices flowing when I stall on one. And those projects get far enough along their paths, it probably makes sense to start integrating the CI/CD pieces to make that process smoother. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That&#39;s the thought for now, but of course, no battle plan survives contact with the enemy. But it does all sound like fun.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>First Parks on the Air Activation - K-4160, Volo Bog</title>
      <link>https://jeff.glass/post/first-parks-on-the-air-activation-k-4160-volo-bog/</link>
      <pubDate>Mon, 12 Jul 2021 20:18:00 -0500</pubDate>
      
      <guid>https://jeff.glass/post/first-parks-on-the-air-activation-k-4160-volo-bog/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I mentioned in my &lt;a href=&#34;https://jeff.glass/2021/07/06/ham-radio-field-day-2021-storms-and-stations/&#34;&gt;Field Day post&lt;/a&gt; from a few weeks ago that I was hoping to get out to a &lt;a href=&#34;https://parksontheair.com/&#34;&gt;Parks on the Air&lt;/a&gt; activation soon, and this past Saturday, I made it happen!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Parks on the Air is an international program inspired by the &lt;a href=&#34;https://npota.arrl.org/&#34;&gt;ARRL&#39;s 2016 National Parks on the Air event&lt;/a&gt;. While that program ended at the beginning of 2017, a group of invested amateurs set about booting up an independent, ongoing program in the style of &lt;a href=&#34;https://www.sota.org.uk/&#34;&gt;Summits on the Air&lt;/a&gt;, &lt;a href=&#34;https://www.iota-world.org/&#34;&gt;Islands on the Air&lt;/a&gt;, &lt;a href=&#34;https://wwff.co/&#34;&gt;World Wide Flora and Fauna&lt;/a&gt;, etc. The program engages two (overlapping) sets of radio operators: &#39;Activators&#39; who set up portable, temporary operations in state and national parks and wildlands, and &#39;Hunters&#39; who seek them out on the air from more permanent setups. Of course, you can make &#39;park to park&#39; contacts and be a hunter and an activator at the same time.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Parks on the Air | POTA | Parks program for amateur radio.&#34; class=&#34;w-1/4 aligncenter post-img&#34; src=&#34;http://parksontheair.com/wp-content/uploads/2017/12/cropped-thumbnail_Graphic4.jpg&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The draw of this for me is, as I alluded to in the Field Day post - I love the energy of being in the middle of a pile-up. Even if these contacts have a more lighthearted and friendly feel than a rapid fire contest, being a desirable contact on the air is a really jam.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After attending the South Milwaukee Amateur Radio Club&#39;s swapmeet in the morning, I headed back south to &lt;a href=&#34;https://www2.illinois.gov/dnr/Parks/Pages/VoloBog.aspx&#34;&gt;Volo Bog State Natural Area&lt;/a&gt;, a wilderness preserve in Northern Illinois.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The park surrounds a large natural mashland, with many miles of a loop hiking path, scenic overlooks and, importantly for radio operations, a picnic area. I did some scouting on Google Maps ahead of time, and guessed that the picnic tables would be far enough apart that I could find a quiet corner to operate in.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3747 post-img&#34; height=&#34;436&#34; src=&#34;volo.png&#34; width=&#34;531&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And indeed, apart from a few hikers and what looked like a field-trip just departing, the park was pretty quiet. I found a nice picnic table in the shade next to the marsh to set myself up.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;My setup for the day was somewhat more powerful than my Field day setup, including:&lt;/p&gt;
&lt;ul class=&#34;pl-8 post-ul&#34;&gt;
&lt;li&gt;A &lt;a href=&#34;https://www.yaesu.com/indexVS.cfm?cmd=DisplayProducts&amp;amp;ProdCatID=102&amp;amp;encProdID=DF4DB262968932E999EAF928B5B6A1A7&amp;amp;DivisionID=65&amp;amp;isArchived=0&#34;&gt;Yaesu FT-891&lt;/a&gt; running ~70W SSB on 20m and 15m, with the included microphone.&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://www.wolfrivercoils.com/products.html&#34;&gt;Wolf River Coils TIA Mini-Mega antenna&lt;/a&gt; - in retrospect, I didn&#39;t need to install the base-loading coil, since the 17&#39; whip is full size on 15m and 20m.&lt;/li&gt;
&lt;li&gt;No tuner, but I did bring my &lt;a href=&#34;https://www.eham.net/reviews/view-product?id=234&#34;&gt;Autek RF-1&lt;/a&gt; to make sure the antenna was adjusted correctly for each band.&lt;/li&gt;
&lt;li&gt;A&lt;a href=&#34;https://www.bioennopower.com/collections/12v-series-lifepo4-batteries/products/copy-of-12v-12ah-lfp-battery-pvc-blf-1212w&#34;&gt; Bioenno 12v, 12Ah LiFePO battery.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A little powerpole &lt;a href=&#34;https://amzn.to/2U5npWK&#34;&gt;Power Analyzer&lt;/a&gt; to track power usage from the battery&lt;/li&gt;
&lt;li&gt;My classic Hamkey iambic paddle on its little plastic base&lt;/li&gt;
&lt;li&gt;A paper logbook&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Oh what fun was had! I made 98 QSOs in roughly two hours of operating - all but 4 of which were on 20m, the last few on 15m. The bands were all over the place. I had wild swings of propagation into the eastern seaboard and the Southeast; at one point, I had five consecutive contacts from the same corner of Northwest Georgia. But I also reached some ears out in the Southwest, and even a handful of stations out in Oregon and Washington. I also made 8 (I believe) Park to Park contacts with other operators out the in wild.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-3746 post-img&#34; height=&#34;414&#34; src=&#34;pota-1024x589.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;All in all, a tremendous day of fun and excitement, and I&#39;m looking forward to getting back on the air in a park soon.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;73&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Ham Radio Field Day 2021 - Storms and Stations</title>
      <link>https://jeff.glass/post/ham-radio-field-day-2021-storms-and-stations/</link>
      <pubDate>Wed, 07 Jul 2021 01:22:00 -0500</pubDate>
      
      <guid>https://jeff.glass/post/ham-radio-field-day-2021-storms-and-stations/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;post-p&#34; data-block=&#34;9f5724a7-0f91-45a9-8677-e94acbc4f069&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;&lt;em&gt;This post is cross-posted to my Ham Radio specific blog, &lt;a href=&#34;https://kk9jef.wordpress.com/?p=3202&#34;&gt;kk9jef.wordpress.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block is-multi-selected wp-block-paragraph rich-text post-paragrpah&#34; data-block=&#34;9f5724a7-0f91-45a9-8677-e94acbc4f069&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; id=&#34;block-9f5724a7-0f91-45a9-8677-e94acbc4f069&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;Despite sunburns, shattered plastic, and a literal tornado warning, sunburns, I had a great time at Field Day 2021 this year.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block is-multi-selected wp-block-paragraph rich-text post-paragrpah&#34; data-block=&#34;3190d5d5-22aa-4a65-b0f4-e51da79842f2&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; id=&#34;block-3190d5d5-22aa-4a65-b0f4-e51da79842f2&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;My intention had been to head out to the northern Chicago suburbs on Saturday morning for some testing of the setup. My wife and I had purchased an annual pass to the Lake County dog parks in anticipation of the Fourth of July weekend, and our plan had been to drop her (and Winnifred, a very good dog) at one of these parks, go around the corner to a quieter, non-dog-filled local park, setup and operate for an hour and change, then pick the two of them up and head home. I&#39;d charge my battery using an inverter in the car, grab some water and lunch at home, then be back out in a closer local park Saturday afternoon for a long operating session. And maybe, if I woke up in time, I&#39;d pop back out in the morning to the park around the corner from my place for some grayline work on Sunday morning.&lt;/p&gt;&lt;/p&gt;
&lt;figure aria-label=&#34;Block: Image&#34; class=&#34;block-editor-block-list__block wp-block is-resized size-large wp-block-image&#34; data-block=&#34;4ad6c130-9386-4763-8806-2d4efac62c44&#34; data-title=&#34;Image&#34; data-type=&#34;core/image&#34; id=&#34;block-4ad6c130-9386-4763-8806-2d4efac62c44&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;components-resizable-box__container&#34;&gt;&lt;img alt=&#34;A picture of me, my wife, and my dog Winniefred, a yellow lab, on a hike in the woods.&#34; class=&#34;aligncenter post-img&#34; height=&#34;386&#34; src=&#34;https://kk9jef.files.wordpress.com/2021/07/img_3762-edited.jpg&#34; width=&#34;518&#34;/&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;figcaption aria-label=&#34;Image caption text&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable rich-text&#34; role=&#34;textbox&#34;&gt;&lt;em&gt;What Saturday should have looked like.&lt;/em&gt;&lt;/figcaption&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;components-drop-zone&#34; data-is-drop-zone=&#34;true&#34;&gt;&lt;/div&gt;&lt;/p&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block wp-block-paragraph rich-text post-paragrpah&#34; data-block=&#34;65a9a87b-979f-4ebf-961d-3a3c534290ed&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; id=&#34;block-65a9a87b-979f-4ebf-961d-3a3c534290ed&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;Chicago weather had other plans.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;post-p&#34; data-block=&#34;65a9a87b-979f-4ebf-961d-3a3c534290ed&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3741 post-img&#34; height=&#34;758&#34; src=&#34;weather.png&#34; width=&#34;651&#34;/&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block wp-block-paragraph rich-text post-paragrpah&#34; data-block=&#34;bb23edee-1c6a-472b-b252-400c2cbe35d2&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; id=&#34;block-bb23edee-1c6a-472b-b252-400c2cbe35d2&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;We spent pretty much the entire day on Saturday huddled indoors against a pretty fearsome storm, which including multiple tornado warnings, thunderstorm wanrings, flash flood alerts... it was a wild day. I did make it out once in the afternoon to run to the hardware store to work on an impromptu Magnetic Loop antenna project (more on that soon), but other than that, we were holed up with our poor frightened dog.&lt;/p&gt;&lt;/p&gt;
&lt;figure aria-label=&#34;Block: Image&#34; class=&#34;block-editor-block-list__block wp-block size-large wp-block-image&#34; data-block=&#34;1f6596f6-6ddc-4b37-9eb0-99a13fd29084&#34; data-title=&#34;Image&#34; data-type=&#34;core/image&#34; id=&#34;block-1f6596f6-6ddc-4b37-9eb0-99a13fd29084&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;components-resizable-box__container&#34;&gt;&lt;img alt=&#34;This image has an empty alt attribute; its file name is img_3794-edited-1.jpg&#34; class=&#34;aligncenter post-img&#34; height=&#34;403&#34; src=&#34;https://kk9jef.files.wordpress.com/2021/07/img_3794-edited-1.jpg&#34; width=&#34;301&#34;/&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;figcaption aria-label=&#34;Image caption text&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable rich-text&#34; role=&#34;textbox&#34;&gt;&lt;em&gt;At least we have a sense of humor about these things&lt;/em&gt;&lt;/figcaption&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;components-drop-zone&#34; data-is-drop-zone=&#34;true&#34;&gt;&lt;/div&gt;&lt;/p&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block wp-block-paragraph rich-text post-paragrpah&#34; data-block=&#34;fc2f6320-abc4-4e24-809d-be1ca1340637&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; id=&#34;block-fc2f6320-abc4-4e24-809d-be1ca1340637&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;But like a breath of fresh air, Sunday brought cool(ish) clear skies, dry weather, and a rather perfect operating day by mid-morning. So I pulled the portable-rig back together and headed out to the originally-planned local park to catch the last few hours of Field Day.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block wp-block-paragraph rich-text post-paragrpah&#34; data-block=&#34;a76a04f5-7cb5-4653-8492-bed335e90d1c&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; id=&#34;block-a76a04f5-7cb5-4653-8492-bed335e90d1c&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;My setup&#39;s changed a fair bit in the last couple years (and will likely be changing again soon). Here&#39;s what I was playing with on Field Day this year:&lt;/p&gt;&lt;/p&gt;
&lt;ul aria-label=&#34;Block: List&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block wp-block-list rich-text post-ul&#34; data-block=&#34;402f369d-ad17-4bc7-9dba-f1a0653a6287&#34; data-title=&#34;List&#34; data-type=&#34;core/list&#34; id=&#34;block-402f369d-ad17-4bc7-9dba-f1a0653a6287&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://www.radiomasterlist.com/en/xiegu-x108g.html&#34;&gt;Xiegu X108-G&lt;/a&gt; 20W Transceiver for SSB, CW, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wolfrivercoils.com/order.html&#34;&gt;Wolf River Coils &#34;Mega Mini TIA&#34; portable antenna&lt;/a&gt;, a stainless steel collapsible whip with a base-loading coil that sits on three removable tripod legs. WRC sells a wide variety of configurationsand sizes of this basic setup - mine is a 17&#39; whip with the larger (~14&#34;) coil and 24&#34; tripod legs. It&#39;ll tune around 80m to 10m, though of course on 80m it&#39;s reeeeally short.&lt;/li&gt;
&lt;li&gt;The antenna ships with three 10m radials, which attach to the tripod base with ring lugs. I added three 7.5m radials (1/4 wavelength on 30m) and re-used my 5m radials from the &lt;a href=&#34;https://wordpress.com/post/kk9jef.wordpress.com/3156&#34;&gt;QRPGuys Tri-Band Vertical setup&lt;/a&gt; I had been using. Each set has a bullet connector on it, and a single ring-lug-to-three-bullet-connector squid attaches to the tripod&lt;/li&gt;
&lt;li&gt;The battery for the day was a&lt;a href=&#34;https://amzn.to/2Up7GSj&#34;&gt; TalentCell 12V, 6A, 8300mAh battery&lt;/a&gt; i picked up from Amazon. We used these batteries all the time in live theatre for their size and weight, and while I doubt that I&#39;m getting the full 8300mAh from it (especially since the X108-G draws around 6A on transmit), it lasted me through a solid afternoon&#39;s operating.&lt;/li&gt;
&lt;li&gt;I remounted my iambic paddles from their cast-iron base to a lighter plastic one&lt;/li&gt;
&lt;li&gt;I picked up an&lt;a href=&#34;https://www.radiodx.com/articles/technical/equipment-reviews/autek-antenna-analyser-review/&#34;&gt; Autek VA-1 antenna analyzer&lt;/a&gt; earlier this year, which makes a great quick tuning method for the antenna. I played around with bringing my &lt;a href=&#34;https://amzn.to/3dO4y9g&#34;&gt;Nano NVA H-4&lt;/a&gt; out, but it&#39;s just a little too fiddly for regular field use.&lt;/li&gt;
&lt;li&gt;25&#39; of RG8x from the radio to the antenna&lt;/li&gt;
&lt;li&gt;A camp chair and a portable picnic table make from easy ergonomic in the field&lt;/li&gt;
&lt;li&gt;Logging is pen-and-paper, for now&lt;/li&gt;
&lt;/ul&gt;
&lt;figure aria-label=&#34;Block: Image&#34; class=&#34;block-editor-block-list__block wp-block size-large wp-block-image&#34; data-block=&#34;0d90a773-5e2e-4112-98c6-857a4c503025&#34; data-title=&#34;Image&#34; data-type=&#34;core/image&#34; id=&#34;block-0d90a773-5e2e-4112-98c6-857a4c503025&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;components-resizable-box__container&#34;&gt;&lt;img alt=&#34;This image has an empty alt attribute; its file name is fd1.png&#34; class=&#34;post-img&#34; src=&#34;https://kk9jef.files.wordpress.com/2021/07/fd1.png?w=1007&#34;/&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;figcaption aria-label=&#34;Image caption text&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable rich-text&#34; role=&#34;textbox&#34;&gt;&lt;em&gt;The setup in the park&lt;/em&gt;&lt;/figcaption&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;components-drop-zone&#34; data-is-drop-zone=&#34;true&#34;&gt;&lt;/div&gt;&lt;/p&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block wp-block-paragraph rich-text post-paragrpah&#34; data-block=&#34;6b6f8ae2-0ba1-4395-93a8-629566c921ba&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; id=&#34;block-6b6f8ae2-0ba1-4395-93a8-629566c921ba&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;I spent the first couple hours hunting and pouncing, mostly on 20m with a stint up to 15m. 20m was super-densely populated as usual; 15 less so, but still with some decent stations holding the band down. I made roughly 25 contacts in that time with some decent distance - Arizona, Florida, Arkansas, Pennsylvania..&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block wp-block-paragraph rich-text post-paragrpah&#34; data-block=&#34;f2bb5066-84bc-42a5-8a66-d5b3681e651b&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; id=&#34;block-f2bb5066-84bc-42a5-8a66-d5b3681e651b&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;At 1pm local time, Field Day hit 24 hours elapsed, which is the maximum operating time for home, mobile, and emergency operations center stations... but Class A (club) and Class B (1/2 op portable) were permitted to go to 4pm. And with the bands newly clearly of the massive home stations, I figured, why not call CQ for awhile?&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block wp-block-paragraph rich-text post-paragrpah&#34; data-block=&#34;c93b92c3-d352-4afb-8e75-962365940be5&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; id=&#34;block-c93b92c3-d352-4afb-8e75-962365940be5&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;WHAT A RIDE.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block wp-block-paragraph rich-text post-paragrpah&#34; data-block=&#34;c32ea9bf-142f-4bad-a889-ca35a808fe13&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; id=&#34;block-c32ea9bf-142f-4bad-a889-ca35a808fe13&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;I held a frequency on 20 meters for roughly 75 minutes, during which I made 90+ contacts. Being the run station was an absolute blast - I&#39;ve done such things at Field Days before, but never as a solo operator and never with my own personal station. Knowing there&#39;s no logger to have your bag, just you and the airwaves and the piles of people calling... a truly great time. I know I won&#39;t set any records for speed or quantity of contacts, but I had a blast.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block wp-block-paragraph rich-text post-paragrpah&#34; data-block=&#34;7ff4ec00-a019-4857-be54-f11e9867ec91&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; id=&#34;block-7ff4ec00-a019-4857-be54-f11e9867ec91&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;I&#39;m currently looking for a day to go out and do a Parks on the Air activation to recapture some of the rush of running a station. Really, what a joy. And I&#39;ll have a couple of new toys to play with by then...&lt;/p&gt;&lt;/p&gt;
&lt;figure aria-label=&#34;Block: Image&#34; class=&#34;block-editor-block-list__block wp-block size-large wp-block-image&#34; data-block=&#34;c8ec406d-b778-4fde-bd0f-9a26cab7b3f2&#34; data-title=&#34;Image&#34; data-type=&#34;core/image&#34; id=&#34;block-c8ec406d-b778-4fde-bd0f-9a26cab7b3f2&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;components-resizable-box__container&#34;&gt;&lt;img alt=&#34;This image has an empty alt attribute; its file name is parks.png&#34; class=&#34;post-img&#34; src=&#34;https://kk9jef.files.wordpress.com/2021/07/parks.png?w=551&#34;/&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;figcaption aria-label=&#34;Image caption text&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable rich-text&#34; role=&#34;textbox&#34;&gt;&lt;em&gt;There&#39;s lots of Parks on the Air parks in the Chicagoland area - I hope to be activating them soon!&lt;/em&gt;&lt;/figcaption&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;components-drop-zone&#34; data-is-drop-zone=&#34;true&#34;&gt;&lt;/div&gt;&lt;/p&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p aria-label=&#34;Paragraph block&#34; aria-multiline=&#34;true&#34; class=&#34;block-editor-rich-text__editable block-editor-block-list__block wp-block wp-block-paragraph rich-text post-paragrpah&#34; data-block=&#34;02046282-5397-4089-b0c5-04c842c57e08&#34; data-empty=&#34;false&#34; data-title=&#34;Paragraph&#34; data-type=&#34;core/paragraph&#34; id=&#34;block-02046282-5397-4089-b0c5-04c842c57e08&#34; role=&#34;group&#34; tabindex=&#34;0&#34;&gt;73&lt;/p&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020: Day 2-9</title>
      <link>https://jeff.glass/post/advent-of-code-2020-day-2-9/</link>
      <pubDate>Wed, 02 Dec 2020 16:17:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2020-day-2-9/</guid>
      <description>
&lt;!--&lt;script src=&#34;&lt;script src=&#34;https://gist.github.com/JeffersGlass/c9e89c313081b88574ebb759d7e3e72e.js&#34;&gt;&lt;/script&gt;.js&#34;&gt;&lt;/script&gt;--&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;&lt;a data-type=&#34;URL&#34; href=&#39;.js&#34;&#39;&gt;Code for all days is on GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Day 2&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Nothing terribly fancy going on with the day 2 challenge - essentially, reading in a text file and doing operations on strings. After developing the ability to split the input lines and validate them in part one, part 2 throws a curveball by changing up how the lines should be validated. I refactored my &#34;isValidLine&#34; code to take a validation function as one of its arguments, since the parsing/splitting of the line is the same for both parts 1 and 2.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(&lt;em&gt;The names of the validation functions come from the problem description - they validate the passwords for a sled company and a toboggan company, respectively&lt;/em&gt;.)&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/7e97c17b46a2779e50b9005c27c26c95.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 3&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;A slightly more involved bit of data and text processing today, as we help our would-be tobogganist make it down a snowy slope covered in trees. As a way of pushing my Python knowledge, I tried to complete both parts of today&#39;s challenge using list comprehensions and iterative functions like map, reduce, enumerate, etc. My impulse is to write things out more explicitly by iterating through the elements of input in a for loop, but practicing the list comprehensions and their related utility functions feels good.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Is the inline code better than the more verbose versions? I&#39;m not entirely sure - it&#39;s certainly less readable than the expanded-into-a-loop versions. It&#39;s also somewhat harder to debug, because there aren&#39;t logical places to, say, print intermediate results. So something like my getSlopeTrees() function, as written, is just silly-long and hard to read - the getSlopeTreesVerbose() function, which I wrote as part of troubleshooting a specific issue is definitely more readable.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The punchline of my issue was: at least in Python 3.9, floats can&#39;t be used as list indices, even if they&#39;re integers. That is, even if a float for which is_integer() returns true, you must explicitly cast that float to an integer to use it index a list. In code form:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/e2ceed37a5b459304216389328854e87.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;So, another thing learned. Thanks Advent of Code!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s the full code from Day 3:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/9dbd5c3977a9ddaa59308001d55dd48a.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 4&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can slowly feel the difficulty starting to ramp up here in day four. We&#39;re still walking on paved roads, as it were, but they&#39;re not as well maintained as they used to be in day one.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Today&#39;s problem concerns more text parsing - the first part just says to validate, essentially, that 7 unique strings are present between sets of blank lines in the input file. The code for this is pretty straightforward - I tried for a little while to do it all in one list comprehension, but ended up splitting it into two lines, which I think is clearer. To be sure, I don&#39;t think that doing it in one comprehension would be &lt;em&gt;better&lt;/em&gt;, just that I thought it would be fun practice.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/cf670f595c99db49b8564cc600ce26c6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, with the problem statement framing these 7 strings as labels for values in a passport (eyc:blu, hgt:171cm, etc), it seemed like a straight guess that we&#39;d actually have to parse those values by field and do something with them in part two. And of course, we were right. For each of the 7 fields, validation criteria are listed, including ensuring certain fields are numerical and within certain bounds, prepended or postended by certain characters, and so on. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This part turned out ok - it takes the text file, splits it into individual passport strings, then splits each of those into a list of strings of the form &#34;key:value&#34;. The part that feels most &#34;un-Pythonic&#34; to me is the part (commented below) that turns that list of lists of strings into a list of dictionaries. I figure there&#39;s got to be a way to do that with a comprehension, but I couldn&#39;t quite make it work, so I did it as a couple For loops. It works fun, just feels a little clunky.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also implemented my own prettyPrintPassword function (and its alias &#39;ppp&#39;) - it doesn&#39;t do any sorting of the fields, and it doesn&#39;t show you &lt;em&gt;why&lt;/em&gt; a passport is invalid if it fails, but it did what I needed it to do for troubleshooting purposes.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/de08f5f205eddaccbe56980f9b3d4d29.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 5&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Wow, a quickie today! The title of the day&#39;s challenge (&#39;Binary Boarding&#39;) gives you a pretty strong clue what it&#39;s going to be about. The challenge is essentially to parse text representing binary numbers in your language of choice and find the minimum, maximum, and missing values in between. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is my shortest solution so far, at only 5 lines of code (for both parts!):&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/a233c4ef04fc5eb9422bebf8b0106770.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;This is where Python&#39;s use of convenience generators (like range), built in math functions on general iterators (like min and max), and lots of string functionality (like replace) really shines - the code is easy to write and clean.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Looking back at &lt;a &#34;=&#34;&#34; 11=&#34;&#34; 2020=&#34;&#34; 25=&#34;&#34; advent-of-code-2020=&#34;&#34; data-id=&#34;3332&#34; data-type=&#34;post&#34; href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34; jeff.glass=&#34;&#34;&gt;my goals for Code.js&#34;&amp;gt; Advent 2020&lt;/a&gt;, I&#39;d say I&#39;m doing pretty well - I&#39;m already feeling more fluent/comfortable with list/dictionary comprehensions, the git workflow is becoming more natural, and I&#39;ve completed each project on the day it&#39;s issued. Not too much challenge in terms of the algorithms and data structures so far, but then it is only day 5....&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;This post will be updated with code from a handful of future days, until it gets too long/unwieldy.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Day 6&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;As it turns out, talking out loud while generating algorithms while writing code is... hard. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I coded up the solution to Day 6 &lt;a href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34; watch?v=&#39;s7UDMUALBxU&#34;&#39; www.youtube.com=&#34;&#34;&gt;live on stream on Sunday.js&#34;&amp;gt; night&lt;/a&gt;, which was both fun and challenging. Part one of the challenge wasn&#39;t too terribly hard - it basically asks whether each letter of the alphabet is contained between any pair of blank links (&#34;\n\n&#34;) in the input file. That&#39;s a solution that only takes a few lines to write.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I ended up writing three solutions to part 2. I ended up ordering them in the code in order of their complexity/lines of code, but that&#39;s not the order I wrote them in. I first wrote a really over-complicated solution (3), then condensed it down to a single list comprehension (1), then expanded that back out just a little to make it more readable. Like I said on stream, if I were writing this code to go into some kind of actual codebase, I think solution (2) is the one I&#39;d use - it&#39;s concise enough to be comprehensible, but long enough to not be overwhelmingly dense.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/2801abec57bce67bad64d553974984b6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 7&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Oof, this day too far, far longer than it should have, all because I misunderstood Python&#39;s strip() function. strip, for those who are wondering, removes any of the set of characters given as its arguments from the beginning or end of a string. So, &#34;Hello World&#34;.strip(&#39;Hld&#39;) =&amp;gt; &#34;ello Wor&#34;. Unfortunately, I thought that the strip function removed the exact &lt;em&gt;string&lt;/em&gt; given it it as an argument, leading to it stripping additional characters off of the end of some inputs and causing my parsing to be wrong. Oof.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In any case, the two halves of day 7 involve creating a tree of data in two different ways (one in which parents reference children, and one in which children reference parents). Then we sum up the total number of parents or children, unweighted or weighted, respectively.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/52440fef8db4118166b0cda14c6e7a65.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 8&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Day 8 is giving me flashbacks to the &lt;a 2&#34;=&#34;&#34; 2019=&#34;&#34; adventofcode.com=&#34;&#34; day=&#34;&#34; href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34;&gt;intcode challenges&lt;/a&gt; of 2019! .js&#34;&amp;gt;But it&#39;s a much softer start this time - we only have three pseudo-assembly instructions to parse, and simpler questions to answer. Once we&#39;ve built a simple function for processing a given list of these instructions, we&#39;ve solved part one. Part 2 requires iterating over our input data and manipulating it slightly, and testing to see whether the new version of the input fulfills the required condition, so our code will need to work over general lists of instructions.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The only thing that hung me up today was forgetting to take into account how Python&#39;s lists handle objects. Specifically, this is the behavior that I was (rightly, but unwantedly) seeing:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code&gt;listA = [[1,2],[2,4],[3,6]]&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;listB = [a for a in listA]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;listB[0] = [4, 8]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;print(listA)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&amp;gt;&amp;gt;&amp;gt;[[4,8],[2,4],[3,6]]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Though it doesn&#39;t look like listA is ever being modified, the way we&#39;ve constructed listB, it actually &lt;em&gt;references&lt;/em&gt; the same objects as listA. So when we change the object [1,2] to be [4,8], it changes everywhere that object is referenced in both lists. A little thing I once knew, but had skipped my brain for about 8 minutes. Whoops!&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/89eae182516f48540976b532e08de65c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 9&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that felt pretty good! The consensus across the interwebs (twitter, reddit) seems to be that today was relatively easy, and I&#39;d agree. The problem involved two different ways of comparing integers in an input list to the previous 25 numbers, and doing some math on them. There are probably slightly more efficient algorithms, especially for part 2 - currently when the running sum starting from a given position, I throw out the entire sum and start again from the next position, which is likely wasteful. But for only 1000 inputs, the code still runs in ~160 milliseconds, so I don&#39;t think it&#39;s worth the time to make it more efficient. If this problem comes back in future days, that may be worth revisiting.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/0936c84fffd5e6ce5c6044767e59282d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020: Day 1</title>
      <link>https://jeff.glass/post/advent-of-code-2020-day-1/</link>
      <pubDate>Tue, 01 Dec 2020 16:58:57 -0500</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2020-day-1/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;I know in &lt;a href=&#34;https://jeff.glass/2020/11/25/advent-of-code-2020/&#34;&gt;my introductory post&lt;/a&gt; I said I wasn&#39;t going to post something every day, and I meant it! But I ended up with a little extra time on my hands today and this casual summary has turned into an actual post... I&#39;m going to have to think about how I categorize these posts so anyone who stumbled across my blog isn&#39;t wading through five pages of Advent of Code writeups before getting to tiny moving lights. But for now, here&#39;s day 1.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://github.com/JeffersGlass/codeadvent2020/tree/main/Day1&#34;&gt;&lt;em&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;&lt;strong&gt;Full code is available on GitHub.&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Much like last year, this year&#39;s Day 1 challenge starts by essentially making sure we can read in a text file and do basic math on it. The first problem asks us to find which two integers in a text file that sum to 2020 and retrieve their product; the second asks the same question, but for a set of 3 integers.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Just for gits and shiggles, I implemented the solution to part one in two different ways. The first, in a function I title &#34;naiveFind&#34;, just loads all of the numbers from the file into a list, then loops over every pair of numbers until it finds a pair that sums to 2020 (the success() function is detailed below). This is a fine way to approach this problem, but not terribly efficient for long lists:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/d481ae8dbac18127dafa9746d5e142fe.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The speedier way to solve this problem is to use a hashmap, which we get for free in the form of Python dictionary lookups (&lt;em&gt;in most implementations of Python&lt;/em&gt;.) Rather than looping over all pairs of numbers, we can just proceed through the the list once, storing each member in a dictionary, and as we load each new number, we check to see if it&#39;s &#34;2020&#39;s complement&#34; is already in our dictionary&#39;s keys. This is faster than a raw comparison because looking via hashing is cheaper than doing a &#39;by-hand&#39; comparison of all of the numbers ourselves.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/a33279fd7dabe5869cb7923b86e5f938.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For the second part of the problem, I only implemented a &#34;naive&#34; solution, running in O(n³) time:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/31e836eecc0434f4838598d0858b1d8b.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With the need to now communicate a set of three numbers (and their product) that form a solution, I rewrote my success() function to accommodate any number of inputs as arguments. (The original, two-input function is commented-out at the bottom.)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/f5d52dc0a2d5b5b8af53c9edb27e5337.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To see how efficient these various functions were, I wrote a quick decorator function that allows me to see the (rough) execution time of each solution:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/bb312d167985d9db8c7ea0c0ca01d2f4.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Running all three of our search functions in turn:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3340 size-full post-img&#34; height=&#34;106&#34; src=&#34;function-timing.jpg&#34; width=&#34;514&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We can see that:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;The naïve way of looping over all the pairs of products takes about 1.5 ms to complete&lt;/li&gt;
&lt;li&gt;The hashset (dictionary) method of finding one pair of numbers takes about 0.6 ms to complete&lt;/li&gt;
&lt;li&gt;The naïve way of finding a triple of numbers takes about 65 ms to complete&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Some stray thoughts from today&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;When I originally tried to run my basic test code to ensure I was reading the input text file correctly, I got the error: &#34;No such file or directory.&#34; Which is odd, because the text file was just sitting in the same folder as my Python script, like always. It turns out that by default, VSCode uses the open &lt;em&gt;folder&lt;/em&gt; as its source, not where the script is actually being executed. You can change this in the Python terminal settings:&lt;img alt=&#34;image&#34; class=&#34;post-img&#34; src=&#34;https://user-images.githubusercontent.com/3840081/84087466-ff37df00-a99e-11ea-8fea-3f21dcd80e23.png&#34;/&gt;&lt;/li&gt;
&lt;li&gt;I&#39;ve made use of the functools.wraps wrapper to assist me in writing my own decorator functions before, but using it again today to write the timer function makes me want to look a little deeper under the hood to see what it&#39;s doing.&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;Postscript:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I was just kicking around the #AdventOfCode hashtag on Twitter after completing my solutions, and ran across these super-nifty &#34;Pythonic&#34; solutions by @Brotherluii:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;https://twitter.com/Brotherluii/status/1333756750579830784&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For those for whom the embedded tweet doesn&#39;t work:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code&gt;with open(&#39;input.txt&#39;, &#39;r&#39;) as file:&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    data = {int(number) for number in file}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;#Part 1&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;print({entry * (2020-entry) for entry in data if (2020-entry) in data})&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;#Part 2&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;print({entry1 * entry2 * (2020 - entry1 - entry2)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    for entry1 in data for entry2 in data&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    if (2020 - entry1 - entry2) in data})&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Though I understand list comprehensions, I feel like they&#39;re never my go-to tool, but seeing them composed like this, I can see how they can be pretty beautiful in the right hands.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020</title>
      <link>https://jeff.glass/post/advent-of-code-2020/</link>
      <pubDate>Wed, 25 Nov 2020 19:31:37 -0500</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2020/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Last winter, I participated in the annual &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code Challenge&lt;/a&gt;, a website which offers small (&lt;em&gt;but not necessarily easy&lt;/em&gt;) programming challenges every day from December 1 through 25. It turned out to be a great way to get exposed to different corners of development in my language of choice (Python), and with a little more time on my hands this Winter, I&#39;m excited to dive into it again.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The challenges are all written in a non-programming-language-specific way. For example, the &lt;a href=&#34;https://adventofcode.com/2019/day/1&#34;&gt;first part of the problem from December 1, 2019&lt;/a&gt; boils down to:&lt;/p&gt;
&lt;div class=&#34;pl-8 font-mono&#34;&gt;
&lt;p&gt;* Ingest a list of numbers from a text file, with one line per number&lt;/p&gt;
&lt;p&gt;* For each number, divide it by 3, round down, and subtract 2&lt;/p&gt;
&lt;p&gt;* Sum all these results together&lt;/p&gt;
&lt;p&gt;* Print/return/somehow give the user back the sum&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;While I was doing this in Python, there&#39;s no reason you couldn&#39;t do it in C, or Java, or Haskell, or ALGOL, or any language of your choice (&lt;em&gt;though of course, some of the problems will be more tractable using structures built into some languages and not othe&lt;/em&gt;rs&lt;em&gt;)&lt;/em&gt;. The actual prompts are a bit more flavorful that that example - a narrative about needed to rescue Santa from outer-space was woven through all 25 problem last year.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m confident in saying that my Python has gotten significantly stronger over the past year, but I&#39;m feeling like I could be stronger in some algorithmic thinking (the &lt;em&gt;mazes&lt;/em&gt; last year slayed me) and in some process crevices around my workflow. To that end, my goals for this year are:&lt;/p&gt;
&lt;ul class=&#34;pl-8 post-ul&#34;&gt;&lt;li&gt;To strengthen my intuition for solving data-based problems with time-efficient algorithms&lt;/li&gt;&lt;li&gt;To cement the core concepts around Pythonic data structures in my knowledgebase&lt;/li&gt;&lt;li&gt;To become more comfortable with Git/GitHub, in particular its command line interface and the branch/merge/HEAD flow&lt;/li&gt;&lt;li&gt;To complete each challenge on the day it&#39;s issued&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Because nobody needs their RSS feed flooded by me every day for a month, I think I&#39;ve found a way to start a blog post on, say, December 1st, update it every day for a week, then only push to the RSS feed on the 7th - so if you want to check on them daily, you can go to the actual factual blog, or just wait for the summary posts to come out.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;re just interested in the code (or are reading this from the future) and want to see my solutions, I&#39;ll be posting the code &lt;a href=&#34;https://github.com/JeffersGlass/codeadvent2020&#34;&gt;over on GitHub&lt;/a&gt;. I&#39;m not going to be striving to be one of the first 100 people posting successes to each problem (&lt;a href=&#34;https://adventofcode.com/2020/leaderboard&#34;&gt;for which there is a leaderboard&lt;/a&gt;), I&#39;m just solving these for me. And I encourage anyone out there looking to build their programming confidence to do the same!&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Demilight-version 0.9.1</title>
      <link>https://jeff.glass/post/demilight-v-0-9-1/</link>
      <pubDate>Tue, 22 Sep 2020 17:52:04 -0500</pubDate>
      
      <guid>https://jeff.glass/post/demilight-v-0-9-1/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;The Demilight (miniature moving light) project has been slowed down in the past few months, mostly by good things. Namely, my return to my fulltime job and other interesting technical nerdery. But the project soldiers on!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I made a video detailing the trials and tribulations of getting version 0.9.1 built, which you can watch below (embedded) or &lt;a href=&#34;https://www.youtube.com/watch?v=P-ZiBg6NIeI&#34;&gt;over on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/P-ZiBg6NIeI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>How to Livestream a (Technology Focused) Class</title>
      <link>https://jeff.glass/post/how-to-livestream-a-technology-focused-class/</link>
      <pubDate>Sat, 29 Aug 2020 17:37:26 -0500</pubDate>
      
      <guid>https://jeff.glass/post/how-to-livestream-a-technology-focused-class/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;In BC times (&lt;span style=&#34;text-decoration: underline;&#34;&gt;B&lt;/span&gt;efore &lt;span style=&#34;text-decoration: underline;&#34;&gt;C&lt;/span&gt;ovid), I had often dreamed of setting up a semi-regular gathering with some nerd friends to make things. We&#39;d all sit around, drink beer, eat trail mix, and bash things together with Arduinos and Raspberry Pis and servos and LEDs and what have you. And then March 2020 rolled around - getting together in person was suddenly passé, but with my day job sending us home for &#34;three weeks&#34; of shelter-at-home, I also had a lot more time on my hands...&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And so, the &lt;a href=&#34;https://jeff.glass/electronics-bash/&#34;&gt;Electronics Bash live video classes&lt;/a&gt; were born. Starting Sunday, March 15, I begin streaming live electronics classes every Sunday night. They have centered around Arduino programming and usage, but I&#39;ve also branched off into electrical theory, battery types, microcontroller hardware, and other related topics. After 20 weeks of that, I shifted gears to Raspberry Pi programming and single board computers. Many of the topics have been suggested by the small but enthusiastic core group of nerds who come together on Sunday nights to share ideas and learn things.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-841 post-img&#34; height=&#34;405&#34; src=&#34;3-29-2020-Thumb-1024x576.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s now late-August 2020, I&#39;ve taught 22 of these classes, I&#39;m back at my day job, and having &#34;completed&#34; the Arduino course, it feels like I&#39;ve created &#34;one whole thing&#34; . And so I thought it might be a fun time to look back at what I&#39;ve learned about online teaching, streaming setups, electronics, and life over the first 22 Electronics Bash classes.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Some of this is going to be technical, some philosophical, some nonsensical. But what else is new.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span clas=&#34;m-auto&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1296 size-large post-img&#34; height=&#34;405&#34; src=&#34;streamcap1-1024x576.png&#34; width=&#34;720&#34;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;The stream looks pretty good these days, I like to think.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h3 class=&#34;text-3xl&#34;&gt;Technology&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;My technology setup has been relatively consistent since about week 4 of Electronics Bash, with a few adjustments along the way as noted below. Let&#39;s break it down by technology categories.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(&lt;span class=&#34;italic&#34;&gt;My setup in many areas changed significantly with the shift to Raspberry Pi classes, so all those changes are noted at the end of this section.&lt;/span&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Goals&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;When I leapt into the idea of teaching these classes, the thought was to focus on &#34;Arduino, Electronics, and Related Stuff.&#34; I knew I would need at least two things to be visible: a computer desktop (for the programming IDE and explanatory slides) and the workbench itself (for showing wiring and physical demos). Seeing my face I&#39;d count as a bonus. I also wanted to stream in reasonably high resolution - 720p as a goal, 1080p would be nice - and to make the process of switching between what the viewer is seeing as seamless as possible. Most topics would involve a good amount of swapping back and forth between slides, code, the workbench, and verbal explanation. And it should all look reasonably clear and clean.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The setup that I came up with has served me well in these regards over time, and wasn&#39;t terribly complicated nor expensive to put together.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Computer&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I use my &lt;a href=&#34;https://amzn.to/3lk85P0&#34;&gt;Lenovo Legion Y7000&lt;/a&gt; laptop for basically all my computer purposes these days, including streaming and programming. It&#39;s a &#34;gaming laptop&#34;, which essentially means it has a mid-tier GPU stuffed inside a laptop chassis with some extra fans. I personally like the versatility this gives me - I can run &lt;a href=&#34;https://www.autodesk.com/products/fusion-360/overview&#34;&gt;Fusion360&lt;/a&gt; or &lt;a href=&#34;https://www.autodesk.com/products/autocad/overview&#34;&gt;AutoCAD&lt;/a&gt; pretty well, rendering a video out from &lt;a href=&#34;https://www.blackmagicdesign.com/products/davinciresolve/&#34;&gt;Da Vinci Resolve&lt;/a&gt; is pretty efficient, and my setup is still portable.&lt;/p&gt;
&lt;img alt=&#34;Lenovo Legion Y7000P-1060 - Notebookcheck.net External Reviews&#34; class=&#34;aligncenter post-img&#34; height=&#34;256&#34; src=&#34;https://www.notebookcheck.net/typo3temp/_processed_/a/3/csm__MG_3512_b10bc87ad6.jpg&#34; width=&#34;341&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;I have an external monitor more or less permanently behind my workbench to accommodate the streaming setup - it&#39;s a basic 1600x900 monitor that I picked up from &lt;a href=&#34;https://www.freegeekchicago.org/&#34;&gt;FreeGeek Chicago&lt;/a&gt; at some point, just fed from the HDMI output on my laptop.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-1313 size-large post-img&#34; height=&#34;540&#34; src=&#34;IMG_0986-1024x768.jpg&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Cameras&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;My stream setup centers around two primary views- looking at something on the workbench (with my face in a little window in the corner) and looking at something on the computer (with my face in a little window in the corner). Sometimes, it&#39;s looking at my face alone, but that&#39;s mostly for the beginning and end of the class, and any long explanations in the middle. The full list of stream looks is below, but these are the big two/three.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To achieve these core looks, I have three cameras: two &lt;a href=&#34;https://amzn.to/3lk86T1&#34;&gt;Logitech c920 HD webcams&lt;/a&gt; as the face-cameras, and a &lt;a href=&#34;https://amzn.to/3hJiFwV&#34;&gt;Sony a5100 mirrorless camera&lt;/a&gt; feeding an &lt;a href=&#34;https://amzn.to/2G03QrH&#34;&gt;Elgato CamLink 4k HDMI capture dongle&lt;/a&gt; pointing straight down at the workbench.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The c920s are both mounted on &lt;a href=&#34;https://www.thingiverse.com/thing:2477180&#34;&gt;3D-printed&lt;/a&gt; &lt;a href=&#34;https://www.thingiverse.com/thing:3015022&#34;&gt;reposition-able arms&lt;/a&gt;, which mount to some 2020 aluminum extrusion that clips onto the front of my workbench shelves. They&#39;re really decent face cameras, with a wide field-of-view and decent autofocus. It&#39;s a shame that the Logitech drivers don&#39;t like to save their settings very well, so I end up needing to reconfigure things like color temperature and gain every time I restart my streaming software. But that&#39;s only an annoyance.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;You can see both &lt;a href=&#34;https://amzn.to/2YB3Qoe&#34;&gt;ducting tape&lt;/a&gt; (NOT duct tape) and &lt;a href=&#34;http://store.gopherstagelighting.com/city-theatrical-black-tak/&#34;&gt;Black Tack&lt;/a&gt; in the pictures below, used as barn-doors to shield the cameras from the nearby lights to avoid flare. I have one for when I&#39;m working at the workbench and another for when I&#39;m looking at the laptop screen.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-1300 size-medium post-img&#34; height=&#34;225&#34; src=&#34;IMG_0951-300x225.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The a5100 is usually attached to an &lt;a href=&#34;https://amzn.to/2QsvSOw&#34;&gt;11&#34; magic arm&lt;/a&gt; with a soft-clamp on a higher shelf; I also have a&lt;a href=&#34;https://amzn.to/3jh3r2u&#34;&gt; desktop boom-arm&lt;/a&gt; for filming things up-close, but I almost never stream that way. I originally had a &lt;a href=&#34;https://amzn.to/31uNL5D&#34;&gt;cheaper, plastic-y 11&#34; magic arm&lt;/a&gt;, in the theory that I wasn&#39;t sure if it would actually be useful. Turns out they&#39;re a great tool, but the cheapiest ones wear out pretty quick - the metal ones like the one linked above are worth the investment.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-1301 post-img&#34; height=&#34;225&#34; src=&#34;IMG_0961-300x225.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I use the &lt;a href=&#34;https://amzn.to/3gtAiiM&#34;&gt;kit OSS 18-55mm lens&lt;/a&gt; that the A5100 came with - with &#34;digital true zoom&#34; providing another 2x magnification beyond the longest zoom range, I find I get a really good range of full-desk to close-up-on-table. A &lt;a href=&#34;https://amzn.to/34Ah5JZ&#34;&gt;battery-replacer&lt;/a&gt; (wall-wart-to-battery-form-&lt;wbr/&gt;factor-plug) is a must for streaming, because any internal battery is going to die very quickly. The a5100 also requires a &lt;a href=&#34;https://amzn.to/2YFRBXw&#34;&gt;micro-HDMI to HDMI cable&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Software&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I use &lt;a href=&#34;https://obsproject.com/&#34;&gt;Open Broadcast System (OBS)&lt;/a&gt; as my primary streaming software. I find it does most everything I want it to, and a couple other things besides. Since I&#39;m not monetizing my streams at all, and don&#39;t need features like pop-up notifications when somebody throws me some digi-chits or something, I don&#39;t feel the need to switch to something like &lt;a href=&#34;https://streamlabs.com/&#34;&gt;Streamlabs&lt;/a&gt; or &lt;a href=&#34;https://streamelements.com/&#34;&gt;Stream Elements&lt;/a&gt;. But perhaps someday I should play with them.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-1311 size-large post-img&#34; height=&#34;408&#34; src=&#34;obs-with-chat-cropped-1024x580.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As I mentioned above, my big 3 scenes are: Computer Screen (+ small face), Workbench (with small face), and Face (With small computer screen and workbench). But I have 13 different scenes in my active collection; for the sake of completeness, they are:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Just facecam&lt;/li&gt;
&lt;li&gt;Facecam with small workbench and laptop views&lt;/li&gt;
&lt;li&gt; Just workbench&lt;/li&gt;
&lt;li&gt;Workbench with small facecam&lt;/li&gt;
&lt;li&gt;Workbench with small facecam and laptop views&lt;/li&gt;
&lt;li&gt;Just laptop screen&lt;/li&gt;
&lt;li&gt;Laptop with small facecam&lt;/li&gt;
&lt;li&gt;Laptop screen with small facecam and workbench views&lt;/li&gt;
&lt;li&gt;Raspberry Pi Display with small facecam&lt;/li&gt;
&lt;li&gt;&#34;Video Adjustments in Progress&#34; slide with microphone ON - &lt;span class=&#34;italic&#34;&gt;I use this mostly when I need to stand up from my workbench to grab something on the shelves behind it, and I don&#39;t want viewers to be staring at my tummy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&#34;We&#39;ll Be Right Back&#34; slide with Microphone OFF and music on - &lt;span class=&#34;italic&#34;&gt;For times I actually need to step away for a moment&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;italic&#34;&gt;&#34;&lt;/span&gt;Stream Starting Soon&#34; slide with countdown to start&lt;/li&gt;
&lt;li&gt;&#34;Goodnight&#34; slide - &lt;span class=&#34;italic&#34;&gt;for end of streams&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Switching between the various views smoothly on the fly as necessary to explain a concept is, I think, critical to maintaining flow. For that, I use the &lt;a href=&#34;https://www.elgato.com/en/gaming/stream-deck-mobile&#34;&gt;Stream Deck Mobile app&lt;/a&gt; for my iPhone, which emulates a &lt;a href=&#34;https://www.elgato.com/en/gaming/stream-deck&#34;&gt;Stream Deck controller&lt;/a&gt;. The Stream Deck configuration app is easy to use if just a little bit buggy - it allows me to have up to 15 buttons on my phone which switch between scenes in OBS on the fly.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;m-auto text-center&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1312 size-large post-img&#34; height=&#34;333&#34; src=&#34;IMG_0987-1024x473.png&#34; width=&#34;720&#34;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;My Streamdeck App configuration&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To do the &#34;Starting Soon&#34; and &#34;waiting for stragglers to arrive&#34; countdowns, I use a little script called &lt;a href=&#34;https://montemagno.com/introducing-my-stream-timer-a-countdown-timer-for-obs/&#34;&gt;My Stream Timer&lt;/a&gt;, which updates a .txt file with the current countdown time and specified by some very basic controls. OBS then uses this text file as the source for some text that appears on the screen.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Lighting&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I spent more than a decade as a stage lighting professional before shifting gears into my current job. As such, I have opinions about lighting.  Of all the physical elements of my setup, this is the one that&#39;s changed most over time. But thankfully, it doesn&#39;t take a ton of cash to make a halfway decent lighting environment, particularly when you&#39;re in charge of your own camera angles.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One good rule of thumb for video that&#39;s meant to be clear and communicative - get a lot of light on your subject, and get light off of whatever&#39;s behind your subject. In my case, I have an &lt;a href=&#34;https://amzn.to/2CZtyLG&#34;&gt;11W 6500K LED bulb&lt;/a&gt; strung above my workbench as the primary bench light, as well as a small LED A-lamp fixture that used to be in a bedroom as some fill light. These just blast the bench with light, and allow me to turn the ISO on my camera down to keep the grain away.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-1314 size-large post-img&#34; height=&#34;540&#34; src=&#34;IMG_0988-1024x768.jpg&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;On my face, I have a &lt;a href=&#34;https://amzn.to/32pAURv&#34;&gt;small LED gooseneck&lt;/a&gt; that was on an alternate workbench in my last apartment. Hanging above my chair is a &lt;a href=&#34;https://amzn.to/2QtsMtG&#34;&gt;clip light&lt;/a&gt; with another cool-while LED acting as a hair light. Finally, down near my left knee is a small clip light with a blue LED bulb, which acts as a fill light when I turn 45 degrees to look at my laptop screen.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-1303 post-img&#34; height=&#34;300&#34; src=&#34;IMG_0958-225x300.jpg&#34; width=&#34;225&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The background behind your subject doesn&#39;t need to be totally dark, though relative darkness does help with contrast. Creating color contrast can help draw a figure out from the background as well. To that end, I have some &lt;a href=&#34;https://amzn.to/2EzEpfO&#34;&gt;RGB LED tape&lt;/a&gt; (with only blue and green hardwired on) on my storage shelves that sit behind me on camera, and a &lt;a href=&#34;https://amzn.to/3hrwcsC&#34;&gt;red LED PAR bulb&lt;/a&gt; that scrapes up my blinds for some additional color and texture. Just provides a little additional pop and saturation to the scene.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-1305 post-img&#34; height=&#34;300&#34; src=&#34;IMG_0959-225x300.jpg&#34; width=&#34;225&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;All together this adds up to what I feel is a balanced lighting look, that keeps my face visible and clear, illuminates the desktop, and hopefully doesn&#39;t look &lt;span class=&#34;italic&#34;&gt;too&lt;/span&gt; cheesy.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-1307 size-large post-img&#34; height=&#34;404&#34; src=&#34;streamcap3-1024x574.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;h4 class=&#34;text-xl&#34;&gt;Audio&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For the first 16 weeks or so of classes, my microphone setup was incredibly inexpensive - a &lt;a href=&#34;https://amzn.to/3linOhn&#34;&gt;wired BOYA lavalier&lt;/a&gt; from Amazon and a &lt;a href=&#34;https://amzn.to/3gvgnA2&#34;&gt;generic USB Audio Interface&lt;/a&gt; that a picked up when I was &lt;a href=&#34;https://kk9jef.wordpress.com/2015/10/20/enabling-a-usb-sound-card-on-the-raspberry-pi/&#34;&gt;experimenting with Audio input to the Raspberry Pi&lt;/a&gt; a few years back. I like the BOYA a lot for the price - decent response, nice long cable, fairly durable. More decently, I&#39;ve been used a &lt;a href=&#34;https://amzn.to/3jeF5Gv&#34;&gt;Fifine wireless boom-style microphone&lt;/a&gt;, which gives me a little more freedom to move around, but the low-frequency response isn&#39;t nearly as good.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;m-auto text-center&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1308 size-large post-img&#34; height=&#34;405&#34; src=&#34;streamcap4-1024x576.png&#34; width=&#34;720&#34;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&#34;post-img-caption&#34;&gt;I&#39;m not in love with the look of the boom mic, but it does its job.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To make things sound just a little rounder, use a couple of OBS&#39;s built-in VST audio plugins - EQ and Compressor - to keep the frequency response pleasant and the volume to a reasonable level.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I used an &lt;a href=&#34;https://amzn.to/31rQSv4&#34;&gt;inexpensive pair of over-the-ear headphones&lt;/a&gt; to hear myself and any notification sounds that come up. They&#39;re pretty darn good for headphones that cost less than $20.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I enjoy having a little background music on my stream, just to fill air and make things a little more cozy. All of it is pulled from &lt;a href=&#34;https://www.youtube.com/audiolibrary/music&#34;&gt;YouTube&#39;s music library&lt;/a&gt;, which guarantees I won&#39;t be hit with an obscure copyright strike someday.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Raspberry Pi Class Adjustments&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;When I start the Raspberry Pi classes, I&#39;m wanted to capture the HDMI output directly from the Pi into the capture software as well, so I went ahead and picked up one of the &lt;a href=&#34;https://amzn.to/3aYYc4D&#34;&gt;$20 HDMI capture dongles&lt;/a&gt; that have popped up from overseas in the past couple months. The thing works really amazingly well for how inexpensive it is - decent color, framerate, resolution, HDCP support... I&#39;ve had no issues with it so far, and at least on my system the automatically-installed drivers work just fine. There does seem to be about 200ms of lag going into OBS, but for desktop instruction this is just fine. If you were using it to capture the output of an external camera, it might be necessary to delay your audio to match.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;m-auto text-center&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;size-medium wp-image-1309 post-img&#34; height=&#34;265&#34; src=&#34;hdmi-300x265.jpg&#34; width=&#34;300&#34;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;It could not look any more generic, but it actually works pretty well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For my very first RPi class, I interacted with the Pi via OBS - that is, my view of the Raspberry Pi&#39;s desktop was inside of my streaming output inside of OBS. This wasn&#39;t ideal. The display is, of course, somewhat shrunk down; worse, the slight lag made the interface feel very floaty and hard to use. By the next class, I had dropped an &lt;a href=&#34;https://amzn.to/32H5t5p&#34;&gt;HDMI splitter&lt;/a&gt; in between the Pi and the capture card, whose second output feeds a second external monitor. So now I have my laptop screen (where slides/IDE live), my streaming screen (HDMI output from laptop, where OBS/chat lives) and a Raspberry Pi screen (showing Pi desktop). This works really quite well as an interface.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Sometime I had discovered during my initial setup about USB video sources and USB hubs has also popped up again with this setup. I won&#39;t claim to fully understand the issue, but something about t&lt;a href=&#34;https://superuser.com/questions/497933/50-usb-webcams-in-a-single-computer-is-that-really-possible&#34;&gt;he way USB 2.0/3.0 handle video streaming resources&lt;/a&gt; is less than ideal. The result is that putting multiple video devices (webcams, capture cards) into the same USB port on a computer (via a hub) doesn&#39;t necessarily allow them to utilize all the available bandwidth, so having multiple video devices on one hub can be a problem. &lt;a href=&#34;https://yokim.net/3231/&#34;&gt;This blog post by Yokim&lt;/a&gt; encapsulates the same experiences I had.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;My workaround for this is to have two of the video sources on the same hub, and then only ever activate one of them at a time. The two I chose are the webcam which shows my face when I&#39;m looking at my laptop, and the cheapie capture card bringing in the Raspberry Pi desktop. These are the two feeds I think I&#39;m least likely to ever need at the same time.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;m-auto text-center&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1316 size-large post-img&#34; height=&#34;540&#34; src=&#34;IMG_0989-1024x768.jpg&#34; width=&#34;720&#34;/&gt; &lt;span class=&#34;italic&#34;&gt;I had to take both monitors off their OEM stands to fit them under the lowest shelf in my workspace. Currently fitting them with 3D-printed stands.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h3 class=&#34;text-3xl&#34;&gt;Teaching: In Person vs. Streaming vs. Zooming&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;There was a time in my life that I thought I was going to be a school teacher. All of my summer jobs in high-school involved teaching a theater camp for kids and teens. Many of my college classes focused on &#34;teaching artist&#34; work, theater for young audiences, and pedagogical theory. I even accidentally ended up in a &#34;&lt;span class=&#34;italic&#34;&gt;How to Teach High School English&lt;/span&gt;&#34; class in college that was meant for M.S.Ed. students, and stuck it out because it was so fascinating. And while that&#39;s not ultimately the direction my career has lead me at the moment, I&#39;ve always had an interest in teaching skills and sharing knowledge.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s been a real learning curve to teaching a course online though. And in my case, teaching it via stream, which I think is worth distinguishing from teaching via Zoom (or one of its thousand clones), which I&#39;ll shorten to &#39;Zooming.&#39; When one is Zooming, whether with friends or students, there&#39;s still a modicum of feedback, even when no ones saying something. You can see faces. You can see confusion or comprehension. You can roughly gather whether a class is engaged or lost or checked out or eager for what&#39;s next. It&#39;s a poor substitute for in-person lessons, I think, but at least there&#39;s still some faces in the digital crowd.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In a streaming setup like I use, none of that is guaranteed. I spend a good chunk of my classes essentially talking to myself, and assuming it&#39;s being absorbed on the other side of the internet. Which is not to say the participants are unresponsive - they&#39;re wonderfully good about asking questions, poking fun, chiming in, giving suggestions. But especially for more complex topics, it&#39;s difficult to not be able to look into somebody&#39;s eyes every 30 seconds and make sure they&#39;re following along.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Classes &lt;a href=&#34;https://www.youtube.com/watch?v=QSuMkkyTpvA&#34;&gt;16&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=O2JppZIh6Cw&#34;&gt;17&lt;/a&gt;, and &lt;a href=&#34;https://www.youtube.com/watch?v=e0cF5v9Pnyo&#34;&gt;18&lt;/a&gt; on Interrupts and Timers are a great example of these challenges. These topics are super interesting (I think), but they&#39;re fairly dense. You need to understand a little bit about program flow, a little bit about memory, a little bit about hardware, and a little bit about timing to understand them. All of which we covered. But it&#39;s the kind of thing where one wants to ask &#34;Does that make sense? Are we all following?&#34; after each tidbit... and that&#39;s just not practical or actionable in a streaming environment. Especially with 6-10 seconds of lag between question and response.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h3 class=&#34;text-3xl&#34;&gt;Dealing with Errors: Doing it live&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;In teaching over 60 hours of live classes at this point, some errors were inevitable. Especially in an electronics course where I think it&#39;s valuable to build up the circuits, code, and understanding in real time. No matter how much I prep, experiment, and try to plan, there is inevitably going to be something that goes wrong. Such is life.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The challenge, then, is what to do when something fails? I personally find it throws me very much off my game - but I&#39;ve consistently gotten feedback that the process of working through problems on camera is actually super useful to those watching.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve wondered as part of these classes if a whole stream on just &#34;Troubleshooting&#34; would be valuable, but I think the more useful version of that is to make an earnest effort to solve the real issues as they come up. Of course, spending 20 minutes tracking down typos would suck. Those are the times I pull out a cake-I-baked-earlier version of the code. But most errors can be fixed quickly, and talking out how to find them - &#34;Oh, this error message usually means...&#34; &#34;Oh, this behavior is wrong because...&#34; is valuable to those learning to code and wire.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h3 class=&#34;text-3xl&#34;&gt;Lesson Development&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Anyone who&#39;s ever built a course from scratch (&lt;span class=&#34;italic&#34;&gt;and I know that&#39;s what a lot of traditionally-in-person instructors are doing these days!) &lt;/span&gt;knows how time consuming it is. First to make sure you fully understand the topic for a given lesson. Then to synthesize that knowledge into a logical sequence of explanations, topics, and themes. And finally to reify those ideas into tangible explanations and demos. Especially with a sweeping topic like &lt;a href=&#34;https://youtu.be/KiQKojmzBRs&#34;&gt;Fundamentals of Electricity&lt;/a&gt;- where do you even start?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;m-auto text-center&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1319 size-large post-img&#34; height=&#34;404&#34; src=&#34;resistnace-1024x575.png&#34; width=&#34;720&#34;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;This did end up being a really fun week.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Especially since I was making these classes up as I went along, week to week, my process typically looked something like this:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Previous Saturday - identify a potential theme for the &lt;span class=&#34;italic&#34;&gt;following&lt;/span&gt; week&#39;s lesson; ruminate, ponder while finalizing the &lt;span class=&#34;italic&#34;&gt;current&lt;/span&gt; week&#39;s lesson&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;italic&#34;&gt;Sunday is stream-day - focus on the day&#39;s lesson. Possibly announce the next week&#39;s lesson if feeling very confident&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Monday/Tuesday - Do broad research, identify gaps in current knowledge (&lt;span class=&#34;italic&#34;&gt;&#39;wait I didn&#39;t know that was a thing&#39;&lt;/span&gt;), form idea of scope of topic&lt;/li&gt;
&lt;li&gt;Wednesday - Start prepping slides with specific research, rearranging and re-shaping the lesson order as they form. Announce stream on Facebook/YouTube&lt;/li&gt;
&lt;li&gt;Thursday/Friday - Finalize slides while starting to build demo circuits, programs.&lt;/li&gt;
&lt;li&gt;Saturday - Finish building demo circuits, test that they can be built in real time for stream. Start pondering the following week...&lt;/li&gt;
&lt;li&gt;Sunday - STREAM IT!&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h3 class=&#34;text-3xl&#34;&gt;Taking Breaks and &#39;Bye&#39; Days&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Writing a new 2-3 hour class every week and teaching it online would be exhausting enough, especially for someone a little rusty with teaching. Doing it in the throws of a Pandemic was... well, let&#39;s just say a lot.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I really wanted to keep to the every-single-week schedule as much as I could, both for continuity of those watching and frankly to maintain some structure for myself as the world changed. To that end, I did 20 straight streams from March through the end of July, every single Sunday (well, 1 Monday). Which I felt great about, but I did need to find ways to give myself little breaks in there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The outlet I came up with was taking what I thought of as &#39;bye weeks;&#39; like when a team is doing so well in a sports tournament that they&#39;re just &#34;assumed to have won&#34; they&#39;re week and advance automatically. I did this by selecting topics that I either knew well enough to be able to teach with minimal preparation, or that I had already taught for some other purpose.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-1320 size-large post-img&#34; height=&#34;404&#34; src=&#34;pcbs-1024x575.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The two weeks that exemplified this were &lt;a href=&#34;https://www.youtube.com/watch?v=i7fFieY7mFA&#34;&gt;Week 10: Write Better Code&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/watch?v=6_772Sg5K8U&#34;&gt;Week 13: Creating a Printed Circuit Board&lt;/a&gt;. The former was essentially refactoring existing code in an IDE, a straightforward thing to do live. The latter was based on a lesson I had actually given at my previous job to some employees and interns. Both provided a little brain space in weeks where I was otherwise swamped.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now that I&#39;m back to work at my fulltime job, I&#39;ve elected to go to an every-other-weekend schedule, which gives me a lot more breathing room in terms of ruminating, absorbing, and developing the upcoming lessons. And I think the lessons themselves are turning out better for it. Slamming a lesson together in a week &lt;span class=&#34;italic&#34;&gt;on top of &lt;/span&gt; a 40-hour-a-week job would lead to some substandard teaching, no doubt.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h3 class=&#34;text-3xl&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;I don&#39;t think there&#39;s any better way to illuminate the holes in your knowledge of a topic than to try to teach that topic. Once you have to verbalize/write down/illustrate/demo a subject to someone who&#39;s never touched it before, you discover exactly what you&#39;ve always glossed over. What does happen in that edge case? What situations would cause this specific thing to happen? Why this and not that?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Though I wouldn&#39;t have wished for the current state of the world, I&#39;m grateful to have spent so many Sundays in the last five-and-a-half months with other nerds, teaching, learning, and exploring. I hope we can do the same over beer and trail mix real soon.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;Many of the above links are Amazon Affiliate links; they are also all products I use in my everyday work and think are decent and worth the money.&lt;/span&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Demilight Version 0.8.1</title>
      <link>https://jeff.glass/post/demilight-version-0-8-1/</link>
      <pubDate>Thu, 16 Jul 2020 03:01:51 -0500</pubDate>
      
      <guid>https://jeff.glass/post/demilight-version-0-8-1/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;The newest round of Demilight PCBs and 3D-Prints have taken shape as version 0.8.1. Here&#39;s a brief video overview of the current state of thing:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;{{&amp;lt; youtube _Rrdo-xNau4 &amp;gt;}}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The biggest change, as I mention in the video, is that I tried out JLCPCB&#39;s surface mount parts assembly service for the firs time. Overall, I&#39;m very satisfied, and I&#39;m delighted to have such a useful shortcut for assembly of these PCBs. The version 0.7 and 0.8 prototype boards, which are essentially the same as 0.8 with their 0603 passives and tqfp ATmega, took between 60 and 90 minutes each to assemble. I wouldn&#39;t say they were an enormous challenge to assemble, they just took time and concentration.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But now, with JLCPCB assembling the surface mount components, each of the 0.8.1 PCBs took just 3 minutes to finalize assembly, and it&#39;s all easy thru-hole parts. As I&#39;m considering making a little flock of these, or providing them to folks who aren&#39;t as practiced at soldering, finding ways to accelerate the assembly process is a huge boon.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-1228 post-img&#34; height=&#34;405&#34; src=&#34;Assembly-11_1.13.1-1024x576.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, there&#39;s some additional cost to getting the boards machine-assembled. And for ordering just two assembled boards, of course the unit-cost is going to be high. But it drops off quickly with any kind of scale. I just put in an order for some 0.9 PCBs, and getting 10 of them instead of 2 dropped the unit-cost by almost 70%. All the fixed costs - DHL shipping, extended-part-charges from JLCPCB - start to amortize real quick. Most of the components themselves have a 10- or 20-part minimum order, due to part-loss loading and unloading the pick-n-place machines, so the component cost didn&#39;t actually increase all that much except for the expensive IC&#39;s (ATmega, AL8860).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Looking forward to 0.9.0.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Reverse Engineering and Replacing an Industrial 7-Segment Display – Part 2, Investigation</title>
      <link>https://jeff.glass/post/reverse-engineering-and-replacing-an-industrial-7-segment-display-part-2-investigation/</link>
      <pubDate>Mon, 13 Jul 2020 20:51:45 -0500</pubDate>
      
      <guid>https://jeff.glass/post/reverse-engineering-and-replacing-an-industrial-7-segment-display-part-2-investigation/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;This is Part 2 of an N-part series. See also [&lt;a href=&#34;../post/reverse-engineering-and-replacing-an-industrial-7-segment-display-part-1-research&#34;&gt;Part 1&lt;/a&gt;].&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In part one of this series, we began the process of developing a replacement for the LASCAR EM-4-LED 4-digit industrial 7 segment display. To recap: we mined the display&#39;s datasheet for all it we could, then opened up the device to reveal its component parts and continued to dig into their datasheets until we had a reasonably complete view of the device&#39;s functions. With the research phase complete, it&#39;s time to move into in investigation, and we&#39;ll think about how we might begin to probe an unknown device and its connections more specifically.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;Author&#39;s Note: The&lt;/em&gt; post &lt;em&gt;has been sitting fully written in my drafts since before things locked-down in mid-March, but was lacking a couple of illustrative screenshots/pictures of the signal-capture process. Since the pandemic&#39;s effects are still dragging on, I&#39;m pushing this post out now with a couple of substitute images - they are noted below where applicable.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-799 size-large post-img&#34; height=&#34;669&#34; src=&#34;IMG_9557-scaled-e1583250423936-1024x952.jpg&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;A refresher - this is the little display we are attempting to replace.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As you move into the phase of actually powering a device up and testing it, there are a few key parameters to keep in mind. Power and signal voltage levels are key - is this a 5V part, perhaps 3.3V, perhaps 12 or 24 or higher for industrial parts? And even if the device has a high or wide-range power voltage, any I/O ports may be more limited. This is why gathering as much data on-paper first is useful: to avoid letting the magic smoke out of the device-under-test before you get all its juicy secrets out.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Other specs worth keeping in mind are:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Voltage level of outputs - can you safely probe all external pins with a TTL logic probe? Do you need to start with an oscilloscope to verify voltage ranges? Or even a multimeter?&lt;/li&gt;
&lt;li&gt;Output clock rates - does your instrumentation have the bandwidth to reveal useful information.&lt;/li&gt;
&lt;li&gt;Open-collector vs. current-source outputs - if you&#39;re expecting to see some output (for driving LEDs, relays, etc), do you need to supply external power to see if anything is actually happening?&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Since we have this info (fairly) confidently in hand, let&#39;s dive into probing our hardware and see what new things we can learn.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Utilizing a Logic Analyzer&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;One thing that many folks pointed out &lt;a href=&#34;https://hackaday.com/2019/12/14/what-does-an-electronics-tinkerers-workbench-need/&#34;&gt;in the comments&lt;/a&gt; of &lt;a href=&#34;https://jeff.glass/2019/12/01/electronics-lab-tools/&#34;&gt;my writeup of useful electronics bench tools&lt;/a&gt; was the lack of a logic analyzer on my list. I confess before this project, I had never used one, nor particularly found a need for one. For many years, my primary electrical hobby was amateur radio (indeed, I had a &lt;a href=&#34;http://kk9jef.wordpress.com&#34;&gt;whole separate blog for ham radio pursuits&lt;/a&gt;) - which, as a side note, is also a wonderful place to jump into learning about electricity in a very hands on way. Working in the handfuls-of-megahertz with analog signals, a &lt;a href=&#34;https://kk9jef.wordpress.com/2015/09/16/hello-world-and-a-scope/&#34;&gt;25MHz analog oscilloscope &lt;/a&gt; was a much more useful tool than something that operated only on digital logic. But for this particular project, while a scope is useful for verifying voltage levels and seeing whether a signal is present or not, the right tool for the job is a &lt;span style=&#34;text-decoration: underline;&#34;&gt;logic analyzer.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;size-large wp-image-975 post-img&#34; height=&#34;482&#34; src=&#34;old-scope-e1587840938266-1024x686.jpg&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;The old analog oscilloscope that got me through years of Ham Radio adventures&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;A logic analyzer is a piece of digital test gear that reads the voltage on two or more input connectors and creates a digital representation of the logic-levels of the voltages present over time. So where a digital oscilloscope records and displays analog voltages over time with some degree of precision, a logic analyzer is only interested as to whether the voltage is above or below a threshold, so as to be a logic high or logic low (typically 0v-12v, 0v-5v, 0-3.3v).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For talking to some other nerds and receiving some feedback online, it seems like the standout stars in the relatively-low-cost logic analyzer space are the &lt;a href=&#34;https://amzn.to/2S8ryoJ&#34;&gt;offerings from Saleae&lt;/a&gt; and the &lt;a href=&#34;https://amzn.to/2VAhp6y&#34;&gt;Analog Discovery&lt;/a&gt; and &lt;a href=&#34;https://amzn.to/3eTwS9a&#34;&gt;Digital Discovery&lt;/a&gt; from Digilent. All of the above are modules that plug into a computer via USB for their control and display capabilities, so they cannot be used as stand-alone devices in the field. While &lt;a href=&#34;https://amzn.to/2x7aPLd&#34;&gt;some mid-to-high-end oscilloscopes&lt;/a&gt; also have signal-analysis capabilities built in - these are often listed as &#34;mixed signal&#34; oscilloscopes -  those are a bit beyond my current needs at the moment. And in fact, while the Digilent products have had my eye for awhile, as a place to get my feet wet with signal analyzers for this project, I wanted to verify that this would be a useful tool before I committed my department&#39;s funding to a few-hundred-dollar purchase.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;size-full wp-image-974 post-img&#34; height=&#34;472&#34; src=&#34;oscope.png&#34; width=&#34;826&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;A fancy Rigol scope with logic analyzer functions - note the multipin connector under the display.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I ended up with a &lt;a href=&#34;https://amzn.to/3aEAEAa&#34;&gt;$25 8-Channel Sparkfun Logic Analyzer&lt;/a&gt;, which handles 3.3V and 5V signals with a sample rate of us to 24 MHz. This nominally means it can handle digital signals up to about 12 MHz, but in practice, something somewhat lower would be a safer choice. Since the LASCAR display we&#39;re working on has a nominal data rate of 500 KHz, this should be plenty for my purposes.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-972 post-img&#34; height=&#34;400&#34; src=&#34;logicanalyzer.jpg&#34; width=&#34;400&#34;/&gt;&lt;/p&gt;
The basic 8-channel logic analyzer from Sparkfun
&lt;p class=&#34;post-p&#34;&gt;The Sparkfun Analyzer seems to essentially be a branded version of the many &lt;a href=&#34;https://amzn.to/3eUJnBI&#34;&gt;inexpensive logic analyzers&lt;/a&gt; floating around Amazon - all of which pretty much will work with the open-source logic analysis software &lt;a href=&#34;https://sigrok.org/wiki/PulseView&#34;&gt;PulseView&lt;/a&gt;, which is itself a graphical frontend for the command line program &lt;a href=&#34;https://sigrok.org/&#34;&gt;Sigrok&lt;/a&gt;. While PulseView doesn&#39;t allow access to all of Sigrok&#39;s many capabilities, its a significantly more approachable way to get started with these devices in my opinion.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; to compile and install PulseView on Ubuntu · &lt;img alt=&#34;One Transistor&#34; class=&#34;post-img&#34; height=&#34;379&#34; src=&#34;https://4.bp.blogspot.com/-3jojqtnZsQM/Wf7ue9r10tI/AAAAAAAAHxI/POypJ6alOhINsrA2Dgtz8zSmgWsw8zUegCLcBGAs/s1600/pulseview-main-window.png&#34; width=&#34;595&#34;/&gt; Pulseview can capture samples and decode them visually for you.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Sparkfun has already written up a great &lt;a href=&#34;https://learn.sparkfun.com/tutorials/using-the-usb-logic-analyzer-with-sigrok-pulseview/all&#34;&gt;Getting Started with Sigrok, Pulseview, and the Logic Analyzer tutorial&lt;/a&gt;, so I won&#39;t try to duplicate their work here. Suffice to say, after getting the software installed, you attach the ground probe on the analyzer to a ground point on the circuit you&#39;re probing, and attach one or more signal probes to the signal lines you&#39;re like to test. After configuring the sample rate at which you want to capture data points and how many points to capture, you &#34;run&#34; the analyzer, which then then a few seconds to minutes capturing the number of points you selected. After capture, you can select one of a number of &#34;decoders&#34; that attempt to turn the individual high-or-low, one-or-zero datapoints into a structured view of what data contained therein. For example, if you&#39;re probing what you think is a serial UART stream, the UART decoder will give you a view of the data as ASCII characters being transmitted over the UART, which is much easier than looking at pure sample points.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s a look at the data and power lines going to the existing LASCAR display:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(&lt;em&gt;Getting this picture has been pre-empted by a global pandemic! A picture will be here when I can get back in the building someday.&lt;/em&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What a nice set of labels! The presence of the clock and data lines matches with our expectations, since last time we spotted a shift-register built into the brains of the EM-32 display. The shift register will &#34;clock in&#34; or take in one bit of data from the data line each time it transitions, either from low-to-high or high-to-low. So we should expect to see these lines changing in alternation - first, the data line will go low or high to establish the next bit of data, then the clock line will be pulled low or high to tell the shift register to take-in this bit of data.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Or at least, that&#39;s what I would expect, given the schematics of the EM-32 that we were looking at last time. Probing the signals will hopefully allow us to confirm this. So, let&#39;s hook up a the signal analyzer&#39;s ground to the GND wire and channels 1 and 2 of the analyzer to the CLOCK and DATA lines, here&#39;s what we capture:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;]&lt;img alt=&#34;&#34; class=&#34;wp-image-1221 size-large post-img&#34; height=&#34;121&#34; src=&#34;lascar-cap1-1024x172.png&#34; width=&#34;720&#34;/&gt; &lt;em&gt;This is a substitute image of a different capture - the actual image is inaccessible due to pandemic conditions. But the capture would look much like this.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The first thing we note is that the data rate here is nowhere near the 500KHz rate that the datasheet says we can tolerate - we&#39;re seeing about 40 bits of data at a rate of roughly 1KHz, in bursts about 10 times a second. So we can turn our data capture rate waaaay down from its maximum 24 MHz. Which is great. Applying the SPI decoder to this data (which has a similar clock-and-data-lines structure to what we expect) allows us to see a view of the individual 1&#39;s and 0&#39;s that make up the stream of bits coming from the PLC.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;]&lt;img alt=&#34;&#34; class=&#34;size-full wp-image-1222 post-img&#34; height=&#34;655&#34; src=&#34;refresh-rate.png&#34; width=&#34;804&#34;/&gt; &lt;em&gt;This is a substitute image of a different capture - the actual image is inaccessible due to pandemic conditions. But the capture would look much like this.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Comparing this bitstream with the timing diagram we saw last time, we thankfully see things lining up pretty well - we can see the initial clock pulse and start data bit, which tells the display to begin expecting data, following by 35 bits of data more. The PLC then pauses for approximately 100ms before sending more data.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-780 post-img&#34; height=&#34;852&#34; src=&#34;timing.png&#34; width=&#34;947&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The two major takeaways from our logic-analyzer work are:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;The bitstream coming from the PLC is as-expected given what we learned from the datasheet, and&lt;/li&gt;
&lt;li&gt;Its datarate is at most 1KHz, in bursts about 10 times a second.&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;This will help us develop our testing solution - knowing that we have reasonable data rates means that we don&#39;t need to throw anything particularly fancy at this problems in term of hardware.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>PICO-8: Orbit</title>
      <link>https://jeff.glass/post/pico-8-orbit/</link>
      <pubDate>Wed, 08 Jul 2020 16:50:44 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pico-8-orbit/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Over the past couple weeks, as a way to stretch my programming legs and play around with a new system, I&#39;ve been writing a little demo in the 8-bit retro video game environment called &lt;a href=&#34;https://www.lexaloffle.com/pico-8.php&#34;&gt;PICO-8&lt;/a&gt;. Since I think I&#39;m drifting away from this project now, I figured I might as well post my progress here: a &#34;game&#34; demo called &lt;strong&gt;Orbit&lt;/strong&gt; that instantiates a number of objects moving in an elliptical orbit around a central planet.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One of the neat things about PICO-8 is how easy it is to embed a playable demo! Here is the full program running in your browser:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;iframe class=&#34;m-auto&#34; height=&#34;600&#34; src=&#34;../orbit/orbit2.html&#34; width=&#34;600&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The program starts by instantiating 5 orbiting objects around a central planet. You can switch which object you&#39;re focusing on using ← and →. The two primary buttons (defaults to C and X on a desktop, or onscreen keys on mobile) allow access to the menu at the top-right. The menu has functionality for speeding up or slowing down time, adding and removing objects, and changing whether orbits are displayed and what info shows up on the HUD.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is about the third time I&#39;ve recreated essentially this same structure in different languages/environments. The first time was in Lua in the &lt;a href=&#34;https://love2d.org/&#34;&gt;LOVE2D &lt;/a&gt;framework, the second was in Python in &lt;a href=&#34;https://www.pygame.org/news&#34;&gt;PyGame&lt;/a&gt;, and now it&#39;s in pseudo-Lua in PICO-8. I&#39;m not sure why this construct - just getting thing to orbit each other, really - appeals to me so much. But clearly there&#39;s something there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Each of the orbiting objects is &#34;on rails&#34; in a sense - rather than apply some kind of gravitational force each timestep, each object is locked into a perfect elliptical orbit defined by four orbital parameters (semi-major axis, eccentricity, argument of periapsis, and mean anomaly at epoch. Given a time T and those four parameters, the engine can calculate exactly where each object should be. Then we just let T advance at some fraction/multiple of real time.&lt;/p&gt;
&lt;figure class=&#34;wp-block-image size-large&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1201 post-img&#34; src=&#34;orbit_000.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;The next step in turning this into some kind of actual game would be to allow the orbiting objects (&#34;ships&#34;) to apply a small amount of thrust that changes their orbit. This involved calculating the current Cartesian parameters (position and velocity) and turning those into new orbital parameters. &lt;/p&gt;
&lt;figure class=&#34;wp-block-image size-large&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1202 post-img&#34; src=&#34;orbit_001.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;The hangup with this in PICO-8 is that all numbers are 32-bit fixed precision (0xFFFF.FFFF), with a range of -32768 to 32767.9999. While this is enough range to capture all the fundamental parameters of the orbit themselves (the largest of which is the semi-major axis, which can be up to about 200), it&#39;s not enough dynamic range to do some of the calculations for converting cartesian parameters to orbital ones. Even finding the magnitude of a 2D vector with components ~150 or greater involves an intermediate step with numbers larger than 32767, which is a problem when that&#39;s the largest number we can represent in our number system.&lt;/p&gt;
&lt;figure class=&#34;wp-block-image size-large&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1203 post-img&#34; src=&#34;orbit_002.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;I briefly toyed with creating a system to present 64-bit numbers as a duo of 32-bit fixed-point ones, but it&#39;s not quite where my interests lie at the moment. So the project pauses here for now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In any case, in encourage you to try out PICO-8 and play around. It&#39;s very approachable and a ton of fun, takes me right back to my days writing QBasic on my middle-school math teacher&#39;s computer.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Video: Demilight Version 0.8</title>
      <link>https://jeff.glass/post/video-demilight-version-0-8/</link>
      <pubDate>Fri, 26 Jun 2020 16:37:14 -0500</pubDate>
      
      <guid>https://jeff.glass/post/video-demilight-version-0-8/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;It&#39;s been quite awhile since the &lt;a href=&#34;https://jeff.glass/demilight/&#34;&gt;mini-moving light project&lt;/a&gt; (now renamed The Demilight) has been written up on the blog. The project was in hiatus for a few months while dove into the technical challenges of a new job, but as the job isn&#39;t keeping quite as busy at the moment (here in early summer 2020), it&#39;s back on the workbench. I&#39;ve put together a video showcasing the current state of the project, now in &lt;strong&gt;version 0.8:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;{{&amp;lt; youtube 4a-9JGK8H4I &amp;gt;}}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The video does a pretty decent job of capturing the current state of things. So what&#39;s next?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Firstly, the goofs I alluded to in the video that I consider to be &lt;em&gt;must-fix&lt;/em&gt; items before the files are ready for primetime. Theu mostly have to do with the 3D-printed parts - I adjusted the access holes and programming slots from version 0.5 to 0.8, but I didn&#39;t do a great job double-checking everything, and things don&#39;t line up very well. That&#39;ll need another few test prints and some adjustment to alleviate the all the filing that&#39;s currently necessary.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve also been having some issues with mechanical assembly - I&#39;ve been using some &lt;a href=&#34;https://amzn.to/2Vg1pWw&#34;&gt;M2 insert nuts&lt;/a&gt; to hold the case and case-lid together, and to secure the PCB into the case, but that doesn&#39;t seem to be a particularly good system. It&#39;s possibly my nuts and bolts are just really high-tolerance, but they&#39;re constantly cross-threading and not inserting all the way. I think a more robust solution is in order.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The other main error has to do with the footprint for the &lt;a href=&#34;https://www.digikey.com/product-detail/en/recom-power/R-78E5.0-0.5/945-1648-5-ND/2834904&#34;&gt;5V buck-converter&lt;/a&gt; module - somehow, my pin placement is off by .2&#34; on the PCB footprint, which makes the part overlap with the attachment points for the servos unless you bend the voltage-regulator&#39;s pins over. Not insurmountable, but really annoying. That&#39;ll have to get fixed in version 0.9. Once those two most-egregious errors are corrected, though, I think the unit will be decent enough to publish as a beta version.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;post-img&#34; height=&#34;236&#34; src=&#34;https://media.digikey.com/Photos/Recom%20Power%20Inc/MFG_R-78-e%20series.jpg&#34; width=&#34;243&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-image-caption&#34;&gt;It&#39;s a pretty simple part... how did I goof this up?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are several more substantial improvements in the pipeline as well. In no particular order:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As I mention in the video, I&#39;m working on a &lt;strong&gt;miniaturized programmer interface&lt;/strong&gt; based on some little &lt;a href=&#34;https://www.digikey.com/product-detail/en/mill-max-manufacturing-corp/0985-0-15-20-71-14-11-0/ED1122-ND/3635123&#34;&gt;0.05&#34;-pitch pogo pins&lt;/a&gt;. The results, so far, have been mixed - I have been able to confirm that the interface is providing gnd/5V to the ATmega328, at least enough that its 16 MHz ceramic resonator is oscillating, but I can&#39;t seem to program the chips in-place. Further experiments will be necessary.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-1095 post-img&#34; height=&#34;194&#34; src=&#34;Pogo-Pins-1024x718.jpg&#34; width=&#34;276&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Some iterations of the Demilight have incorporated a &lt;strong&gt;heatsink &lt;/strong&gt;to help manage the heat-output from the LED emitter chips. To be honest, I&#39;m not sure how necessary it is - I would love to set up some tests with the unit running at its full 1 Amp current and see just how hot things get. Perhaps the first test would be in free-air, then inside the case in multiple orientations. I know from &lt;a href=&#34;https://www.youtube.com/watch?v=sYT-xtOL4rU&amp;amp;t=299s&#34;&gt;some tests I did on a livestream last summer&lt;/a&gt; that with enough heatsinking the LED stars can handle up to about 5 Amps, but they dump a huge amount of heat at the point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1118 post-img&#34; height=&#34;256&#34; src=&#34;heatsink.png&#34; width=&#34;341&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-image-caption&#34;&gt;If the heatsink comes back, should it still be in candy-apple red?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;RGB &lt;/strong&gt;or &lt;strong&gt;RGBW&lt;/strong&gt; dimming capacity would be really neat - as spiffy as the pure-white versions are, there&#39;s something about color-changing light that feels like it would take this project to the next level. I would need to free up some more PCB space, and possibly move from a single-channel driver to a 3 or 4 channel driver, but finding those in the ~1A current capacity range seems a little tricky.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are also a couple of purely aesthetic things which could get bumped up to something better. I&#39;ve ordered some &lt;a href=&#34;https://amzn.to/31g67Yj&#34;&gt;1/4&#34; white wire sleeving&lt;/a&gt; to take the place of the gaff tape covering the wires that run from head to base. And I need to invest a little time dialing in my 3D printer - after &lt;a href=&#34;https://jeff.glass/2019/03/09/3d-printing-in-the-home-workshop/&#34;&gt;3.5 years of printing,&lt;/a&gt; it&#39;s starting to show its age a little bit, and a little extra tightening and lubrication wouldn&#39;t be a bad idea.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So many of my projects during quarantine have focused on building my digital communication mediums - building out this video feels very much like a continuation of that skill-building. The &lt;a href=&#34;https://jeff.glass/electronics-bash/&#34;&gt;weekly Arduino/Electronics classes&lt;/a&gt; I&#39;ve been teaching for 15 weeks now have been a serious crash course in live digital video. That learning process deserves a write-up of it&#39;s own, but if you compare the following two frames from &lt;a href=&#34;https://www.youtube.com/watch?v=rRVTTIWVcXA&amp;amp;t&#34;&gt;Episode 0 (testing)&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/watch?v=QQYhC7xHG_s&#34;&gt;Episode 14 (Wireless Signals)&lt;/a&gt;, I think the improvements are pretty clear:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1116 post-img&#34; height=&#34;253&#34; src=&#34;EarlySnap-300x168.png&#34; width=&#34;450&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Epsiode one was.... pretty rough. The audio is really crunchy too - turns out I had two microphones on (lav and webcam) and they did unkind things together.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1117 post-img&#34; height=&#34;253&#34; src=&#34;latesnip-300x168.png&#34; width=&#34;450&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;We&#39;ve got things pretty well dialed in by now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s been a joy to build some more digital video skills putting this video together, like putting together a basic script, recording a voiceover, learning the editting, effects, and color-grading processes... it&#39;s been both fascinating and time-consuming. The video definitely has some rough edges, but I&#39;m thinking of it as good-enough, and I&#39;m excited to take what I&#39;ve learned from this early creation and apply it to future videos. Much like the tiny-light itself, it&#39;s good to just make a thing, anything, a small thing, and iterate from there.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Stream - Electrics and Electronics Bash - Arduino #1</title>
      <link>https://jeff.glass/post/stream-electrics-and-electronics-bash-arduino-1/</link>
      <pubDate>Sat, 21 Mar 2020 18:27:14 -0500</pubDate>
      
      <guid>https://jeff.glass/post/stream-electrics-and-electronics-bash-arduino-1/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;This Sunday evening, March 22nd 2020 at 7pm Central time, I&#39;ll be hosting a &lt;a href=&#34;https://youtu.be/H7LOfnseQ7o&#34;&gt;livestreaming Introduction to Arduino over on YouTube&lt;/a&gt;!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We&#39;ll start from scratch installing the Arduino IDE software, then moving on to programming fundamentals, wiring to the Arduino and using a breadboard, and more. We should cover enough ground to be useful to absolute beginners and pro&#39;s alike.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Grab a cold one and come join me live as we make stuff and learn things. Bring your projects, bring your questions, bring your ideas for what we should learn or talk about. Let&#39;s hang and talk about something other than hand washing. See you there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This page will be updated with links and resources following the stream.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/H7LOfnseQ7o&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Geared Nameplate</title>
      <link>https://jeff.glass/post/geared-nameplate/</link>
      <pubDate>Wed, 04 Mar 2020 20:40:50 -0500</pubDate>
      
      <guid>https://jeff.glass/post/geared-nameplate/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;A quickie today - over the weekend, I decided that my workshop at work needed a nameplate outside the door, to make it a little easier for folks to find me. So I put together this design in Fusion 360, and printed it in black and white PLA+. (The &#34;grey&#34; of the gears is a single later of white PLA on top of black gears).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-807 post-img&#34; height=&#34;338&#34; src=&#34;ezgif.com-optimize-1.gif&#34; width=&#34;600&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The gears have 8, 9, 10, 12, 14, and 16 teeth, and are symmetrical left/right. This means that it takes 630 revolutions of the smallest gear to return the arrangement to its starting place. We determine this by finding the least common multiple of the number of teeth, which is &lt;img class=&#34;inline post-img&#34; id=&#34;equationview&#34; name=&#34;equationview&#34; src=&#34;https://latex.codecogs.com/gif.latex?2%5E4%20*%203%5E2%20*%205%20*%207&#34; title=&#34;This is the rendered form of the equation. You can not edit this directly. Right click will give you the option to save the image, and in most browsers you can drag the image onto your desktop or another program.&#34;/&gt; or 5040. Divide that by the 8 teeth on the smallest gear, and we get our 630 revolutions to return to where we started.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The design has two chamferred holes for screw-mounting, but it&#39;s currently just stuck on the wall with sticky-tack.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Reverse Engineering and Replacing an Industrial 7-Segment Display - Part 1, Research</title>
      <link>https://jeff.glass/post/reverse-engineering-and-replacing-an-industrial-7-segment-display-part-1-research/</link>
      <pubDate>Wed, 04 Mar 2020 00:05:00 -0500</pubDate>
      
      <guid>https://jeff.glass/post/reverse-engineering-and-replacing-an-industrial-7-segment-display-part-1-research/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;Building one-off hardware is one part inventing, one part dissecting, one part scrounging. When we try to hit that magic mixture of good, fast, &lt;em&gt;and&lt;/em&gt; cheap, so often we must rely on prebuilt modules - if we&#39;re trying to build a widget that gets us from zero to 100, it may only be financially/temporarily/technologically reasonable if someone already makes a module that gets us from 0 to 80. Utilizing economies of scale of already-developed parts can bring a one-off project from the realm of fantasy into feasibility.  Often, the solution is to develop a chain of off-the-shelf components that can fulfill the end goal.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;But all components have a service life, and a manufacturing lifetime. And when your part goes out of production and then your spares-bin runs dry, sometimes keeping your machine running requires some deeper problem solving. When you work in the public-facing technology sphere (theatre, museum work, retail displays, etc), a lot of the solutions are literally one-of-a-kind, even if they&#39;re constructed from commercial parts.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;I recently had the need to replace a very specific module in some equipment. While it didn&#39;t end up being the most high-tech/high speed/highfalutin bit of technology, it presents a good opportunity to talk through how one can approach an unknown part, come to understand its workings, and develop a replacement. So in this N-part series, we&#39;ll look at the process of researching, developing, and implementing a custom one-off solution to a failed part in a unique piece of gear.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-799 size-large post-img&#34; height=&#34;669&#34; src=&#34;IMG_9557-scaled-e1583250423936-1024x952.jpg&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;The &lt;a href=&#34;https://www.alliedelec.com/m/d/535531da0cc330e5c959e59360401632.pdf&#34;&gt;Lascar EM32-4-LED&lt;/a&gt; is a four-digit seven-segment panel mount LED display meant for general-purpose data display. Its small digit size (.39&#34; tall), machined aluminum housing, small footprint (32.5mm diameter punchout) and NEMA 4X/IP67 made it a compact choice for anyone needing to display a single value with 4 digits of precision. It also had the ability to drive four external LEDs, for additional status or process indicators.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Lascar Electronics EM32-4 LED&#34; class=&#34;aligncenter post-img&#34; height=&#34;400&#34; src=&#34;https://assets.alliedelec.com/f_auto,c_scale,w_400/70101381.jpg&#34; width=&#34;400&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;A piece of equipment I&#39;ve been working on recently had just such a LASCAR display installed a few years back to serve as a timer. I&#39;&#39;m going to have to be a little vague about the specifics of the equipment itself, but since this post is focused on technical process and not the piece itself, I think I can safely share enough details for the following to make sense:&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;The piece is an interactive object that triggers some actions and servos, demonstrates a physical phenomenon, and then takes about 25 seconds to cool back down before can be used again. The user is presented with a &lt;a href=&#34;https://www.bulgin.com/us/products/stainless-steel-vandal-resistant-illuminated-ip66-push-button-switch-mpi001-mpi002-series-22mm-diameter-group.html&#34;&gt;green illuminated button&lt;/a&gt; to activate the system - when the system is in active or cooling down, the illuminated button turns red. But because it&#39;s not entirely clear from the action of the device alone when it will be cool enough for use, a countdown timer (two digits) is displayed on the EM32 display, counting the number of seconds until we&#39;re good to run again.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;Sadly, this particular EM32 display died shortly after LASCAR decided the product hit its End of Life. What&#39;s more, I&#39;m currently without the ability to modify the programming of the PLC that&#39;s driving the whole shebang. In order to maintain the functionality of the piece, it became necessary to build a device that would ingest the existing signals being sent by the PLC, interpret them, and drive a newly crafted 7-segment display of some kind.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-800 post-img&#34; height=&#34;600&#34; src=&#34;IMG_9967-scaled-e1583254082764-1024x853.jpg&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;&lt;a href=&#34;https://www.alliedelec.com/m/d/535531da0cc330e5c959e59360401632.pdf&#34;&gt;The &#39;datasheet&#39; for the EM32-4&lt;/a&gt; is a paltry 2 pages long. Presumably there was additional documentation provided to those who were using the device, but since it&#39;s now EOL, that documentation seems to be unobtanium. But the existing pair of pages does contain some useful information.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;We&#39;ll start at the very beginning (a very good place to start): the &lt;strong&gt;opening&lt;/strong&gt; &lt;strong&gt;prose&lt;/strong&gt; &lt;strong&gt;paragraph&lt;/strong&gt;:&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-762 size-large post-img&#34; height=&#34;199&#34; src=&#34;Intro-1024x283.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;This is where we find a high-level overview of the part, it&#39;s intended purpose, and (&lt;em&gt;sometimes&lt;/em&gt;) explanations of the differences between any variants of the part. Say, for example, a given part is made in a standard and a mil-spec version, or a normal and a slew-rate limited version, a manufacturer will often encompass them in a single datasheet. It&#39;s important to identify specifically what part you have, so you can characterize it accurately. &lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;In our case, the EM32-4 is unique enough that there are no major variants. The paragraph mostly tells us what we already know - it&#39;s a 4-digit, 3 decimal point display in a metal bezel. But it does call out the &#34;optional external LEDs.&#34; While it&#39;s unclear at this point exactly what this means, it&#39;s useful to make note of these surprises early on, as they&#39;ll often explain a what-the-heck-is-that moment late in the datasheet.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;Moving on then to the next useful block in just about any datasheet; the electrical specifications. This is where you&#39;ll find input-voltage ranges for power and signals, output voltages and timing, and other device-specific characteristics (transistor beta and voltage spreads, op-amp gain and slew rate, power ratings, etc). If I was doing a &lt;a href=&#34;http://www.nick.com.au/doubledare/videos/double-dare-104-physical-challenge-balloon/&#34;&gt;Double Dare Physical Challenge&lt;/a&gt; and had to utilize a part with only one table of its datasheet available, I&#39;d take the electrical specs chart 9 out of 10 times.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-763 size-large post-img&#34; height=&#34;177&#34; src=&#34;elecspec-1024x252.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;In our case, there&#39;s only 6 lines, but 6 important lines they are. We learn that this is a 5V part, but can run at up to 9V so we can&#39;t assume we&#39;ll have 5V power available. Nominal power  usage is ~20mA, so the power available on existing supply lines may be limited. The operating and storage temperature ranges are typical. V&lt;sub&gt;LED&lt;/sub&gt; is a a bit confusing - does this refer to the display itself, in which case we have no real purpose for this voltage? Or perhaps it refers to the voltage available for the external LEDs. &lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;The final line is promising - that the typical clock input frequency is 500KHz. This is the first we&#39;ve seen any information about how this device receives communication from a controller. But now we know it&#39;s some kind of clocked input (perhaps sometime like SPI?), and that its possible frequency is not unreasonable from something we might interpret with off-the-shelf hardware. Not that 500KHz is a stroll in the park, but it&#39;s not in the many-megahertz range, say.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;The last really useful part of the datasheet is the Functional Block Diagram. This block shows a symbolic representation of what&#39;s happening inside the device, as an aid to the user in visualizing what&#39;s happening on the interior and how we need to interface with it. You really only see this with integrated circuits or other modules (the functional bock diagram of a transistor would be... just a transistor).&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;To highlight the purpose of the block diagram, let&#39;s do a quick comparison between two drawings on another part: the venerable &lt;a href=&#34;https://www.youtube.com/watch?v=fLaexx-NMj8&#34;&gt;555 Timer IC.&lt;/a&gt; Its datasheet sports both a schematic diagram and a functional diagram; here are the two side-by-side:&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-766 size-full post-img&#34; height=&#34;745&#34; src=&#34;555func.png&#34; width=&#34;778&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;This demonstrates pretty clearly the distinct purposes of the schematic diagram versus the functional one. The functional diagram is there to give users a high-level understanding of how the device functions, where inputs and outputs attach, and what the essential parts of the device are. The schematic diagram is there for those who need to really drill into exactly how the chip is built, because of some precise technical reason. When I&#39;m driving a car, I need to know whether the transmission is manual or automatic, two-wheel vs four wheel, and so on - a functional understanding is enough. A mechanic needs a schematic showing the various linkages and gears of my transmission to diagnose and repair issues; holding that level of information in my head all the time would get in the way of the business of driving around.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;With that diversion hopefully making clear the purpose of the functional block diagram, let&#39;s check out the one for the EM32-4.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-761 size-full post-img&#34; height=&#34;699&#34; src=&#34;block-diagram.png&#34; width=&#34;850&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;There&#39;s some really good info here! Let&#39;s start with the external connections:&lt;/p&gt;&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li style=&#34;text-align: justify;&#34;&gt;We could have guessed V+ and 0V are supply voltage and ground, but this confirms it.&lt;/li&gt;
&lt;li style=&#34;text-align: justify;&#34;&gt;The 35-bit &lt;a href=&#34;https://en.wikipedia.org/wiki/Shift_register&#34;&gt;shift register&lt;/a&gt; is intriguing, and illuminates the purpose of the D (Data) and Ck (Clock) terminals. There&#39;s also an Ē (enable) pin for the data line which is active low (indicated by the bar over the pin name, for &#34;not&#34;). &lt;/li&gt;
&lt;li style=&#34;text-align: justify;&#34;&gt;Since we don&#39;t have direct control over the latches or buffer layer of the shift register, it seems that data will be shown as soon as its clocked in.&lt;/li&gt;
&lt;li&gt;There&#39;s a weird hanging &lt;a href=&#34;https://en.wikipedia.org/wiki/Inverter_(logic_gate)&#34;&gt;inverter&lt;/a&gt; on the left side of the diagram attached to the output buffers, as if there was some kind of external buffer control possible at some point. How odd.&lt;/li&gt;
&lt;li style=&#34;text-align: justify;&#34;&gt;It seems that the  V&lt;sub&gt;L&lt;/sub&gt; pin is on the downstream side from the voltage regulator, so it probably puts out the 3 volts listed under electrical specifications above.
&lt;li&gt;This probably means that L1 thru L4 are &lt;a href=&#34;https://en.wikipedia.org/wiki/Open_collector#:~:text=&#34;&gt;open-collector outputs&lt;/a&gt;, so we have a sense of how we might use the part to drive the external LEDs.&lt;/li&gt;
&lt;li style=&#34;text-align: justify;&#34;&gt;Finally, there&#39;s a Reset pin for soft-resetting the data displayed - this would be useful if the end product was configured so the displayed retained power when the controller turned off - the controller could simply reset the display (or many displays in parallel) to ensure that no data was present for a fresh start.&lt;/li&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;One of the starting placing for replacing this display was the possibility that there might be some driver circuitry driving a&lt;a href=&#34;https://www.adafruit.com/product/865&#34;&gt; generic 7-segment display&lt;/a&gt;. If the display itself was still good, perhaps we can simply replace the driver and have a visually identical display. Those hopes were dashed, however, when I opened up the EM32-4 LED to find...&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-776 post-img&#34; height=&#34;540&#34; src=&#34;IMG_9565-1024x768.jpg&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;An &lt;a href=&#34;http://www.farnell.com/datasheets/83212.pdf&#34;&gt;OEM 4-LED&lt;/a&gt; - the power behind the throne - it&#39;s the same product, right down to the block diagram, but in a DIP-style package. The EM32-4, it turns out, is the OEM-4 with a nice aluminum case and terminal blocks. And the back of the OEM-4 is epoxy-blobbed together, so even if we were to break into the thing, there&#39;s a good chance everything is wirebonded all the way to nowhere and back. Reusing the display on this thing is a non-starter.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;All is not in vain, however - the OEM-4&#39;s datasheet is a whopping &lt;em&gt;four&lt;/em&gt; pages to the EM32&#39;s paltry two. The first two pages are essentially identical (which makes sense, since one &lt;em&gt;is&lt;/em&gt; the other in a very real way), but the two additional pages in the OEM-4&#39;s datasheet have four additional juicy diagrams. Starting with a timing diagram:&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-780 post-img&#34; height=&#34;648&#34; src=&#34;timing.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;We can now see in much more detail that, yes indeed, the display is based around an internal shift register architecture, with bits being clocked in and held in the device. We can see that there&#39;s a start bit (&#34;1&#34;) and the 35 data bits we saw in the EM32&#39;s datasheet, so we&#39;ll need to clock 36 physical bits into the device, whereupon it will automatically load the data (presumably into the data latches and output buffer). Then in 30 ns it will automatically reset and be ready The clock timing, which is listed as 500 Khz nominal, can in theory be pushed to 2 MHz if the 500 ns cycle time (250 ns + 250 ns) can be believed. (&lt;em&gt;Not that we&#39;re hoping it&#39;s that high&lt;/em&gt;). We can also get some detail about the external reset signals and the data input timing.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;Remember, all this sleuthing is with a goal -  not of driving an EM32, but of creating a display controller which &lt;em&gt;takes the place of &lt;/em&gt;an EM32 in a specific installation. Any details we can deduce from the datasheets will help us narrow down where we begin with our investigation of the controller itself.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-777 post-img&#34; height=&#34;511&#34; src=&#34;applications.png&#34; width=&#34;960&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;The &#34;applications&#34; diagram gives us a few pointers - not all are useful to our goal, but are interesting nonetheless. As we guessed before, the LED1 through LED4 pins are open collector drivers - but unlike our guess, we actually need to provide the +3 volts for that control from an external regulator, not from the V&lt;sub&gt;LED&lt;/sub&gt; pin. And the typical current should be 2.5mA per LED, so there&#39;s aren&#39;t high-current drivers in any sense. We can also see that the OEM-4 module has an option for external brightness control via a 50kΩ potentiometer, but we don&#39;t have the ability to access those pins on the EM32 unit.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;There&#39;s also a sneaky note at the bottom of the diagram that there is a &#39;special version&#39; OEM-4 LED with a built-in 3V regulator and brightness control. I wonder which version we have?&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-778 post-img&#34; height=&#34;573&#34; src=&#34;ps035.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;At first blush the circuit diagram appears to tell us what we already know - there&#39;s a &lt;a href=&#34;https://www.digchip.com/datasheets/parts/datasheet/922/PS035-pdf.php&#34;&gt;shift-register LED driver&lt;/a&gt; inside this thing that&#39;s taking clocked data in and driving LEDs on the downstream side. But there are actually two key things to note here - while I had assumed the V&lt;sub&gt;LED&lt;/sub&gt; pin was only for the external LED&#39;s, it&#39;s actually the anode connection for all the segments of the display! This means that connecting it isn&#39;t optional for driving external LEDs, it&#39;s mandatory if we want the OEM-4 to work. Looking back at the block diagram from the EM32, we can understand the purpose of the built-in regulator shown there.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-784 size-full post-img&#34; height=&#34;282&#34; src=&#34;regulator.png&#34; width=&#34;814&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;The EM32&#39;s built-in 3V regulator on the EM32.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;The second key thing we learn from the circuit diagram is &lt;em&gt;which bits control which segments.&lt;/em&gt; But it&#39;s made even more clear in the final diagram from the OEM-4 datasheet: the serial data input sequence:&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-779 post-img&#34; height=&#34;326&#34; src=&#34;serial-data.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;text-align: justify;&#34;&gt;Now we don&#39;t have to try to deducing the bit-order from what we think the data stream is displaying, we can build that data into our programming from the beginning. Thank goodness, since I&#39;d never actually seen this display in action before I undertook the task to replace it!&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr class=&#34;wp-block-separator&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is about as deep as the research rabbit-hole goes, it seems. We&#39;ve found the datasheet for the EM32 module itself, the OEM-4 module inside it, and the PS035 inside that.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In the next post, we&#39;ll start probing the signals coming from the controller, building a version of the display in software, and testing some theories about how the display operates.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Setting up an Electronics Lab - Tools</title>
      <link>https://jeff.glass/post/setting-up-an-electronics-lab-tools/</link>
      <pubDate>Sun, 01 Dec 2019 23:54:53 -0500</pubDate>
      
      <guid>https://jeff.glass/post/setting-up-an-electronics-lab-tools/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Between 10 years working in stage lighting, live video, and theatrical special effects; three moves and two &lt;a href=&#34;https://jeff.glass/2019/03/03/home-office-overhaul/&#34;&gt;home workbench-overhauls; &lt;/a&gt;and my new-this-month position as an Exhibit Engineer at a major Midwest science museum, I&#39;ve planned and kitted-out many electronics workbenches over the years. For those interested in getting involved in hobby or professional electronics work, I&#39;ve compiled the tools I think are most useful when building up a workspace for electronics construction and troubleshooting.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m going to specifically focus on tools and support-hardware this time around, and not dive too deep into supplies and consumables, purely to maintain focus. The parts and pieces you need will be wildly different if your specific focus is &lt;a href=&#34;https://twitter.com/jeriellsworth/status/1195900908049072128&#34;&gt;scratch-building accelerometers&lt;/a&gt; vs &lt;a href=&#34;https://jeff.glass/2019/05/23/dmx-mini-moving-light-shield-v0-3/&#34;&gt;twitter-connected instant cameras&lt;/a&gt;, say. But in the wide and deep pool of &#39;working with electronics,&#39; here are some flotation aids that will keep your head above water most of the time.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34; id=&#34;soldering-header-h3&#34;&gt;Soldering&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;As both hobbyists and professionals, we are often looking not for the best tool, but one that&#39;s good enough for the job without breaking the bank. If there&#39;s one tool that I&#39;d recommend getting the &#39;good&#39; versus the &#39;good enough&#39; version, it&#39;s a &lt;strong&gt;soldering iron&lt;/strong&gt;. I thought for years I was just bad at soldering. Nope, just a crappy $25 Radio Shack soldering iron that was doing me no favors.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Not that &#39;good&#39; has to mean &#39;super expensive.&#39; In my home shop and my current shop at work, I used the &lt;a href=&#34;https://amzn.to/2DuvecD&#34;&gt;Hakko 888D&lt;/a&gt;, which has proved reliable and durable, even if the interface is a little unintuitive. For less than $100, that&#39;s a darn good iron. The shop at my previous job has a &lt;a href=&#34;https://amzn.to/2OWP8CF&#34;&gt;cheapie 3-in-1 soldering/hot-air-rework/power supply station&lt;/a&gt;, and for most things that was just &lt;em&gt;fine. &lt;/em&gt;They&#39;re such a huge leap above a &#39;soldering pencil,&#39; and they&#39;ll last for years,&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Hakko 888D&#34; class=&#34;wp-image-673 size-medium post-img&#34; height=&#34;300&#34; src=&#34;IMG_8929-225x300.jpg&#34; width=&#34;225&#34;/&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;The trusty Hakko 888D. I now have one of these at home and one at work, and they&#39;re a very nice little iron.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Whatever iron you choose, you&#39;ll want some &lt;strong&gt;additional tips&lt;/strong&gt; to go with it. While you could get the &lt;a href=&#34;https://amzn.to/2P5kC9Q&#34;&gt;pack of every tip imaginable&lt;/a&gt;, I find myself using either the medium chisel or the fine-conical %99.9 of the time, so &lt;a href=&#34;https://amzn.to/2r2h4Nj&#34;&gt;a smaller assortment&lt;/a&gt; is probably fine.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As far as &lt;strong&gt;solder&lt;/strong&gt;, while there are good environmental reasons to go with lead-free solder, there&#39;s nothing quite so good to work with as classic &lt;a href=&#34;https://amzn.to/2OBtjcX&#34;&gt;Kester rosin-core 60/40, nice and thin&lt;/a&gt;. A one-pound reel of that stuff will last most people &lt;em&gt;years&lt;/em&gt;. While you could buy a &lt;a href=&#34;https://amzn.to/2DCC53L&#34;&gt;solder-reel stand&lt;/a&gt;, I&#39;ve found a &lt;a href=&#34;https://jeff.glass/2019/03/09/3d-printing-in-the-home-workshop/&#34;&gt;3D-printed design&lt;/a&gt; that I really like (credit to &lt;a href=&#34;https://www.thingiverse.com/thing:960103&#34;&gt;Phredie on Thingiverse&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Roll of Solder on 3D Printed Stand&#34; class=&#34;wp-image-674 size-medium post-img&#34; height=&#34;225&#34; src=&#34;IMG_8948-300x225.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;One pound of Kester 60/40 in my favorite 3D printed holder. As busy as we are, I might actually make in through this roll in a year or two.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;You&#39;ll also want some &lt;strong&gt;flux&lt;/strong&gt;, either &lt;a href=&#34;https://amzn.to/35T3lHl&#34;&gt;as a paste&lt;/a&gt; or in my preferred form &lt;a href=&#34;https://amzn.to/2rHoJk2&#34;&gt;as a solder pen&lt;/a&gt;. While rosin-core solder has flux built-in, any time you&#39;re doing rework, SMD work, or just taking a little longer to deal with a tricky part, flux makes sure your surfaces are clean and ready to accept the molten solder.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Speaking of keeping things clean, let&#39;s talk about &lt;strong&gt;cleaning your soldering iron tip&lt;/strong&gt;. The sponge and &lt;a href=&#34;https://amzn.to/35SyYkD&#34;&gt;wire-wool cleaner&lt;/a&gt; than come with your iron are plenty, if you treat your iron right. More aggressive chemical fluxes like those found in &#34;&lt;a href=&#34;https://amzn.to/33wfVLn&#34;&gt;tip-tinners and cleaner&lt;/a&gt;&#34; are meant to remove long-built-up oxidation on your iron tip, and are overkill for routine tip-cleaning. I was taught to dab the iron in the wire-wool between each joint (realistically, between every several joints), and wipe on the sponge before the iron goes back in the stand. That should be all you need.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To remove solder from things other than your iron may take some special tools. &lt;strong&gt;&lt;a href=&#34;https://amzn.to/2DyQTQZ&#34;&gt;De-soldering braid&lt;/a&gt;&lt;/strong&gt; is a great tool - its a woven copper ribbon impregnated with flux, that, when heated against a solder joint, sucks the molten solder up via capilary action. For getting the last little bit of solder out of through-hole pads, &lt;a href=&#34;https://amzn.to/2OYKgwL&#34;&gt;a &lt;strong&gt;solder-sucker&lt;/strong&gt;&lt;/a&gt; is the tool - find yourself a cheap one, they&#39;re all pretty much the same. At my last job, we purchased a &lt;a href=&#34;https://amzn.to/2OYjkgL&#34;&gt;cheap vacuum desoldering station&lt;/a&gt;, which was fine, but mostly could have been replaced by solder-wick in 90% of applications. Perhaps a &lt;a href=&#34;https://amzn.to/2Du8FoA&#34;&gt;brand-name vacuum desoldering station&lt;/a&gt; would have done the job better, but in any case when setting up my shop at the new job, I passed on this tool. For more thoughts on all these tools/techniques, &lt;a href=&#34;https://www.youtube.com/watch?v=UwsGnO630vY&#34;&gt;W2AEW&lt;/a&gt; has a great video on desoldering if you find yourself in a pinch.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Whether your soldering or desoldering, you&#39;re going to be making some nasty fumes melting all that flux, so get yourself some kind of &lt;strong&gt;filtering fan&lt;/strong&gt;. I&#39;ve got a &lt;a href=&#34;https://amzn.to/2L8wGpv&#34;&gt;dirt-cheap Aoyue filter-fan&lt;/a&gt; on my home bench, and both a &lt;a href=&#34;https://amzn.to/2rCkS8b&#34;&gt;cheap Kotto&lt;/a&gt; and an&lt;a href=&#34;https://amzn.to/2OXIlZo&#34;&gt; expensive Hakko&lt;/a&gt; on my bench at work now, and they&#39;re all about as good as each other, and they all suck (not in the way you want a filter fan to suck). I replaced the fan in my Aoyue with a &lt;a href=&#34;https://amzn.to/35PoTVm&#34;&gt;120V 4&#34; Muffin fan&lt;/a&gt; (pulled from an closing musical&#39;s fog-distribution system, in my case), and it&#39;s made a world of difference, I highly recommend upgrading. Just be careful, those fans bite.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Hakko FA-400 Fan&#34; class=&#34;wp-image-675 size-medium post-img&#34; height=&#34;225&#34; src=&#34;IMG_8927-300x225.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Now that&#39;s a big fan! Inherited from a previous museum exhibit.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are about as many different kinds of &lt;strong&gt;work-holding clamps&lt;/strong&gt; as there are people who solder, but my two favorites are this &lt;a href=&#34;https://www.thingiverse.com/thing:21357&#34;&gt;3D-printed PCB vise&lt;/a&gt; for flat-work and these &lt;a href=&#34;https://amzn.to/2R8qkdl&#34;&gt;octopus-style 3rd-hands for other unusual shapes&lt;/a&gt;. I&#39;ve used the &lt;a href=&#34;https://amzn.to/2R6nWDX&#34;&gt;classic Panavise clamps&lt;/a&gt;, and for a shared-shop environment I&#39;d recommend them for their sturdy build quality. But I find them to be a little bit too bulky and their jaws not quite wide enough for the work I find myself doing, so I opt for other solutions in my just-for-me setups. You do you though.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;size-medium wp-image-687 post-img&#34; height=&#34;169&#34; src=&#34;DSC00056-300x169.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Almost 6&#34; of jaw space on this 3D printed workholder. You can tell I ran out of grey filament halfway through printing the parts.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Electronic Test and Measurement&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The two big items in this category are multimeters and oscilloscopes. Let&#39;s take a look at both of them first before we get into some more specialized tools.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are lots and lots of good-enough &lt;strong&gt;multimeters&lt;/strong&gt; in the world today, of all kinds of different brands, and they&#39;re pretty much going to all be OK. Rather than try and pick out specific ones from Amazon, here are the features I&#39;d look for if I was looking to add a decent multimeter to my bench today:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;The basics: AC/DC Voltage, AC/DC Current (up to 10A is useful), resistance (to 0.1Ω and 1 MΩ is nice).&lt;/li&gt;
&lt;li&gt;Continuity test- this is &lt;span style=&#34;text-decoration: underline;&#34;&gt;the most useful setting on a multimeter&lt;/span&gt;. Using this setting and touching a wire/component/circuit with the probes will tell you if there&#39;s a low impedance path between the two points; i.e., if they&#39;re connected. Super useful.&lt;/li&gt;
&lt;li&gt;Auto power-off. Doesn&#39;t seem like much, but it&#39;s real easy to kill batteries without it.&lt;/li&gt;
&lt;li&gt;4-digit precision (some cheap meters only give 3)&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;The other features a meter might have include: temperature measurement, diode-forward-voltage measurement, True RMS AC measurement, frequency (power line), duty-cycle, capacitance, transistor hFE, illumination... the list goes on. I&#39;ve appreciated having a true RMS measurement in tricky AC power situations, and having an easy frequency-check can be handy, but for the rest of these, I&#39;d rather rely on a purpose-made tool like a thermometer, &lt;a href=&#34;https://amzn.to/2OXmoty&#34;&gt;lightmeter&lt;/a&gt;, or &lt;a href=&#34;https://amzn.to/2r2n6NX&#34;&gt;transistor checker&lt;/a&gt;, rather than something built into my multimeter.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Multimeter&#34; class=&#34;wp-image-688 size-medium post-img&#34; height=&#34;300&#34; src=&#34;DSC00059-169x300.jpg&#34; width=&#34;169&#34;/&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;I got this meter almost 8 years ago in a moment of need, at a Menards if memory serves, and it&#39;s worked swell ever since.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;ve got the cash and are looking for something to last 20 years, the &lt;a href=&#34;https://amzn.to/2sy0SUz&#34;&gt;Fluke 117&lt;/a&gt; is a really solid primary meter. Fluke has been &lt;em&gt;the&lt;/em&gt; brand name in quality meters for the past lots-of-years - well made, reliable, accurate. Not super cheap, but you do get what you pay for. My current department has standardized on them, and that&#39;s been swell. For most things, we don&#39;t need &lt;a href=&#34;https://amzn.to/2Y0Q90F&#34;&gt;the $300+ meter&lt;/a&gt; (which gives you min/max tracking and microAmp measurement) or &lt;a href=&#34;https://amzn.to/2OSDNmQ&#34;&gt;the $500 meter&lt;/a&gt; (with its fancy clamps and probes). In fact, a &lt;a href=&#34;https://amzn.to/2DA9tZ9&#34;&gt;basic $40 meter&lt;/a&gt; is going to be fine for almost everything you do.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;A little aside - why are there no benchtop-multimeters in the super-affordable price range? When you can get a passable, portable multimeter for $20, why are even the&lt;a href=&#34;https://amzn.to/34BhIA5&#34;&gt; cheapie-versions of a benchtop meter&lt;/a&gt; still $150? I think there would be a strong market for a $60, benchtop form-factor, ok-ish meter. I have an old Simpson 460-6 at work that I love using, not because it&#39;s the world&#39;s most amazing meter, but just because it&#39;s always &lt;em&gt;there&lt;/em&gt; and the form factor is right. How about it, AliExpress?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Simpson 460-6&#34; class=&#34;size-medium wp-image-689 post-img&#34; height=&#34;225&#34; src=&#34;IMG_8937-300x225.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Now can I get this form factor, with a little adorable LED display, for less than $200?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Moving on to &lt;strong&gt;oscilloscopes&lt;/strong&gt;, I think there are some who would say they aren&#39;t essential for electronics work - after all, if you end up working mostly with digital signals, or analog-voltages that don&#39;t change over time, is it really worth it? I would counter that &lt;span style=&#34;text-decoration: underline;&#34;&gt;the oscilloscope is your eyes into the realm of what your electronics are doing&lt;/span&gt;, and is a vitally useful tool in many situations. If you&#39;ve never used an oscilloscope, may I once again recommend &lt;a href=&#34;https://www.youtube.com/watch?v=067W7h1BhxE&#34;&gt;a video by W2AEW.&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Scopes are another arena where you don&#39;t need to break the bank to get something decent enough to use. My first scope was a well-aged &lt;a href=&#34;https://www.scribd.com/document/364412737/BK-Precision-1535a&#34;&gt;BK-Precision 1535A&lt;/a&gt; 35Mhz analog scope that a bought from a guy on Craigslist for about $40. For basic electronics work, 20Mhz or so is plenty - you&#39;re most likely going to working at slower speeds (audio to 20Khz, maybe 250kHz for serial or RS485) or much, much higher (HDMI, USB, etc) where a scope really isn&#39;t the right tool in most cases anyway. Or at least, once you&#39;ve progressed to the level where you&#39;re worrying about measuring GHz signals, you&#39;ve likely acquired more specialized tooling along the way.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;size-medium wp-image-690 post-img&#34; height=&#34;169&#34; src=&#34;DSC00061-300x169.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;This old thing is still puttering away on my workbench. Still worked just fine for most things I&#39;d care to do with it.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I think a decent analog scope is a really good place to start if you&#39;ve never used a scope before - better to tackle the fundamentals of the tool before having to learn how to use a particular menu structure as well. The shop at my new job came with a &lt;a href=&#34;https://www.allaboutcircuits.com/test-measurement/oscilloscopes/compactscope-series-v-1565/&#34;&gt;Hitachi V1565 100MHz analog scope&lt;/a&gt; with measurement capability that I&#39;ve been very happy with - the ability to add cursors to an analog display to measure voltage, time, or duty cycle is handy. At home I&#39;ve now also got an &lt;a href=&#34;https://amzn.to/35O2ZBV&#34;&gt;Owon PDS5022T&lt;/a&gt; 25MHz digital scope that was gifted to me - I like the tools having a digital scope provides, but I find it significantly more clunky than either of the classic analog scopes in my life.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Hitachi 1565&#34; class=&#34;wp-image-676 size-medium post-img&#34; height=&#34;225&#34; src=&#34;IMG_8930-300x225.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;The &#34;new&#34; (to me) oscilloscpe I have at work. 100MHz bandwidth is overkill for anything I can think we&#39;ll run into, but you never know...&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, if you&#39;re looking for a bench scope and you&#39;ve never used one before, I&#39;d say start analog. I see on eBay right now you can buy a gently-loved 2-channel analog scope for around $50-60 (plus $40 shipping, those things aren&#39;t light). Not a bad way to go.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Something my accomplice at my old job turned me on to is &lt;a href=&#34;https://www.amazon.com/s?k=portable+oscilloscope&#34;&gt;small, portable oscilloscopes&lt;/a&gt;. I don&#39;t have a specific model to recommend, but they can be useful in specific circumstances - not so much to actually interrogate the characteristics of a signal, but more as a signal checker. Do I have AC here, do I have something that looks like RS-485 there, etc? If you do buy one, make sure you get one with an integrated battery (not all do) - getting one that still has to be plugged in makes it far less useful.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are some more niche electronic tools that I make use of on my bench, but mostly because of my &lt;a href=&#34;https://kk9jef.wordpress.com/&#34;&gt;ham radio background&lt;/a&gt;. A decent &lt;strong&gt;frequency counter&lt;/strong&gt; is useful in that arena - I&#39;ve got a classic &lt;a href=&#34;https://www.youtube.com/watch?v=okMwS4IXz5E&#34;&gt;Heathkit IM-2420&lt;/a&gt; that I picked up at a swap-meet, but I&#39;m really intrigued by the new wave of &lt;a href=&#34;https://amzn.to/2L8CJdv&#34;&gt;inexpensive benchtop frequency counters&lt;/a&gt; that have popped up in the past couple years that claim to do 0.1Hz-2.4GHz for only $70. A &lt;strong&gt;signal genetor&lt;/strong&gt; is also really useful in my work - I &lt;a href=&#34;https://kk9jef.wordpress.com/2017/07/10/si5351-signal-generator/&#34;&gt;built my own&lt;/a&gt; around an Si5351 and an Arduino, but you can buy a &lt;a href=&#34;https://www.amazon.com/Generator-KKmoon-Precision-Dual-Channel-Arbitrary/dp/B071HJ31WN/ref=sr_1_7?keywords=function+generator&amp;amp;qid=1575140813&amp;amp;sr=8-7&#34;&gt;0-25Mhz&lt;/a&gt; or &lt;a href=&#34;https://amzn.to/35QquKJ&#34;&gt;0-60Mhz arbitrary function generator&lt;/a&gt; for not a lot of cash these days, and I have colleagues who speak highly of both. Since my last job was more lighting-focused, we purchased an&lt;a href=&#34;https://amzn.to/2rFIskp&#34;&gt; Extech &lt;strong&gt;digital lightmeter&lt;/strong&gt;&lt;/a&gt; for a specific project - sometime I&#39;d love to get into why that specific meter and the challenges of metering LED sources, but that discussion is too long for this margin to contain.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;size-medium wp-image-692 post-img&#34; height=&#34;169&#34; src=&#34;DSC00063-300x169.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Some specialized tools for specialized circumstances. A sweep generator, frequency counter, DC power supply, oscilloscope, and homebrew frequency generator.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Electrical Power&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;A source of consistant, controlled &lt;strong&gt;DC power&lt;/strong&gt; is vital for electronics work, since most projects are going to be some flavor of DC-powered. For basic logic-level type work, the least-expensive option is probably an &lt;a href=&#34;https://amzn.to/2Y3Rvre&#34;&gt;ATX computer power supply&lt;/a&gt; with an &lt;a href=&#34;https://amzn.to/2OCwelj&#34;&gt;ATX breakout board&lt;/a&gt;, which will at least provide +3.3, +5, +12 and -12V, which suffices for a lot of Arduino+sensors or Raspberry Pi+breakouts type projects. There are a thousand flavors of those breakout boards, so make sure you find one with the ATX connector type that matches your power supply. There are also screw terminal and terminal lug versions, if you have strong feelings either way.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If your work is less module-oriented and more about building up circuits in a more from-scratch way, a &lt;strong&gt;current-limited bench power supply&lt;/strong&gt; is key. A decent power supply will supply relatively low-ripple DC voltage from 0 to 20 or 30 or 50 volts, at 5 or 10 amps max, commonly. What&#39;s more, you can set a current-limit such that, when your project runs away and tries to turn itself into a pile of smoke, at least it does so more slowly - the power supply will typically fold back its output voltage to keep the output current below the value you specify. Some fancier models also have the option to just cut off current entirely until the power supply is reset.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;DC power Supply&#34; class=&#34;size-medium wp-image-700 post-img&#34; height=&#34;169&#34; src=&#34;DSC00064-300x169.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Versions of this Yescom power supply are available all over the internet at around the $50 price point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;My current recommended inexpensive bench power supply is the &lt;a href=&#34;https://amzn.to/33AshSr&#34;&gt;Hanmatek HM305P&lt;/a&gt;, for a couple reasons - having a digital display so you can set the output voltage at, say, exactly 5V, is handy. As are the six front-panel preset buttons that allow you to jump to commonly-used voltage/current limit combinations that you specify. That said, at home I have a &lt;a href=&#34;https://amzn.to/2RaiPmy&#34;&gt;Yescom power supply&lt;/a&gt; with a somewhat higher output current that&#39;s useful for &lt;a href=&#34;https://jeff.glass/2018/08/25/50w-qrp-amplifier-schematic-pcb-ver-1/&#34;&gt;testing RF amplifiers&lt;/a&gt;, and its analog controls make it somewhat easier to smoothly vary to the output voltage and see how a circuit/amplifier reacts. If I had to choose only one, I&#39;d get the Hanmatek (or one of its many clones), but an analog-controlled meter is handy for certain situations. (I got by with an &lt;a href=&#34;https://www.ebay.com/p/581276384?iid=183982778513&amp;amp;chn=ps&amp;amp;norover=1&amp;amp;mkevt=1&amp;amp;mkrid=711-117182-37290-0&amp;amp;mkcid=2&amp;amp;itemid=183982778513&amp;amp;targetid=596465712468&amp;amp;device=c&amp;amp;mktype=pla&amp;amp;googleloc=9021730&amp;amp;poi=&amp;amp;campaignid=6470719577&amp;amp;mkgroupid=81597521270&amp;amp;rlsatarget=aud-649939740844:pla-596465712468&amp;amp;abcId=1140476&amp;amp;merchantid=6296724&amp;amp;gclid=CjwKCAiA5o3vBRBUEiwA9PVzav8LHOT-RAFp0R2EWk4GEyvkj8gsyByKg8dUNdnkEM4ogZbQpqIXsBoCiwkQAvD_BwE&#34; rel=&#34;noopener noreferrer&#34;&gt;Elenco Precision XP-656&lt;/a&gt; 500mA 0-30V DC supply as my primary current-limited supply for &lt;em&gt;years&lt;/em&gt;.)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Hanmatek Power Supply&#34; class=&#34;size-medium wp-image-702 post-img&#34; height=&#34;225&#34; src=&#34;IMG_8925-300x225.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;The Hanmatek interface (top right) is a little unintuitive, but the manual is decently written. It&#39;s sitting on top of an older tri-voltage power supply.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To connect your power supply to your board, you&#39;re going to need an &lt;strong&gt;assortment of wires and connectors&lt;/strong&gt;. A handful of the typical USB cable types (A-to-Mini, A-to-B, A-to-Micro) is useful, and you probably already have them floating around in your sock drawer. Generic &lt;a href=&#34;https://amzn.to/2DA4987&#34;&gt;alligator clips&lt;/a&gt; are always handy. &lt;a href=&#34;https://amzn.to/34GIOpA&#34;&gt;Mini-grabber style test leads&lt;/a&gt; are great for hooking to component leads on a breadboard, though they&#39;re not rated for much current - in those cases, a &lt;a href=&#34;https://amzn.to/2DA4Jmj&#34;&gt;beefier clip lead&lt;/a&gt; is a better choice.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While most projects are going to be DC powered, having enough AC outlets to have all of your test gear plugged in all the time, plus plenty of outlets for temporary plugs, plus a few more, is a tremendous timesaver. You can snag a&lt;a href=&#34;https://amzn.to/35Sd0xW&#34;&gt;&lt;strong&gt; multi-outlet power strip&lt;/strong&gt;&lt;/a&gt; for relatively cheap these days, but they&#39;re also really easy to find at garage sales, fleamarkets, and swapmeets. The &lt;a href=&#34;https://www.amazon.com/AmazonBasics-6-Outlet-Protector-2-Pack-2-Foot/dp/B014EKQ5AA/ref=sr_1_4?keywords=power+strip&amp;amp;qid=1575221486&amp;amp;sr=8-4&#34;&gt;Amazon Basics 6-plug power strips&lt;/a&gt; used to be dirt-cheap, like $3 for a two-pack, but as of this writing they&#39;re now $10 for two... a bummer, those used to be a real steal.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;re ever in doubt about the functionality of an AC outlet, or if you&#39;re going to be taking your work to a place where AC wiring may be questionable, a&lt;a href=&#34;https://amzn.to/2Ldtglr&#34;&gt;&lt;strong&gt; cheap outlet tester&lt;/strong&gt;&lt;/a&gt; is useful - it will confirm the presence of AC voltage, whether the hot/neutral are reversed, and other incorrect-wiring hazards. If you just need to confirm whether an AC circuit is hot, a &lt;a href=&#34;https://amzn.to/35UMWm6&#34;&gt;&lt;strong&gt;non-contact voltage detector pen&lt;/strong&gt;&lt;/a&gt; is the easiest tool to use - just hold the on-button and place the non-conducting tip near the (potential) AC voltage. If it beeps and lights up, there&#39;s some AC present. Be warned though - the presence of AC-something is not a guarentee of 120 volts or 15 amps or whatever you actually need, just that there&#39;s some fluctuating voltage nearby. Just last week I watched an electrician get mislead by his NCV on a three-phase system - his pen told him all 3 phases had AC, but when he got around to actually sticking his meter probes in the test points, one of the phases was only &#34;33V&#34; to ground (i.e. the system had dropped a phase). You&#39;ve been warned!&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Power Tools&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;While I don&#39;t often use a &lt;strong&gt;power drill&lt;/strong&gt; for actual workbench projects, the ability to stick a screw in a wall or quickly knock a hole in something is nice. I received a &lt;a href=&#34;https://amzn.to/384LNdw&#34;&gt;cordless Black and Decker 20V drill&lt;/a&gt; as a gift years ago, and its been sufficient for my home purposes ever since. Sure, at the point in my career where I was putting 3/8&#34; lag bolts into 2&#34; of plywood, the building had standardized on &lt;a href=&#34;https://amzn.to/35LJU3g&#34;&gt;Ryobi impact drivers&lt;/a&gt;, which are much stout-er. But the&#39;re also more expensive, and for home-use, I just don&#39;t usually need that much firepower.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;My old accomplice turned my on to the virtues of an &lt;strong&gt;electric screwdriver&lt;/strong&gt;. Why would you need an electric screwdriver when you have a high-torque, high speed, large battery drill? Exactly because the electric screwdriver is lightweight, low-speed, and easy to transport - you&#39;re not using it to drive screw into material, you&#39;re using it to take machine screws out of an electrical panel, say. Or install a hundred rack-mount screws. Or take out and reinstall a Euro-rack module 60 times. The light weight and ease-of-use of the screwdriver limits fatigue over long projects like these. &lt;a href=&#34;https://amzn.to/34QiAAI&#34;&gt;Black and Decker&lt;/a&gt; makes a fine, inexpensive model.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We&#39;ll get into the virtues of heat shrink tubing some later day when we dive into materials, but an inexpensive &lt;strong&gt;heat gun&lt;/strong&gt; is the appropriate tool for using it. I started with a $10 model from Harbor Frieght which lasted 5 years, and then bought another $10 to replace it. The trouble with all heat guns under $100, it seems, is ergonomics. After you&#39;ve used the gun for a couple minutes and brought the metal tip to a searing-hot temperature, what do you do with it? This &lt;a href=&#34;https://amzn.to/2L9m2yU&#34;&gt;Porter-Cable model&lt;/a&gt;, with a flat-but you can stand up on your workbench, is the best solution I&#39;ve seen. (&lt;a href=&#34;https://amzn.to/2OBWEnm&#34;&gt;Professional models&lt;/a&gt; have a flat or angled plate on the back to stand up in just this way.) &lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Hand Tools&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;A few basic hand tools will go a long way in making your workbench serviceable and ready to tackle common challenges - some are worth a little investment, while others are prime fodder for the cheapo &lt;a href=&#34;https://www.harborfreight.com/&#34;&gt;Harbor Freight&lt;/a&gt; model. And thankfully, there are a number of tools where jumping from the $5 version to the $10 version makes a world of difference, and is worth the Lincoln.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are lots of different tools to strip insulation off of wire - manual strippers, semi-automated strippers, fully automated stripers, a par of cutting pliers, a knife, your teeth... not that I would recommend all of those. But you can&#39;t really go wrong with a basic set of &lt;strong&gt;wire strippers&lt;/strong&gt; that covers gauges from 10 to 30 AWG. These &lt;a href=&#34;https://amzn.to/35PRzO1&#34;&gt;Paladin wire strippers&lt;/a&gt; were our go to at my last job, and they fit the bill just fine. The curved handle takes a little getting used to, but it actually makes them pretty ergonomic, which is nice if you&#39;re splicing a couple hundred bits of wire to LEDs in an afternoon, say. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;A decent set of &lt;strong&gt;flush cutters&lt;/strong&gt; is also worth a minor investment - not more than $7-8 a pair, mind, just don&#39;t get the $3 ones or they&#39;ll fall apart. Flush cutters are the tool of choice for trimming the leads on components, say, but they&#39;re also great for getting a clean end-cut on a piece of wire, or trimming flashing off of 3D-printed models. On the advice of my accomplice at my old job, we&#39;d order &lt;a href=&#34;https://amzn.to/34BH3Kg&#34;&gt;5-packs of Hakko-brand flush cutters&lt;/a&gt; regularly, and they served us well. For less critical cuts, &lt;a href=&#34;https://amzn.to/37T349j&#34;&gt;a couple pairs of scissors&lt;/a&gt; is handy, though for papercraft I prefer &lt;a href=&#34;https://amzn.to/2qTnEG9&#34;&gt;single-edge razor blades&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;Small pliers&lt;/strong&gt; are something you can go the inexpensive route on - Harbor Freight or eBay ones would be fine, you&#39;re usually not going to be putting so much force on them that you&#39;re in danger of damaging them. This set of &lt;a href=&#34;https://amzn.to/2rGDvHY&#34;&gt;6 assorted pliers for $20&lt;/a&gt; I ordered for my new workbench has been pretty solid - the extra long, extra thin needle-nose pliers I keep near my 3D printer for pulling ooze off the nozzle right before a print. Having a few &lt;strong&gt;heavier duty pliers&lt;/strong&gt; around is often helpful - just a basic &lt;a href=&#34;https://amzn.to/2OVtkqM&#34;&gt;lineman&#39;s pliers&lt;/a&gt; for when you need to put some force into the work would be a good place to start.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Long nose pleirs&#34; class=&#34;size-medium wp-image-693 post-img&#34; height=&#34;169&#34; src=&#34;DSC00065-300x169.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;One of my favorite pairs of pliers - long thin nose, good grip, and $2 at the hardware store.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I must confess - I don&#39;t find the sets of &#34;&lt;a href=&#34;https://amzn.to/2qTHalR&#34;&gt;one small screwdriver handle and 1700 bits&lt;/a&gt;&#34; to be terribly practical. They&#39;re great to have around for special projects, but the extra time spent swapping bits back and forth for every project/object/screw is  wearisome. As daily driver&lt;strong&gt; small screwdrivers&lt;/strong&gt;, I much prefer a set of basic jewelers screwdrivers in philips, flat, and hex. This &lt;a href=&#34;https://amzn.to/33BHZgf&#34;&gt;Wera 12-piece&lt;/a&gt; set is my go-to recommendation these days, and the carrying-case is nice if you don&#39;t have permanent storage set up yet or if you&#39;re throwing your screwdrivers in a toolbag.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Wera Screwdrivers&#34; class=&#34;size-medium wp-image-694 post-img&#34; height=&#34;225&#34; src=&#34;IMG_8950-300x225.jpg&#34; width=&#34;300&#34;/&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Decent screwdrivers that don&#39;t strip themselves instantly, in a nice carrying case too.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;A basic &lt;a href=&#34;https://amzn.to/2q84g7G&#34;&gt;6-in-1 screwdriver&lt;/a&gt; suffices for most &lt;strong&gt;large screwdriver&lt;/strong&gt; needs. That link is the cheapest one I could find on Amazon, but honestly, they&#39;re often between $1 and $3 at any hardware store, grab a couple then next time you see one.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s amazing how cheap &lt;strong&gt;digital calipers&lt;/strong&gt; have become - less than $20 for a &lt;a href=&#34;https://amzn.to/2szYVae&#34;&gt;decent 6&#34; caliper&lt;/a&gt; that does decimal inches, fractional inches, and millimeters. The calipers are among the top-five most commonly used tools on my bench, along with the soldering iron, pliers, and screwdrivers. You can measure interior dimensions, exterior dimensions, depth, diameter, all with a precision unmatched by analog means. Get yourself a set, it will change your bench. For larger measurements, a &lt;a href=&#34;https://amzn.to/2P1jL9R&#34;&gt;basic &lt;strong&gt;tape&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&#34;https://amzn.to/2P1jL9R&#34;&gt; measure&lt;/a&gt; &lt;/strong&gt;is handy - no need to get a fancy one unless your carpenter-ing regularly.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Digital Calipers&#34; class=&#34;size-medium wp-image-695 post-img&#34; height=&#34;169&#34; src=&#34;DSC00067-300x169.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
20 years ago, these would have been a multi-hundred dollar item. Now they&#39;re basically disposable.
&lt;h3 class=&#34;post-h3&#34;&gt;Adhesives&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;I wish I had a more in-depth knowledges of adhesives, epoxies, and glues. The properties department at the theater I used to work at maintained an encyclopedic knowledge of which glues were best of which applications, which chemicals were safe for which materials, which drying-times would lead to problems with material interactions... it was stunning. For my general purposes though, there a few basic adhesives that get me through the day more often than not.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;Hot&lt;/strong&gt; &lt;strong&gt;Glue&lt;/strong&gt; is a tremendously versatile material - you can stick most (rough) surfaces together with it, you can build up gussets and supports with it, you mold it to shape a little, and it removes easily from most things except paper. And did you know &lt;a href=&#34;https://amzn.to/2OFzInj&#34;&gt;it comes in black&lt;/a&gt;? A &lt;a href=&#34;https://amzn.to/2Dw73uD&#34;&gt;decent 100W hot-glue gun&lt;/a&gt; is a great &#34;well this just has to hold a little while&#34; solution.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For more permanent fixes, &lt;strong&gt;cyanoacrylate glue &lt;/strong&gt;(also known as CA glue or the brand names &lt;strong&gt;&lt;a href=&#34;https://amzn.to/33Hf7Db&#34;&gt;Super Glue&lt;/a&gt; &lt;/strong&gt;or &lt;strong&gt;Crazy Glue&lt;/strong&gt;) is a good go-to - it bonds to most things with a slightly-rough surface (so roughing up, say, metal with a file first is a good idea). It hardens in the presence of moisture - atmospheric humidity is enough, but if you put a big glob on something, the outside layer will start to set first and slow the setting process of the inside. Use only a thin layer to reduce this issue - in the right circumstances, the glue will set in a matter of seconds. If you need a little bit more working time or pliability, &lt;strong&gt;&lt;a href=&#34;https://amzn.to/2Y69opn&#34;&gt;E6000 Adhesive&lt;/a&gt;&lt;/strong&gt; is a better choice.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Very High Bond &lt;strong&gt;double-sided tape&lt;/strong&gt; (VHB) is an amazing product (well, line of products) from 3M. They give you the versatility of double-stick tape with some crazy adhesive capabilities. &lt;a href=&#34;https://www.3m.com/3M/en_US/vhb-tapes-us/&#34;&gt;3M&#39;s full catalog of adhesive tapes&lt;/a&gt; is worth browsing if you&#39;re into that sort of thing. As a good default, their &lt;a href=&#34;https://amzn.to/2Lr96EL&#34;&gt;RP62 foam-tape&lt;/a&gt; is strong, slightly spongy (good for bridging irregular surfaces), and relatively inexpensive.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For adhering large sheets of goods together, especially paper products, some kind of &lt;strong&gt;spray adhesive &lt;/strong&gt;is going to be easier to use than a brush-on or dab-on variety. &lt;a href=&#34;https://amzn.to/2OGOqut&#34;&gt;3M&#39;s Super 77&lt;/a&gt; is the de-facto standard spray adhesive for light- and medium-duty applications - adhering paper to paper for scrapbooking, or laminates to sheet goods. Simply spray Super 77 onto one of the surfaces, wait 60-90 seconds for the adhesive to become slightly tacky, then smoothly lay the second material onto the first. For heavier applications, there&#39;s a &lt;a href=&#34;https://amzn.to/2L9STDw&#34;&gt;High Strength 90 spray adhesive&lt;/a&gt; that works much the same.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;d be remiss if I didn&#39;t mention &lt;a href=&#34;http://www.thistothat.com/&#34;&gt;thistothat.com&lt;/a&gt;, a website that generates recommendations if you want to glue &lt;em&gt;this material&lt;/em&gt;&lt;em&gt; &lt;/em&gt;to &lt;em&gt;that material&lt;/em&gt;. Want to stick ceramic to rubber? They&#39;ve got a solution to that, and lots of other combinations as well. Well worth a look.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;3D Printing&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;I know I said I wouldn&#39;t get too far into specific materials or specific arenas of work, but having a 3D printer in your electronics workshop opens up a whole world of mechanical possibilities. Whether its &lt;a href=&#34;https://jeff.glass/2018/08/28/50w-qrp-amplifier-3d-printed-case-design-and-livestream/&#34;&gt;custom enclosures for new projects&lt;/a&gt; or &lt;a href=&#34;https://jeff.glass/2019/03/09/3d-printing-in-the-home-workshop/&#34;&gt;quality of life improvements&lt;/a&gt; for the shop or project mockups or practical tools, the sky&#39;s the limit of what you can accomplish. Getting started in 3D printing could be a whole series of articles in and of itself, but for the moment let me confine myself to some recommendations of tools to facilitate the practical use of 3D printing on an electronics workbench.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-351 size-medium post-img&#34; height=&#34;225&#34; src=&#34;PSU_1-300x225.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To start, the printer itself. I don&#39;t have any experience with &lt;a href=&#34;https://www.youtube.com/watch?v=8a2xNaAkvLo&#34;&gt;SLA 3D printing&lt;/a&gt;, only the more traditional &lt;a href=&#34;https://www.youtube.com/watch?v=3lRhZTdafE4&#34;&gt;FDM method&lt;/a&gt;. An FDM 3D printer is essentially a fancy robotic hot-glue gun on rails, that moves precisely around a 3D space squirting out hot plastic as it goes, which sets into shape as it rapidly cools down. This is a relatively speedy way of printing an object, but the spatial resolution of the resulting object is limited by the resolution of both the stepper motors that push the print-nozzing around and the diameter of the print nozzle. Still, with a stock 0.4mm nozzle and a basic machine, some &lt;a href=&#34;https://www.youtube.com/watch?v=Dss1yUHH-QY&#34;&gt;really beautiful things&lt;/a&gt; are possible.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Wall Thermostat Tag&#34; class=&#34;wp-image-704 size-medium post-img&#34; height=&#34;169&#34; src=&#34;DSC00071-small-300x169.png&#34; width=&#34;300&#34;/&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;How do YOU control your hot-end?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If I were to recommend a first FDM 3D printer to someone today, it would be the &lt;a href=&#34;https://www.prusa3d.com/original-prusa-mini/&#34;&gt;Original Prusa MINI&lt;/a&gt;. Josef Prusa was one of the original movers and shakers when the hobbyist 3D printer train was getting rolling in early 2010s, and his i3 model is perhaps the most popular 3D printer in the world. With a reputation for a great product and great customer service, the release of a printer at that key $350 price point that&#39;s become so popular, with mesh bed leveling, a heated bed with removable build-sheets, ethernet connectivity with WiFi upgrade possibilities, an option filament run-out sensor... I&#39;m very excited for this thing. It&#39;s currently on pre-order for $350 US to start shipping around the end of the year, and I think it&#39;s going to be a slam dunk. When I think that i paid about that much for my &lt;a href=&#34;https://www.monoprice.com/product?p_id=13860&#34;&gt;Monoprice Maker Select V2.1&lt;/a&gt; only 3 years ago, it&#39;s amazing to think how far the technology has come.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;3D Printer&#34; class=&#34;size-medium wp-image-705 post-img&#34; height=&#34;169&#34; src=&#34;DSC00072-300x169.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;This printer took a few mods to make the frame rock-solid. Amazing what 3 years progress looks like.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, all of the specific nozzles, filaments, and accessories you need will be specific to your printer and your projects. But I can recommend a couple of tools that will be useful to all FDM 3D-printing setups, the first being a &lt;a href=&#34;https://amzn.to/2DLYOuF&#34;&gt;set of 3D printing spatulas.&lt;/a&gt; Most printers ship with a &lt;a href=&#34;https://amzn.to/33Cfxeh&#34;&gt;putty knife&lt;/a&gt; as their print-removal-tool, which is an excellent way to gouge a hole in your print surface (or your hand!). Since receiving a set of these spatulas as a present for Christmas last year, they&#39;ve easily become the tool I keep closest to the printer.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;3D Printing Spatulas&#34; class=&#34;size-medium wp-image-706 post-img&#34; height=&#34;300&#34; src=&#34;DSC00073-169x300.jpg&#34; width=&#34;169&#34;/&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;These were definitely sitting on a shelf somewhere as palette knives and someone thought &#34;you know what we could sell those as? 3D printing spatulas!&#34; But they work, so who cares.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Second, while there are lots of methods of &lt;a href=&#34;https://www.youtube.com/watch?v=AaF28dnDgKA&#34;&gt;getting your 3D print to stick to the print bed&lt;/a&gt;, keeping the bed itself clean of oils and debris goes a long way toward success. I keep a bottle of &lt;a href=&#34;https://amzn.to/2rFOu4y&#34;&gt;high-strength isopropyl alcohol&lt;/a&gt; and some lint-free clothes nearby to wipe down the bed between every few prints, just to make sure the residual oils from printing and from my hands don&#39;t cause premature liftoff from the print bed.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Software&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;In this digital age, MS Paint is just as practical a tool as a paintbrush. So let&#39;s not leave out the digital tools that we use to make, track, distribute, and record projects on the workbench.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For &lt;strong&gt;2D drafting&lt;/strong&gt;, my two primary tools are &lt;a href=&#34;https://www.autodesk.com/products/autocad/overview&#34;&gt;AutoCAD&lt;/a&gt; and &lt;a href=&#34;https://www.vectorworks.net/en-US&#34;&gt;Vectorworks&lt;/a&gt;. AutoCAD (made by AutoDesk) is an incredibly powerful CAD program, and it&#39;s been around forever. Want to model a bracket, or a whole airplane, or design a building, or pocket watch? AutoCAD can do it. It does have a fairly-steep learning curve - there are folks who make entire careers out of just working in AutoCAD - but it gives you a lot of power for your trouble. Vectorworks is a less-commonly-used program that I became very familiar with in my years as a stage lighting technician; due to its excellent stage-lighting plugins, it&#39;s the de-facto standard for theater lighting. And where AutoCAD focuses on building a &#34;model&#34; and having you derive drawings from that model, Vectorworks focuses on the drawing itself as &lt;em&gt;the thing to be made&lt;/em&gt;. It might seem like a semantic difference, but the way that those philosophies influence the workflow of the two programs means that Vectorworks is often my choice for creating 2D draftings.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For &lt;strong&gt;3D drafting&lt;/strong&gt;, my go-to software is &lt;a href=&#34;https://www.autodesk.com/products/fusion-360/overview-b&#34;&gt;Fusion360&lt;/a&gt;, also from AutoDesk. Fusion is a timeline-centric, parametric drafting program, which allows you to go &#39;back in time&#39; to an earlier moment of a design, make changes, and see them ripple through to the current version of the design. It&#39;s a very powerful program, though not without its own learning curve. For someone just diving into 3D modeling for the first time, I&#39;d recommend starting with something like &lt;a href=&#34;https://www.tinkercad.com/&#34;&gt;Tinkercad,&lt;/a&gt; a cloud-based modelling program that centers around adding and subtracting primitive objects from each other to build up a more complicated design. I&#39;ve also had friends work in &lt;a href=&#34;https://www.sketchup.com/&#34;&gt;SketchUp&lt;/a&gt;, which tries to blend Fusion&#39;s 2D sketch capabilities with the ease of Tinkercad. Unfortunately, SketchUp seems to have trouble successfully exporting STL files for printing, so I can&#39;t recommend it as a strong starting point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Fusion 360 Screenshot&#34; class=&#34;size-medium wp-image-717 post-img&#34; height=&#34;300&#34; src=&#34;FusionCapture2-265x300.png&#34; width=&#34;265&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Fusion is a very powerful, very worth-learning program.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Once you have your 3D model and you&#39;re ready to print it, you&#39;ll need a &lt;strong&gt;slicer program&lt;/strong&gt; to turn the model into a series of step-by-step instructions that the printer can actually follow. (&#34;&lt;em&gt;Move to such-and-such coordinates in so-many seconds while extruding this-amount of plastic&lt;/em&gt;&#34;. Repeat x10000). I personally use &lt;a href=&#34;https://ultimaker.com/software/ultimaker-cura&#34;&gt;Cura&lt;/a&gt;, now from Ultimaker. It&#39;s straightforward to use, and has all the options and customizability I&#39;ve found a need for. I know lots of folks who have good opinions about the open source &lt;a href=&#34;https://slic3r.org/&#34;&gt;Slic3r project&lt;/a&gt; as well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;Programming and text editing &lt;/strong&gt;may or may not be a part of your electronics hobby, but if they are, having simple straightforward tools is a good way to get more productivity out of your text-based time. Of course for programming Arduinos, the &lt;a href=&#34;https://www.arduino.cc/en/main/software&#34;&gt;Arduino IDE&lt;/a&gt; is a perfectly good place to start. It&#39;s not fully featured in an respect, but it just works, you can write code in it and plonk it on an Arduino, and that&#39;s all most people care about. I use &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt; as my main text editor and sometimes basic dev environment (when writing things in &lt;a href=&#34;https://love2d.org/&#34;&gt;Love2D&lt;/a&gt;, for example). &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For projects that are just too detailed to lay out by hand, I &lt;strong&gt;design circuit boards&lt;/strong&gt; in AutoDesk&#39;s &lt;a href=&#34;https://www.autodesk.com/products/eagle/overview&#34;&gt;Eagle&lt;/a&gt; software, though there are some who would say I&#39;m a heathen for not using the open source &lt;a href=&#34;https://www.kicad-pcb.org/&#34;&gt;KiCad&lt;/a&gt;. To be honest, I don&#39;t have strong feelings about either software either way - Eagle was just the first one I used and I&#39;ve become used to its workflow and design choices, but I know there are die-hards on both sides of this river. Regardless, to live in an age where a maker has multiple, quality options for free PCB design software is amazing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;DMX Circuit Board&#34; class=&#34;size-medium wp-image-383 post-img&#34; height=&#34;285&#34; src=&#34;V03-Board-300x285.png&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;I would never in a million years be able to achieve this level of miniaturization with a hand-fabricated board.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, once you&#39;ve designed a circuit board, you&#39;re going to need to make it, somehow. While they&#39;re not software per-say, the growth of &lt;strong&gt;PCB shopping cart&lt;/strong&gt; &lt;strong&gt;websites&lt;/strong&gt; over the past few years has really opened up what&#39;s possible for the solo electronics workshop. No more sweating with getting tiny wires soldered to tiny chips to break them out to veroboard; you can just spin a PCB with the proper footprint, or indeed the whole circuit. Any of these services will let you upload your circuit board design, and for a very modest fee spin you up 3 or 5 or 500 copies. &lt;a href=&#34;https://oshpark.com/&#34;&gt;OSHPark&lt;/a&gt; really started the whole small-batch-PCB movement, and their service has always been great, reliable, and high quality. I&#39;ve also used &lt;a href=&#34;https://jlcpcb.com/&#34;&gt;JLCPCB&lt;/a&gt; for somewhat larger runs. If you&#39;re interested in looking at many, many options, &lt;a href=&#34;https://pcbshopper.com/&#34;&gt;PCBShopper&lt;/a&gt; is an aggregator that lets you compare prices, lead times, and options across almost two dozen shopping cart-style manufacturers.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Safety&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Just because you may not have a &lt;a href=&#34;https://www.youtube.com/watch?v=UwzwzobO5rs&#34;&gt;giant 5-axis robot in your workshop&lt;/a&gt; doesn&#39;t mean you shouldn&#39;t take safety seriously. Whether your workshop is in your home, an outside shop, or your workplace, a few basic safety precautions could mean the difference between peaceful Thursday and a trip to the ER.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;Smoke and carbon monoxide detectors &lt;/strong&gt;should be present in several places in your home or office already, but having one in the workshop is a good idea, especially if you have any hot-tools (soldering iron, heat gun, 3D printer). They&#39;re so &lt;a href=&#34;https://amzn.to/2RfwNDH&#34;&gt;inexpensive and easy to install&lt;/a&gt;, it&#39;s a no-brainer to pick one up. A &lt;strong&gt;fire extinguisher&lt;em&gt; &lt;/em&gt;&lt;/strong&gt;should also be on your list - and if you ever have the opportunity to get a little training on how to properly use one, it&#39;s well worth it. Make sure to mount your &lt;a href=&#34;https://amzn.to/2La7TkI&#34;&gt;fire extinguisher&lt;/a&gt; where you could actually get to it, if the things that are most likely to start a fire, did.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Fire extinguisher&#34; class=&#34;wp-image-707 size-medium post-img&#34; height=&#34;300&#34; src=&#34;DSC00074-169x300.jpg&#34; width=&#34;169&#34;/&gt;&lt;/p&gt;
I put my fire extinguisher right by the door to my workshop, so I can grab it on the way in, or on the way out.
&lt;p class=&#34;post-p&#34;&gt;While we&#39;re thinking about fire, consider whether your workshop needs a &lt;strong&gt;flammables cabinet&lt;/strong&gt;. If you&#39;re storing more than a few things of paint, spray paint, spray adhesives, solvents, cleaners, etc, it&#39;s worth thinking about what would happen if they were to catch a little on fire. It&#39;s not usually worth buying on online - the shipping is killer- but cabinets pop up on Craigslist, auctions, and industrial surplus all the time. &lt;a href=&#34;https://www.go-dove.com/&#34;&gt;Go Industry Dove Bid&lt;/a&gt; is a good online collector of industrial surplus auctions, but be sure to check out your local city/state surplus resources as well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, &lt;strong&gt;safety glasses&lt;/strong&gt;. Just wear them, even when you think you don&#39;t have to. About 4 years ago, while soldering &#34;just one more joint&#34; on a PCB before going to bed, a piece of hot solder popped up and got me in the lower-left eyelid. A quarter-inch higher and it would have been right in my eye, with who knows what consequences. I&#39;m not always perfect about this myself, but I do keep a pair of safety glasses right on my workbench to remind myself that if I want to take a risk, it&#39;s my own damn fault. Get &lt;a href=&#34;https://amzn.to/2LbC37b&#34;&gt;a pair of glasses that are comfortable&lt;/a&gt; so you&#39;re more likely to wear them. &lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Organization&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Resistor Bins&#34; class=&#34;wp-image-711 size-medium post-img&#34; height=&#34;300&#34; src=&#34;Resistors-1-225x300.jpg&#34; width=&#34;225&#34;/&gt;&lt;/p&gt;
No such thing as too organized.
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve come to realize something over the past 10 years - the most volume I&#39;m willing to rummage through for a tool, part, or piece is about 500 cubic inches, or a around 10 liters. Any more volume than that, especially for small parts, and there&#39;s just too many potential places where a small object can hide. So standardizing on a &lt;strong&gt;storage bin&lt;/strong&gt; that&#39;s slightly smaller than this makes good sense. At home, I use&lt;a href=&#34;https://www.menards.com/main/storage-organization/storage-totes-bins/storage-totes/bella-storage-solution-6-quart-clear-storage-bin/belmn0105011012/p-1444430572277-c-12667.htm?tid=5967592820392133336&amp;amp;ipos=2&#34;&gt; 6-Quart Bella bins&lt;/a&gt; from Menards, while at work I use &lt;a href=&#34;https://amzn.to/2YdeLDu&#34;&gt;6-Quart Sterilite bins&lt;/a&gt;. Once a project or set of components or tools overflows one of these bins, there&#39;s probably enough diversity in goods to split it up into two separate bins anyway - i just recently split the &lt;em&gt;Microcontrollers&lt;/em&gt; bin into &lt;em&gt;Arduinos &lt;/em&gt;and &lt;em&gt;Non-Arduino Microcontrollers&lt;/em&gt;, for example. Now both species are easier to find.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Storage Bins&#34; class=&#34;wp-image-708 size-medium post-img&#34; height=&#34;169&#34; src=&#34;DSC00077-300x169.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
So many pretty bins, all in a row.
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve always loved a good &lt;strong&gt;whiteboard&lt;/strong&gt; (I just snagged &lt;a href=&#34;https://amzn.to/2Y3JoLk&#34;&gt;another 18&#34;x24&#34;&lt;/a&gt; one for my office), but I recently stumbled upon these &lt;a href=&#34;https://amzn.to/2Y4xoJC&#34;&gt;ultra-fine tip whiteboard markers&lt;/a&gt;, which I just absolutely love. They allow you to squeeze so much actual detail and small size into a whiteboard doodling project. Not for presenting to a group, mind, just for working through projects on your own or with a partner. (I also 3D printed a cup for them for my kitchen whiteboard calendar, more on that in a future post I think.)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Wall Pen Cup&#34; class=&#34;aligncenter wp-image-710 size-medium post-img&#34; height=&#34;300&#34; src=&#34;DSC00078-169x300.jpg&#34; width=&#34;169&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m a strong believer in the power of labeling to &lt;a href=&#34;https://www.youtube.com/watch?v=oiSn2JuDQSc&#34;&gt;make things just so,&lt;/a&gt; and a &lt;strong&gt;labelmaker&lt;/strong&gt; is a really easy way to help keep things organized. The &lt;a href=&#34;https://amzn.to/35TwTEZ&#34;&gt;Brother PTD600&lt;/a&gt; has been a nice blend between portability and computer control - you get most of the functionality just using it handheld, or you can hook it up to Brother&#39;s software on your computer to make more complicated layouts, batch prints, etc. The sound department at the theater I used to work at had a &lt;a href=&#34;https://amzn.to/37WFbxN&#34;&gt;Rhino BMP21-Plus&lt;/a&gt;, which was really awesome at making &lt;a href=&#34;https://amzn.to/2qaic17&#34;&gt;self-laminating labels&lt;/a&gt; to label cables - with the amount of work that went into cable arrangement and maintenance in that place, the self-laminating labels were a godsend. The tape&#39;s a little pricey, as is the labeller, so if you&#39;re not doing a lot of patch panels, say, I would stick with the Brother and the TZe line of tapes.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Lighting&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Decent task lighting makes a world of difference - you&#39;ll find you&#39;re suddenly better at soldering, more deft at assembly, swifter to catch errors and notice mistakes. No sense working in the dark if you don&#39;t have to.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve done a number of lighting setups in my home workshops over time. Right now I have three &lt;a href=&#34;https://amzn.to/2P0nUel&#34;&gt;24&#34; fluorescent fixture&lt;/a&gt;s overhead that were remaindered from a theatre production ages ago (in addition to a basic 100W ceiling light). I&#39;ve also got a couple of &lt;a href=&#34;https://amzn.to/2P1At9l&#34;&gt;clip lights&lt;/a&gt; with &lt;a href=&#34;https://amzn.to/2LcrVeK&#34;&gt;100W LED bulbs&lt;/a&gt; closer to my actual workbench surface to price more focused task lighting, and a &lt;a href=&#34;https://amzn.to/33FODSy&#34;&gt;cheap gooseneck light from IKEA&lt;/a&gt; sitting on the work surface for when I need really targeted illumination. While I haven&#39;t re-installed it since I moved into a new home workshop a few months ago, adding under-shelf lights to my &lt;a href=&#34;https://jeff.glass/2019/03/03/home-office-overhaul/&#34;&gt;home shelving setup&lt;/a&gt; made a big difference in being able to see and find components on the shelves, as well as adding some cheery glow to the workstation. My workshop at work has lots of overhead fluorescent light, and I added a &lt;a href=&#34;https://amzn.to/2R9XyZS&#34;&gt;positionable jointed lamp&lt;/a&gt; for some more focused lighting. &lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Your Own Shop&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;re still reading this 6500 words later, you might thinking - &#34;&lt;em&gt;Holy crap, that&#39;s a lot of stuff, I&#39;ll never be able to have my own electronics workbench&#34;&lt;/em&gt;. But keep in mind - this is the setup and tools that work for me, with what I want to do, that I&#39;ve built up over a decade of working professionally and as a hobbyist in this arena. Would you look at a professional auto mechanic rebuilding an engine and say &#34;Wow, I&#39;ll never open my hood again?&#34; It&#39;s all a matter of starting somewhere.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Workbench&#34; class=&#34;wp-image-712 size-medium post-img&#34; height=&#34;225&#34; src=&#34;FirstWorkbench-1-300x225.jpg&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-image-caption&#34;&gt;Two apartments and many years ago, this is what my &#34;workbench&#34; looked like. And it was still a BLAST.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The easiest way to pick a project is to &lt;strong&gt;find a project you want to accomplish and work toward making it happen&lt;/strong&gt;. Maybe it&#39;s monitoring to see whether your garage door is open or closed. Or what the weather&#39;s going to be tomorrow. Maybe your dog needs some entertainment, or you need a new sparkling light over the crib, or the you have an itch to build a radio or a tesla coil or who knows what. Once you find a thing you&#39;re excited about building, that will guide you as to which tools to find first, which will lead you to more things you can do with those tools, which will lead to more tools... and so on. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And most importantly - have fun.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Special Thanks&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;I wouldn&#39;t have been aware of so many of these tools, ideas, and possibilities without a lot of excellent colleagues and friends. Thank you especially to Kenneth, Palmer, Alec, Joe, Mike, Jabin, Lee, Travis, Chris, and all the other excellent technicians who continue to be an inspiration for excellent technical work.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;Also, just in the interest of disclosure: most of the Amazon links above are affiliate links. Purchasing through them provides a small amount of compensation to me at no cost to the buyer&lt;/em&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Closet Door Locker</title>
      <link>https://jeff.glass/post/closet-door-locker/</link>
      <pubDate>Thu, 14 Nov 2019 20:54:10 -0500</pubDate>
      
      <guid>https://jeff.glass/post/closet-door-locker/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Yesterday I install a new closet door in our front entrance hall, and discovered a problem which I then solved with 3D Printing. The door is a standard bi-fold type, with pins in the top and bottom of one side for rotation, a central vertical hinge, and a track along the top to keep the far side in alignment.&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;size-large wp-image-618 alignnone post-img&#34; height=&#34;1024&#34; src=&#34;DSC00038-e1573764297352-576x1024.jpg&#34; width=&#34;576&#34;/&gt;     &lt;img alt=&#34;&#34; class=&#34;size-large wp-image-619 post-img&#34; height=&#34;1024&#34; src=&#34;DSC00039-e1573764382689-576x1024.jpg&#34; width=&#34;576&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;The problem was - with the volume of coats we need to survive a the winter on the ice planet Hoth (Chicago) and the positioning of the hanger rail, the coats push the door out and prevent it from staying fulling closed. Given that this is immediately adjacent to the front door, not an ideal solution at all.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are lots of types of locks/clasps/magnets designed to solve this problem, but the one I chose to emulated is this &lt;a href=&#34;https://www.youtube.com/watch?v=lxiTk6HvP_k&#34;&gt;over-the-door babyproofing product&lt;/a&gt;. It&#39;s essentially a c-channel of plastic that slides over the middle-hinge when the door is closed, to prevent it from swinging open. Genius.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I created my own variant in Fusion360, thinking about how to make the design rigid, printable, and aesthetically pleasing. I added ridges along the sides to increase its lateral strength, and little pull-tabs to make it easier to grip. I trussed-out the top to give it some additional strength and reduce weight. Here&#39;s how it ended up after about an hour of drafting:&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-620 post-img&#34; height=&#34;489&#34; src=&#34;Capture1-1024x696.png&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;Printing took a little over 10 hours, and the final result works great. I selected a blue-green PLA+ for ease of printing and aesthetic considerations:&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-621 post-img&#34; height=&#34;405&#34; src=&#34;DSC00044-1024x576.jpg&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;Thanks 3D printing!&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>ETC Console Output Counts</title>
      <link>https://jeff.glass/post/etc-console-output-counts/</link>
      <pubDate>Wed, 24 Jul 2019 19:26:26 -0500</pubDate>
      
      <guid>https://jeff.glass/post/etc-console-output-counts/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;What follows is a list of output-counts for ETC Eos Family consoles. Because I&#39;m always needing to reference this information, and I want to be lazy when I need to find it. &lt;span style=&#34;font-size: inherit;&#34;&gt;So, without further ado, here&#39;s the current output capacity for different ETC consoles, as of &lt;/span&gt;&lt;strong style=&#34;font-size: inherit;&#34;&gt;July 24, 2019:&lt;/strong&gt;&lt;style type=&#34;text/css&#34;&gt;.tg  {border-collapse:collapse;border-spacing:0;border-color:#ccc;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f0f0f0;} .tg .tg-buh4{background-color:#f9f9f9;text-align:left;vertical-align:top} .tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top} .tg .tg-btxf{background-color:#f9f9f9;border-color:inherit;text-align:left;vertical-align:top} .tg .tg-0lax{text-align:left;vertical-align:top} &lt;/style&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;table class=&#34;wp-block-table tg&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;&lt;b&gt;Console&lt;/b&gt;&lt;/th&gt;&lt;th&gt;&lt;b&gt;Variant&lt;/b&gt;&lt;/th&gt;&lt;th&gt;&lt;b&gt;Base Output Count&lt;/b&gt;&lt;/th&gt;&lt;th&gt;&lt;b&gt;Unlocked Output Count&lt;/b&gt;&lt;/th&gt;&lt;th&gt;&lt;b&gt;Legacy Consoles Upgraded to 2.6 Software&lt;/b&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Eos Ti&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;DisplayPort&lt;/td&gt;&lt;td&gt;4096 &lt;br/&gt;(8 * 512)&lt;/td&gt;&lt;td&gt;24,576 &lt;br/&gt;(48 * 512)&lt;/td&gt;&lt;td&gt;Eos Ti DisplayPort at 5K or higher now @ 24,576&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Eos Ti&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;DVI&lt;/td&gt;&lt;td&gt;4096 &lt;br/&gt;(8 * 512)&lt;/td&gt;&lt;td&gt;16,384 &lt;br/&gt;(32 * 512)&lt;/td&gt;&lt;td&gt;Eos Ti DVI at 5K or higher now @ 12,228*&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Eos RPU3&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;DisplayPort&lt;/td&gt;&lt;td&gt;4096 &lt;br/&gt;(8 * 512)&lt;/td&gt;&lt;td&gt; 24,576 &lt;br/&gt;(48 * 512)&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Eos RPU3&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;DVI&lt;/td&gt;&lt;td&gt;4096 &lt;br/&gt;(8 * 512)&lt;/td&gt;&lt;td&gt; 12,228 &lt;br/&gt;(24 * 512)&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Eos Classic&lt;/strong&gt;&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; 4096 &lt;br/&gt;(8 * 512) &lt;/td&gt;&lt;td&gt; 8192 &lt;br/&gt;(8 * 512)&lt;/td&gt;&lt;td&gt;Eos Classic at 5K or higher now @ 8192&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Eos Classic RPU&lt;/strong&gt;&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; 4096 &lt;br/&gt;(8 * 512) &lt;/td&gt;&lt;td&gt;  8192&lt;br/&gt; (8 * 512) &lt;/td&gt;&lt;td&gt;Eos Classic RPU at 5K or higher now @ 8192&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Gio&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;DisplayPort&lt;/td&gt;&lt;td&gt;4096 &lt;br/&gt;(8 * 512)&lt;/td&gt;&lt;td&gt; 24,576 &lt;br/&gt;(48 * 512)&lt;/td&gt;&lt;td&gt;Gio Displayport at 5K or higher now @ 24,576&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Gio&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;DVI&lt;/td&gt;&lt;td&gt;4096 &lt;br/&gt;(8 * 512)&lt;/td&gt;&lt;td&gt;12,228 &lt;br/&gt;(24 * 512)&lt;/td&gt;&lt;td&gt;Gio DVI at 5K or higher now @ 12,228&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Gio @5&lt;/strong&gt;&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;4096 &lt;br/&gt;(8 * 512)&lt;/td&gt;&lt;td&gt; 24,576 &lt;br/&gt;(48 * 512)&lt;/td&gt;&lt;td&gt;@5 at 5K or higher now @ 24,576&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ion XE&lt;/strong&gt;&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;2048 &lt;br/&gt;(2* 512)&lt;/td&gt;&lt;td&gt; 12,228 &lt;br/&gt;(24 * 512)&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ion&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;Windows 7&lt;/td&gt;&lt;td&gt;1024 &lt;br/&gt;(2 * 512)&lt;/td&gt;&lt;td&gt;6144&lt;br/&gt; (12 * 512)&lt;/td&gt;&lt;td&gt;Ion Win 7 at 1536 or higher now @ 6144&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ion&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;XP&lt;/td&gt;&lt;td&gt;1024 &lt;br/&gt;(2 * 512)&lt;/td&gt;&lt;td&gt;3072&lt;br/&gt; (6 * 512)&lt;/td&gt;&lt;td&gt; Ion XP at 1536 or higher now @ 3072&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ion RPU&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;Windows 7&lt;/td&gt;&lt;td&gt;2048 &lt;br/&gt;(2* 512)&lt;/td&gt;&lt;td&gt;6144&lt;br/&gt; (12 * 512)&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Ion RPU&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;XP&lt;/td&gt;&lt;td&gt;2048 &lt;br/&gt;(2* 512)&lt;/td&gt;&lt;td&gt;3072&lt;br/&gt; (6 * 512)&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;ETCnomad&lt;/strong&gt;&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;512&lt;/td&gt;&lt;td&gt; 6144 &lt;br/&gt;(12 * 512)&lt;/td&gt;&lt;td&gt;Nomad 256 now @ 512; Nomad 1024 or higher now @ 6144&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;ETCnomad Puck&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;4 USB&lt;/td&gt;&lt;td&gt;512&lt;/td&gt;&lt;td&gt; 6144 &lt;br/&gt;(12 * 512)&lt;/td&gt;&lt;td&gt;Nomad Puck 256 (3 USB) now @ 512; Nomad Puck 1024 (4 USB) or higher now @ 6144&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;ETCnomad Puck&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;3 USB&lt;/td&gt;&lt;td&gt;512&lt;/td&gt;&lt;td&gt;2048&lt;br/&gt; (2* 512)&lt;/td&gt;&lt;td&gt;Nomad Puck 256 (4 USB) now @ 512; Nomad Puck 1024 (4 USB) or higher now @ 2048&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Element 2&lt;/strong&gt;&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;1024 (2 * 512)&lt;/td&gt;&lt;td&gt;6144&lt;br/&gt; (12 * 512)&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Element&lt;/strong&gt;&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;1024 (2 * 512)&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;ETC Nomad &#34;256&lt;/strong&gt;&#34;&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;1024 (2 * 512)&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;*&lt;em&gt;The listed Eos Ti DVI count for previously-smaller-output-count consoles doesn&#39;t match the new Unlocked output count. This may be a typo by ETC.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;This info comes from: the &lt;/em&gt;&lt;a href=&#34;https://www.etcconnect.com/WorkArea/DownloadAsset.aspx?id=10737491848&#34;&gt;&lt;em&gt;EOS Software 2.6 Release Note&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, the &lt;a href=&#34;https://support.etcconnect.com/ETC/Consoles/Eos_Family/Software_and_Programming/Upgrading_Eos_Family_Output_Counts&#34;&gt;Upgrading Eos Family Output Counts page&lt;/a&gt;, the &lt;/em&gt;&lt;a href=&#34;https://www.etcconnect.com/Products/Consoles/Eos-Family/Element/Tech-Specs.aspx&#34;&gt;&lt;em&gt;Element Tech Specs page&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, the &lt;/em&gt;&lt;a href=&#34;https://www.etcconnect.com/Products/Consoles/Eos-Family/Element-2/Features.aspx&#34;&gt;&lt;em&gt;Element 2 Tech Specs page&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, the &lt;/em&gt;&lt;a href=&#34;https://www.etcconnect.com/Products/Consoles/Eos-Family/Ion-Xe/Tech-Specs.aspx&#34;&gt;&lt;em&gt;Ion Xe Tech Specs page&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. As always, information from ETC will always be more accurate than the blog of some guy in the Midwest - this is meant to be a helpful reference, not a definitive source.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;The legacy consoles section indicates the new output counts for consoles that were available before Eos software version 2.6, when consoles were available for purchase with much more granular output counts. The 2.6 software upgrade standardized all consoles to either a Base model or Unlocked, with all consoles moving to the next higher output count available (e.g. no one lost output capability with this upgrade).&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Some background, and an explanation of why output counts aren&#39;t round numbers: ETC&#39;s line of Eos-family lighting control consoles can be purchased with different numbers of &lt;span style=&#34;text-decoration: underline;&#34;&gt;parameter&lt;/span&gt; outputs. In an older way of thinking of things, one might have had a limited number of universes. As I&#39;ve featured in my &lt;a href=&#34;https://jeff.glass/2019/02/23/lighting-control-protocols-and-standards/&#34;&gt;post about lighting control protocols&lt;/a&gt;, each universe contains 512 &#34;slots&#34; of information, and individual devices (dimmers, intelligent lights, other controllers) can be told which slots to listen to by giving each device an &#34;address&#34; (or range of addresses).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The key difference is that now, with lighting data being largely distributed over a network and only turned back into &#39;hard&#39; serial DMX near its endpoint, limiting a controller&#39;s output to only 2 or 6 or 24 physical universes would be a little unnecessarily constraining. Instead, the output count is how many total DMX slots one can control, spread across as many universes as the user desires. So, a basic Nomad, for example, could control all 512 slots in a single DMX universe, or a single address in each of 512 universes, or anything in between. Only addresses which are patched count toward the total output count.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For more info on addresses and parameters, see ETC&#39;s article: &lt;a href=&#34;https://support.etcconnect.com/ETC/Consoles/Eos_Family/Software_and_Programming/Addresses_and_Parameters_in_Eos_Family_Consoles&#34;&gt;Addresses and Parameters in Eos Family Consoles&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Arduino DMX &#39;Light Board&#39;, Mini Moving Light Hanging Hardware</title>
      <link>https://jeff.glass/post/arduino-dmx-light-board-mini-moving-light-hanging-hardware/</link>
      <pubDate>Wed, 19 Jun 2019 03:15:08 -0500</pubDate>
      
      <guid>https://jeff.glass/post/arduino-dmx-light-board-mini-moving-light-hanging-hardware/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Over the past week, I got to the point with the mini moving light that I needed some way to consistently pump DMX into my prototypes to test their functionality. Thankfully, the first set of PCBs I built for this project function as both DMX receivers and transmitters, so whipping together a basic DMX controller only took about 20 minutes.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So here it is: my tiny DMX controlled &#34;light board&#34;:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;wp-block-image&#34;&gt;&lt;figure class=&#34;aligncenter is-resized&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-469 post-img&#34; height=&#34;281&#34; src=&#34;IMG_7845-e1560912415251-1024x768.jpg&#34; width=&#34;375&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Not much to look at, really. It&#39;s just the DMX Control Shield I build earlier, with its Arduino Pro Mini, and 3 potentiometers from the junk box. The ends of each pot are tied to +5V and ground, and the wipers are tied to three analog pins. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Originally, I had the Arduino just reading the straight value from the analog pins, mapping those 10-bit (0 to 1023) values from the ADC to 8 bit (0 to 255) values suitable for DMX, and shoving those out as DMX addresses 1,2, and 3 as fast as possible. But I found that some inconsistency in the analog readings caused the servos and LED to twitch and flicker noticeably. So I modified the code to read the values from the pots every 20 milliseconds and average the last 10 readings when outputting. The output values calmed right down.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The result is a reasonably stable controller, and plenty to test the mini moving-light with:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;{{&amp;lt; youtube &#34;iKoxd065b-U&#34; &amp;gt;}}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;I also made some specific improvements to the physical design of the light, including:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;&lt;li&gt;Lengthening the body to accommodate the Carclo optic and heatsink&lt;/li&gt;&lt;li&gt;Adding vents to the body for heat-removal&lt;/li&gt;&lt;li&gt;Including some new wire-routing holes in the base and widening others for improved cable routing.&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;I also designed and printed some (really adorable) 1&#34; triangle truss and some hanging brackets to mount this thing on. Here&#39;s the moment from my Sunday night livestream where I hung the light on its truss for the first time:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;{{&amp;lt; youtube &#34;sYT-xtOL4rU&#34; &amp;gt;}}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;Just today, I got in another couple orders from DigiKey, and my latest batch of PCBs from JLCPCB should arrive tomorrow. The notable improvements to the PCB and parts include:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;&lt;li&gt;Separating the Pan and Tilt servo pads (doh!)&lt;/li&gt;&lt;li&gt;Switching to a stout-er 5V regulator&lt;ul class=&#34;post-ul&#34;&gt;&lt;li&gt;I also ordered a few &lt;a href=&#34;https://www.digikey.com/product-detail/en/cui-inc/VX7805-1000/102-4253-ND/7350292&#34;&gt;VX7805-1000&#39;s&lt;/a&gt; to play with. They&#39;re a self-contained, fixed-output buck converter that&#39;s meant to be a drop-in replacement for a 7805 linear regulator. Neat part if it works, and not horribly expensive.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Switching to an inductor spec&#39;d for 1A forward current instead of 500mA.&lt;/li&gt;&lt;li&gt;Switching to a schottky diode rated for 30V instead of 20V.&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Assuming this assembly goes well, I hope to build two or three of this version (which I&#39;m calling version 0.4) and set them up for a little DMX-controlled dance party. Here&#39;s hoping!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>DMX Mini Moving Light First Assembly - Live Stream</title>
      <link>https://jeff.glass/post/dmx-mini-moving-light-first-assembly-live-stream/</link>
      <pubDate>Wed, 29 May 2019 01:47:48 -0500</pubDate>
      
      <guid>https://jeff.glass/post/dmx-mini-moving-light-first-assembly-live-stream/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;With the shell 3D-printed and the PCB assembled, I went ahead and put together my first &#34;completed&#34; mini-moving light, live on camera:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/lroMq1nJ0Ds&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;It went fairly well - everything mostly worked and nothing caught fire!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are a few mechanical and electrical takeaways for the next version, including:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;&lt;li&gt;Mechanical:&lt;ul class=&#34;post-ul&#34;&gt;&lt;li&gt;Ennlarge the hole for LED wires in the lower case&lt;/li&gt;&lt;li&gt;Make a brief instruction manual for myself of what needs to be assembled/installed/solder in what order&lt;/li&gt;&lt;li&gt;Hole for program/enable switch access&lt;/li&gt;&lt;li&gt;Fix tolerances on the tilt-servo/yoke interface&lt;/li&gt;&lt;li&gt;Lengthen the body to accommodate a heatsink for the LED star&lt;/li&gt;&lt;li&gt;Figure out mounting/hanging hardware&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Electrical:&lt;ul class=&#34;post-ul&#34;&gt;&lt;li&gt;Increase the spacing between Pan and Tilt Servo pads&lt;/li&gt;&lt;li&gt;Order higher-current 5V regulator (1.5A 7805)&lt;/li&gt;&lt;li&gt;Select a new inductor for up to 1A of current&lt;/li&gt;&lt;li&gt;Select a new schottky diode for up to 24V&lt;/li&gt;&lt;li&gt;Combine the transmit/receive control lines onto a single pin of the Arduino.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;But all in all, for a first assembly, even tripping over a couple of silly mistakes on my part, things went pretty well. Onward to V0.4.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>DMX Mini Moving Light Shield V0.3</title>
      <link>https://jeff.glass/post/dmx-mini-moving-light-shield-v0.3/</link>
      <pubDate>Fri, 24 May 2019 03:23:46 -0500</pubDate>
      
      <guid>https://jeff.glass/post/dmx-mini-moving-light-shield-v0.3/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;As I hinted to in my original post about the &lt;a href=&#34;https://jeff.glass/2019/05/20/arduino-pro-mini-dmx-shield/&#34;&gt;Arduino Pro Mini DMX Shield&lt;/a&gt;, and then talked some about in my &lt;a href=&#34;https://jeff.glass/2019/05/22/dmx-mini-mover-shield-pcb-assembly-stream/&#34;&gt;PCB Assembly Livestream&lt;/a&gt;, the latest version of my DMX shield is geared toward driving in miniature moving light. This means that, in addition to being able to receive DMX, the Arduino driving the device will need to be able to drive a couple of servos and dim a relatively high power LED. There are many way of skinning both of those cats, so let&#39;s look at the solutions that are present in V0.3 of the DMX shield.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;wp-block-image&#34;&gt;&lt;figure class=&#34;aligncenter is-resized&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-397 post-img&#34; height=&#34;310&#34; src=&#34;IMG_7277-1024x768.jpg&#34; width=&#34;413&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Servo Control
&lt;p class=&#34;post-p&#34;&gt;Of LED dimming and Servo control, the latter is the easier problem to solve. While there are &lt;a href=&#34;https://www.digikey.com/products/en/integrated-circuits-ics/pmic-motor-drivers-controllers/744?k=&amp;amp;pkeyword=&amp;amp;sv=0&amp;amp;pv1664=28&amp;amp;pv1664=10&amp;amp;pv1664=2&amp;amp;sf=0&amp;amp;FV=ffe002e8&amp;amp;quantity=&amp;amp;ColumnSort=0&amp;amp;page=1&amp;amp;stock=1&amp;amp;pageSize=25&#34;&gt;dedicated servo-driving IC&#39;s&lt;/a&gt;, and &lt;a href=&#34;https://www.digikey.com/products/en/motors-solenoids-driver-boards-modules/motor-driver-boards-modules/181?k=servo&amp;amp;k=&amp;amp;pkeyword=servo&amp;amp;sv=0&amp;amp;pv1987=9&amp;amp;sf=0&amp;amp;FV=ffe000b5&amp;amp;quantity=&amp;amp;ColumnSort=0&amp;amp;page=1&amp;amp;pageSize=25&#34;&gt;modules&lt;/a&gt;, almost any microcontroller, including the ATMEGA238/Arduino can control a hobby servo in a straightforward way using minimal additional hardware.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;A typical hobby servo needs only three wires running to it - +5 for power, Ground, and a control line. The control line carries the position data for the servo in the form of pulse width modulation. The servo expects to see a pulse every 20 milliseconds. A pulse of 1.5 ms corresponds to the center (90°) position of the servo. A 1 ms pulse rotates all the way in one direction (0°) and a 2 ms pulse rotates fully the other direction (180°). There is a standard&lt;a href=&#34;https://www.arduino.cc/en/Reference/Servo&#34;&gt; Arduino Servo Library&lt;/a&gt; that translates degrees inputted into the appropriate duration Servo pulses.&lt;/p&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-409 post-img&#34; src=&#34;Sinais_controle_servomotor.jpg&#34;/&gt;&lt;/figure&gt;&lt;p class=&#34;post-img-caption&#34;&gt;Image Credit: Wikimedia Member Hforesti, CC-SA-4.0&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The only additional hardware present on the V0.3 board for Servo control is, therefore, a bulkier &lt;a href=&#34;https://www.digikey.com/product-detail/en/stmicroelectronics/L7805CV/497-1443-5-ND/585964&#34;&gt;5V regulator&lt;/a&gt;. The 5V regulator on an Arduino Pro Mini isn&#39;t particularly stout to begin with, and I&#39;ve had issues on previous projects with &#34;off brand&#34; Pro Minis having even less 5V oomph than that. So there&#39;s a pair of DC input pads and a TO-220 packaged 7805 to provide a healthy amount of current for the servos.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;LED Dimming
&lt;p class=&#34;post-p&#34;&gt;The LED dimming half of this project has a wider solution space than servo control. The typical solution is MOSFET dimming. A FET is switched on and off rapidly, with a variable duty cycle to control brightness. This is the solution that commercial &lt;a href=&#34;https://www.amazon.com/Channel-Controller-Smoother-Indicator-Function/dp/B00Q1N1NVK/ref=sr_1_1_sspa?keywords=led+decoder&amp;amp;qid=1558576077&amp;amp;s=gateway&amp;amp;sr=8-1-spons&amp;amp;psc=1&#34;&gt;DMX LED decoders&lt;/a&gt; use, with a bank of 3A-5A fets, one per driven channel. It&#39;s simple and inexpensive.&lt;/p&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-410 post-img&#34; src=&#34;dmxled.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;The problem is heat. MOSFETS with super-low on-DC resistances are expensive, and those with higher DC resistances create more heat. There&#39;s always a balance being struck between cost and current carrying capacity. Which is why most commercial DMX led dimmers sit in &lt;a href=&#34;https://www.amazon.com/Channel-Controller-Smoother-Indicator-Function/dp/B01CCBG1SO/ref=sr_1_7?keywords=dmx+driver&amp;amp;qid=1558576476&amp;amp;s=gateway&amp;amp;sr=8-7&#34;&gt;a sweet spot between 3A and 5A&lt;/a&gt;. And all of them come in metal cases, sometimes mounted to large heatsinks, to help with heat dissipation. Less than ideal for what is ultimately meant to be a 3D-printed moving light made of thermoplastic.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The other problem is overcurrent regulation. For typical, inexpensive 3A per channel DMX LED driver, there&#39;s nothing to protect the FETs if you load up a channel with, say, 5A of load, there&#39;s nothing in the drivers to prevent the FETs heating up to their failure point. Or worse. See, for example, this example from a local theater:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-2&#34;&gt;
&lt;img alt=&#34;&#34; class=&#34;w-auto wp-image-408 post-img&#34; data-id=&#34;408&#34; data-link=&#34;https://jeff.glass/?attachment_id=408#main&#34; src=&#34;IMG_5124-1024x768.jpeg&#34;/&gt;
&lt;img alt=&#34;&#34; class=&#34;w-auto wp-image-407 post-img&#34; data-id=&#34;407&#34; data-link=&#34;https://jeff.glass/?attachment_id=407#main&#34; src=&#34;IMG_7222-e1558576797290-1024x768.jpg&#34;/&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;After some investigation, it turned out that there was a wiring error causing a dead-short across one of the channels. Which subsequently burst into flames. No kidding. The Stage Manager reported seeing a cloud of smoke roll out of the vom, which it turned out was discharge from the fire extinguisher the crew was using. Yikes!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With a controlled environment and a defined load, an overcurrent load is slightly less of a concern, but it seemed like there must be a more elegant solution to both the heat and overcurrent issues.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The solution I&#39;m currently trying is the the &lt;a href=&#34;https://www.diodes.com/assets/Datasheets/AL8860.pdf&#34;&gt;AL8860 Buck LED Driver&lt;/a&gt;. It is essentially a DC-DC step-down converter which derives the average current through its load from a SET resistor between a couple of its pins. It has an input voltage from 4.5V to 40V, and in TSOT-25 form factor a maximum current of 1A. A TTL PWM signal applied to its CTRL pin brings the average current down from the maximum SET current to between 0 and 100% of maximum, depending on duty cycle.&lt;/p&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-411 post-img&#34; src=&#34;AL8860_circuit.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;While the IC itself ultimately uses an NDMOS FET to do its switching with a relatively high on-state resistance (200 mOhm), its incorporation of current management and a step-down converter directly into the IC makes it an attractive option. And for the form factors I&#39;m looking at, I&#39;m not likely to be pushing more than 1A through an LED star anyway.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The AL8860 requires a few external components as a buck converter would - an inductor and a schottky diode - as well as a bypass cap and the SET resistor(s). These altogether take up about as much PCB space as a decently sized FET switch would, let a long the voltage conversation IC&#39;s that would allow this to run on a variable voltage.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;wp-block-image&#34;&gt;&lt;figure class=&#34;aligncenter&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-412 post-img&#34; src=&#34;PCB-layout-focus-dimming.png&#34;/&gt;&lt;/figure&gt;&lt;p class=&#34;post-img-caption&#34;&gt;The portion of the PCB directly responsibly for 1A LED dimming. Approximately 8mm x 8mm. The two large thru holes directly below this are points to solder leads from the LED star directly.&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Testing&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I made the bold choice of testing this IC and hardware on a livestream recently. But not before an unscucessful attempt test attempt.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In an attempt to validate this IC idea before committing to it, I purchased a handful of AL8860s, schottky diodes, 0.1 Ohm resistors, and inductors, and tried to piece together this idea on a piece of copper-clad. That did not, in short, go well. Without proper pads, I couldn&#39;t get the IC to stay in place well enough to solder magnet-wire to it. Even after I super-glued it down, the heat from my soldering iron weakened the super glue and caused it to come unstuck. And release superglue fumes. Fun!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So I pulled the trigger on ordering a batch of the V0.3 PCB&#39;s, this time from JLCPCB. But in my rush, I didn&#39;t run a final Design Rule Check, and the pads for my Pan and Tilt servos overlap. Ah well, this was mostly to validate the LED dimming circuit.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And validate it did! Check out this gif from my testing session:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;wp-block-image&#34;&gt;&lt;figure class=&#34;aligncenter&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-415 post-img&#34; src=&#34;DimmingTestGif.gif&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now that&#39;s some light! The arduino was just running a simple ramp-up/ramp-down for validation.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The LEDs are from LEDSupply, a vendor on the east coast that I haven&#39;t used before, but stumbled upon while looking for LED options. They happen to be having a closeout sale on some &lt;a href=&#34;https://www.ledsupply.com/closeout/luxeon-r-triple-3-up-neutral-white-led-star&#34;&gt;Luxeon R 3-LED stars&lt;/a&gt;, which seemed like a good option for something I might smoke or blow up. The LEDs themselves are &lt;a href=&#34;https://www.lumileds.com/uploads/355/DS101-pdf&#34;&gt;Luxeon LXA7-PW40&lt;/a&gt;s. And with the appropriate &lt;a href=&#34;https://www.ledsupply.com/triple-carclo-led-optics&#34;&gt;Carclo optic&lt;/a&gt;, the beam width is fairly narrow. The heatsink is just something from the junk bin.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;At 1000mA forward current (which LEDSupply recommends as the maximum allowed current), they emit around 975 lumens total, around &lt;a href=&#34;https://www.1000bulbs.com/search?breadcrumbs%5B0%5D=light-bulbs&amp;amp;breadcrumbs%5B1%5D=halogen-light-bulbs&amp;amp;breadcrumbs%5B2%5D=halogen-par-lamps&amp;amp;facet.multiselect=true&amp;amp;page=1&amp;amp;q=%2A&amp;amp;rows=15&amp;amp;son=0&amp;amp;sort=price+asc&amp;amp;start=0&amp;amp;filter=(category:%225659%22)&amp;amp;filter=(a_bulb_shape_t_fq:%22PAR16%22)&#34;&gt;what a 75W PAR16 lamp emits.&lt;/a&gt; Even testing at 500mA as I was, it&#39;s a punchy little package!&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Next Steps
&lt;p class=&#34;post-p&#34;&gt;There&#39;s some CAD time in my future. I&#39;ll need to whip up a case to hold the PCB and accommodate a pan servo. I think the arm and body components I will be able to mostly re-use from my previous design, possibly with a little extra room in the head for a proper heatsink.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;wp-block-image&#34;&gt;&lt;figure class=&#34;aligncenter is-resized&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-418 post-img&#34; height=&#34;376&#34; src=&#34;MovingLightTinySnip.png&#34; width=&#34;357&#34;/&gt;&lt;/figure&gt;&lt;p class=&#34;post-img-caption&#34;&gt;The previous tiny moving-light design&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;At some point, I&#39;ll have to re-order PCB&#39;s with the errors corrected, especially the overlapping servo-control pads. I may also want to rethink the mounting hole locations, and possibly bring the DC and DMX inputs out onto their own little tabs to solder connectors onto. But first, I think it will be satisfying to bring this version of the LED to life.&lt;/p&gt;
&lt;/h4&gt;&lt;/h4&gt;&lt;/h4&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>DMX Mini Mover Shield PCB Assembly Stream</title>
      <link>https://jeff.glass/post/dmx-mini-mover-shield-pcb-assembly-stream/</link>
      <pubDate>Wed, 22 May 2019 14:44:40 -0500</pubDate>
      
      <guid>https://jeff.glass/post/dmx-mini-mover-shield-pcb-assembly-stream/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Last night, as I started to assemble V0.3 of my &lt;a href=&#34;https://jeff.glass/2019/05/20/arduino-pro-mini-dmx-shield/&#34;&gt;DMX Mini-Mover Shield&lt;/a&gt;, I thought it might be fun to switch on my webcam and stream the assembly live to the World Wide Web. What follows is about 80 minutes of unstructured benchwork, chatting about DMX, sACN, and circuitry, and a first test of the new LED dimming circuit. Will it light up, or will it go boom? Watch the video to find out:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Zn5qGsw7OlI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Arduino Pro Mini DMX Shield</title>
      <link>https://jeff.glass/post/arduino-pro-mini-dmx-shield/</link>
      <pubDate>Mon, 20 May 2019 17:54:43 -0500</pubDate>
      
      <guid>https://jeff.glass/post/arduino-pro-mini-dmx-shield/</guid>
      <description>&lt;h4 class=&#34;post-h4&#34;&gt;Introduction&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;In my dayjob as the lighting supervisor of a midsize regional theater, we get to play with all kinds of fancy (and expensive) lighting equipment - moving lights, high-power color changing LED units, ultra-compact wireless dimmers, and so on. But it&#39;s also fun to build inexpensive, maker-size versions of of this equipment, and it can be done on a shoestring budget.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;About a year ago, I built a couple versions of tiny moving lights - one directly from &lt;a href=&#34;https://www.thingiverse.com/thing:1912706&#34;&gt;a design from Thingiverse&lt;/a&gt;, the other of my own making. The end result was super cute!&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/BTafFpI3Vgc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;The thing with this tiny light compared to real moving lights was... I cheated a bit. The light itself only contains the servos and LED chip itself, while the controller, LED driver and ballast were all external. The full setup took up almost 3 times the volume of the individual light:&lt;/p&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-391 post-img&#34; src=&#34;IMG_7264spun-1024x768.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;Not only did I cheat on size, I cheated on control a bit too. The unit has a number of &#39;test&#39; modes that run simple movement and color patterns, but there was no means of controlling the light externally. While there are It was basically a fancy keychain toy. And there are &lt;a href=&#34;https://www.amazon.com/CQRobot-network-Management-Extended-Functions/dp/B01DUHZAT0&#34;&gt;DMX Shields&lt;/a&gt; in the Arduino Uno form factor, they themselves would have outsized the lights by another 200%. It was all getting too bulky to be reasonable.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But after many months away from this project, I&#39;ve been devoting some time to scaling down both the dimming and DMX control sides of the circuitry. The result is a shield for an &lt;a href=&#34;https://store.arduino.cc/usa/arduino-pro-mini&#34;&gt;Arduino Pro Mini&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;DMX&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As described in my previous &lt;a href=&#34;https://jeff.glass/2019/02/23/lighting-control-protocols-and-standards/&#34;&gt;write-up of contemporary lighting control protocols&lt;/a&gt;, the core standard for modern stage and event lighting is DMX, or properly, ANSI E1.11 DMX 512-A Digital Multiplex. In short, DMX is a serial protocol and physical spec that caries up to 512 one-byte values over each individual cable, usually with 5-pin DMX connectors. One set of 512 values is termed a &#34;universe,&#34; and to carry additional values, additional cables carrying different universes of information may be added.&lt;/p&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-387 post-img&#34; src=&#34;dmx512-1024x252.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;More formally, DMX is a 250 kbps serial protocol transmitted over a 2-wire bus following &lt;a href=&#34;https://en.wikipedia.org/wiki/RS-485&#34;&gt;RS-485&lt;/a&gt; standards. The ESTA standard standards also dictate standardized connectors (XLR5 for temporary installations, RJ45 for permanent infrastructure), network topologies, impedances, terminations, and so on. &lt;a href=&#34;https://tsp.esta.org/tsp/documents/published_docs.php&#34;&gt;The standard is pretty readable&lt;/a&gt;, if you enjoy that sort of thing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;DMX was developed in the late 80&#39;s/early 90&#39;s as a replacement for systems in which lighting equipment was controlled via analog control voltages, meaning each parameter (each individual dimmer, say) required one wire. A rack of 96 dimmers would have 100+ pin wiring harness attached to it, each with an analog voltage specifying level. With the introduction and adoption of DMX, all that was replaced with a single 3-conductor cable. All modern stage lighting controllers speak DMX, although most rely on transporting universes of DMX over Ethernet and using &#39;DMX Nodes&#39; to turn that digital data back into &#39;hard&#39; DMX close to the fixtures being controlled.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Circuit Components&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There is really only on piece of hardware required to add to an Arduino-compatible design to allow it to send/receive DMX: an RS485 transceiver chip. There are many of these on the market, the common ones being the &lt;a href=&#34;https://www.maximintegrated.com/en/products/interface/transceivers/MAX485.html&#34;&gt;MAX485 &lt;/a&gt;and the &lt;a href=&#34;http://www.ti.com/product/SN75176B&#34;&gt;SN75176&lt;/a&gt;. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;wp-block-image&#34;&gt;&lt;figure class=&#34;aligncenter is-resized&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-373 post-img&#34; height=&#34;263&#34; src=&#34;max485-pins.png&#34; width=&#34;336&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;These take a single-ended input and turn it into a balanced output or, conversely, receive a differential RS485-compatible input and convert it to a single ended signal to a microcontroller. There are two control pins which determine whether the chip is a receiver or a driver. The control circuitry is essentially the same at both the transmitting and receiving end:&lt;/p&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-374 post-img&#34; src=&#34;MAX485-1024x463.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;A more sophisticated/robust approach would also incorporate an optoisolator to prevent the processor from being damaged by faults on the signal side. There are some good guides on the interwebs on &lt;a href=&#34;https://electronics.stackexchange.com/questions/100487/dmx-on-arduino-with-rs485&#34;&gt;setting up optoisolation with DMX for an Arduino&lt;/a&gt; (Mathertel.de has a good &lt;a href=&#34;http://www.mathertel.de/Arduino/DMXShield.aspx&#34;&gt;write up of their isolated DMX shield&lt;/a&gt;), but for the sake of quick progress I&#39;m making this a future goal.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Circuit Layout and PCB Manufacture&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The circuit is ultimately very simple - a couple headers, some resistors, a MAX485 IC, and some pads to connect the DMX connectors to. And a switch - the DMX library I&#39;m using abuses the Arduino&#39;s built-in Serial library for some of its functionality, which means it has to use pins D0 and D1. Which means you can&#39;t reprogram the Arduino with DMX coming in. The DPDT switch just removes the connection between the DMX connectors and pins D0 and D1 of the Arduino to allow for programming. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Mostly for my own reference, the connections between a standard XLR3 or XLR5 connector and the Max485 pin are:&lt;/p&gt;
&lt;table class=&#34;m-auto text-center table-fixed&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;w-1/3&#34;&gt;Net Name&lt;/th&gt;
&lt;th class=&#34;w-1/3&#34;&gt;XLR Connector Pin&lt;/th&gt;
&lt;th class=&#34;w-1/3&#34;&gt;Max485 Pin&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;&#34;&gt;GND&lt;/td&gt;
&lt;td class=&#34;&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;&#34;&gt;Data - &lt;/td&gt;
&lt;td class=&#34;&#34;&gt;2&lt;/td&gt;
&lt;td class=&#34;&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;&#34;&gt;Data +&lt;/td&gt;
&lt;td class=&#34;&#34;&gt;3&lt;/td&gt;
&lt;td class=&#34;&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s what draft one of version 0.1 looked like when it came back from &lt;a href=&#34;https://oshpark.com/&#34;&gt;OSHPark&lt;/a&gt; and following assembly&lt;/p&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-379 post-img&#34; src=&#34;FullSizeRender-1024x768.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;All the passives are 0603 and the max485 is an SOIC, both of which are pretty easy to solder by hand. The SMD switches are adorable! They&#39;re &lt;a href=&#34;https://www.digikey.com/product-detail/en/c-k/JS202011SCQN/401-2002-1-ND/1640098&#34;&gt;these little guys from C&amp;amp;K&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The major flaw with version 0.1 is: one you&#39;ve attached headers, where do you attach anything else?? So version 0.2 added an additional row of thru-hole pads, cleaned up some labeling, and added some mounting holes for M2 screws:&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-380 post-img&#34; data-id=&#34;380&#34; data-link=&#34;https://jeff.glass/?attachment_id=380#main&#34; src=&#34;V02-Board.png&#34;/&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-381 post-img&#34; data-id=&#34;381&#34; data-link=&#34;https://jeff.glass/?attachment_id=381#main&#34; src=&#34;V02-Schematic-1024x510.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;And once its all assembled, it looks something like this:&lt;/p&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-393 post-img&#34; src=&#34;IMG_7266-spun2-1024x768.png&#34;/&gt;&lt;/figure&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Programming&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve been making use of the &lt;a href=&#34;https://sourceforge.net/p/dmxlibraryforar/wiki/Home/&#34;&gt;Conceptinetics DMX library&lt;/a&gt;, which I&#39;ve found to be both functional and stable. I haven&#39;t yet experimented with the RDM capabilities of that library.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The library is very easy to use, and its usage is described well on the &lt;a href=&#34;https://sourceforge.net/p/dmxlibraryforar/wiki/DMX%20Slave/&#34;&gt;Conceptinetics Documentation page&lt;/a&gt;. Essentially, one defines a DMX_Slave object, which has enable(), setStartAddress(), and getChannelValue() methods. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For example, once the object is set up and addressed, a loop() with the single command &lt;strong&gt;analogWrite(LED_PIN, getChannelValue(1));&lt;/strong&gt; will dim an LED attached to pin 9 dim in response to incoming DMX. Easy as pi.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Usage&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;So, what can one do with an Arduino Pro Mini that can receive DMX? Well...&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;You can make a DMX level monitor, a DMX controlled LED source. And really, anything else you can think of to do with an Arduino - drive servos, WS2812s, solenoids, relays...&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The shield can also transmit DMX, though I haven&#39;t thoroughly tested this yet. But it&#39;s possible to make a miniature DMX controller, itty bitty light board, or testing tool. Or wire up some interesting input devices and make an interesting lighting controller.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;What&#39;s Next&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The shield has been a useful proving ground for the Conceptinetics DMX library (though we&#39;ve used it onstage before), as well as for OSHPark&#39;s manufacturing tolerances. I wasn&#39;t sure that having holes as close to the edge of the PCB as both V0.1 and V0.2 have would be manufacturable, but they came back no problem.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This all started for me with a miniature moving light project, and while that&#39;s not quite ready for a write-up, I&#39;ll just leave V0.3 of the DMX shield here. Not without errors/improvements to be made, but I&#39;m excited to try out some new LED dimming tech:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;wp-block-image&#34;&gt;&lt;figure class=&#34;aligncenter is-resized&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-383 post-img&#34; height=&#34;288&#34; src=&#34;V03-Board.png&#34; width=&#34;304&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;wp-block-image&#34;&gt;&lt;figure class=&#34;aligncenter is-resized&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-397 post-img&#34; height=&#34;291&#34; src=&#34;IMG_7277-1024x768.jpg&#34; width=&#34;390&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>3D Printing in the Home Workshop</title>
      <link>https://jeff.glass/post/3d-printing-in-the-home-workshop/</link>
      <pubDate>Sat, 09 Mar 2019 17:09:21 -0500</pubDate>
      
      <guid>https://jeff.glass/post/3d-printing-in-the-home-workshop/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;With the bulk of the &lt;a href=&#34;https://jeff.glass/2019/03/03/home-office-overhaul/&#34;&gt;shelving and organization overhaul complete as of last week&lt;/a&gt;, I&#39;ve spent the last week starting to personalize my home workshop space, mostly using my 3D Printer. This is definitely a situation of &#34;when your favorite tool is a hammer, everything looks like a nail.&#34; And the 3D printer is an awfully nice hammer...&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are some things that 3D printed plastic parts are perfect for, including: &lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;&lt;li&gt; Brackets to attach/connect unusual shapes &lt;/li&gt;&lt;li&gt; Containers/guides for specific materials and tools &lt;/li&gt;&lt;li&gt; Stands and supports for lightweight goods &lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;But of course, there are some properties that 3D printed thermoplastics are always going to be underachievers in, like:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;&lt;li&gt;Brute strength (compared to metal or wood) &lt;/li&gt;&lt;li&gt;Tiny mechanical details (like screw threading) &lt;/li&gt;&lt;li&gt;Heat resistance&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;In my mind, an ideal setup picks and chooses the materials that are right for each job. There&#39;s not much point in printing, say, a 24&#34; wide shelf when a wooden one with be stronger, cheaper, and easier to make or buy. Conversely, welding a microphone stand together out of metal would be a nightmare, where it&#39;s easy to print an existing plastic design that will hold up just fine.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The thrust of this is that, with the ELFA shelving (wood and metal) providing the backbone of my setup, there&#39;s lots of space to fill in the operational edges with 3D printing. I can&#39;t possibly cover every print, but in no particular order, here are the new additions to the setup, and some most-useful oldies:&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;ELFA Corner Bumpers&lt;/h4&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-346 post-img&#34; src=&#34;Corner_1-1024x789.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;I designed and printed these the same day I finished the shelving install, after my partner nearly beaned herself on the corner of a shelf by the doorway as she was getting up. They&#39;re a tight enough fit that they stay out without adhesive or fasteners. The design is now &lt;a href=&#34;https://www.thingiverse.com/thing:3481092&#34;&gt;on Thingiverse&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;ELFA Cable Guides&lt;/h4&gt;
&lt;div class=&#34;grid grid-cols-2&#34;&gt;
&lt;figure&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-347 post-img&#34; data-id=&#34;347&#34; data-link=&#34;https://jeff.glass/?attachment_id=347#main&#34; src=&#34;Bracket_1-1024x1003.jpg&#34;/&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-349 post-img&#34; data-id=&#34;349&#34; data-link=&#34;https://jeff.glass/?attachment_id=349#main&#34; src=&#34;Bracket_2-1024x941.jpg&#34;/&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;With the number of things that plug into AC power on my bench, I figured cable management would be useful. I started by putting together an &lt;a href=&#34;https://www.thingiverse.com/thing:3481103&#34;&gt;ELFA Shelf Hook Profile&lt;/a&gt;, which can be used as a basis for anything that hooks into the ELFA vertical standards. I then added an L-hook shape to one side  of the profile, which captures any cable that are hooked into it before the piece is installed. &lt;a href=&#34;https://www.thingiverse.com/thing:3481102&#34;&gt;This is the result&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;ELFA/2020 Bracket&lt;/h4&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-348 post-img&#34; src=&#34;2020_1-1024x768.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m trying out using a piece of 2020 extruded aluminum as a generic mounting rail for some desk equipment, including the camera arm below. Maybe I&#39;m being precious because the shelving is still new, but I couldn&#39;t bring myself to put holes into the front of the shelves to mount this rail in place. I &lt;a href=&#34;https://www.thingiverse.com/thing:3481106&#34;&gt;designed and printed these brackets&lt;/a&gt;, which are a tight fit to both the front of an ELFA solid shelf and the 2020 piece, and further secure to the 2020 with a screw and a hammer nut. A small piece of blue-tak can be fitted to the slots on the underside to prevent the bracket from sliding off.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This will probably need a second draft, as I realized after installation that they don&#39;t leave room for the LED lighting I intend to install under each shelf.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Lighting PSU Wall-Standoffs&lt;/h4&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-351 post-img&#34; src=&#34;PSU_1-1024x768.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll get into the lighting for the room more once all the parts arrive on the slow boat and I can get it all installed. In the meantime, I&#39;m starting by mounting the &lt;a href=&#34;https://www.amazon.com/gp/product/B01EWG6YT8/ref=ppx_yo_dt_b_asin_title_o01_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;30A, 12V PSU&lt;/a&gt;. The positioning of the vertical standards on my wall didn&#39;t leave an obvious place to mount the PSU, but the unit does have four M4 threaded holes on the sides. I designed and printed &lt;a href=&#34;https://www.thingiverse.com/thing:3481111&#34;&gt;these mounts&lt;/a&gt; to accept up to three drywall screws each, with a slot and countersink for an M4 screw.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Articulating Camera Arm&lt;/h4&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-350 post-img&#34; src=&#34;IMG_6299-1024x768.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;Having a semi-permanent camera on my desk has been useful for project documentation. This is an assembly of two prints by other makers - RaffoSan&#39;s &lt;a href=&#34;https://www.thingiverse.com/thing:2477180&#34;&gt;Universal Camera Mount&lt;/a&gt; and Felwats&#39; &lt;a href=&#34;https://www.thingiverse.com/thing:3013280&#34;&gt;C920 Adapter&lt;/a&gt;. The adapter actually fully replaces a piece of metal that sits between the camera and its original hinged arm. The arm mounts to the 2020 rail previously mentioned, which is mounted on the front of the lowest shelves.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Oscilloscope Probe Holders&lt;/h4&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-354 post-img&#34; src=&#34;Scope_1-1024x768.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;This design popped up on the &lt;a href=&#34;https://www.reddit.com/r/functionalprint/&#34;&gt;FunctionalPrint subreddit&lt;/a&gt; just in time. I was struggling with what to do with my scope probes - coil them next to the scope, keep them in a bin and pull them as needed... this solves that problem. The design comes from JRucks and is now &lt;a href=&#34;https://www.thingiverse.com/thing:3470932&#34;&gt;on Thingiverse&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&#39;Hot Shoe&#39; Microphone Mount&lt;/h4&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-352 post-img&#34; src=&#34;Mic_1-1024x699.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve had this one kicking around for awhile to hold my cheapy Takstar SGC-598 microphone. It&#39;s not the fanciest setup, but for my casual purposes it&#39;s more than enough. The design comes from Asgeirom &lt;a href=&#34;https://www.thingiverse.com/thing:252494&#34;&gt;on Thingiverse&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Solder Roll Holder&lt;/h4&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-355 post-img&#34; src=&#34;IMG_6303-1024x768.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;I didn&#39;t really see the point of having a solder-roll holder until I printed one. Never again will that 1 lbs roll go walking across the desk (or onto the floor) in the middle of a tricky joint. This design comes from Phredie &lt;a href=&#34;https://www.thingiverse.com/thing:960103&#34;&gt;on Thingiverse&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&#34;Pencil Cups&#34;&lt;/h4&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-353 post-img&#34; src=&#34;Pencil_1-1024x763.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;These &lt;a href=&#34;https://www.thingiverse.com/thing:1325680&#34;&gt;multi-purpose cup&lt;/a&gt; was one of the first designs I ever printed, and it&#39;s still my go-to print for sampling the color of a new filament. It&#39;s meant to print in spiraled-contour mode, which means that the outer perimeter (after the base) prints in one continuous revolving motion, instead of stepping up layer by layer like a typical print. There are perhaps a dozen of these scattered around the apartment, but since the reorganization, most live just above my desk holding, individually: pens/pencils, colored sharpies, black/silver sharpies, screwdrivers, pliers, flush cutters, cutting tools, and misc tools.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr class=&#34;wp-block-separator&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The next improvement to my setup is definitely a lighting improvement - its not terribly bright in the room to start with, and the shade from the shelves doesn&#39;t help. 3D printing will be involved.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also put my new setup to the test for the first time last night as I laid out a version of a &lt;a href=&#34;https://playground.arduino.cc/DMX/DMXShield&#34;&gt;DMX shield&lt;/a&gt; for the &lt;a href=&#34;https://store.arduino.cc/usa/arduino-pro-mini&#34;&gt;Arduino Pro Mini&lt;/a&gt;. Having all my tools organized and close at hand, and plenty of space to work it, makes working in my new setup a joy. The cleaning, the organization, the installing of new systems and setups: all worth it. It&#39;s now fun to sit at my workbench, instead of a kind-of cramped pain. Onward!&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Home Office Overhaul</title>
      <link>https://jeff.glass/post/home-office-overhaul/</link>
      <pubDate>Sun, 03 Mar 2019 16:05:45 -0500</pubDate>
      
      <guid>https://jeff.glass/post/home-office-overhaul/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;You may get the impression from this blog that I like to dabble in a lot of different projects. You&#39;re not wrong - I love trying new hobbies, new technologies, new recipies, new stuff. But one of the issues is that the old projects (and the pieces and tools that come with them) tend to pile up in my workspace. So with a kindly nudge from my partner, I decided it was time to overhaul my home office setup.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I wish I had taken a better series of before-during-after photos, but this photo that my partner took of me in the Fall certainly conveys the depths of the clutter of my old setup. It wasn&#39;t always this bad... but sometimes it was:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-326 size-full post-img&#34; height=&#34;2048&#34; src=&#34;img_6211.jpg&#34; width=&#34;1536&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;The workspace in september, such as it was.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There were many inconveniences with this setup, but the chief one was a lack of actual open flat work area. This was mostly a result of:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;&lt;li&gt;The 3D Printer sitting on the desktop (and its control box)&lt;/li&gt;&lt;li&gt;The stack of test gear (oscilloscope, PSUs, SigGen) and my FT-767gx radio sitting in prime working area&lt;/li&gt;&lt;li&gt;This is/was my primary computer workspace as well, so any project that necessitated having a laptop on the desk meant almost no workspace leftover.&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Additionally, a lot of the organizational systems that I had going were leftovers from days gone by, when I was doing more carpentry/assembly as part of a freelance career. The pegboard of hand tools, for example. But these days, while I&#39;m glad I own, say, a carpenter&#39;s square and a hammer, I only use them at home every 3-6 months. Removing the pegboard and the red pick bins you see in the photo above freed up valuable wall space. All my &#34;carpentry&#34; tools live in one large bin tucked underneath the desk.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I took inspiration from a couple of creative-types in my sphere: &lt;a href=&#34;https://twitter.com/KF7IJZ&#34;&gt;Jeremy KF7IJZ&lt;/a&gt;, ham radio nerd and one of the producers of the &lt;a href=&#34;https://www.hamradioworkbench.com/&#34;&gt;Ham Radio Workbench podcast&lt;/a&gt;; and Lee Fiskness, a fellow stage lighting colleague. Both have redone their home workspaces in the past couple years, and I know both pursue a variety of hobbies in relatively confined space.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;wp-block-image&#34;&gt;&lt;figure class=&#34;aligncenter is-resized&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-323 post-img&#34; height=&#34;512&#34; src=&#34;KF7IJZ_2-768x1024.jpg&#34; width=&#34;384&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;1/2 of Jeremy&#39;s setup, using ventilated wire shelving and a variety of bins. His desk sits to the right of this.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;wp-block-image&#34;&gt;&lt;figure class=&#34;aligncenter is-resized&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-324 post-img&#34; height=&#34;360&#34; src=&#34;Lee_1.jpg&#34; width=&#34;480&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Lee&#39;s desk setup. I&#39;m amazed by the density of storage on this thing! Also, Lee being a lighting person, no surprise that there&#39;s tasteful lighting built in.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While both Jeremy and Lee used the &lt;a href=&#34;https://www.ikea.com/us/en/catalog/categories/departments/bedroom/11468/&#34;&gt;Algot System&lt;/a&gt; from Ikea, I ended up going with the Container Store&#39;s version of wall-mounted shelves called &lt;a href=&#34;https://www.containerstore.com/elfa/index.htm&#34;&gt;ELFA&lt;/a&gt;. The primary reason for this is that it seems ELFA may be getting phased out - many of the specific components (metal shelves, certain size brackets) are no longer available. Additionally, ELFA&#39;s two-slot metal vertical standards are compatible with lots of other generic brands (Rubbermaid, Closetmaid, Home Depot, Menards, etc.), and seemed more easy to create customized pieces for than Algot&#39;s slotted-tab connectors.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s the design I came up with, laid out in Fusion360:&lt;/p&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-329 post-img&#34; src=&#34;JG_Workshop-1.jpg&#34;/&gt;&lt;figcaption&gt; &lt;br/&gt; &lt;em&gt;I had originally intended to use Algot as well, so the specific shelf widths and vertical supports don&#39;t quite align with the final ELFA design.&lt;/em&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;This makes use of my existing metal shelves and 72&#34;x30&#34; desktop. The grey square on the floor represents the footprint of our elliptical, which also typically lives in this room.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The first step was to Marie Kondo the crap out of setup. I&#39;ve tossed, condensed, consolidated so many things that I no longer needed, or that someone else who have better use for. I also purchased a bunch more plastic bins and part boxes, to try to break things down into manageable storage sizes. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div class=&#34;wp-block-image&#34;&gt;&lt;figure class=&#34;aligncenter is-resized&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-330 post-img&#34; height=&#34;384&#34; src=&#34;IMG_5973-1024x768.jpg&#34; width=&#34;512&#34;/&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;About halfway through the clean. No more pegboard!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After a few weeks of cleaning and clearing, I went to the container store this weekend and picked up the major pieces for the shelving. The consultants at the ELFA counter are really expecting folks to walk in with not much of an idea of what they need to fill out their closet - I think they were surprised when I had a parts list and a drafting. But my consultant, who&#39;s also a math teach, was a great help, and got me squared away in about 20 minutes. I did have to come back later in the week to pick up all the pieces, I think mostly because the store was slammed with patrons getting in on the ELFA sale.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The ELFA system is pretty straightforward - everything hangs off of dual-slot vertical &#34;standards&#34;. There are two types of standards - those that hang purely off a top rail, and those that don&#39;t hang off a top rail but instead mount to the wall every 16&#34; vertically or so. I went with the first type, but being concerned about weight, I didn&#39;t trust the Container Store&#39;s claim that everything could just be hung from drywall anchors. Instead, I screwed a stained piece of 1x4 directly to the studs the whole length of the wall, and mounted the top rail to that. I also added 3 other matching 1x4&#39;s down the wall, so the rails would have something to hang flush against.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As of March third, things have come a long way!&lt;/p&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-331 post-img&#34; src=&#34;IMG_6272-1024x501.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;There a a few significant things I mean to add to this setup. One is some under-shelf lighting - I&#39;ve ordered come WW/CW LED tape and aluminum channel to arrive soon, which will be a project in and of itself. And as for control, I think I&#39;ll start with everything just wired to some switches, and then decide if I want to get fancy. (&lt;em&gt;I had a long think in the shower about an Arduino-controlled, touchscreen connected dimming system, but that may be  getting ahead of myself&lt;/em&gt;). Not sure yet if I&#39;ll re-use the 2&#39; Fluorescent fixtures that had hung above the pegboard before.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The other thing I&#39;m jonesing for is a whiteboard. Especially when trying to reason out a problem, I find doodling on a whiteboard to be both relaxing and clarifying. There&#39;s now a big empty space on the far wall that I think will do nicely.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s so satisfying.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Lighting Control Protocols and Standards</title>
      <link>https://jeff.glass/post/lighting-control-protocols-and-standards/</link>
      <pubDate>Sat, 23 Feb 2019 16:18:09 -0500</pubDate>
      
      <guid>https://jeff.glass/post/lighting-control-protocols-and-standards/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;The world of stage lighting uses a variety of communication protocols to link control devices (computers, light boards, houselighting systems) to endpoint devices (lights, dimmers, effects). These run the gamut from basic analog control through legacy serial protocols to modern packetized, ethernet-based protocols.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The specifications of many of the most widely-adopted protocols are managed by the &lt;a href=&#34;https://www.esta.org/&#34;&gt;Entertainment Services and Technology Association&lt;/a&gt; through their &lt;a href=&#34;https://tsp.esta.org/tsp/index.html&#34;&gt;Technical Standards Program&lt;/a&gt;. Confusing matters slightly, these protocols are sometimes referred to by their &lt;a href=&#34;https://tsp.esta.org/tsp/index.html&#34;&gt;ESTA standards numbers&lt;/a&gt;, often interchangeably with the common names. Below is a list of the major ESTA standards that apply to lighting control, with their standard number, their common name, and a brief description.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;I&#39;m not directly linking to the standards documents, but you can find them all on the &lt;a href=&#34;https://tsp.esta.org/tsp/documents/published_docs.php&#34;&gt;approved standards page of the ESTA&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here are the currently released standards:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;
&lt;table class=&#34;table-fixed&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td class=&#34;w-1/4&#34;&gt;&lt;strong&gt;Document #&lt;/strong&gt;&lt;/td&gt;
&lt;td class=&#34;w-1/4&#34;&gt;&lt;strong&gt;Short Name&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;E1.3&lt;/td&gt;
&lt;td&gt;0-10V Control&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E1.11&lt;/td&gt;
&lt;td&gt;DMX 512&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E1.17&lt;/td&gt;
&lt;td&gt;ACN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E1.20&lt;/td&gt;
&lt;td&gt;RDM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E1.31&lt;/td&gt;
&lt;td&gt;sACN&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Briefly, the protocols are:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/0-10_V_lighting_control&#34;&gt;E1.3 0-10V Control:&lt;/a&gt;&lt;/strong&gt; Specifies control of dimmers/luminaries via individual analog control lines. 0 volts is always off, or one extreme of a parameter (e.g. full pan left; minimum blue; focus all the way in, etc). 10V is always on, or the other extreme of a parameter. &#34;0V&#34; is really  -0.2V to 0.3V. &#34;10V&#34; is really &#34;9.8V to 30V&#34;. Control lines must be stable to ± 20mV. Minimum load impedance is 50 kOhms. Passive controls have max 2.5 kOhms output impedance; active controls have max 100 Ohm output impedance. Short circuit protection, overvoltage protection, and current supply are also specified.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/DMX512&#34;&gt;E1.11 DMX 512:&lt;/a&gt;&lt;/strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/DMX512&#34;&gt; &lt;/a&gt;(&#34;&lt;strong&gt;D&lt;/strong&gt;igital &lt;strong&gt;M&lt;/strong&gt;ultiple&lt;strong&gt;X&lt;/strong&gt;&#34;) Specifies a 250 kbps serial protocol for controlling equipment, the EIA-485 transmission techniques for the same, physical cable specifications, and appropriate connectors (XLR5). The 5-conductor cables are common, data 1±, and data 2± (rarely used), each not to exceed 6V above common.  Data lines are balanced in pairs. Signal line impedance is 120 ohms nominal. Each &#34;packet&#34; of serial data begins with a break, mark, and start code, followed by up to 512 slots of data, each of which has an 8-bit value. No error checking/correction is provided.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Architecture_for_Control_Networks&#34;&gt;E.1.17 ACN:&lt;/a&gt; &lt;/strong&gt;(&lt;strong&gt;A&lt;/strong&gt;rchitecture for &lt;strong&gt;C&lt;/strong&gt;ontrol &lt;strong&gt;N&lt;/strong&gt;etworks) Specifies a series of protocol formats for (generally network-based) interchangeability between control systems and endpoint devices. Generally: the Device Management Protocol (DMP) encapsulates the Getting and Setting of device parameters; a set of  Device Description Language standards (DDL) defines the format and language for component description to allow common control and identification; and the Session Data Transport (SDT) protocol allows for multicast delivery of messages with ordering and verification not present in generic UDP multicasting. The Protocol Data Unit is the singular message format for DMP messages.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;ACN also provides for device discovery. While typically used with TCP/IP and 802.3 Ethernet or 802.11 WiFi, other physical/link/transport/network layers are incorporated as possibilities, including various serial and RS485 standards, via interoperability profiles.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/RDM_(lighting)&#34;&gt;E1.20 RDM:&lt;/a&gt;&lt;/strong&gt; (&lt;strong&gt;R&lt;/strong&gt;emote &lt;strong&gt;D&lt;/strong&gt;evice &lt;strong&gt;M&lt;/strong&gt;anagement) Specifies an extension to a DMX512 link permitting intelligent, &lt;u&gt;bi-directional &lt;/u&gt;communication between devices. An alternative start code in a DMX packet identifies an RDM packet. RDM uses a binary-tree or similar search to identify devices on a DMX512 line. Controllers can use RDM messages to Get or Set parameters of endpoint devices, and communicate to individual endpoints when they may drive the line to respond to Controller commands. Device configuration and monitoring are primary goals, as is identification.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;E1.31 sACN&lt;/strong&gt; (&lt;strong&gt;S&lt;/strong&gt;treaming &lt;strong&gt;ACN&lt;/strong&gt;): Describes a lightweight mechanism for streaming DMX packets over an IP network using a (small) subset of the ACN suite. Describes data format, protocol, addressing, and network management, as well as a synchronization method for ensuring that data arrives concurrently at multiple endpoints.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are also some subsidiary standards documents managed by the &lt;a href=&#34;https://tsp.esta.org/tsp/working_groups/CP/cp.html&#34;&gt;Control Protocols Working Group&lt;/a&gt;, including:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;&lt;li&gt;E1.27-1 - Standard for portable control cables for use with DMX512&lt;/li&gt;&lt;li&gt;E1.27-2 - Standard for Permanently Installed Control Cables for use with DMX512&lt;/li&gt;&lt;li&gt;E1.30-1 - EPI 23, Device Identification Subdevice&lt;/li&gt;&lt;li&gt;E1.30-3 - EPI 25, Time Reference in ACN Systems using SNTP and NTP&lt;/li&gt;&lt;li&gt;E1.30-4 - EPI 26, DDL Extensions for DMX512 and sACN Devices&lt;/li&gt;&lt;li&gt;E1.30-7 - EPI 29, Allocation of IPv4 Addresses to ACN Hosts&lt;/li&gt;&lt;li&gt;E1.37-1  - Additional Message Sets for E1.20 RDM Part 1 - Dimmer Message Sets&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr class=&#34;wp-block-separator&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In addition to the published ESTA standards, it&#39;s worth mentioning two that are not currently maintained as standards:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The standard for &lt;strong&gt;&lt;a href=&#34;https://tsp.esta.org/tsp/documents/docs/E1.33_CP2010-1032r5.pdf&#34;&gt;E1.33, RDMNet&lt;/a&gt;&lt;/strong&gt;, has been in draft review since at least 2011. It defines a suite of protocols for the types of device discovery, device management and configuration, and automatic device configuration that RDM provides on a DMX512 link, but across a network. It defines a broad scalable architecture that allows for multiple controllers and &#34;tens of thousands of responders,&#34; as well as a minimal protocol for carrying non-RDM data over the same protocol. The spec defines&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;&lt;li&gt;A Low Level Recovery Protocol (LLRP), used to configure IP settings so that E1.33 equipment achieves connectivity&lt;/li&gt;&lt;li&gt;A Broker protocol, which allows for discovery and many-to-many message transport&lt;/li&gt;&lt;li&gt;The RDM Packet Transport Protocol (RPT), which defines the primary packet formats and messages, as well as topology and functional requirements for controllers and endpoints&lt;/li&gt;&lt;li&gt;The Extensible Packet Transport protocol (EPT), which may be used to carry non-DMX data in a similar way to RPT.&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;BSR E1.33 Concluded its fifth public review in January 2018 with 68 pages of public comments; no date is known for the next public review session. As noted below, ETC has its own mechanism for transporting RDM and RDM-like data over ethernet via its NET3 suite.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The second &#39;standard&#39; of interest is the former &lt;strong&gt;E.1.45&lt;/strong&gt;, &#34;Unidirectional Transport of IEEE 802 Data Frames over ANSI E1.11 (DMX512). This provided a mechanism for transmitting IEEE 802 packets - including Ethernet (802.3), Wireless LAN (802.11), and Bluetooth (802.15.1) - over a DMX512 link by using an alternative start code, stuffing the packet data into the DMX &#34;payload&#34; area, prepending two byte of sequence numbers and appending a two octet CRC for error checking. Interestingly, it seems that this standard was aimed specifically at &lt;a href=&#34;https://en.wikipedia.org/wiki/Visible_light_communication&#34;&gt;Visible Light Communication&lt;/a&gt; (802.15.7), for transmission of data in the visible spectrum.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After publication, it was established that key parts of the E1.45 standard were covered by US and Korean patents, and the patent holder would not guarantee that licensing could be made &#34;under reasonable terms and conditions that are demonstrably free of any unfair discrimination.&#34; Therefore, in October 2015, the ESTA withdrew this document as a standard.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr class=&#34;wp-block-separator&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Beyond the ESTA-specified standards, there are a handful other vendor-specific or genre-specific communications protocols in use. Electronic Theatre Controls (ETC) has used a number of protocols all their own over the years, including:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;ETCnet (Net1): &lt;/strong&gt;Originally called ETCNet and retroactively renamed to Net1,  this was ETC&#39;s first Ethernet based control protocol. It is proprietary, without publicly available specification. It is a raw Ethernet protocol (layer 2), meaning that routers and certain types of switches do not pass Net1 traffic. A hub is recommended. Net1 provdes transport of console video information, up to 4 universes of DMX, tracking backup data, and keyboard command information to ETC products of the era, including Express/Expression/Insight and Obsession 1. Many Net2 DMX nodes can also be configured to operate in Net1 mode, with the concomitant loss of function.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;ETCLink:&lt;/strong&gt; ETC&#39;s Sensor dimmers with a CEM classic controller use this protocol to provide dimmer feedback to the console. Express/Expression and Obsessions 1/2 consoles could receive this data. Connections were commonly a 6-pin XLR connector. This functionality has been supplanted by ethernet-based feedback in modern systems.
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;ETC Net2:&lt;/strong&gt; Introduced with the Obsession II console, ETC&#39;s second networked control solution incorporated IP addressing, this allowing network traffic to be switched or routed. Sends DMX data as eDMX, which in its final version incorporates per-&#34;range&#34; priority. Includes EDIMI, ESMPTE, FTP for ETC devices, and video data for remote video units.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;ETC Net3: &lt;/strong&gt;ETC&#39;s current suite of network-based communication. Sends DMX data over sACN. Uses a non-public RDM-over-ethernet protocol to receive RDM data from Net3 DMX Nodes. Incorporates network video data as Net2 did. Many ETC products (Sensor Dimming, Paradigm, Mosaic, Unison, etc) have ethernet functionality, but it is nebulous which of these fall under &#34;Net3&#34; and which are their own Ethernet-based communication system.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;ETC also uses &lt;a href=&#34;https://en.wikipedia.org/wiki/LonWorks&#34;&gt;LonBus-based&lt;/a&gt; networking devices to control various legacy architectural control stations - while their modern counterparts can also usually take LonBus, they are typically served by an Ethernet connection.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr class=&#34;wp-block-separator&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Other situation-specific lighting communication protocols include:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://art-net.org.uk/&#34;&gt;Art-Net&lt;/a&gt;:&lt;/strong&gt; A simple implementation for streaming DMX512 and RDM information over IP networks, typically ethernet. Multiple versions exist (1 thru 4) with significant differences - version 1 uses only broadcast packets; version 2 uses broadcast for discovery of endpoints and unicast for data delviery. Version 3 introduced the ability to expand to up to 32,000 universes, and further refinements were made to version 4. Artnet uses specific IP ranges for much of its configuration, which can present integration challenges when it needs to exist alongside other switched protocols.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://www.highend.com/pub/support/controllers/documents/HTML/en/sect-setting_up_the_network.htm&#34;&gt;HogNet&lt;/a&gt; and Fixturenet:&lt;/strong&gt; High End Systems uses its proprietary HogNet ethernet suite of protocols to link its line of Whole Hog lighting consoles, as well as their DMX processors and optionally other lighting control PC&#39;s. These connect to a specific HogNet RJ45 connector on the back of most Whole Hog consoles, with its own NIC. A secondary connection, the FixtureNet ethernet connection, is used for connecting to Art-Net/sACN(E1.31) DMX gateways.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;&lt;a href=&#34;http://www.citp-protocol.org/viewtopic.php?f=1&amp;amp;t=3&#34;&gt;CITP &lt;/a&gt;&lt;/strong&gt;(&lt;strong&gt;C&lt;/strong&gt;ontroller &lt;strong&gt;I&lt;/strong&gt;nterface &lt;strong&gt;T&lt;/strong&gt;ransport &lt;strong&gt;P&lt;/strong&gt;rotocol): Used by some lighting and video controllers to exchange pictures and video streams over a network. The standard is maintained by &lt;a href=&#34;http://www.citp-protocol.org/viewtopic.php?f=1&amp;amp;t=3&#34;&gt;Capture&lt;/a&gt;. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://help2.malighting.com/Page/grandMA2/network_psn/en/3.3&#34;&gt;PosiStageNet &lt;/a&gt;&lt;/strong&gt;(PSN): An open protocol developed by MA Lighting to transmit realtime position information over a network, for example from a tracking device on a moving actor, scenic piece, or prop to allow for video, lighting, or motion-control tracking.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr class=&#34;wp-block-separator&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So what does the future of lighting control look like? Clearly, we are living in an increasingly-connected theatrical world, and most of that connectivity is Ethernet-based. I don&#39;t expect to see an entirely new paradigm at the link layer any time soon.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I have expected for many years to see an additional level of automation and abstraction in how we set up lighting systems. When all of the devices in a system can talk to each other, is there still a need to individually plan, address, patch, and coordinate the ID&#39;s of individual fixtures or dimmers? Or can we automate ourselves out of the time consuming business of managing &lt;em&gt;how&lt;/em&gt; the devices talk to each other and let the system set up its communication network &lt;em&gt;automatically&lt;/em&gt;? We shall see. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;No matter what the future holds, we&#39;ve come a long way from Piano Board dimming.&lt;/p&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-316 post-img&#34; src=&#34;pianoboard.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;Update:&lt;/strong&gt; After posting this on Facebook, a friend asked about the AMX protocol that he remembered from high school. Here&#39;s the brief answer I gave him:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;AMX&lt;/strong&gt; (&lt;strong&gt;A&lt;/strong&gt;nalog Multiple&lt;strong&gt;X&lt;/strong&gt;) was one of a bunch of protocols (AMX192, CMX, MPX) that appeared in the late 80&#39;s as people were trying to solve the &#34;one dimmer = one wire&#34; problem of E1.3 0-10v. It used 4 wires - two for a (balanced) clock signal, one ground, and a signal line which carried a succession of analog voltages (0-5V) that represented the levels of up to 192 parameters.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Acceptable connectors were 4-pin XLR or TY4F (mini-stupid!). Interestingly, the spec requires &#34;sound-style&#34; Male XLR connectors on the controller and female connectors on endpoints. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The AMX192 standard was developed and published in 1987 by the United States Institute for Theatre Technology (USITT), instead of the ESTA. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Full spec re-hosted here: &lt;a href=&#34;http://jeff.glass/documents/AMX192_8-08.pdf?fbclid=IwAR0bUMme18XBjcNqr6wVV1WlxtivhO51q8-LdlWmUosSmZNjF1ROZouXzIM&#34; rel=&#34;noreferrer noopener&#34; target=&#34;_blank&#34;&gt;http://jeff.glass/documents/AMX192_8-08.pdf&lt;/a&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>CDV-720 3A High Range Radiation Meter</title>
      <link>https://jeff.glass/post/cdv-720-3a-high-range-radiation-meter/</link>
      <pubDate>Wed, 23 Jan 2019 04:27:15 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cdv-720-3a-high-range-radiation-meter/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;This post is cross-posted to my ham-radio specific blog, &lt;a href=&#34;https://kk9jef.wordpress.com/?p=3195&#34;&gt;kk9jef.wordpress.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I went to the WCRA Hamfest in St. Charles this weekend in search of test gear (I had been fortunate to find a working &lt;a href=&#34;https://www.radiomuseum.org/r/heath_digital_frequency_counte.html&#34;&gt;Heathkit IM-2420 Frequency Counter&lt;/a&gt; there a couple years ago). I didn&#39;t come away with anything of that sort, but I did scoop up this yellow beauty:&lt;/p&gt;
&lt;figure class=&#34;wp-block-image&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-298 post-img&#34; src=&#34;RadiationMeter.jpg&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;This beaut is a CDV-720 3A High Range Radiation Meter. It&#39;s a remnant of the early cold war, the beginning of the atomic age - thousands were produced in the late fifties and early sixties by the &lt;a href=&#34;http://national-radiation-instrument-catalog.com/new_page_26.htm&#34;&gt;Victoreen Company&lt;/a&gt; out of Cleveland Ohio. It&#39;s got a cast aluminum case that feels like it&#39;s made to survive a bomb, and maybe it was. The manual notes that:&lt;/p&gt;
&lt;blockquote class=&#34;wp-block-quote&#34;&gt;&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;It is designed to be used by radiological Civil Defense personnel in determining radioactive contamination levels that may result form an enemy attack or other nuclear disaster.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p class=&#34;post-p&#34;&gt;The really staggering thing about this meter is the range it covers: up to 500 Roentgens/hr. At that rate, your goose is cooked in a matter of minutes (first metaphorically, then literally).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; Here&#39;s a brief video overview of the meter, its circuitry, and the scary-high levels of radiation that it&#39;s meant to measure:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;{{&amp;lt; youtube 2DGl5XmxJt8 &amp;gt;}}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Stay safe and non-irradiated out there!&lt;/p&gt;
&lt;/div&gt;&lt;/figure&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Homemade Cheddar Cheese</title>
      <link>https://jeff.glass/post/homemade-cheddar-cheese/</link>
      <pubDate>Wed, 05 Dec 2018 07:01:54 -0500</pubDate>
      
      <guid>https://jeff.glass/post/homemade-cheddar-cheese/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Over the past 12 months or so, I&#39;ve dipped my toes into some basic cheesemaking, including cream cheese, farmer&#39;s cheese, and ricotta. But for me, there&#39;s no better cheese than a sharp white cheddar, and with an eye toward making cheddar and some other hard cheeses, I&#39;ve built my own cheese press and my own first hard cheese.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The process I used to construct the press is very similar to &lt;a href=&#34;https://www.instructables.com/id/A-Simple-and-Inexpensive-Cheese-Press/&#34;&gt;this instructable&lt;/a&gt;. I used a 1x6x48&#34; Maple board from Menards as the base, and two pieces of 1x2 Poplar from an earlier project. The threaded rod, nuts, wingnuts, and washers are all 3/8&#34; hardware. I added &lt;a href=&#34;https://www.menards.com/main/tools-hardware/household-hardware/casters-furniture-hardware/furniture-slides-glides/shepherd-hardware-reg-7-8-silver-threaded-furniture-glide-4-pack/9449/p-1444442245054-c-13088.htm?tid=4069837351917205904&amp;amp;ipos=12&#34;&gt;four threaded furniture feet&lt;/a&gt; to raise the press off the countertop and allow for tilting the press slightly to allow the whey to run off. I used some butcher-block conditioner to help seal the wood before use. (Having access to a theatrical scene shop helps.)&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-282 post-img&#34; height=&#34;540&#34; src=&#34;IMG_5567-e1543977868759-1024x768.jpg&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;My first pressed cheese is a &#34;farmhouse cheddar&#34;, made according to &lt;a href=&#34;https://www.littlegreencheese.com/2011/09/farmhouse-cheddar-video-tutorial.html&#34;&gt;this recipe from Gavin Weber&lt;/a&gt;. Specifically, the ingredients I used were:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;2 Gallons (4 half-gallon containers) of &lt;a href=&#34;http://www.kalonasupernatural.com/our-products/organic-milk/organic-whole-milk/&#34;&gt;Kalona Whole Milk&lt;/a&gt; from our &lt;a href=&#34;https://www.freshthyme.com/&#34;&gt;Fresh Thyme Market&lt;/a&gt;. While unpasteurized milk seems to be recommended for a lot of artisinal cheese making, that&#39;s hard to come by in urban Chicago, so this non-homogenized milk is the way I&#39;ve gone.&lt;/li&gt;
&lt;li&gt;1 Sachet of Mesophillic Culture, purchased from &lt;a href=&#34;https://www.pursuitsupply.com/&#34;&gt;Pursuit Supply Co&lt;/a&gt;, a small business here in Chicago that focuses on homebrewing and distilling, cheesemaking, and film development.&lt;/li&gt;
&lt;li&gt;1/2 tsp of Liquid Vegetable Rennet, also from Pursuit Supply&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;This was diluted in 1/4 cup of bottled (unchlorinated) water before adding, since apparently chlorine kills the coagulating action of the rennet&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;1/2 tsp of Calcium Chloride (from, where else, Pursuit), also mixed with 1/4 cup bottled water. I understand this introduces more soluble calcium to the mixture and helps the curds to form.&lt;/li&gt;
&lt;li&gt;2 generous tbsp of non-iodized sea salt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;The process, as outlined by Gavin (of Little Green Workshops) is straightforward. Here is is summarized by me, with &lt;em&gt;comments&lt;/em&gt; as to how my own process went:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Sterilize all materials that will come into contact with the milk or cheese.&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;I used a preparation of &lt;a href=&#34;https://www.pursuitsupply.com/five-star-star-san-4oz/&#34;&gt;Star-San&lt;/a&gt; mixed with water in the recommended ratio of 1:640 (1 Oz per 5 gallons). I soaked the large stirring spoon I planned to use, as well as all the measuring cups in this for a few minutes. Meanwhile, I boiled a couple quarts of water in my large stockpot to sterilize the pot itself, then wiped the lid down with the Star-San mixture.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;To a large stockpot set up as a double-boiler, add the 2 gallons (8 liters) of milk.&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;I used one of my large general-purpose pots underneath my stockpot as a double boiler, and it was remarkably stable.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Heat the milk to 33C (92F)&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;This took about 20 minutes with my double boiler setup:&lt;img alt=&#34;A large red pot of milk on a gass stove&#34; class=&#34;aligncenter size-large wp-image-283 post-img&#34; height=&#34;540&#34; src=&#34;IMG_5576-1024x768.jpg&#34; width=&#34;720&#34;/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Stir in the diluted calcium chloride&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sprinkle the starter culture over the top, then stir for 1-2 minutes to incorporate&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;&lt;li&gt;Gavin&#39;s recipe calls for 1/8 tsp of culture, I simply used one small sachet.&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Cover, and allow the milk to ripen for 45 minutes&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;This allows the culture to start to grow a little and the milk to begin to acidify&lt;/li&gt;
&lt;li&gt;I turned off the heat at this stage to allow things to maintain their temperature, but when I returned after 45 minutes, the temperature had shot up over 40C! Oops!&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Stir in the diluted rennet while stirring. Stir for no more than a minute as the milk with start to set.&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;I treated myself to a very large metal spoon for this project&lt;/li&gt;
&lt;/ul&gt;

&lt;li&gt;&lt;strong&gt;Check for a clean break with a clean finger&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Basically, stick a finger in through the top layer of curd - if it feels firm-ish, it&#39;s good to go. If it&#39;s a little soft and yogurt-y, you can cover and wait another 10 minutes or so.&lt;/li&gt;
&lt;/ul&gt;

&lt;li&gt;&lt;strong&gt;Cut the Curd&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;There are some fancy curd cutters out there that look like a wire mandolin or harp, but I just used a long clean knife, run through up-down, left-right, and twice angled.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Slowly heat the milk and curds to 38C (100F) over about half an hour&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Even with a double boiler setup, my setup took a little modulation (higher heat, lower heat, higher heat) to not spike in temperature too fast. I took about 25 minutes to raise the temp up to 38C, sitrring continuously
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-284 post-img&#34; height=&#34;540&#34; src=&#34;IMG_5579-1024x768.jpg&#34; width=&#34;720&#34;/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Let the curds rest for 10 minutes at 38C&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;At this point, I should have taken the pot off the double boiler, but I figured it would help keep the milk warm. It sure did - by the time I returned 20 minutes later, the temp was up to 44C! It remains to be seen whether this will have a negative effect on the cheese.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Drain the pot into a clean cheesecloth-lined &lt;/strong&gt;&lt;b&gt;colander&lt;/b&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;I collected the Whey at this point and made a Whey Ricotta out of it. Yum!&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Tie up the edges of the cheesecloth and hang for an hour to drain some of the whey out&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;&lt;em&gt; &lt;/em&gt;I had a spare bit of PVC pipe leftover from my &lt;a href=&#34;https://jeff.glass/2018/07/09/a-portable-20-30-40m-vertical-antenna/&#34;&gt;multiband antenna project&lt;/a&gt;, so I set that between the backs of two chairs and set the pot underneath to catch the drippings.
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-285 post-img&#34; height=&#34;540&#34; src=&#34;IMG_5583-1024x768.jpg&#34; width=&#34;720&#34;/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;b&gt;After an hour&#39;s dripping, transfer the curds back into a pot. Break the cheese mass into walnut-sized pieces. Toss 2+ TBSP of non-iodized salt throughout.&lt;/b&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;I used non-iodized sea-salt, instead of some of the products which are marketed as &#34;cheese salt.&#34; Not sure what the difference is&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;b&gt;Line a sanitized cheese mold with a sanitized cheese cloth. Transfer the curds to the press. Flip a corner of cheese cloth over the top of the curds, and place the follower on top.&lt;/b&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;I originally tried 3D printing a mold, but I got cold feet about subjecting a 3D print to 50+ lbs of pressure overnight, fearing it would crack. I also thought it would be good to seal the PLA with polyurathane or similar before trusting it to be food-safe. So I made a simple press out of a plastic jug from Walmart with the bottom and handle cut off, and holes punched through the sides.&lt;/li&gt;
&lt;/ul&gt; &lt;li&gt;&lt;strong&gt;Press for 10 minutes at ~10 lbs.&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;I set up my press in a low-sides baking sheet to catch the whey as it ran off, and used the threaded-feet to set the press slightly off plumb so the whey all ran off one side.&lt;/li&gt;
&lt;li&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-286 post-img&#34; height=&#34;540&#34; src=&#34;IMG_5588-1024x768.jpg&#34; width=&#34;720&#34;/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Remove the curds from the press and cloth, turn over, and press 10 minutes at ~25 lbs.&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Quite a lot of whey running off at this point. Fairly cloudy, which I read is not good, but I&#39;m not sure why...
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-287 post-img&#34; height=&#34;540&#34; src=&#34;IMG_5595-e1543978264792-1024x768.jpg&#34; width=&#34;720&#34;/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Remove the curds from the press and cloth, turn over, and press for 12 hours at ~50 lbs&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;I left the cheese to press overnight, checking it once a couple hours and tightening the springs a bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Remove the wheel of cheese from the press and cloth. Trim any bits of cheese that have popped up around the follower.&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Leave these in the fridge for a couple days and they&#39;re basically cheese curds! So tasty!
 &lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-288 post-img&#34; height=&#34;540&#34; src=&#34;IMG_5597-1024x768.jpg&#34; width=&#34;720&#34;/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Place the cheese on the counter under a bit of cheesecloth or similar to air-dry. Turn twice daily until it has a nice rind and is quite dry to the touch.&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;I left my cheese on the counter for a little under 3 days before waxing. Possibly I should have left it longer to develop a drier rind, but we shall see when we break the thing open.
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-289 post-img&#34; height=&#34;540&#34; src=&#34;IMG_5626-1024x768.jpg&#34; width=&#34;720&#34;/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Wax or vacuum seal the cheese&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;After drying for a couple days, the options are to either cloth-band, wax, or vacuum seal the cheese to prevent any nasty bugs getting into the cheese.&lt;/li&gt;
&lt;li&gt;One of Gavin&#39;s most popular videos describes Cloth-Banding the cheese, but in his final tasting of that cheese, he describes the process as too fiddly (and he did get some mold in a bit of that cheese early on). So I decided to wax the cheese instead. Pursuit was sadly out of cheese wax (soft parafin-based wax) when I stopped by, so I ordered some Beeswax from the internet to arrive the next day.
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-290 post-img&#34; height=&#34;540&#34; src=&#34;IMG_5630-e1543978805873-1024x768.jpg&#34; width=&#34;720&#34;/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;strong&gt;Age the cheese for 1 month to... forever?&lt;/strong&gt;&lt;/li&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Currently, the cheddar is aging in a small mini-fridge in the basement, though with it being the early  months of winter, the fridge is turned off and is just functioning as an airtight box. I added a small dish of water and a small dish of saturated salt to raise the relative humidity to around 80-85%.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;So... now we wait! I&#39;m thinking, with this being a first cheese, we&#39;ll crack it open around valentine&#39;s day (~3 months) to see how I did, then possibly re-seal it and age longer if it seems like everything&#39;s going well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One next step will be to measure the pressure that my chosen springs will create when the press is tightened down entirely. I discovered that my bathroom scale doesn&#39;t fit within the scale, so much like the instruct able suggests, I&#39;m putting together a test jig with a wider base to allow me fit the springs around the scale and make a weight gauge. I&#39;ll also need to replace the felt-bottomed feet with something that doesn&#39;t absorb whey (I threw the feet out after this batch).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s hoping it all turns out well!&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>150 Switches</title>
      <link>https://jeff.glass/post/150-switches/</link>
      <pubDate>Thu, 11 Oct 2018 03:52:29 -0500</pubDate>
      
      <guid>https://jeff.glass/post/150-switches/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I got lots of wonderful little gifties for my recent birthday, but one of the most out-there was a bag of &lt;a href=&#34;https://www.jameco.com/z/GB165LB-Push-Button-Rocker-Slide-Toggle-and-Slide-Switch-Grab-Bag_135378.html&#34;&gt;150 Assorted Rocker Slide and Toggle switches from Jameco&lt;/a&gt;. It&#39;s literally a 2 pound scoop of switches in a plastic bag, sealed and mailed. Thanks Mom and Dad!&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-264 post-img&#34; height=&#34;302&#34; src=&#34;IMG_5438-1024x768.jpg&#34; width=&#34;403&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;I spent a good 10 minutes sorting it out - here&#39;s all that squinched into 45 seconds:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;{{&amp;lt; youtube o2uSN4j31Vc &amp;gt;}}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, what do you get in a two pound sack of switches? Well, after another hour or so of cataloging, here&#39;s the results:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(It&#39;s exactly 150 switches! Well I&#39;ll be...)&lt;style type=&#34;text/css&#34;&gt;&lt;!--td {border: 1px solid #ccc;}br {mso-data-placement:same-cell;}--&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; dir=&#34;ltr&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;100&#34;/&gt;
&lt;col width=&#34;100&#34;/&gt;
&lt;col width=&#34;96&#34;/&gt;
&lt;col width=&#34;60&#34;/&gt;
&lt;col width=&#34;237&#34;/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;&lt;/tbody&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Quantity&#34;}&#39;&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;&lt;strong&gt;Quantity&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Genus&#34;}&#39;&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;&lt;strong&gt;Genus&lt;/strong&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Action&#34;}&#39;&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Poles&#34;}&#39;&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;&lt;strong&gt;Poles&lt;/strong&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Description&#34;}&#39;&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:11}&#39;&gt;11&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-OFF-ON&#34;}&#39;&gt;ON-OFF-ON&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Large Black&#34;}&#39;&gt;Large Black&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:15}&#39;&gt;15&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-OFF&#34;}&#39;&gt;ON-OFF&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Large Black&#34;}&#39;&gt;Large Black&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:3}&#39;&gt;3&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-OFF&#34;}&#39;&gt;ON-OFF&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Large Tan Power&#34;}&#39;&gt;Large Tan Power&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:9}&#39;&gt;9&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-OFF&#34;}&#39;&gt;ON-OFF&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Medium Black&#34;}&#39;&gt;Medium Black&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:3}&#39;&gt;3&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-OFF&#34;}&#39;&gt;ON-OFF&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Round Black&#34;}&#39;&gt;Round Black&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-OFF&#34;}&#39;&gt;ON-OFF&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Round Black&#34;}&#39;&gt;Round Black&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:11}&#39;&gt;11&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;(ON)-OFF-(ON)&#34;}&#39;&gt;(ON)-OFF-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Medium Red&#34;}&#39;&gt;Medium Red&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:4}&#39;&gt;4&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-OFF&#34;}&#39;&gt;ON-OFF&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Large Black Illuminated&#34;}&#39;&gt;Large Black Illuminated&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:4}&#39;&gt;4&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-ON&#34;}&#39;&gt;ON-ON&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:3}&#39;&gt;3&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Medium Red&#34;}&#39;&gt;Medium Red&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:11}&#39;&gt;11&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-ON&#34;}&#39;&gt;ON-ON&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Panel-mount Red&#34;}&#39;&gt;Panel-mount Red&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-ON&#34;}&#39;&gt;ON-ON&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Right-angle mount&#34;}&#39;&gt;Right-angle mount&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-ON&#34;}&#39;&gt;ON-ON&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Right Angle mount red&#34;}&#39;&gt;Right Angle mount red&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-OFF-ON&#34;}&#39;&gt;ON-OFF-ON&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Medium Blue&#34;}&#39;&gt;Medium Blue&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-OFF&#34;}&#39;&gt;ON-OFF&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Small Black&#34;}&#39;&gt;Small Black&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Rocker&#34;}&#39;&gt;Rocker&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-OFF-ON&#34;}&#39;&gt;ON-OFF-ON&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Large Red/Green Illuminated &#34;}&#39;&gt;Large Red/Green Illuminated&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:8}&#39;&gt;8&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Pushbutton&#34;}&#39;&gt;Pushbutton&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-(ON)&#34;}&#39;&gt;ON-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Right angle plunger&#34;}&#39;&gt;Right angle plunger&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:11}&#39;&gt;11&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Pushbutton&#34;}&#39;&gt;Pushbutton&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-(ON)&#34;}&#39;&gt;ON-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Spring-loaded plunger&#34;}&#39;&gt;Spring-loaded plunger&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:5}&#39;&gt;5&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Pushbutton&#34;}&#39;&gt;Pushbutton&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-(ON)&#34;}&#39;&gt;ON-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Small red/white plunger&#34;}&#39;&gt;Small red/white plunger&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Pushbutton&#34;}&#39;&gt;Pushbutton&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-(ON)&#34;}&#39;&gt;ON-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Small black plunger&#34;}&#39;&gt;Small black plunger&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Pushbutton&#34;}&#39;&gt;Pushbutton&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-(ON)&#34;}&#39;&gt;ON-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Small blue plunger&#34;}&#39;&gt;Small blue plunger&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Pushbutton&#34;}&#39;&gt;Pushbutton&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-(ON)&#34;}&#39;&gt;ON-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Tiny pushbutton&#34;}&#39;&gt;Tiny pushbutton&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Pushbutton&#34;}&#39;&gt;Pushbutton&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-(ON)&#34;}&#39;&gt;ON-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Panel mount square illuminated&#34;}&#39;&gt;Panel mount square illuminated&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Pushbutton&#34;}&#39;&gt;Pushbutton&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;OFF-(ON)&#34;}&#39;&gt;OFF-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Grey rectangle illuminated&#34;}&#39;&gt;Grey rectangle illuminated&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:3}&#39;&gt;3&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Slide&#34;}&#39;&gt;Slide&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-ON&#34;}&#39;&gt;ON-ON&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;115-230V Selector Switch&#34;}&#39;&gt;115-230V Selector Switch&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:5}&#39;&gt;5&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Slide&#34;}&#39;&gt;Slide&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-ON&#34;}&#39;&gt;ON-ON&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;250V-rated slide switch&#34;}&#39;&gt;250V-rated slide switch&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Slide&#34;}&#39;&gt;Slide&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-ON-ON&#34;}&#39;&gt;ON-ON-ON&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Small silver 3 position&#34;}&#39;&gt;Small silver 3 position&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:4}&#39;&gt;4&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Slide&#34;}&#39;&gt;Slide&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-ON&#34;}&#39;&gt;ON-ON&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Tiny slide switch&#34;}&#39;&gt;Tiny slide switch&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Slide&#34;}&#39;&gt;Slide&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-ON&#34;}&#39;&gt;ON-ON&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Square blue slide switch&#34;}&#39;&gt;Square blue slide switch&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:4}&#39;&gt;4&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Dipswitch&#34;}&#39;&gt;Dipswitch&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;OFF-ON&#34;}&#39;&gt;OFF-ON&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;2-Lever Red Dipswitch&#34;}&#39;&gt;2-Lever Red Dipswitch&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Dipswitch&#34;}&#39;&gt;Dipswitch&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;OFF-ON&#34;}&#39;&gt;OFF-ON&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;4-Lever Dipswitch&#34;}&#39;&gt;4-Lever Dipswitch&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Dipswitch&#34;}&#39;&gt;Dipswitch&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;OFF-ON&#34;}&#39;&gt;OFF-ON&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;5 Lever Dipswitch&#34;}&#39;&gt;5 Lever Dipswitch&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Microswtich&#34;}&#39;&gt;Microswitch&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;OFF-(ON)&#34;}&#39;&gt;OFF-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Microswitch w/ 4\&#34; tails&#34;}&#39;&gt;Microswitch w/ 4&#34; tails&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Microswtich&#34;}&#39;&gt;Microswitch&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;ON-(ON)&#34;}&#39;&gt;ON-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Black microswitch with trigger&#34;}&#39;&gt;Black microswitch with trigger&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:4}&#39;&gt;4&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Pushbutton&#34;}&#39;&gt;Pushbutton&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;OFF-(ON)&#34;}&#39;&gt;OFF-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Blue breakboard pushbutton&#34;}&#39;&gt;Blue breakboard pushbutton&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:4}&#39;&gt;4&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Pushbutton&#34;}&#39;&gt;Pushbutton&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;OFF-(ON)&#34;}&#39;&gt;OFF-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Illuminated breadboard pushbutton&#34;}&#39;&gt;Illuminated breadboard pushbutton&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:2}&#39;&gt;2&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Pushbutton&#34;}&#39;&gt;Pushbutton&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;OFF-(ON)&#34;}&#39;&gt;OFF-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Misc tiny pushbutton&#34;}&#39;&gt;Misc tiny pushbutton&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Keyboard Switch&#34;}&#39;&gt;Keyboard Switch&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;OFF-(ON)&#34;}&#39;&gt;OFF-(ON)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:1}&#39;&gt;1&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Large grey keyboard switch&#34;}&#39;&gt;Large grey keyboard switch&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:5}&#39;&gt;(5)&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Cap&#34;}&#39;&gt;Cap&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;Round black button cap&#34;}&#39;&gt;Round black button cap&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:3,&#34;3&#34;:150}&#39;&gt;150&lt;/td&gt;
&lt;td data-sheets-value=&#39;{&#34;1&#34;:2,&#34;2&#34;:&#34;TOTAL&#34;}&#39;&gt;TOTAL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/table&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>50W QRP Amplifier - 3D Printed Case Design and Livestream</title>
      <link>https://jeff.glass/post/50w-qrp-amplifier-3d-printed-case-design-and-livestream/</link>
      <pubDate>Tue, 28 Aug 2018 19:02:19 -0500</pubDate>
      
      <guid>https://jeff.glass/post/50w-qrp-amplifier-3d-printed-case-design-and-livestream/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;ol&gt;&lt;/ol&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With the 50W QRP amplifier project coming along nicely, I felt it was time to start thinking about a reproducible case for the project. And for custom, reproducible cases, 3D printing is my current tool of choice.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I ended up designing the case on a YouTube Livestream on Saturday night, to which a few great colleagues stopped by to ask questions and offer advice. The full video is below.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;{{&amp;lt; youtube kVQQyohYvAA &amp;gt;}}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The case is in two parts - a box with standoffs for the PCB and holes for connectors, and a lid with labels. The standoffs and the attachment holes for the lid are meant to connect with M3 threaded-inserts and be held down with M3 machine screws.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This was my first time using Fusion 360&#39;s Eagle Sync function - since Eagle PCB design software was acquired by AutoDesk in 2016, it makes sense that they&#39;ve been working to integrate PCB design workflows into their other products. The sync was fair straightforward - open Fusion360, select Eagle Sync, select your board file in Eagle, and after a minute or two of importing, up pops your PCB in Fusion360. Neat! I&#39;m still struggling with how to handle board cutouts in eagle, and I&#39;m not sure how well they&#39;ll be supported in Fusion, but that&#39;s a project for another day.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s the final design as it turned out in Fusion360:&lt;/p&gt;
&lt;img alt=&#34;amppic1&#34; class=&#34;size-full wp-image-3191 aligncenter post-img&#34; height=&#34;762&#34; src=&#34;amppic1.png&#34; width=&#34;1069&#34;/&gt;
&lt;img alt=&#34;ampic4&#34; class=&#34;size-full wp-image-3192 aligncenter post-img&#34; height=&#34;823&#34; src=&#34;ampic4-1.png&#34; width=&#34;554&#34;/&gt;&lt;img alt=&#34;amppic&#34; class=&#34;size-full wp-image-3190 aligncenter post-img&#34; height=&#34;756&#34; src=&#34;amppic.png&#34; width=&#34;1022&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;The PowerPole model was provided by Chris Wych, a theatrical propmaster who&#39;s done some really interesting work with Fusion360, including using it to model some 2d-printable geodesic designs which then folded up into geometric shapes. Very cool!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;First print of this design coming soon!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;73&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;This post is cross-posted to my ham-radio specific blog, &lt;a href=&#34;http://kk9jef.wordpress.com/&#34;&gt;kk9jef.wordpress.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>50W QRP Amplifier - Schematic, PCB Ver 1</title>
      <link>https://jeff.glass/post/50w-qrp-amplifier-schematic-pcb-ver-1/</link>
      <pubDate>Sat, 25 Aug 2018 20:56:47 -0500</pubDate>
      
      <guid>https://jeff.glass/post/50w-qrp-amplifier-schematic-pcb-ver-1/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;The 5W-to-50W QRP HF Amplifier project is rolling along nicely  - I received the first PCB draft in the male this week and am 90% of the way through assembling it, with only heatsink-placement left to sort out.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve made a couple of additions to the schematic since the original layout, including a relay-activated indicator (R27 and its LED) and an RF-output sensing LED (from C14 to its associated LED to ground) along the the lines of &lt;a href=&#34;https://www.youtube.com/watch?v=iQ8YADOWk9U&#34;&gt;VK3YE&#39;s recent project&lt;/a&gt;. There&#39;s also a space on the PCB now for a low pass filter with the same footprint as &lt;a href=&#34;https://www.qrp-labs.com/lpfkit.html&#34;&gt;Hans Summers&#39; LPFs over at QRP-Labs&lt;/a&gt;. Not that you&#39;d necessarily want to reuse a QRP LPF for a 50W amp, you&#39;d be in danger of putting too much voltage on the caps, but that would be a simple change.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s the schematic as it exists now:&lt;/p&gt;
&lt;img alt=&#34;qrp_amp_schematic_1-1&#34; class=&#34;alignnone size-full wp-image-3183 post-img&#34; height=&#34;2617&#34; src=&#34;qrp_amp_schematic_1-1.png&#34; width=&#34;4078&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And here&#39;s the current boards (layout, unpopulated, populated):&lt;/p&gt;
&lt;img alt=&#34;qrp_amp_board_1-1&#34; class=&#34;alignnone size-full wp-image-3184 post-img&#34; height=&#34;962&#34; src=&#34;qrp_amp_board_1-1.png&#34; width=&#34;1202&#34;/&gt;
&lt;img alt=&#34;FullSizeRender (1)&#34; class=&#34;alignnone size-full wp-image-3185 post-img&#34; height=&#34;1224&#34; src=&#34;fullsizerender-1.jpg&#34; width=&#34;1632&#34;/&gt;
&lt;img alt=&#34;IMG_5114&#34; class=&#34;alignnone size-full wp-image-3186 post-img&#34; height=&#34;1224&#34; src=&#34;img_5114-1.jpg&#34; width=&#34;1632&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve already got a little laundry list of things to modify for a second rev of this board, including, in no particular order:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Swap the Diode placements the vertical to preserve board space&lt;/li&gt;
&lt;li&gt;Add footprints for alternate relay packages&lt;/li&gt;
&lt;li&gt;Add footprints for alternate trim-pot packages&lt;/li&gt;
&lt;li&gt;Re-think component designators for clarity&lt;/li&gt;
&lt;li&gt;Add bypass jumpers for the 3dB input pad and the LPF.&lt;/li&gt;
&lt;li&gt;For some reason, the none of the component values printed on the silkscreen, will need to sort that out&lt;/li&gt;
&lt;li&gt;I&#39;m not sure if I screwed up how to designate a cutout or if JLCPCB doesn&#39;t do them for its bare-bones PCB service, but I&#39;d like not to do the next set with a drill press and a nibbler.&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Hoping to put this on the air soon for some signal tests. Hear you there!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;73&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;This post is cross-posted to my ham-radio specific blog, &lt;a href=&#34;http://kk9jef.wordpress.com/&#34;&gt;kk9jef.wordpress.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>50W QRP Amplifier – PCB Layout Video</title>
      <link>https://jeff.glass/post/50w-qrp-amplifier-pcb-layout-video/</link>
      <pubDate>Thu, 19 Jul 2018 18:27:21 -0500</pubDate>
      
      <guid>https://jeff.glass/post/50w-qrp-amplifier-pcb-layout-video/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;This past weekend, I started on the process of laying out the &lt;a href=&#34;https://jeff.glass/2018/07/14/50w-qrp-amplifier-first-demonstration/&#34;&gt;50W QRP Amplifier project&lt;/a&gt; as a PCB. Small PCBs can be remarkably inexpensive these days - $10-$15 for 5 pieces of say 4&#34;x4&#34;, shipped in 2-3 weeks. I&#39;m treating this amplifier project as a chance to experiment with different, similar FETs to learn about critical power MOSFET properties, and also as an opportunity to brush up my layout skills that I haven&#39;t used in awhile.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As the first step of PCB design, I captured the schematic of the amplifier as built in &lt;a href=&#34;https://www.autodesk.com/products/eagle/overview&#34;&gt;AutoDesk Eagle&lt;/a&gt;. I did this on a livestream on YouTube, the first time I&#39;ve tried such a thing. It was great fun! &lt;a href=&#34;http://blog.thelifeofkenneth.com&#34;&gt;Kenneth W6KWF&lt;/a&gt; stopped by to lend advice - he deals with prototype PCBs as part of his day job, though he has team members to do most of the actual layouts when needed. We&#39;ve had a great deal of fun over the years, including &lt;a href=&#34;https://www.youtube.com/watch?v=BS1XJ1OVwfs&#34;&gt;building a cloud chamber&lt;/a&gt; for seeing charged ions in high school.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s the full (2h45m!) livestream in all its glory! There&#39;s a &lt;a href=&#34;https://www.youtube.com/watch?v=2lymB7f_2LU&amp;amp;feature=youtu.be&amp;amp;t=2h40m59s&#34;&gt;recap and full-circuit overview at 2h41m&lt;/a&gt; for those who want to see the final circuit.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/2lymB7f_2LU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Hear you on the air!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;This post is cross-posted to my ham-radio specific blog, &lt;a href=&#34;http://kk9jef.wordpress.com/&#34;&gt;kk9jef.wordpress.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>50W QRP Amplifier - First Demonstration</title>
      <link>https://jeff.glass/post/50w-qrp-amplifier-first-demonstration/</link>
      <pubDate>Sat, 14 Jul 2018 05:47:50 -0500</pubDate>
      
      <guid>https://jeff.glass/post/50w-qrp-amplifier-first-demonstration/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;This post is cross-posted to my ham-radio specific blog, &lt;a href=&#34;http://kk9jef.wordpress.com/&#34;&gt;kk9jef.wordpress.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As I alluded to &lt;a href=&#34;https://jeff.glass/2018/07/09/a-portable-20-30-40m-vertical-antenna/&#34;&gt;last week&lt;/a&gt;, I&#39;ve been working on a simple &#34;QRP Amplifier&#34; to kick my power up from 5W to something a little more punchy. Specifically, an amp I can still use when portable. There&#39;s something wonderful about achieving a contact with only 5W, but there&#39;s also the frustration of getting into the field and having band conditions just wreck your day. It&#39;d be nice to have the power to crank up the juice for special occasions.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While I have awhile to go before this project is wrapped up with a bow and ready for field use, here&#39;s a brief video about my first successful test. 5W in, 50-60W out when run off two 13.8V sources in series:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/mIcHUApgFt8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;More technical details to come, but for now, I consider this a really successful validation of the idea! Like I say, a few more critical steps to come, including an input 50-ohm pad, a low pass filter, and a case, but this is enough of a proof of concept to move forward.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Hear you on the air!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;73&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>A Portable 20/30/40m Vertical Antenna</title>
      <link>https://jeff.glass/post/a-portable-20-30-40m-vertical-antenna/</link>
      <pubDate>Mon, 09 Jul 2018 03:22:35 -0500</pubDate>
      
      <guid>https://jeff.glass/post/a-portable-20-30-40m-vertical-antenna/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;This post is cross-posted to my ham-radio specific blog, &lt;a href=&#34;http://kk9jef.wordpress.com&#34;&gt;kk9jef.wordpress.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Following the Forth of July, I took a few days off of work to recuperate from a grueling work project that we pushed over the finish line on the third. And what better way to relax in the wake of a heatwave than getting out in the beautiful, low-70&#39;s weather and working on a new portable HF antenna.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;Pole.jpg&#34; class=&#34;wp-image-3170 aligncenter post-img&#34; height=&#34;467&#34; src=&#34;https://kk9jef.files.wordpress.com/2018/07/pole.jpg&#34; width=&#34;467&#34;/&gt;&lt;p class=&#34;post-img-caption&#34;&gt; From eBay listing[/caption]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The heart of the antenna is an inexpensive &#39;7.2m&#39; telescoping fishing pole, which can be had for &lt;a href=&#34;https://amzn.to/2KJeAMq&#34;&gt;less than $30 with Prime shipping&lt;/a&gt; or for &lt;a href=&#34;https://www.ebay.com/itm/Telescopic-Stream-Pole-Spinning-Freshwater-Fishing-Rod-Fiberglass-2-7m-7-2m/142089295648?ssPageName=STRK%3AMEBIDX%3AIT&amp;amp;var=441178774721&amp;amp;_trksid=p2060353.m2749.l2649&#34;&gt;less than $10 if you don&#39;t mind waiting&lt;/a&gt;. The pole weighs about 10 ounces, comes with a small fabric sheath, and collapses down to about 24&#34;. I&#39;ve been wanting to try out something like this since I stumbled across &lt;a href=&#34;https://www.youtube.com/watch?v=JlM8eQ6v2As&#34;&gt;VK3YE and his squid-pole setups&lt;/a&gt; awhile back - Peter&#39;s also featured &lt;a href=&#34;https://www.youtube.com/watch?v=dCXdCLpnju0&#34;&gt;these particular poles&lt;/a&gt; in another video. Be aware, a pole called &#34;7.2m&#34; may not actually be 7.2 meters from end to end: check the listings carefully:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;rod&#34; class=&#34;alignnone size-full wp-image-3157 post-img&#34; height=&#34;158&#34; src=&#34;https://kk9jef.files.wordpress.com/2018/07/rod.png&#34; width=&#34;595&#34;/&gt;&lt;/p&gt;&lt;p class=&#34;post-img-caption&#34;&gt; Note the difference between the &#34;stretch&#34; column and the &#34;specification&#34; column.[/caption]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The length of the pole is enough for a quarter-wave vertical for 20m with some room to spare on either end. To allow for multi-band operation, I added a &lt;a href=&#34;https://qrpguys.com/qrpguys-tri-band-portable-vertical-antenna&#34;&gt;QRPGuys Tri-Band Vertical&lt;/a&gt; accessory to the bottom of the antenna. The piece is essentially just two loading-coils (in this case, iron-powder toroids) with slide-switches to short them out. The 20m configuration is a true quarter-wave vertical; one of the toroids is switched in series for 30m, and both are placed in series for 40m. Ultimately, not a complicated setup. While it would be easy enough to homebrew, the ergonomics of the switches, the hardware to attach the antenna wire and radials, and the clever PCB setup are enough to make it worth the $15 to just buy the darn thing. It even has little notches on the edges of the PCB for straps/ties/rubberbands to attach it to the vertical.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;triband&#34; class=&#34;size-full wp-image-3163 aligncenter post-img&#34; height=&#34;600&#34; src=&#34;https://kk9jef.files.wordpress.com/2018/07/triband.jpg&#34; width=&#34;338&#34;/&gt;&lt;/p&gt;&lt;p class=&#34;post-img-caption&#34;&gt; From QRPGuys.com[/caption]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Tuning the antenna is straightforward: you cut a piece of wire (a bit long) for a 20m quarter-wave, and lay out four 10&#39; radials. Then, you bit-by-bit trim down the vertical element to resonate at the desired point in the 20m band. Then you switch in the 30m coil and compress/expand its turns &lt;em&gt;without changing the antenna length&lt;/em&gt; to resonate on 30m. Finally, switch in both coils and adjust the second coil to resonate on 40m &lt;em&gt;without changing either the antenna length or the first coil&lt;/em&gt;. Voila, a tri-band, base-loaded antenna.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Unfortunately, my antenna analyzer is old school, and doesn&#39;t have a frequency readout. It&#39;s an old &lt;a href=&#34;http://www.mfjenterprises.com/Product.php?productid=MFJ-207&#34;&gt;MFJ-207&lt;/a&gt; that I scooped up at the &lt;a href=&#34;https://kk9jef.wordpress.com/2016/06/21/six-meter-club-of-chicago-smcc-hamfest-2016/&#34;&gt;SMCC Hamfest in 2016&lt;/a&gt;, and while it does have a port to attach a portable frequency counter, I couldn&#39;t find my cheapie one on the day. But I do have a nice &lt;a href=&#34;https://www.radiomuseum.org/r/heath_digital_frequency_counte.html&#34;&gt;Heathkit IM-2420 Frequency Counter&lt;/a&gt; with an internal OXCO that I scored an amazing deal on at a hamfest last year (it had an intermittent power switch). So, I attached the MFJ to the antenna, tuned its analog VFO for lowest SWR, walked inside without touching the dail and hooked it up to the frequency counter to see where the center frequency was. Repeat for say the upper and lower 2:1 SWR ranges. Trim the antenna a little, and repeat measurements. Once 20m is tuned, repeat with adjusting the coils for 30m and 40m. A fairly cumbersome process, but for three frequency ranges on one antenna, it was a half-hour project at most.&lt;/p&gt;
&lt;img alt=&#34;IMG_4804&#34; class=&#34;wp-image-3161 aligncenter post-img&#34; height=&#34;645&#34; src=&#34;https://kk9jef.files.wordpress.com/2018/07/img_4804.jpg&#34; width=&#34;481&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;In the end, the antenna is less than 2:1 SWR across all of the 20m band, all of the 30m band, and all but the top 50 Khz of the 40m band.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve glossed over the mechanical details of the antenna to this point - the base of the telescoping pole fits snugly-yet-easily into the a piece of 1&#34; schedule-40 PVC pipe. I bought a 5&#39; section from the local big-box store and cut off a ~10&#34; section to hold the antenna. I strapped two ground-stakes that &lt;a href=&#34;https://kk9jef.wordpress.com/2018/05/24/dayton-hamvention-2018/&#34;&gt;I got at Hamvention this year&lt;/a&gt; to the bottom with a couple zip-ties and a couple rubber-bands. Finally,  I threaded a long 3/8&#34; eye-bolt though a matching hole about 2&#34; from the bottom of the pipe and secured it with a nut on either side - this acts as both a stop for the pole so it doesn&#39;t fall out the bottom, and provides an easy hand- or foot-hold for pressing the stakes into the ground.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;img_4840.jpg&#34; class=&#34;aligncenter size-full wp-image-3164 post-img&#34; height=&#34;477&#34; src=&#34;https://kk9jef.files.wordpress.com/2018/07/img_4840-e1531104071612.jpg?w=453&#34; width=&#34;453&#34;/&gt;&lt;/p&gt;&lt;p class=&#34;post-img-caption&#34;&gt; The finished antenna mount. It may be getting a coat of high-vis paint in the near future.[/caption]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The setup for the radials was something I stumbled across by chance while buying the PVC pipe. Our local big-box hardware store was having a sale on these &lt;a href=&#34;https://amzn.to/2KZXINI&#34;&gt;RECOIL Brand cable winders&lt;/a&gt; that are meant for headphones or charging cables or similar. I&#39;ve found that they can &lt;em&gt;almost&lt;/em&gt; hold four 10&#39;, 24-gauge speaker wire radials. This is solving the problem of wires-getting-tangled-in-a-bag that I&#39;ve had with all my antennas to date. Thank goodness!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;img_4842.jpg&#34; class=&#34;wp-image-3165 aligncenter post-img&#34; height=&#34;470&#34; src=&#34;https://kk9jef.files.wordpress.com/2018/07/img_4842-e1531104647814.jpg&#34; width=&#34;478&#34;/&gt;&lt;/p&gt;&lt;p class=&#34;post-img-caption&#34;&gt; A few loose ends are worth it for the assurance that the wires won&#39;t get tangled in transit.[/caption]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It takes about 6 minutes to setup or tear down the antenna:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;The stakes are driven into the ground with a firm foot.&lt;/li&gt;
&lt;li&gt;The telescoping pole is unwrapped and placed in the base&lt;/li&gt;
&lt;li&gt;The antenna wire is unwound from the QRPGuys winder and tied to the tip of the telescoping pole with a small bit of cotton-wrapped nylon line &lt;em&gt;(what we&#39;d call &lt;a href=&#34;https://amzn.to/2KZhfOk&#34;&gt;tie line&lt;/a&gt;).&lt;/em&gt; The top section the pole is very flimsy, so I add a second tie to the next-largest section.&lt;/li&gt;
&lt;li&gt;The pole is pushed up to full height, taking the antenna wire with it, which leaves the QRPGuys rig hanging about 2&#39; off the ground.&lt;/li&gt;
&lt;li&gt;The QRPGuys rig is tied to the pole with another bit of tieline.&lt;/li&gt;
&lt;li&gt;The radials are unstrung from their winder, pinched to the ground terminal on the QRPGuys rig, and spread out.&lt;/li&gt;
&lt;li&gt;Run coax to a nearby table/seat/rock.&lt;/li&gt;
&lt;li&gt;Set up radio, battery, key, antenna, and logbook.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;IMG_4810&#34; class=&#34;wp-image-3162 aligncenter post-img&#34; height=&#34;874&#34; src=&#34;https://kk9jef.files.wordpress.com/2018/07/img_4810.jpg&#34; width=&#34;651&#34;/&gt;&lt;/p&gt;&lt;p class=&#34;post-img-caption&#34;&gt; The antenna fully set up and freestanding.[/caption]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, my very first time away from home with the antenna... I forgot the radial wires. D&#39;oh! I was way out in the suburbs, too. I wasn&#39;t about to drive an hour home and an hour back for 4 bits of wire, so I first tried out the antenna with no radials (just the coax as a counterpoise). This worked alright - I picked up K2D in CT in the &lt;a href=&#34;http://13colonies.net/&#34;&gt;13 Colonies event&lt;/a&gt; on the second call (this at 5W QRP with the &lt;a href=&#34;https://www.eham.net/reviews/detail/8874&#34;&gt;ATS-4&lt;/a&gt;), but was having trouble with other contacts.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since I planned to swing by the local Fry&#39;s Electronics on this adventure, I decided to pause operating for a while and make that run. Mostly I was picking up parts for an amplifier project (more on that to come), but while I was there, I looked for solutions to my radial problem. I found a 10&#39; section of RJ11 phone cord with 4 wires for $1.69 - perfect! Back out in a new park, I stripped the wires out of their jacket, spread them on the ground, and tied them to the antenna&#39;s ground terminal. Instant radials!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;IMG_4814&#34; class=&#34;wp-image-3158 aligncenter post-img&#34; height=&#34;619&#34; src=&#34;https://kk9jef.files.wordpress.com/2018/07/img_4814.jpg&#34; width=&#34;461&#34;/&gt;&lt;/p&gt;&lt;p class=&#34;post-img-caption&#34;&gt; And such colorful radials too![/caption]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With the antenna back to spec, things really picked up - surely, being on 20m at sundown didn&#39;t hurt either. I scooped K2A (NY), K2B (VA), K2H (MA), K2L (SC), and K2M (PA), as well as the 13-cols bonus station WM3PEN in Philly. Many of these I got on the first or second call, though K2L was a real struggle. There was a very patient operator on the other end though.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;13cols&#34; class=&#34;alignnone size-full wp-image-3167 post-img&#34; height=&#34;214&#34; src=&#34;https://kk9jef.files.wordpress.com/2018/07/13cols.png&#34; width=&#34;1169&#34;/&gt;&lt;/p&gt;&lt;p class=&#34;post-img-caption&#34;&gt; The 13 Colonies special operating event runs each year for a week around the 4th of July in the US.[/caption]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I picked up a couple of other interesting stations along the way: PJ2/KB7Q out of Curacao (&lt;em&gt;though the license gives away that he&#39;s either an ex-pat or visiting)&lt;/em&gt;, and CQ918FWC from Madeira Island (!) off the coast of Portugal. There were a number of these World Cup special stations on the bands this week as we close in on the finals. At 3800+ miles away, this was my best DX of the day, and a great proof of concept for the new antenna.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;ord fnc&#34; class=&#34;alignnone size-full wp-image-3168 post-img&#34; height=&#34;351&#34; src=&#34;https://kk9jef.files.wordpress.com/2018/07/ord-fnc.png&#34; width=&#34;718&#34;/&gt;&lt;/p&gt;&lt;p class=&#34;post-img-caption&#34;&gt; At QRP wattage ,this 3800 mile contact was made at 760 miles/watt.[/caption]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Hear you on the air!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;73&lt;/p&gt;
&lt;/img&gt;&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Geared 7-Segment Display, Part 4 - Pinion Gears and First Rotation</title>
      <link>https://jeff.glass/post/geared-7-segment-display-part-4-pinion-gears-and-first-rotation/</link>
      <pubDate>Wed, 30 May 2018 04:23:08 -0500</pubDate>
      
      <guid>https://jeff.glass/post/geared-7-segment-display-part-4-pinion-gears-and-first-rotation/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;This weekend I&#39;ve added the pinion gears to the seven-segment display, and performed the first test rotation of the mechanism.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As &lt;a href=&#34;https://jeff.glass/2018/04/17/7-segment-display-via-gears-part-1/&#34;&gt;previous noted&lt;/a&gt;, the arm gears are 6-tooth gears of module 4 (metric) - in clockmaking terms, these would be pinions. In the clockmaking world, where I&#39;ve been doing quite a bit of research during this project, there doesn&#39;t seem to be a hard dividing line between what&#39;s considered a &#34;gear&#34; and what&#39;s considered a &#34;pinion,&#34; except that gears are big and pinions are small. Fair enough. From this point forward I&#39;ll be referring to the arm gears as arm pinions.&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-227 post-img&#34; height=&#34;540&#34; src=&#34;IMG_4687-1024x768.jpg&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;I printed 6 of the pinions in just over an hour, and fitted them to their axles, which are just hacked-off pieces of 1/8&#34; rod stock from the hardware store. With the tolerancing on the prints as it is, the pinions are a snug fit on the axles, so I&#39;m not too concerned about slippage once I can get the whole thing turning smoothly.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Right now, the biggest impediment seems to be that the frame lacks rigidity, and easy warps and slews far enough to drive the arm pinions out of mesh with the drive gears. I&#39;m currently working on a two-part version of the frame with interlocking members that firmly affixes both halves on the frame so that they remain rigid and parallel.&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-228 post-img&#34; height=&#34;560&#34; src=&#34;StiffFrame.png&#34; width=&#34;924&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;d assumed when I started this project that the axles (arbors) would need to be made of metal rod or dowel stock, so that they were firm, perfectly round, and rigid. But this being a 3d printing project, I&#39;m now experimenting with a fully3D printed arbor-and-arm-pinion assemblies. These have the advantage that there&#39;s no need to manually locate the pinion on the arbor by sliding the arm pinons up and down the arbors - they&#39;re all one piece. As a sample, I printed a C-Arm assembly in two different orientations, both vertically and horizontally:&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-226 post-img&#34; height=&#34;540&#34; src=&#34;IMG_4688-1024x768.jpg&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;The vertically-printed arbor and pinion came out much better - the axle on the horizontally-printed unit is limited in smoothness by the layer height of the print, while on the vertical print it&#39;s limited by the X and Y resolution of the printer. Additionally, while there is significantly more support plastic on the vertically printed unit, it&#39;s not touching any of the working surfaces of the pinion itself, making the post-processing and filing significantly simpler. Both seemed to rotate well in the axle holes, however; well enough that I plan to work up a full set of these and test them in the next version of the frame. That means the only non-3D printed part in the project would be the main axle, and possibly the &lt;a href=&#34;https://jeff.glass/2018/04/29/geared-7-segment-display-part-2-more-gears/&#34;&gt;G-Arm tubing&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Next steps are printing the stiffer frame and the pinion/arbor assemblies.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Dayton Hamvention 2018</title>
      <link>https://jeff.glass/post/dayton-hamvention-2018/</link>
      <pubDate>Thu, 24 May 2018 03:01:32 -0500</pubDate>
      
      <guid>https://jeff.glass/post/dayton-hamvention-2018/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;This post is cross-posted to my ham radio-specific blog, &lt;a href=&#34;http://kk9jef.wordpress.com&#34;&gt;kk9jef.wordpress.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While I&#39;m still exhausted from the travel and the good times, I wanted to put up a little note from this year&#39;s Hamvention, the largest annual gathering of &lt;a href=&#34;https://en.wikipedia.org/wiki/Amateur_radio&#34;&gt;ham radio&lt;/a&gt; operators in North America. I only decided a week ago that I was going - I left Friday after work, drove 5 hours to Dayton OH (well, Xenia), and crashed at a hotel. Up bright and early, spent the day at the convention and checked out some local beer and grub in Dayton. Sunday, caught an early breakfest with some friends new and old, then got on the road back to Chicago. What a ride!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Others are doing fuller summaries of the convention - SWL-ing post always does a photo wrap-up of both the &lt;a href=&#34;https://swling.com/blog/2018/05/2018-hamvention-photos-inside-exhibits/&#34;&gt;indoor&lt;/a&gt; and &lt;a href=&#34;https://swling.com/blog/2018/05/2018-hamvention-photos-friday-flea-market/&#34;&gt;outdoor&lt;/a&gt; experience, and the &lt;a href=&#34;http://hamradioworkbench.com/hrwb050-live-from-hamvention-2018&#34;&gt;Ham Radio Workbench podcast from the event&lt;/a&gt; is now up.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Hamvention is a great place for meeting the hams you&#39;ve yet to meet, and seeing again those you already know. I spent most of Saturday hanging out with the &lt;a href=&#34;http://www.hamradioworkbench.com/&#34;&gt;Workbench&lt;/a&gt; crew, but I also ran into hams that I knew from elsewhere. Plus this guy, who falls into both categories:&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;wp-image-208 size-medium aligncenter post-img&#34; height=&#34;300&#34; src=&#34;IMG_4543-e1526958444956-225x300.jpg&#34; width=&#34;225&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s wild that 15 years after I accidentally introduced the future &lt;a href=&#34;http://blog.thelifeofkenneth.com/&#34;&gt;W6KWF&lt;/a&gt; to ham radio we hung out together at giant swapmeet in the middle of Ohio. Totally wild.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The flea market was certainly the biggest radio swapmeet I&#39;ve ever been to - it&#39;s probably bigger than that &lt;a href=&#34;https://www.deanza.edu/fleamarket/&#34;&gt;De Anza flea market&lt;/a&gt; by a good 300% - but it wasn&#39;t all that special. I would say there was the usual assortment of used radios, test year, bits and parts, old tools... nothing super intriguing. Of course, I did get there on Saturday, so perhaps all the interesting things were just scooped on Friday.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It was neat to see a lot of the vendor products in person that I&#39;d only heard about, but since I wasn&#39;t in the market for anything in particular, I didn&#39;t linger too long at any of the booths. Except Elecraft - those are some very, very attractive radios. I chatted with &lt;a href=&#34;http://www.elecraft.com/about_elecraft.htm&#34;&gt;Wayne N6KR&lt;/a&gt; (one of Elecraft&#39;s founders) for about 15 minutes about the KX2 and its SDR structure, which, not to be a fanboy, was pretty exciting.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In the end, I don&#39;t know if I would go back the very next year - it was a really neat experience, and I&#39;d go to see the people, but in this age of eBay, Amazon, and vendor websites, seeing everything in person and picking through the fleamarket feel just a little bit like a relic of the days when everything had to be done in person.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That said, I did find a few treasures... here&#39;s this year&#39;s haul:&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-213 post-img&#34; height=&#34;540&#34; src=&#34;IMG_4660-1024x768.jpg&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;Roughly from left to right:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Some panel-mount SMA connectors&lt;/li&gt;
&lt;li&gt;An old automatic shutter trigger/timer&lt;/li&gt;
&lt;li&gt;A tube of TFM-2LH Level 10 2Mhz-1000Mhz mixers from Minicircuits ($15 for 20, a steal!)&lt;/li&gt;
&lt;li&gt;Six interesting potentiometers (dual with concentric controls or dual with concentric switch)&lt;/li&gt;
&lt;li&gt;A bag of assorted HF/VHF H49 Crystals&lt;/li&gt;
&lt;li&gt;An old Collins 250Khz crystal filter&lt;/li&gt;
&lt;li&gt;A ZUMspot DMR hotspot/raspberry pi kit&lt;/li&gt;
&lt;li&gt;A pair of QRP-Labs filters, both a low-pass and a bandpass filter for 40 meters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Sometimes, you get back from a big trip or conference or meetup thinking &lt;em&gt;Boy, am I worn out, I don&#39;t need to do any more of that thing for awhile.&lt;/em&gt; This time, I came how itching to get back to work, revive some projects that had been dormant for awhile, and make things. So for that, at least, Hamvention 2018 was worth it.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Geared 7-Segment Display, Part 3 - Drive Gear Interlocks</title>
      <link>https://jeff.glass/post/geared-7-segment-display-part-3-drive-gear-interlocks/</link>
      <pubDate>Mon, 14 May 2018 01:10:14 -0500</pubDate>
      
      <guid>https://jeff.glass/post/geared-7-segment-display-part-3-drive-gear-interlocks/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;The heart of the seven segment display is the seven drive gears with select teeth, which share a common shaft and all rotate together. As I was developing the idea of the drive gears and conceiving of how the presence/lack of teeth could &#34;signal&#34; the arm gears to turn or not, I though of them as plain, 2-dimensional shapes. I had planned on spacing them out along their common shaft using 3D printed washers of a set thickness. As for aligning them at the appropriate relative rotation, I thought I might print a jig (some kind of tall &lt;a href=&#34;https://khkgears.net/new/internal_gears.html&#34;&gt;internal gear&lt;/a&gt;) to hold all the drive gears in the right relationship. Then I would either affix the gears and washers with superglue, or drill an alignment hole through all 7 gears and insert a small alignment rod to maintain their orientation.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here are the first three drive gears (A, B, C) with a 2mm-tall washer between each. Looking good!&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-197 size-large post-img&#34; height=&#34;540&#34; src=&#34;IMG_4420-1024x768.jpg&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;But this is thinking like someone who only has access to subtraction manufacturing. Why carve out a hole and insert new material when we could print the holes and alignment rods as part of the gear themselves?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I took another pass through all the drive gears, and added two 3mm wide, 7mm long &#34;pegs&#34; to the front side of each one (except gear A, the front gear). I also carved out a matching &#34;slot&#34; in each gear to receive the pegs behind it, with 0.3mm of clearance in all dimensions. (0.3 is my standard clearance value when I want two mechanical parts to fit together with no problem at all - your experience may vary.) Additionally, I extruded the center portion of the gear an extra 3mm upward to eliminate the need for the spacing washers I&#39;d previously planned on.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s the new E gear as an example:&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-200 post-img&#34; height=&#34;189&#34; src=&#34;EGear_topbottom-1024x269.png&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;You can see the two protruding rectangular &#34;pegs&#34; on the top that fit into the D gear, and the two similar slots on the bottom that receives the pegs of the F gear.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, here&#39;s what all 7 interlocking gears look like on an axle:&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-198 post-img&#34; height=&#34;540&#34; src=&#34;IMG_4440-1024x768.jpg&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;I whipped up a couple of minimalist end-frames to hold the drive axle and the axles for the arm gears - with both front and back in place, the mechanism is starting to take shape:&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-199 post-img&#34; height=&#34;540&#34; src=&#34;IMG_4443-1024x768.jpg&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;These endframes are a good example of something I&#39;ve noticed with mechanical objects and additive manufacturing - there are huge time paybacks for small investments in drafting time. I&#39;d first conceived of these end-frames and simple, 2mm thick rectangles with 7 holes in them. Cura estimated that each of those plates would take around seven and a half hours to print. Oof! There goes the weekend. But another 15 minutes of casually cutting things away in Fusion360 and the resulting frame took about two hours and 45 minutes. That&#39;s ten hours of printing time saved with a quarter hour of drafting, a massive return on time invested.&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-201 post-img&#34; height=&#34;206&#34; src=&#34;TimeComparison-1024x293.png&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;Next step will be to re-print the pinion arm gears with appropriate axle holes, and then test fit the gears together. Here goes nothing.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Geared 7-Segment Display - Part 2, More Gears</title>
      <link>https://jeff.glass/post/geared-7-segment-display-part-2-more-gears/</link>
      <pubDate>Sun, 29 Apr 2018 12:51:32 -0500</pubDate>
      
      <guid>https://jeff.glass/post/geared-7-segment-display-part-2-more-gears/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;While time at home is scarce this week, I&#39;ve stolen a couple moments late night to continue working on the design of the geared &lt;a href=&#34;https://jeff.glass/2018/04/17/7-segment-display-via-gears-part-1/&#34;&gt;7-segment display&lt;/a&gt;, including finishing the modelling of the 7 drive gears.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Each drive gear is based on a 30-tooth, &lt;a href=&#34;https://en.wikipedia.org/wiki/Involute_gear&#34;&gt;involute gear&lt;/a&gt; of module 4. Each segment of 3 adjacent teeth represents a single transition of a segment (or lack there of) - if there are teeth in a segment, the associated arm gear will rotate, changing a segment from active to inactive for a given transition or vice versa.&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-184 size-medium post-img&#34; height=&#34;300&#34; src=&#34;gSnip-263x300.png&#34; width=&#34;263&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;As a side note, each gear has a even number of teeth remaining, and each segment makes an even number of transitions as the display makes a full cycle of ten digits. If a segment made an odd number of transitions, it would start the next &#34;cycle&#34; in a different state than on the previous cycle, causing the numbers to &#34;look&#34; different on each time a given number came up, which is clearly wrong. This served as a useful sanity check as I was working through each gear in turn.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here is the mechanism in its current Fusion360 form (support plates, arms and mounts, and a drive mechanism yet to come):&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-182 post-img&#34; height=&#34;450&#34; src=&#34;gearGif3.gif&#34; width=&#34;600&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The A, D, and G arm gears lie on the vertical axis of the mechanism. The A and G arm gears, as noted in my previous post, are currently intended to be co-axial, the shaft of the A segment being a small hollow tube which completely surrounds the shaft of the G segment. Of all the details in this mechanism, this one seems the most fiddly at the moment, since any tolerance issues are going to compound on each other.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The B, C, E, and F arm gears lie at ±50&lt;b&gt;° &lt;/b&gt;from the vertical axis, which is just about as close to the vertical axis as they can be and still have their arms clear the axes of the A/D/G segments.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In contrast to what I said a the end of my last post, I&#39;m thinking I&#39;ll print each of the gears individually and then mount them on the center axle with spacer washers. The whole-gear-assembly-as-barrel has one fatal flaw: printability. That&#39;s a lot of overhanging teeth to worry about. That said, the print-individual-gears approach means needing to worry about registering adjacent gears to each other, but that seems like a solvable problem.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Looking down the road, here&#39;s a quick Vectorworks sketch of how close adjacent digit displays could be. It seems I could squeeze them to about 175mm (~7 inch) centers.&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-179 post-img&#34; height=&#34;342&#34; src=&#34;adjacent-displays-1024x487.png&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Currently, the plan is to build one digit and evaluate... but the only thing better than N mechanisms is N+1 mechanisms...&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Geared 7-Segment Display - Part 1</title>
      <link>https://jeff.glass/post/geared-7-segment-display-part-1/</link>
      <pubDate>Tue, 17 Apr 2018 04:30:40 -0500</pubDate>
      
      <guid>https://jeff.glass/post/geared-7-segment-display-part-1/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Over the weekend, I got started on a project I’ve been musing about for a few months – making a mechanical 7-segment display, using gears to move individual segments in and out of the display area via rotation of a central shaft or belt.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The inspiration for this idea is undoubtedly Arthur Ganson’s mechanical sculpture &lt;a href=&#34;https://www.youtube.com/watch?v=pVnucmsKX8E&#34;&gt;&lt;em&gt;Gary’s Yellow Chair&lt;/em&gt;&lt;/a&gt; at the MIT Museum in Cambridge, video of which periodically makes the rounds on Reddit. In it, a bicycle-chain drive six separate sprockets, each of which moves a long rod to which is connected one sixth of a chair. Each time the sprockets make a full rotation, their connected arms point toward a central point and the fragments of the chair briefly assemble into a whole (if tiny) yellow chair. Then the pieces split apart again, sent on another rotation by the action of the driving chain.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;{{&amp;lt; youtube pVnucmsKX8E &amp;gt;}}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In this vein, my goal is to create a series of seven moving arms, each with a segment of a 7-segment display on it. A central shaft will drift seven attached gears, each with teeth placed and left out at specific intervals. These seven drive gears will turn seven arm gears, which in turn attach via shafts to long, thin (metal?) arms at the front of the device. The spacing of the teeth on the drive gears will ensure that each of the arm gears turns at the appropriate time to move the segments in and out of the display area. Each time the arm gear needs to move an arm in or out of the way, the drive gear will cause its paired arm gear&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here is a quick drafting of how I currently think this project will be laid out. The grey circles indicate the base circle of each gear, while the concentric circles are the pitch and addendum (i.e. maximum extent) circles.  The green segments indicate when a given physical segment is in its &#34;displayed&#34; position, while blue indicates where that segment will be when &#34;not displayed&#34;. The dotted lines around each segment indicate its travel, and are useful that none of the arms sweep through another segment&#39;s shaft. In section, you can see that the segments are going to be situated on 3 different front-to-back planes to avoid collisions between arms and shafts. You can also see the concentric relationship between the top segment and the center segment.&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;size-large wp-image-146 aligncenter post-img&#34; height=&#34;480&#34; src=&#34;Plan-and-Section-4_14-1024x682.png&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;It turns out, fitting 7 arm gears around what is essentially one central drive gear shaft is tricky, especially to do so in such a way that none of the arms contact each others’ shafts as they rotate. To accommodate this, I currently have the top segment operated with a hollow shaft, and the shaft for the center segment runs &lt;em&gt;through&lt;/em&gt; this hollow shaft to protrude out the top. We’ll see how that goes.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here is a quick sketch of the digits on a typical 7-segment display as it moves through the digits 0 through 9. The small red marks in between each digital denote which segments change between digits.&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-148 post-img&#34; height=&#34;540&#34; src=&#34;IMG_4391-1024x768.jpg&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;Which leads us to the following chart of which segments need to move between which digits.  Note that the horizontal axis is for “moving to this digit,” so that an X in the “7” column, for example, means that that segment needs to change when moving from a 6 to a 7.&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-149 post-img&#34; height=&#34;540&#34; src=&#34;IMG_4393-1024x768.jpg&#34; width=&#34;720&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;After some preliminary work in Fusion360, I did a couple preliminary test prints, both of one of the “30-tooth” drive gears and some of the 6-tooth pinion gears.  (Since the total number of possible necessary transitions is 10, and each transition only needs to turn the arm gears ½ a rotation, the arm gears have 1/5 as many teeth as the drive gears.) You can also see one of the 2mm spacer washes I whipped up, which I think will be unnecessary (see below).&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-150 size-full post-img&#34; height=&#34;480&#34; src=&#34;IMG_4397-e1523939065809.jpg&#34; width=&#34;640&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;With the slight creep and elephant’s-foot that my printer makes, I think I will need to depth these a little further apart than the idealized spacing – even when the teeth are not engaged, the tips of the pinon teeth drag a bit on the drive gear. Even another .2 or .4 millimeters would help here.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It occurs to me at this point that there’s no reason for the central gears to all be separate assemblies and prints – they’re all meant to rotate in lockstep, so there’s no reason not to print them as one large barrel with protruding teeth at 7 depths. That will be a necessary future improvement. Of course, the supports, axel holes, and whatever I’m doing for that hollow shaft are also future problems to be solved.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>3D Printing on Fabric - Dragon Scales</title>
      <link>https://jeff.glass/post/3d-printing-on-fabric-dragon-scales/</link>
      <pubDate>Mon, 09 Apr 2018 17:12:01 -0500</pubDate>
      
      <guid>https://jeff.glass/post/3d-printing-on-fabric-dragon-scales/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt; &lt;p class=&#34;post-p&#34;&gt;In our upcoming production of Macbeth at work, one of the many spooky ingredients that the Three Witches drop into their wondrous cauldron is &#34;scale of dragon.&#34; To that end, I&#39;m helping our props department out by printing some &lt;a href=&#34;https://www.thingiverse.com/thing:2755451&#34;&gt;dragon scales&lt;/a&gt; onto some toule. The design is essentially some raised, horned scales repeated in a hexagonal pattern.&lt;/p&gt;&lt;/p&gt;
&lt;img src=&#34;Scalesrender.png&#34; alt=&#34;A 3D-rendered image of some dragon scales&#34; class=&#34;w-auto md:w-1/2 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;p class=&#34;post-p&#34;&gt;The print is in &lt;a href=&#34;https://amzn.to/2JiNuYg&#34;&gt;silver eSUN PLA+&lt;/a&gt;, which strikes a nice balance between the darker, dull tone of most grey filaments, and the super shiny &#34;metallic&#34; filaments. eSUN PLA+ has become my defacto standard in the past couple months, after I used 4kg or so to complete a project printing portable &lt;/p&gt;&lt;/p&gt;
&lt;img src=&#34;silver.png&#34; alt=&#34;&#34; class=&#34;w-auto md:w-1/2 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;p class=&#34;post-p&#34;&gt;So far, I&#39;ve had three failed prints with this file and technique. The first was my own fault: after pausing the print between the second and third layers to insert to toule, I hit &#34;Stop Print&#34; instead of &#34;Resume Print.&#34; Arg. The second and third failures, though, are a mystery. They appear to have stopped extruding following printing the bottom layers before starting on the infill and walls. I don&#39;t know why exactly this happened, as I started both prints late at night after work before heading to bed. But both times, I came out in the morning to find the print head at the final Z height I would have expected had the print completed... but with only a small bottom layer of rectangles trapping the fabric.&lt;/p&gt;&lt;/p&gt;
&lt;img src=&#34;firstprint.jpg&#34; alt=&#34;&#34; class=&#34;w-auto md:w-1/2 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m currently printing the pattern again, re-sliced. Here&#39;s hoping!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;Update after printing:&lt;/strong&gt; close, but no cigar.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Re-slicing the file alleviated the &#34;no extrusion after the bottom layers&#34; problem, so I can only assume it was some odd setting in Cura that was to blame. I&#39;d been trying out a &#34;pause at given height&#34; plug-in script, but a little more googling has lead to believe that this not usable in its current form with the Duplicator i3. Perhaps that was the cause.&lt;/p&gt;
&lt;img src=&#34;shift.jpg&#34; alt=&#34;&#34; class=&#34;w-auto md:w-1/2 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;This time, the error was my fault. It seems that one of the binder clips holding the toule to the heated bed was contacting the frame of the printer at one end of its Y travel. This only turned out to be an issue for the top %30 of the print, when the tip of the &#34;frontmost&#34; scale leaned far enough in the Y+ direction to cause the binder clip to contact the frame. Thus, everything above this level shows layer-shifts every two or three layers as the clip hits the frame and causes the y-stepper to skip a step.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Back again later with smaller binder clips!&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Designing 3-Way Initial Blocks [Video]</title>
      <link>https://jeff.glass/post/designing-3-way-initial-blocks-video/</link>
      <pubDate>Sun, 01 Apr 2018 21:30:26 -0500</pubDate>
      
      <guid>https://jeff.glass/post/designing-3-way-initial-blocks-video/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;In my experiments  with Fusion360 recently and casting around for inspiration, I stumbled across my old copy of &lt;a href=&#34;https://amzn.to/2EbvrQ9&#34;&gt;Godel, Escher, Bach: An Eternal Golden Braid&lt;/a&gt;, which has a curious cover design consisting of two objects that cast shadows of three different letters along three different axes. In the following video, I look at the process of designing one of these shapes with arbitrary letters for 3D printing.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/Cpqct64_EBQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Faceted Lampshade from Clear PLA</title>
      <link>https://jeff.glass/post/faceted-lampshade-from-clear-pla/</link>
      <pubDate>Sun, 01 Apr 2018 20:48:10 -0500</pubDate>
      
      <guid>https://jeff.glass/post/faceted-lampshade-from-clear-pla/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I&#39;ve had a clear, &#34;low poly&#34; angular sculpture in clear PLA sitting on my self for awhile now. Earlier this week, I turned it into a lamp shade.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I built the original model in Blender along the lines of &lt;a href=&#34;https://www.youtube.com/watch?v=8IwJDfT-H6o&#34;&gt;this video from Maker&#39;s Muse&lt;/a&gt;. The gist of the process is:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Start with a basic solid, like a sphere or a cube.&lt;/li&gt;
&lt;li&gt;Decimate the solid (reduce the number of triangles that make up the shape) to a very very low level, perhaps down to 20 or 30 polygons.&lt;/li&gt;
&lt;li&gt;Stretch and place the vertices of this blocky solid until satisfied.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;In this case, I had ideas about turning this shape into a lighting table topper, with an Arduino and LEDs underneath the open base. But other projects popped up, and this open-base blocky pyramid has sat dormant for several months. This week, I finally found a use.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In my living room, I have a tall two-socket light fixture standing in the corner. One socket stands at the top of the lamp, with a broad frosted dish shade, and there&#39;s a small flexible arm coming off the side of the lamp which lost its shade long ago. My partner and I both enjoy using this flexible arm as a re-positionable reading lamp, but that lack of a shade means it&#39;s been pretty glare-y.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;By trimming the top off of the clear pyramid, I converted the Agrocrag into a lampshade.&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;wp-image-85 aligncenter post-img&#34; height=&#34;327&#34; src=&#34;IMG_43691-300x225.jpg&#34; width=&#34;436&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;The shade is trapped in place by the bulb itself. Of course, an LED bulb is a must, since the heat of an incandescent (or even CFL) light bulb will melt or deform the shade.&lt;/p&gt;
&lt;img alt=&#34;&#34; class=&#34;wp-image-84 aligncenter post-img&#34; height=&#34;401&#34; src=&#34;IMG_43711-300x225.jpg&#34; width=&#34;534&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;Just a little project-reuse for the home!&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Hello, World! Again!</title>
      <link>https://jeff.glass/post/hello-world-again/</link>
      <pubDate>Fri, 02 Mar 2018 00:42:17 -0500</pubDate>
      
      <guid>https://jeff.glass/post/hello-world-again/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I must have started half a dozen blogs in my life. I still maintain a separate one for Ham Radio at &lt;a href=&#34;http://kk9jef.wordpress.com&#34;&gt;KK9JEF.wordpress.com&lt;/a&gt;. I&#39;ll have to see about transferring those posts to this site.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So why another new blog? Two reasons:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;My blog at &lt;a href=&#34;http://kk9jef.wordpress.com&#34;&gt;KK9JEF.wordpress.com&lt;/a&gt; was specifically for my Ham Radio projects and learnings. As my hobbies expand into other areas, I thought it might finally be time to have a general-purpose personal hobbyist blog.&lt;/li&gt;
&lt;li&gt;I&#39;ve always struggled to find the balance between blog posts that catalog a completed project in whole. For example, my entire K3NG Morse-Code Keyer Project was wrapped into one big post, but I split up my Beach 40 Build into multiple small sections. Neither is perfect - the &#34;blog as you build&#34; method leaves a somewhat scattered trail for those who come after and want to replicate what you did (which is sometimes you in the future), but the &#34;wait until it&#39;s done&#34; method means a lot of the process is undocumented.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;To that end, this new site has both &lt;a href=&#34;https://jeff.glass/blog/&#34;&gt;BLOG&lt;/a&gt; and &lt;a href=&#34;https://jeff.glass/projects/&#34;&gt;PROJECTS&lt;/a&gt; sections - the blog can be for more single-shot observations, and the projects subpages can contain coherent descriptions of where a particular build or project is at.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s worth a shot!&lt;/p&gt;
</description>
      &lt;
    </item>
    
  </channel>
</rss>