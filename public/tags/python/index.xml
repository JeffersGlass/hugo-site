<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Jeff Glass</title>
    <link>https://jeff.glass/tags/python/</link>
    <description>Recent content in python on Jeff Glass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 May 2022 07:36:11 -0500</lastBuildDate><atom:link href="https://jeff.glass/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pyscript Intro</title>
      <link>https://jeff.glass/post/pyscript-intro/</link>
      <pubDate>Mon, 02 May 2022 07:36:11 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-intro/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Installation is simple, as noted on the &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;Github repository&lt;/a&gt;: clone the repo, cd into the pyscriptjs folder, run &lt;code class=&#34;code&#34;&gt;npm install&lt;/code&gt; and you&#39;re good to go. &lt;code class=&#34;code&#34;&gt;npm run dev&lt;/code&gt; starts a live server for playing with code or examples. You can also just include Pyscript via CDN.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Looking at the core part of the hello_world example shows us a few things:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;hello_world.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    Hello world! &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt;&amp;gt;
    This is the current date and time, as computed by Python:
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;py-script&lt;/span&gt;&amp;gt;
from datetime import datetime
now = datetime.now()
now.strftime(&amp;#34;%m/%d/%Y, %H:%M:%S&amp;#34;)
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;py-script&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;firstoutput.PNG&#34; alt=&#34;A screenshot of the pyscript Hello World app, with generated HTML source code clipped from the inspector&#34; class=&#34;mb-4 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems that, REPL-like, the raw string output of... the final line? Is printed to the sceen. In our case,  inside a div with what looks like a UUID:&lt;/p&gt;

&lt;img src=&#34;firsthtml.PNG&#34; alt=&#34;A screenshot of the pyscript Hello World app, with generated HTML source code clipped from the inspector&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems that this is only true for raw, literal values. That is, adding &lt;code class=&#34;code&#34;&gt;test_name = &#34;test&#34;&lt;/code&gt; to the end of the py-script tag means that nothing is output, but just adding &lt;code class=&#34;code&#34;&gt;&#34;test&#34;&lt;/code&gt; prints &lt;span class=&#34;italic&#34;&gt;test&lt;/span&gt; to the screen.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;&amp;lt;py-script&amp;gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; datetime &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime
now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()
now&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%m/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/%Y, %H:%M:%S&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;testoutput.PNG&#34; alt=&#34;&#34; class=&#34;my-4 post-img&#34;&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s look at a slightly more complicated example with the simple clock:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;&amp;lt;py-script&amp;gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-mono&amp;#34;&lt;/span&gt;&amp;gt;start time: 
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outputDiv&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outputDiv2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-mono&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outputDiv3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-mono&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outputDiv&amp;#34;&lt;/span&gt;&amp;gt;
import utils
utils.now()
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; utils &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; now
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; asyncio

&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;():
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; now()
    pyscript&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outputDiv2&amp;#34;&lt;/span&gt;, output)
    
    out3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Element(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outputDiv3&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; output[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt;]:
      out3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It&amp;#39;s espresso time!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
      out3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clear()

pyscript&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run_until_complete(foo())&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;py-script&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;simple_clock_output.gif&#34; alt=&#34;&#34; class=&#34;my-4 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;What&#39;s going on here? Well, the static text that is the start time of the program comes from the first py-script tag, again using that &#34;final value is exported as a string&#34; thing we saw before. The second py-script takes care of of the constatntly updating time, as well as printing &#34;It&#39;s espresso time!&#34; if the final character in the datetime string is a 0, 4, or 8. We&#39;re using &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep&#34;&gt;asynchio.sleep&lt;/a&gt; to handle the timing&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Out of curiousity, I replaced &lt;code class=&#34;code&#34;&gt;await asyncio.sleep(1)&lt;/code&gt; with &lt;code class=&#34;code&#34;&gt;import time&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;time.sleep(1)&lt;/code&gt;, and not only does the program not wake up after 1 second to continue running, the entire chrome tab is frozen. I can&#39;t even right-click to inspect/view source. And if I try to close it or rfresh the page, I get a &#34;page not responsive&#34; error and the option to kill the process. So time.sleep, it seems, is right out.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Other things I&#39;m noticing - the &lt;code class=&#34;code&#34;&gt;pyscript.write&lt;/code&gt; function, which apparently puts takes an element id and a value, and stuffs the value into a div within that element id. Let&#39;s look at the source to see what&#39;s actually happening here. &lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;src/pyscript.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PyScript&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;#...&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(element_id, value, append&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, exec_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Writes value to the element with id &amp;#34;element_id&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        console&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;APPENDING: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;append&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ==&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;element_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; --&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; append:
            child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
            element &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;querySelector(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;element_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; element:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            exec_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exec_id &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; element&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;childElementCount &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            element_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;element_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;exec_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
            element&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;appendChild(child);

        element &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getElementById(element_id)
        html, mime_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; format_mime(value)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; mime_type &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/javascript&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;):
            scriptEl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;createRange()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;createContextualFragment(html)
            element&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;appendChild(scriptEl)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            element&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; html&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;So the &lt;code class=&#34;code&#34;&gt;pyscript.write&lt;/code&gt; static method takes an element id and value, as well as two optional arguments. The &lt;code class=&#34;code&#34;&gt;append&lt;/code&gt; argument specifies whether to append the value as an additional div, as the final child of the given element, or simply set the innerHTML of the provided element to the value given. And the exec-id seems to be an index of which child of the given element is being modified, though it&#39;s also auto-incremented when appending, so probably one wouldn&#39;t set this manually much.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Adding &lt;code class=&#34;code&#34;&gt;append = True&lt;/code&gt; to the final pyscript.write statement behaves as expected:&lt;/p&gt;
&lt;img src=&#34;simple_clock_output_append.gif&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;And since this particular app is built with Svelte and includes tailwind, we can use all the familiar tailwind classes to start formatting the output, to make it a little more clear where our data is coming from. Let&#39;s make the first div red, the second green, and the &#39;espresso time&#39; div blue:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;simple_clock.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-mono bg-red-200&amp;#34;&lt;/span&gt;&amp;gt;start time: &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outputDiv&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outputDiv2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-mono bg-green-200&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outputDiv3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font-mono bg-blue-200&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;colorful_append.gif&#34; alt=&#34;&#34; class=&#34;my-4 post-img&#34;&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;As long as we&#39;re in the source, let&#39;s see whatever methods and classes live in pyscript.py.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It looks like the &lt;span class=&#34;font-bold&#34;&gt;PyScript class&lt;/span&gt; has only two methods: write and run_until_complete, i.e. loop forever.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s also the &lt;span class=&#34;font-bold&#34;&gt;Element class&lt;/span&gt;, which seems to be the internal, pythonic representation of a DOM element, with basic write, clear, and select method, as well as a clone(duplciate) method&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, there&#39;s quite a few functions that appear to deal with the output formatting of various objects based on their &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&#34;&gt;MIME types&lt;/a&gt;, allowing rendering of objects to the screen.&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;&lt;code class=&#34;code&#34;&gt;PyScript.write&lt;/code&gt; calls &lt;code class=&#34;code&#34;&gt;format_mime&lt;/code&gt; to get the properly formatted HTML for an object (in theory) before stuffing it into (or appending it to) the targetted element. If the object is a string, it simply returns that string with the MIME type &#39;text/plain&#39;. Otherwise, the &lt;code class=&#34;code&#34;&gt;eval_formatter&lt;/code&gt; method is called to determine if the object has a &lt;code class=&#34;code&#34;&gt;print_method&lt;/code&gt; attribute.&lt;/li&gt;
&lt;li&gt;In most cases, &lt;code class=&#34;code&#34;&gt;eval_formatter&lt;/code&gt;, just returns the objects &lt;code class=&#34;code&#34;&gt;print_method&lt;/code&gt; attribute, if it has one. But if the object&#39;s print_method is &#39;savefig&#39;, it stuffs the image into a base64-encoded png and returns that as well. Neat!&lt;/li&gt;
&lt;li&gt;Once the content (possibly text, or a now-base64-encoded image) and MIME type are determined, some additional transformations on the content may be made. The &lt;code class=&#34;code&#34;&gt;MIME_RENDERERS&lt;/code&gt; dict maps MIME types to functions, some of which are the identity function, and some of which add additional html tags or boilerplate around the contetn so it will display properly. At this point, &lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;code-title&#34;&gt;pyscript.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;render_image&lt;/span&gt;(mime, value, meta):
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;mime&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;;charset=utf-8;base64,&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
    attrs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{k}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{v}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; meta&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;img src=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;attrs&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/img&amp;gt;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;identity&lt;/span&gt;(value, meta):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; value


MIME_RENDERERS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;: identity,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt; : identity,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; value, meta: render_image(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;, value, meta),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; value, meta: render_image(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt;, value, meta),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image/svg+xml&amp;#39;&lt;/span&gt;: identity,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;: identity,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/javascript&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; value, meta: &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/script&amp;gt;&amp;#39;&lt;/span&gt;
} &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;So, the flow is:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;PyScript.write finds the element with the given element_id&lt;/li&gt;
&lt;li&gt;PySript.write calls format_mime to get the appropriate html-formatted representation of the value passed to PyScript.write&lt;/li&gt;
&lt;li&gt;If the value was a string, format_mime just returns it with a mime_type of &#39;text/plain&#39;&lt;/li&gt;
&lt;li&gt;Otherwise, format_mime calls eval_formatter to get the print_method&#39;s of the object, and possibly the base64 representation of it if it&#39;s an iamge.&lt;/li&gt;
&lt;li&gt;Once format_mime has these methods, it looks up the repr names in its MIME_METHODS dict to map the presence of __repr__ methods to a probably mime type&lt;/li&gt;
&lt;li&gt;Once the mime type is known, the value may optionally be transformed by the functions that are the values in the MIME_RENDERERS dictionary&lt;/li&gt;
&lt;li&gt;Finally, if the type turned out to be either application/javascript or text/html, the given value is wrapped up in a next html or script element and stuffed into the desired element in the DOM. Otherwise, the content is simply overwritten/appended to the elements innerHTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;I dug through all this as I was digging into &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/103&#34;&gt;Issue #103&lt;/a&gt; on the PyScript Github, and learned a few things about Python on the way. Namely, print() is pretty much just a wrapper to sys.stdout.write() (or any other file-like object, if specified). And while print() can be called with any number of positional arguments and will send them all to stdout, it does so as &lt;span class=&#34;italic&#34;&gt;individual calls to stdout.writer()&lt;/span&gt;. So programs (like PyScript) that interrupt that output to do other things with may get results that look off if they behave differently than the line-o&#39;-text that a terminal would display.&lt;/p&gt;
&lt;div id=&#34;my_canvas&#34;&gt;&lt;canvas class=&#34;m-auto&#34;&gt;&lt;/canvas&gt;&lt;/div&gt;
&lt;py-env&gt;
- paths:
  - ./pathing.py
&lt;/py-env&gt;
&lt;py-script&gt;
from js import document
from pathing import PathFollower

canvas = document.querySelector(&#34;#my_canvas canvas&#34;)
canvas.style.display = &#34;block&#34;
width = canvas.width
print(width)

p = PathFollower(canvas, width, 250)
p.start(interval = 100)
&lt;/py-script&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;If all has gone well (and you&#39;re viewing this on a compatible browser), you should see my final experiment of the day, a line jumping around on an HTML canvas, powered entirely by Python (well, via JS too, but I didn&#39;t have to write any).&lt;/p&gt;
&lt;p class=&#34;my-8 code-title&#34;&gt;pyscript-intro.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;py-env&lt;/span&gt;&amp;gt;
    - paths:
      - ./pathing.py
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;py-env&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    from js import document
    from pathing import PathFollower
    
    canvas = document.querySelector(&amp;#34;#my_canvas canvas&amp;#34;)
    canvas.style.display = &amp;#34;block&amp;#34;
    width = canvas.width
    print(width)
    
    p = PathFollower(canvas, width, 250)
    p.start(interval = 100)
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;my-8 code-title&#34;&gt;pathing.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; random &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; randint
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; js &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; setInterval, document, DOMParser
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pyodide &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; create_proxy

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PathFollower&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, canvas, width, height, numPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;numPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numPoints
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; width
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; height
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ctx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; canvas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getContext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;)
        
        canvas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;width&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;px&amp;#34;&lt;/span&gt;
        canvas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;height&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;px&amp;#34;&lt;/span&gt;

        canvas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; width
        canvas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; height
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randomizePath()
        print(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathPoints)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getNewPoint&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;width&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;height&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;randomizePath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getNewPoint() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;numPoints)]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;movePath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathPoints[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathPoints&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getNewPoint())

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clearPath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clearRect(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;drawPath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;beginPath()    
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;moveTo(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathPoints[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, point &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathPoints[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lineTo(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;point)
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stroke()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;remakePath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clearPath()
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.randomizePath()&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;movePath()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drawPath()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;(self, interval):
        setInterval(create_proxy(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remakePath), interval)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Soft Shutdown and Consistent Boot on Power Loss</title>
      <link>https://jeff.glass/post/quick-dirty-system-power/</link>
      <pubDate>Sun, 13 Mar 2022 00:05:00 -0500</pubDate>
      
      <guid>https://jeff.glass/post/quick-dirty-system-power/</guid>
      <description>&lt;p class=&#34;italic post-p&#34;&gt;Tl;DR Computers hate having their power abruptly cut. A UPS, an Adafruit Feather board, and some python hackery keeps computers booting and shutting down gracefully when power is yanked and restored, deliberately or not.&lt;/p&gt;
&lt;p class=&#34;font-bold post-p&#34;&gt;Update: The &lt;a href=&#34;https://hackaday.com/2022/03/18/power-cycling-museum-computers-on-the-cheap/&#34;&gt;comments on the Hackaday post&lt;/a&gt; had a lot of other interesting solutions, some of which I&#39;d considered and some of which I didn&#39;t. Skip to the &lt;a href=&#34;#othersolutions&#34;&gt;Other Solutions&lt;/a&gt; for evaluation of these.&lt;/p&gt;
&lt;hr/&gt;
&lt;p class=&#34;post-p&#34;&gt;My dayjob involves solving technical problems for a large, multi-acre education facility with over 400 computer-driven interactives. To prolong the life of these devices (many of which are built around off-the-shelf computers and monitors), we like to power them down after operating hours and start them up in the morning. These are mostly windows machines, and just like a desktop they &lt;span class=&#34;italic&#34;&gt;love&lt;/span&gt; to be rebooted.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What makes this challenging is both the number and placement of these devices. While many are in dedicated control rooms with &lt;a href=&#34;&#34;&gt;linked KVM systems&lt;/a&gt;, even using a mouse and keyboard to manually shut down 400 PCs would take the onsite staff far longer than designed, and could be error-prone. Worse, some computers are embedded inside consoles, cabinets, and displays, making the process of walking around and hitting power buttons (where accessible) or using a wireless keyboard (where not) even longer. The same is true of startup, except that a wireless keyboard isn&#39;t an option in that case. A central startup and shutdown solution is essential.&lt;/p&gt;
&lt;div class=&#34;max-w-xl px-10 mx-auto xl:float-right&#34;&gt;
    &lt;img src=&#34;medialon.jpg&#34; alt=&#34;A complex touchscreen controller based around a Medialon control system&#34; class=&#34;post-img&#34;&gt;
    &lt;p class=&#34;max-w-xl post-img-caption&#34;&gt;Not from my workplace, but grabbed from google images - just as an example of how involved a software-defined control system can be.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, there are many ways to make this happen. The most ideal, when the money is available, is to use a central controller, like a &lt;a href=&#34;https://medialon.com/products/showmaster-pro/&#34;&gt;Medialon System&lt;/a&gt;, &lt;a href=&#34;https://www.crestron.com/Products/Control-Hardware-Software/Hardware&#34;&gt;Creston Controller&lt;/a&gt;, &lt;a href=&#34;https://derivative.ca/&#34;&gt;TouchDesigner interface&lt;/a&gt;, or similar. The control is put in charge of signalling the computers to wake up (via Wake-on-LAN), shut down (through  proprietary software modules), and handles cycling &lt;a href=&#34;https://www.se.com/us/en/product-range/7340-powerlink-intelligent-panelboards/#overview&#34;&gt;remotely-controller AC breakers&lt;/a&gt;, turning projcets on and off via various ethernet protocols, and so on. The dream is for whoever&#39;s operating the system to press one button (or click one button on a screen) to have the whole system turn on, or off.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Life is rarely a dream.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We sometimes run into a situation where, for reasons of cost, planning, location, or timing, there is no exterior control of any kind. There&#39;s just a breaker in a panel (which may or may not be remote controlled) providing power to an installed cabinet. And as much as PC&#39;s love to be rebooted, they &lt;span class=&#34;italic&#34;&gt;hate&lt;/span&gt; having their power yanked unexpectedly.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So the challenge is: &lt;span class=&#34;font-bold&#34;&gt;given only control over their power, can we create a system that soft-starts and soft-shuts-down a PC?&lt;/span&gt; &lt;span class=&#34;italic&#34;&gt;(Yes we can, or this would be a very short post.)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-h2&#34;&gt;Shutdown&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Getting a PC to soft shutdown on power loss is relatively straightfoward. There are (fairly fancy) &lt;a href=&#34;https://www.apc.com/shop/us/en/categories/power/uninterruptible-power-supply-ups-/ups-management/ups-network-management-cards/N-o7asnt&#34;&gt;networkable UPS systems and add-on cards&lt;/a&gt; that are meant just for this kind of thing. When mains power is killed, the UPS kicks into keep the computer(s) in question on, while sending a network message to do... whatever you want. Wait a minute then hibernate, run a backup, dump memory, etc.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Unfortunately, these solutions are somewhat cost-prohibitive, and also rather large. They seem designed for rackmount systems where they could be used to manage a bank of servers. The particular situation that I&#39;m building this for for is very tightly space-confired, and doing it for less than a grand would be great.&lt;/p&gt;
&lt;div class=&#34;max-w-lg px-10 mx-auto xl:float-left&#34;&gt;
    &lt;img src=&#34;apcups.jpg&#34; alt=&#34;A complex touchscreen controller based around a Medialon control system&#34; class=&#34;post-img&#34;&gt;
    &lt;p class=&#34;max-w-xl post-img-caption&#34;&gt;A cheap, off the shelf, 300W / ~30wH UPS. At time of writing, about $60 shipped.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, there&#39;s a way to make this work on a cheaper and smaller UPS. Many off-the-shelf UPS&#39;s have the abilitiy to connect directly to a single PC via USB connection. APC, who makes consumer UPSes, has such a connection on even their &lt;a href=&#34;https://amzn.to/31ciSpg&#34;&gt;very basic units&lt;/a&gt;. They even include &lt;a href=&#34;https://www.apc.com/shop/us/en/categories/power/uninterruptible-power-supply-ups-/ups-management/powerchute-personal-edition/N-1b6nbpp&#34;&gt;some basic software (Powerchute)&lt;/a&gt; that can tell the computer to hibernate, shutdown, wait a few minutes and shutdown, etc when the batteries kick in. Sounds perfect, no?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Not quite - we only have the ability to hook one computer directly to the UPS, but we&#39;d like to power multiple small computers &lt;a href=&#34;https://www.intel.com/content/www/us/en/products/details/nuc.html&#34;&gt;(often NUCs)&lt;/a&gt; off a single UPS. And there&#39;s no obvious way to hook into the Powerchute software directly. Having one UPS per computer would be an option, but a needlessly expensive one. Sometimes there&#39;s not even enough room for that to be possible.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The workaround is straightfoward - the Powerchute software logs an event to the Window System Log when it swtches to battery power. We can use Window&#39;s built-in task scheduling service to fire off a script of our choosing when this event occurs. Then it&#39;s just a matter of crafting some very basic network scripts to allow the UPS-connected computer to tell other computers to shut down, then shut itself down.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s what I came up with. It&#39;s not terrible robust, secure, or debuggable, but it&#39;s getting the job done for now. The client script runs on the computer connected to a UPS, and is triggered when the UPS switches to battery power. The server runs on as many connected computers as we want, and should be set to run at startup. The (static) IPs of the computers running the server script must be enterred in the client script.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;client.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;This is one of a pair of programs meant to allow one computer to shutdown many computers in an exhibit context.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;This program (&amp;#39;client&amp;#39;) is meant to run on the singular computer that recveives a set signal to shutdown the exhibit. This signal may come from a button or switch, a system log (Say, via UPS), etc, which then runs this script.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;The server program should be running on any computers that need to be shutdown in this context.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;This client program steps through the list of provided servers and tells them to shut down, then shuts itself down.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; socket
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sleep

socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setdefaulttimeout(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1933&lt;/span&gt;
MSG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SHUTDOWN NOW&amp;#39;&lt;/span&gt;
RSP &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SHUTDOWN CONFIRMED&amp;#34;&lt;/span&gt;

deviceIPs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;172.16.0.2&amp;#34;&lt;/span&gt;
]
attempts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
MAX_ATTEMPTS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Client program is contacting remote computers to shut them down&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(deviceIPs) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
    attempts &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; attempts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; MAX_ATTEMPTS:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System could not shut down the following IPs: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;deviceIPs&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Shutting down self in 15 seconds&amp;#34;&lt;/span&gt;)
        sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ip &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; deviceIPs:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;socket(socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AF_INET, socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SOCK_STREAM) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; s:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attempting to connect tp &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ip&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, attempt &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;attempts&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; of &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;MAX_ATTEMPTS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; (timeout is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;int(socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getdefaulttimeout())&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s)&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
                s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect((ip, PORT))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TimeoutError&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; err:
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connection timed out&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connection successful, sending message: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;MSG&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
            s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendall(MSG)
            data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;)
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;repr(data)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data[:len(RSP)] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; RSP:
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received shutdown confirmation message from host at ip &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ip&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
                deviceIPs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(ip)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got some other message than we expected from host at ip &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ip&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Successfully shut down all remote IPs, shutting down self in 10 seconds&amp;#34;&lt;/span&gt;)
    sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shutdown /s /f /t 10&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;pb-8 post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;server.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;This is one of a pair of programs meant to allow one computer to shut down many computers in an exhibit context.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;This program (&amp;#39;server&amp;#39;) runs on any computer that is NOT receiving the direct singal to shut down.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;The &amp;#39;client&amp;#39; program should run on the singular computer in the exhibit context that receives the signal to shutdown the exhibit (from a UPS, switch, etc)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; socket
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os

HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
PORT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1933&lt;/span&gt;
MSG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SHUTDOWN NOW&amp;#34;&lt;/span&gt;
RSP &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SHUTDOWN CONFIRMED&amp;#34;&lt;/span&gt;

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Server program is listening for shutdown commands from primary client&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;socket(socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AF_INET, socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SOCK_STREAM) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; s:
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bind((HOST, PORT))
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listen()
    conn, addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accept()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; conn:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connected by &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;addr&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
            data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data[:len(MSG)] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MSG:
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got shutdown MSG &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
                conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendall(RSP)
                os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shutdown /s /f /t 10&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: 
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Got &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; instead of expected &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;data[:len(MSG)]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; data:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;post-h2&#34;&gt;Startup&lt;/p&gt;
&lt;div class=&#34;max-w-lg px-10 mx-auto xl:float-right&#34;&gt;
    &lt;img src=&#34;feather.jpg&#34; alt=&#34;A complex touchscreen controller based around a Medialon control system&#34; class=&#34;post-img&#34;&gt;
    &lt;p class=&#34;max-w-xl post-img-caption&#34;&gt;An Adafruit ESP-32 Featherwing - the purple Neopixel light indicates the unit has booted but does not see an attached ethernet cable&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Almost every BIOS has the ability to wake the system when power is restored following an unexpected power loss. Most have the ability to boot the computer when power is removed and restored, regardless of whether the computer was gently shut down or rudely had its power cut. Unfortunately, neither of these options work for us - since the computer is on a UPS, as far the the power supply is concerned,&lt;span class=&#34;italic&#34;&gt; the computer never loses power.&lt;/span&gt; So, we&#39;ll have to rely on some other mechanism to detect when power is restored to cause the computer(s) to boot.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The hammer for this particular nail is a small, ethernet-capable microcontroller that sends out Wake-on-LAN packets at regular intervals whenever its powered on. We plug this microcontroller into an outlet &lt;span class=&#34;underline&#34;&gt;not&lt;/span&gt; backed by the UPS - when power is lost, the microcontroller shuts off almost immediately, allowing the computers to shut down as above. When power is restored, the microcontroller starts up and, after a brief delay, starts sending out Wake-On-LAN messages to all the MAC addresses it knows about.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I chose the &lt;a href=&#34;https://www.adafruit.com/product/5000&#34;&gt;Adafruit ESP-32 Feather&lt;/a&gt; for a couple reasons. One, Python is &lt;a href=&#34;../../tags/python&#34;&gt;my language of choice&lt;/a&gt; for hacking things together, and I was excited to play more with &lt;a href=&#34;https://circuitpython.readthedocs.io/en/latest/README.html&#34;&gt;CircuitPython&lt;/a&gt;. Second, Adafruit&#39;s commitment to documentation and process is just great, and I wanted to get this project up on its feet quickly. And third, Adafruit&#39;s Featherwing line of accessory boards (specifically the &lt;a href=&#34;https://www.adafruit.com/product/3201&#34;&gt;Ethernet Featherwing&lt;/a&gt;) made it easy to get an Ethernet Stack and PHY running with minimal custom effort.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, I bashed together the following code to wake up, establish a network connection, and send a Wake-On-LAN message to each MAC address in a given array every 15 seconds or so:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;code.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# SPDX-License-Identifier: MIT&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; board
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; busio
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; digitalio
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; neopixel
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sleep

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; adafruit_wiznet5k.adafruit_wiznet5k &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; WIZNET5K, SNMR_UDP, SNSR_SOCK_UDP
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; adafruit_wiznet5k.adafruit_wiznet5k_socket &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; socket
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; adafruit_requests &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; requests

pixel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; neopixel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NeoPixel(board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NEOPIXEL, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

targetMACs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x56&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x78&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9A&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0xBC&lt;/span&gt;], &lt;span style=&#34;color:#75715e&#34;&gt;#Computer NW&lt;/span&gt;
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x56&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x78&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9A&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0xBD&lt;/span&gt;], &lt;span style=&#34;color:#75715e&#34;&gt;#Computer NE&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#... more computers as necessary&lt;/span&gt;
    ]

&lt;span style=&#34;color:#75715e&#34;&gt;# Initialize ethernet interface with DHCP&lt;/span&gt;
cs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; digitalio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DigitalInOut(board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;D10)
spi_bus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; busio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SPI(board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SCK, MOSI&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MOSI, MISO&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;board&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MISO)
eth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; WIZNET5K(spi_bus, cs, is_dhcp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)

ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;172.16.0.10&amp;#34;&lt;/span&gt;)
subnet_mask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;255.255.0.0&amp;#34;&lt;/span&gt;)
gateway &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;172.16.0.10&amp;#34;&lt;/span&gt;)
dns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;172.16.0.10&amp;#34;&lt;/span&gt;)
eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ifconfig &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ip, subnet_mask, gateway, dns)
&lt;span style=&#34;color:#75715e&#34;&gt;#If using DHCP, uncomment the following line&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#eth.ifconfig = (ip, subnet_mask, None, None)&lt;/span&gt;

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assigned Ethernet Address: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pretty_ip(eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ip_address)))

&lt;span style=&#34;color:#75715e&#34;&gt;#Built-in neopixel will be purple while waiting for Ethernet to connect&lt;/span&gt;
pixel[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;)

retry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; retry:
    retry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;socket_connect(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;172.16.255.255&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;556&lt;/span&gt;, conn_mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SNMR_UDP)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AssertionError&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; err:
        print(str(err) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, retrying in 10 Seconds&amp;#34;&lt;/span&gt;)
        retry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
        sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

    status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;socket_status(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; [int(b) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; status] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; [SNSR_SOCK_UDP]:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Socket 0 connected as UDP&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Socket not connected, status is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;status&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        retry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
        sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;#Built in neopixel will be blue when standing by to send WOL packets&lt;/span&gt;
pixel[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;)
sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;span style=&#34;color:#75715e&#34;&gt;#Built in neopixel will be green when sending WOL packets&lt;/span&gt;
    pixel[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, target &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(targetMACs):
        
        fullPacket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytearray([&lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sending WoL packet to computer &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; with mac address &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pretty_mac(target)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;socket_write(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, fullPacket, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        
        sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;.1&lt;/span&gt;)

    pixel[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;)
    sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)

eth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;socket_close(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;re making use of this code yourself, you&#39;ll need the following libraries in your CIRCUITPY/libs folder:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;adafruit_wiznet5k&lt;/li&gt;
    &lt;li&gt;adafruit_requests.mpy&lt;/li&gt;
    &lt;li&gt;neopixel.mpy&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;And, if it&#39;s helpful, here is the basic process of getting the ESP32-S2 feather up and running (summarized from &lt;a href=&#34;https://learn.adafruit.com/adafruit-esp32-s2-feather/install-uf2-bootloader&#34;&gt;Adafruit&#39;s excellent guide&lt;/a&gt;):&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Download the appropriate &lt;a href=&#34;https://circuitpython.org/board/adafruit_feather_esp32s2/&#34;&gt;Bootloader .BIN File&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://learn.adafruit.com/adafruit-esp32-s2-feather/install-uf2-bootloader#step-2-place-your-board-in-bootloader-mode-3089837-8&#34;&gt;Put the board in bootloader mode&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Use the online &lt;a href=&#34;https://adafruit.github.io/Adafruit_WebSerial_ESPTool/&#34;&gt;Adafruit ESPTool and Webserial&lt;/a&gt; tool to burn BIN file to the ESP32&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;Reset the feather - it will appear as an attached USB drive called CIRCUITPY, onto which the above code can be dropped&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;pb-4 post-h2&#34;&gt;System Diagram&lt;/p&gt;
&lt;img src=&#34;networkMap.png&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-h2&#34;&gt;Step-by-Step Instructions&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For those who came here looking for an actual step-by-step how-to, here&#39;s the full process of getting this system set up. (This is based on my particular steps with the Intel NUCs and APC UPS in the most recent setup - some steps, especially relating to the BIOS, may need to be adjusted for your hardware.)&lt;/p&gt;
&lt;p class=&#34;pb-2 post-h3&#34;&gt;Computer Info Gathering&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Identify the MAC addresses of the relevent NICs on all the computers you intend to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;pb-2 post-h3&#34;&gt;Feather Prep&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Solder headers onto the Adafruit ESP32 Feather and Ethernet featherwing, as necessary. Attach the two together.&lt;/li&gt;
    &lt;li&gt;Using the steps above, prepare the feather with its bootloader.&lt;/li&gt;
    &lt;li&gt;Load the code above onto the Feather.&lt;/li&gt;
    &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li class=&#34;italic&#34;&gt;Modify the list of MAC addresses in the code to include all of the MAC addresses you previously identified.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/ul&gt;
&lt;p class=&#34;pb-2 post-h3&#34;&gt;Physical Install&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Install the UPS, connected to the (switchable or unpredicable) power source. It may need to charge for several hours before it&#39;s usable.&lt;/li&gt;
    &lt;li&gt;Install the network switch, plugged into the battery-backed power on the UPS. A cheap unmanaged switch will do.&lt;/li&gt;
    &lt;li&gt;Install the computer(s). Plug them into the battery-backed power on the UPS&lt;/li&gt;
    &lt;li&gt;Plug the Feather assembly you prepped earlier into the NON-battery-backed power on the UPS.&lt;/li&gt;
    &lt;li&gt;Use CAT cables to attach the computers and Feather to the network switch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;pb-2 post-h3&#34;&gt;Wake on Lan Setup&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;In both computer&#39;s BIOS&#39;s&#34;:&lt;/li&gt;
    &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li&gt;Make sure &#39;Wake on LAN from S4/S5 is set to &#39;Power On - Normal Boot&#39;&lt;/li&gt;
        &lt;li&gt;Make sure &#39;Deep S4/S5&#39; is Off&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;In both computer&#39;s Device Managers:&lt;/li&gt;
    &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li&gt;Find the network interface that is plugged into the network switch, and open its settings.&lt;/li&gt;
        &lt;li&gt;In the Power Management Tab:&lt;/li&gt;
        &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
            &lt;li&gt;Make sure &#39;Allow the computer to turn off this device&#39; is OFF&lt;/li&gt;
            &lt;li&gt;Make sure &#39;Allow this device to wake the computer&#39; is ON&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;In the Advanced Tab: Make sure &#39;Wake on Magic Packet&#39; is ENABLED&lt;/li&gt;
    &lt;/ul&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-h3&#34;&gt;Control Computer Setup&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;This will be the computer listening to the status of the UPS, and telling the other computers to turn off. There should be only one per setup.&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Assign the computer a static IP on the NIC you&#39;re using. The code above assumes this is &lt;code class=&#34;code&#34;&gt;172.16.0.1&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Plug the USB cable from the UPS into the control computer.&lt;/li&gt;
    &lt;li&gt;If not prompted, manually download and install the &lt;a href=&#34;https://www.apc.com/shop/us/en/categories/power/uninterruptible-power-supply-ups-/ups-management/powerchute-personal-edition/N-1b6nbpp&#34;&gt;Powerchute Control Software&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Unplug the UPS from wall-power once and plug it back in, to log the necessary events in the System Log.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Install Python&lt;/a&gt;. I used Python 3.10.0 at time of writing, but any later version should also be fine.&lt;/li&gt;
    &lt;li&gt;Copy the &lt;code class=&#34;code&#34;&gt;client.py&lt;/code&gt; code from above to a convienient file location on the computer (desktop, My Documents, etc).&lt;/li&gt;
    &lt;li&gt;In Task Scheduler, add a new event:&lt;/li&gt;
    &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li&gt;Title: Shutdown on Power Loss to UPS&lt;/li&gt;
        &lt;li&gt;Triggers:&lt;/li&gt;
        &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
            &lt;li&gt;On an Event&lt;/li&gt;
            &lt;li&gt;Log: Application&lt;/li&gt;
            &lt;li&gt;Source: APC UPS Service&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Actions:&lt;/li&gt;
        &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
            &lt;li&gt;Start a Program&lt;/li&gt;
            &lt;li&gt;Select &lt;code class=&#34;code&#34;&gt;client.py&lt;/code&gt; script from wherever you put it&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/ul&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-h3&#34;&gt;Target Computer Setup&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;These computers will run a script on boot that listens for commands from the client computer to shut down. There can be as many of these per system as you like.&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Assign the computer a static IP on the NIC you&#39;re using. The code above assumes this is &lt;code class=&#34;code&#34;&gt;172.16.0.2&lt;/code&gt;; if you add additional computers, you will need to add them to them to the deviceIPs array in the &lt;code class=&#34;code&#34;&gt;client.py&lt;/code&gt; script.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Install Python&lt;/a&gt;. I used Python 3.10.0 at time of writing, but any later version should also be fine.&lt;/li&gt;
    &lt;li&gt;Copy the &lt;code class=&#34;code&#34;&gt;server.py&lt;/code&gt; code from above to a convienient file location on the computer (desktop, My Documents, etc).&lt;/li&gt;
    &lt;li&gt;Create a shortcut to the &lt;code class=&#34;code&#34;&gt;server.py&lt;/code&gt; script in your startup folder. In Windows 10, this is located by default at: &lt;code class=&#34;code&#34;&gt;C:/users/{username}/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup.&lt;/code&gt; Any shortcuts/executables in this folder get executed automatically when Windows boots.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;othersolutions&#34; class=&#34;post-h2&#34;&gt;Other Solutions Considered (March 21, 2022)&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The commenters &lt;a href=&#34;https://hackaday.com/2022/03/18/power-cycling-museum-computers-on-the-cheap/&#34;&gt;over at Hackaday&lt;/a&gt; had some opinions and thoughts about other ways to accomplish this - which is great! It&#39;s certainly a fairly large nail and there are lots of hammers. Hackaday Columnist Chris Wilkinson even asked readers &#34;how [they] would have tackled this problem? Sound off in the comments below.&#34; And boy did they. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, let me address some of the proposed solutions and concerns, with some background that I didn&#39;t provide in the original post.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Scheduled Shutdown&lt;/h3&gt;
&lt;img src=&#34;commentschedule.PNG&#34; alt=&#34;A screenshot of a hackaday comment, of a use suggesting that scheduled shutdown would be better&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Many, many of the comments suggested using some version of Windows&#39; scheduled shutdown feature to turn the computers off at the same time every day. This is a very reasonable suggestion, and in fact &lt;span class=&#34;italic&#34;&gt;was the solution in place before I undertook this project.&lt;/span&gt; There was a scheuled shutdown at 4:10pm every day (shortly after &#34;normal&#34; closing) and another at midnight (after &#34;the latest the museum could be open&#34;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The issue is that the museum&#39;s span-of-day changes wildly day-to-day, week-to-week, and month-to-month without notice. Sometimes closing is at 5:30pm. Sometimes 8:00pm or 11:00pm for an event. Sometimes it needs to be shut off at 3pm for photo sessions in the space. While I wish we had the ability to accurately describe the closing time of the museum on a day-to-day basis, like any large public-facing institution with an events staff, things change quickly and regularly. This pretty much ruled out scheduled shutdown.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Remote Management Commands&lt;/h3&gt;
&lt;img src=&#34;commentactive.PNG&#34; alt=&#34;A screenshot of a hackaday comment, saying that one should use Active Directory commands&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;I wrestled with this solution for a fairly long time, but ultimately deemed it unsuccesful in Windows 10 personal (the OS I&#39;m forced to use). To be honest, I can&#39;t recall what every single obstacle was, but some were:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Needing to address each computer by hostname, with the hostnames having some character restrictions (which I could not change)&lt;/li&gt;
    &lt;li&gt;Not having an Active Directory/Domain setup in this environemnt. For any number of reasons, we keep interactives isolated from our workplace domain system, so there&#39;s no Active Directory to be used.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.groovypost.com/howto/remote-shutdown-restart-windows-10/#:~:text=Enter%20your%20username%20on%20the,on%20the%20switches%20you%20choose.&#34;&gt;Several&lt;/a&gt; &lt;a href=&#34;https://www.maketecheasier.com/remote-shutdown-restart-windows-10/&#34;&gt;Resources&lt;/a&gt; suggest needing to make registry changes to enable remote shutdown, and while I tried several of these, none were successful. This also doesn&#39;t seem like the most durable/transportable solution. The various uses of batch files and services at affect the same didn&#39;t work for me either - not saying there wasn&#39;t something I missed, but it wasn&#39;t anywhere near as simple as run &lt;code class=&#34;code&#34;&gt;shutdown /r /m \\pc2&lt;/code&gt; and walk away.&lt;/li&gt;
    &lt;li&gt;One of the comments suggested using &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;, which I may have to give a look.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;UPS With Lan Card&lt;/h3&gt;
&lt;img src=&#34;commentupslan.PNG&#34; alt=&#34;A screenshot of a hackaday comment, suggesting using a UPS with build in LAN card&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;A couple users encouraged me to look at UPS&#39; that can be directly connected to a network, which would save the whole client-server model of the hacky python scripts above.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is something we looked at as well, but discarded for space reasons. The entire space inside the primary enclosure this project was designed for is only 5&#34; deep, which ruled out any rackmount components, which seem to be the major source of UPS&#39; with LAN interfaces. The standalone UPS&#39; with LAN attachability were either too large or two expensive for this project.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Read Only Harddrives&lt;/h3&gt;
&lt;img src=&#34;commentreadonly.PNG&#34; alt=&#34;A screenshot of a hackaday commnet, suggesting making the hard drives read-only&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s something I hadn&#39;t thought about - making the hard drives read only to prevent damage in the case of an untimely shutdown. Didn&#39;t know that was a thing! Stil not sure it&#39;s a thing, will have to look into it more.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;RTS/CTS Signalling&lt;/h3&gt;
&lt;img src=&#34;commnetmultipleserial.PNG&#34; alt=&#34;A screenshot of a hackaday comment, suggesting using one RTS/CTS line among multiple computers&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Another expansion of an idea I had discarded - the UPS&#39; all have some varient of serial lines on them, but I assumed using serial to connect to the UPS&#39; was out for the same multi-computer reason that lead to me using the client/server model. But if it&#39;s really just a binary on/off signal on one of the control lines, there&#39;s no reason I couldn&#39;t read that simultaneously on several machines. Interesting!&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Virtualization&lt;/h3&gt;
&lt;img src=&#34;commentvirtualized.PNG&#34; alt=&#34;A screenshot of a hackaday comment, suggesting using virtualization to run all the interactives&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Make all the intereactives virtualized and run in their own VMs?? Now there&#39;s something that would never have crossed my mind. It&#39;s probably way out of scope for the kind of retrofit work that I&#39;ve been tasked with doing, but it&#39;s a nifty idea if we had the will and archetechture to handle it.&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2021</title>
      <link>https://jeff.glass/post/advent-of-code-2021/</link>
      <pubDate>Tue, 30 Nov 2021 02:30:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2021/</guid>
      <description>&lt;div class=&#34;fixed flex items-center w-2/3 h-10 align-top center top-14 z-15&#34;&gt;
    &lt;div id=&#34;toc-tab&#34; class=&#34;px-8 py-2 m-auto text-xl text-center text-green-200 transition-all duration-300 bg-green-800 opacity-0 flex-0 rounded-b-2xl&#34;&gt;&lt;a href=&#34;#TOC&#34; class=&#34;no-style-link&#34;&gt;Back to Table of Contents&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
    $(document).scroll(function() {
        var y = $(this).scrollTop();
        var startOfPosts = document.querySelector(&#34;div#day1&#34;).getBoundingClientRect()
        if (y &gt; startOfPosts.bottom + 600) {
            $(&#39;div#toc-tab&#39;).addClass(&#39;opacity-100&#39;)
            //console.log(&#34;unhide tab&#34;)
        } else {
            $(&#39;div#toc-tab&#39;).removeClass(&#39;opacity-100&#39;)
            //console.log(&#34;unhide tab&#34;)
        }
        });
&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;Is it Advent of Code time again? Well, here goes nothing. Let&#39;s see wha we can cook up.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m planning on completing most (all) of this year&#39;s challenges in Python, &lt;a href=&#34;../../post/advent-of-code-2020/&#34;&gt;same as last year&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;w-auto pt-2 pb-4 pl-2 mr-2 -ml-2 align-top bg-gray-200 md:w-130&#34;&gt;
    &lt;p class=&#34;text-2xl relative-anchor&#34;&gt;Table of Contents&lt;/p&gt;
    &lt;div class=&#34;ml-8 font-semibold&#34;&gt;
        &lt;p&gt;&lt;a href=&#34;#day1&#34;&gt;Day 1 - Sonar Sweep&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day2&#34;&gt;Day 2 - Dive!&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day3&#34;&gt;Day 3 - Binary Diagnostic&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day4&#34;&gt;Day 4 - Giant Squid&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day5&#34;&gt;Day 5 - Hydrothermal Venture&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day6&#34;&gt;Day 6 - Lanternfish&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day7&#34;&gt;Day 7 - The Treachery of Whales&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day8&#34;&gt;Day 8 - Seven Segment Search&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day9&#34;&gt;Day 9 - Smoke Basin&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day10&#34;&gt;Day 10 - Syntax Scoring&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day11&#34;&gt;Day 11 - Dumbo Octopus&lt;/a&gt;&lt;/p&gt;        
        &lt;p&gt;&lt;a href=&#34;#day12&#34;&gt;Day 12 - Passage Pathing&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day13&#34;&gt;Day 13 - Transparent Origami&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day14&#34;&gt;Day 14 - Exteded Polymerization&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day15&#34;&gt;Day 15 - Chiton&lt;/a&gt;&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 16 - Packet Decoder (In Progress)&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day17&#34;&gt;Day 17 - Trick Shot&lt;/a&gt;&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 18 - Snailfish (In Progress)&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 19 - Beacon Scanner (In Progress)&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 20 - Trench Map (In Progress)&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 21 - Dirac Dice (In Progress)&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 22 - Reactor Reboot (In Progress)&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day1&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto pb-1 border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 1 - Sonar Sweep&lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I feel like it&#39;s Advent of Code tradition for me to read in the input from file (as strings) and try to do comparisons on it like ints, forgetting to cast them to intergers. Which means I was comparing textually, instead of numerically, so my answer was off by &lt;span class=&#34;italic&#34;&gt;two&lt;/span&gt;. Absurd. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;You really could do &lt;a href=&#34;https://adventofcode.com/2021/day/1&#34;&gt;today&#39;s challenge&lt;/a&gt; entirely in one line, but I think it&#39;s slightly more readable broken up as I&#39;ve done. Here&#39;s the complete code:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day1/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(t) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)]
&lt;/span&gt;
numDecreases &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len([pair &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(data[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], data[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]])

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;numDecreases&lt;span style=&#34;color:#e6db74&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;The offending line, where I remembered to cast the input to ints.&lt;/p&gt;
&lt;h4 class=&#34;pt-4 pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Part 2 could also probably be inlined, but the list-comprehension-within-list-comprehension is, again, not the most readable thing, I think. Breaking out the three key steps (creating triples of the data, finding their sums, and finding where adjacent sums are decreasing) into 3 lines of code I think makes the solution more parsable.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day1/Part2.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(t) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)]

triples &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zip(data[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], data[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], data[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:])
windowSums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [sum(list(t)) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; triples]

numDecreases &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len([t &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(windowSums[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], windowSums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; t[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; t[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]])

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;numDecreases&lt;span style=&#34;color:#e6db74&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day2&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 2 - Dive!&lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The first part of today&#39;s challenge has us dealing with a list of things that happen sequentially (tracking the horizontal and vertical movements of our submarine), but the answer only has to do with summing them in some specific ways. This smells strongly of a &#39;gotcha&#39; coming in part 2 - if we can the easy, just-sum-it-up route for part 1, we won&#39;t be able to reuse any code for part 2 when the order actually matters. But that&#39;s alright, I guess, we&#39;ll take the easy route on this one.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s a fair amount of repetition in my list comprehensions here, but for a 7-line program I don&#39;t terribly feel like factoring it out.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day2/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    &lt;span style=&#34;color:#75715e&#34;&gt;# data is a list of tuples; each tuple is of form (&amp;#39;instruction&amp;#39;, int) where &amp;#39;instruction&amp;#39; is forward, down, up&lt;/span&gt;
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], int(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)]

horizontal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum([step[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; step[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forward&amp;#39;&lt;/span&gt;])
depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum([step[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; step[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;down&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; sum([step[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; step[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;up&amp;#39;&lt;/span&gt;])
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Solution product is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;horizontal &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; depth &lt;span style=&#34;color:#e6db74&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As expected, we&#39;re paying the (small) price for not doing the first part iteratively. That&#39;s alright, we can implement it now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This does give me a chance to play with a new feature of Python 3.10: structural pattern matching. It&#39;s like a switch-case structure on steroids. To make sure I&#39;m running this code in Python 3.10 specifically, I&#39;ll use pipenv to lock the version to 3.10.0 by running &lt;code class=&#34;code&#34;&gt;pipenv install --python 3.10&lt;/code&gt; on the command line.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Our code is ultimately fairly simple; thankfully, I encountered no &#34;unmatched instruction&#34; errors, which means I parsed the input correctly.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day2/Part2.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    &lt;span style=&#34;color:#75715e&#34;&gt;# data is a list of tuples; each tuple is of form (&amp;#39;instruction&amp;#39;, int) where &amp;#39;instruction&amp;#39; is forward, down, up&lt;/span&gt;
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], int(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)]

horizontal, depth, aim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
    match d:
        case (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;down&amp;#39;&lt;/span&gt;, num):
            aim &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; num
        case (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;up&amp;#39;&lt;/span&gt;, num):
            aim &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; num
        case (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forward&amp;#39;&lt;/span&gt;, num):
            horizontal &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; num
            depth &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; aim &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; num
        case _:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unmatched instruction &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;d&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Solution is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;horizontal&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;depth&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day3&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 3 - Binary Diagnostic &lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah, day 3 of Advent of Code, where we traditionally get into nested-processing, working with binary, and parsing numbers based on their digits. I don&#39;t know that this literally happens on day 3 every year, but it seems a familiar progression in the early days of an Advent of Code challenge. My first thought is - let&#39;s make sure we iterate through the entire input as few times as possible, something made easier by the fact that epsilon and gamma are, in some sense, complements of each other.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This one&#39;s not too hard - using a &lt;code class=&#34;code&#34;&gt;defaultdict&lt;/code&gt; from the &lt;code class=&#34;code&#34;&gt;collections&lt;/code&gt; module makes the process of adding up the number of &#34;1&#34;&#39;s in all the input numbers a little cleaner.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day3/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; collections &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; defaultdict

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

numInputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data)
onesCount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;#Count the number of &amp;#34;1&amp;#34;&amp;#39;s at each digit position in all of the input numbers&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, digit &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(num):
        onesCount[i] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; int(digit)

&lt;span style=&#34;color:#75715e&#34;&gt;#Calculate gamma, epison as lists of strings (&amp;#34;1&amp;#34; and &amp;#34;0&amp;#34;)&lt;/span&gt;
gamma &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; onesCount[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; (numInputs &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(onesCount))]
epsilon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; gamma[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(onesCount))]

&lt;span style=&#34;color:#75715e&#34;&gt;#Concatenate lists, as 0b to represent binary, cast to int&lt;/span&gt;
result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0b&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(gamma), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0b&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(epsilon), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;gamma&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;epsilon&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;result&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Now we&#39;re moving into the realm of processing some input data with multiple passes, while restricting which data is in each pass based on our processing of previous steps. My initial solution was a little cumbersome, but I think gets the intention accross pretty well. &lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day2/Part2.py (Version 1)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    inputdata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mostCommonDigitInPosition&lt;/span&gt;(data, position):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sum([int(num[position]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; len(data)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;


oxyData &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [d &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; inputdata]
co2Data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [d &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; inputdata]

&lt;span style=&#34;color:#75715e&#34;&gt;#find Oxygen Rating&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(inputdata[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(oxyData) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    MCD_o2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mostCommonDigitInPosition(oxyData, i)
    oxyData &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [t &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; oxyData &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; t[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MCD_o2]

&lt;span style=&#34;color:#75715e&#34;&gt;#find CO2 Rating&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(inputdata[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(co2Data) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    MCD_co2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mostCommonDigitInPosition(co2Data, i)
    co2Data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [t &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; co2Data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; t[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; MCD_co2]

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(oxyData) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: oxygenRating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(oxyData[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Oxygen Data should only have one element, instead was &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;oxyData&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(co2Data) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: co2Rating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(co2Data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CO2 Data should only have one element, instead was &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;co2Data&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Product: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;oxygenRating&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; * &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;co2Rating&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;oxygenRating &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; co2Rating&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;We can refactor this a bit, so that the logic of reducing the list of input values is done in a function called &lt;code class=&#34;code&#34;&gt;calculateRating&lt;/code&gt;, which takes a list of data as well as a function. The function tells us, for a given digit position, what value at that position should be used to keep values in our data for our next round of culling.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While we could also get a little fancy and combine &lt;code class=&#34;code&#34;&gt;mostCommonDigitInPosition&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;leastCommonDigitInPosition&lt;/code&gt;, I think we&#39;d actually be in danger of making things &lt;span class=&#34;italic&#34;&gt;too&lt;/span&gt; concise. The difference between &lt;code class=&#34;code&#34;&gt;&gt;=&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;&gt;&lt;/code&gt; in each case is critical, and I think factoring that out might be too reductive.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day3/Part2.py (Version 2)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    inputdata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mostCommonDigitInPosition&lt;/span&gt;(data, position):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sum([int(num[position]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; len(data)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leastCommonDigitInPosition&lt;/span&gt;(data, position):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sum([int(num[position]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; len(data)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculateRating&lt;/span&gt;(data, digitFunc):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(data) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        digitToMatch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; digitFunc(data, i)
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [t &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; t[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; digitToMatch]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(data) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; int(data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Function calculateRating should termiante with one element, instead was &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

oxygenRating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calculateRating(inputdata, mostCommonDigitInPosition)
co2Rating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calculateRating(inputdata, leastCommonDigitInPosition)

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Product: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;oxygenRating&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; * &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;co2Rating&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;oxygenRating &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; co2Rating&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day4&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 4 - Giant Squid&lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Today my biggest obstacle was, as is often the case, myself trying to be too clever and concise. &lt;a href=&#34;https://adventofcode.com/2021/day/4&#34;&gt;Today&#39;s challenge&lt;/a&gt; invovled parsing a somewhat more involved text file of inputs, and then further processing that input to make it into a useful data structure. Rather than load each bingo card as a 2D array, I used the input data to create two separate arrays, one indexed by rows, the other by columns, with boards at the same position representing the same board. Determining whether a board is winning (given a list of called numbers) is a simple as asking whether any of the lines (rows or columns) in that board have all their members in the called numbers.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Had I simply constructed each type of input using &lt;code class=&#34;code&#34;&gt;for&lt;/code&gt; loops, this would have been fairly simply, but I wanted everything packaged up nice in a list comprehension... which took me a spell to troubleshoot and get right. Ah well.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day4/part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
        inputChunks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#---Parse the Input to make it useful----&lt;/span&gt;
    
    allCalledNumbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(num) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; inputChunks[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]
    boards &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(chunk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; chunk &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; inputChunks[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]] &lt;span style=&#34;color:#75715e&#34;&gt;#get boards&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#Make board list of ints instead of long string by splitting every 3 characters&lt;/span&gt;
    intBoards &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[int(b[n:n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(b), &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; boards]
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#boardrows is a list of boards, each of which are a list of rows in each board,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#each of which is a list of ints&lt;/span&gt;
    boardRows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[b[index:index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; intBoards]
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#boardcols is a list of boards, each of of which is a list of columns in each board,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#each of which is a list of ints&lt;/span&gt;
    boardCols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[[b[row][index] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; boardRows]
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#---Define some functions to help us solve the problem as written---&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#For a given board (by row or column), are any of its lines made up only of numbers in &amp;#39;calledNums&amp;#39;?&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isBoardAWin&lt;/span&gt;(board, calledNums):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; any([all([num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; calledNums &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; board])
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#Score is (sum of uncalled numbers on board) * (last number called)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calcScore&lt;/span&gt;(board, calledNumbers):
        unusedNumbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [num &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; board &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; calledNumbers]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum(unusedNumbers) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; calledNumbers[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doWin&lt;/span&gt;(board, calledNumbers):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Score is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;calcScore(b, calledSoFar)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        exit()
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#---Find solution---&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(allCalledNumbers)):
        calledSoFar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; allCalledNumbers[:i]
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Searching for wins with numbers &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;calledSoFar&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        winner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; boardRows:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isBoardAWin(b, calledSoFar):
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Winner board by row! &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;b&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
                doWin(b, calledSoFar)
    
    
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; boardCols:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isBoardAWin(b, calledSoFar):
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Winner board by column! &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;b&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
                doWin(b, calledSoFar)
    
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No winners after &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; numbers, calling next number&amp;#34;&lt;/span&gt;)
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, the infrastructure I built for part 1 of this puzzle was very useful for part to. Basically, instead of iterating through increasingly long lists of called numbers until the &lt;span class=&#34;italic&#34;&gt;first&lt;/span&gt; winning is found, keep going until only 1 board has not won, recall that it&#39;s the winner, then keep adding called numbers until it does win.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since all of the setup and parsing steps are the same, I&#39;ll only include the solution finding part of the code, for brevity:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day2/Part2.py &lt;span class=&#34;italic&#34;&gt;(Partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#---Find solution---&lt;/span&gt;

hasWon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; boards]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(allCalledNumbers)):
    calledSoFar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; allCalledNumbers[:i]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(boardRows):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isBoardAWin(b, calledSoFar):
            hasWon[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
            
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(boardCols):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isBoardAWin(b, calledSoFar):
            hasWon[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;

    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;After calling &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; numbers,&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; hasWon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        winningIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hasWon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;found last board to win at index: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;winningIndex&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; hasWon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This board wins after &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; numbers called,&amp;#34;&lt;/span&gt;,)
        doWin(boardCols[winningIndex], calledSoFar)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hasWon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; boards have not won&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day5&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 5 - Hydrothermal Venture &lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;One of the gotchas on this day is making incorrect assumptions about the ordering of points in a given line. For eaxmple, for a line with endpoints (3,5) and (3,0), doing something like: &lt;code class=&#34;code&#34;&gt;for y in range(point1.y, point2.y)&lt;/code&gt; will generate exactly one point &lt;code class=&#34;code&#34;&gt;(3.5)&lt;/code&gt;, because the ending y coordinate is less than the starting one. This can be fixed by either ranging over the values in a consistent direction (always from lesser to great, say) or by pre-sorting the line coordinates so that the first coordinate is always less than the second for the given axis. I chose to do the former.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Unrelatedly, I&#39;m personally a fan of &lt;a href=&#34;https://regex101.com/&#34;&gt;Regex101&lt;/a&gt; for working out regexes. It makes the process of fleshing out a given pattern visual and intuitive, and the built-in reference guides and regex tips are invaluable.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day5/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; collections &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; namedtuple

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

Line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Line&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p1x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p1y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p2x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p2y&amp;#39;&lt;/span&gt;])
parsedData &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
    reg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(.+),(.+) -&amp;gt; (.+),(.+)&amp;#39;&lt;/span&gt;, d)
    parsedData&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(Line(p1x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(reg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)), p1y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(reg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)), p2x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(reg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)), p2y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(reg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))))

horizontalLines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [l &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; parsedData &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2y]
verticalLines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [l &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; parsedData &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2x]

coveredOnce, coveredMany &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(), set()

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; horizontalLines:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; xCoord &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(min(l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1x, l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2x), max(l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1x, l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2x)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        point &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (xCoord, l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1y)
        &lt;span style=&#34;color:#75715e&#34;&gt;#If the point is already covered by multiple lines, we don&amp;#39;t need to do anything more with it, but&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; coveredMany:
            &lt;span style=&#34;color:#75715e&#34;&gt;#If we haven&amp;#39;t see it at all, we should mark that we&amp;#39;ve now seen it once.&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; coveredOnce:
                coveredOnce&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(point)
            &lt;span style=&#34;color:#75715e&#34;&gt;#Otherwise, we should mark that we&amp;#39;ve now seen it in multiple lines&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                coveredOnce&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(point)
                coveredMany&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(point)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; verticalLines:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; yCoord &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(min(l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1y, l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2y), max(l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1y, l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2y)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        point &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1x, yCoord)
        &lt;span style=&#34;color:#75715e&#34;&gt;#If the point is already covered by multiple lines, we don&amp;#39;t need to do anything more with it, but&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; coveredMany:
            &lt;span style=&#34;color:#75715e&#34;&gt;#If we haven&amp;#39;t see it at all, we should mark that we&amp;#39;ve now seen it once.&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; coveredOnce:
                coveredOnce&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(point)
            &lt;span style=&#34;color:#75715e&#34;&gt;#Otherwise, we should mark that we&amp;#39;ve now seen it in multiple lines&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                coveredOnce&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(point)
                coveredMany&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(point)
                
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Solution is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(coveredMany)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;italic post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Having selected to iterate over the points in a line in a consistent way in the first half, I felt it might be easier to pre-process the diagonal lines in the second half. That is, I swapped the endpoints of each diagonal line as necessary to ensure the point with the lower X coordinate was first. Then, if the second y coordinate is great  than the first, each time we increase the x coordinate by 1, we will by definition incrase the y coordinate by 1. If the second y coordinate is less than the first, y decreased by 1 for each increase of the x coordinate. Other than that, the processing of each point to see if it&#39;s been covered already is the same as in part one.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For brevity, I&#39;ve only included the addititional processing necessary for part 2 of today&#39;s challenge.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day5/Part2.py &lt;span class=&#34;italic&#34;&gt;(Partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;diagonalLines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [l &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; parsedData &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; verticalLines &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; horizontalLines]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; diagonalLines:
    &lt;span style=&#34;color:#75715e&#34;&gt;#Make sure the first coordinate of each line is left of the second coordinte&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1x: l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Line(p1x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2x, p1y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2y, p2x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1x, p2y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1y)
    &lt;span style=&#34;color:#75715e&#34;&gt;#Determine if y increases or descreases with increasing X&lt;/span&gt;
    yDir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1y &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; yDelta, xCoord &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(range(l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1x, l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)):
        point &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (xCoord, l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (yDelta&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;yDir))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; coveredMany:
            &lt;span style=&#34;color:#75715e&#34;&gt;#If we haven&amp;#39;t see it at all, we should mark that we&amp;#39;ve now seen it once.&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; coveredOnce: 
                coveredOnce&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(point)
            &lt;span style=&#34;color:#75715e&#34;&gt;#Otherwise, we should mark that we&amp;#39;ve now seen it in multiple lines&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                coveredOnce&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(point)
                coveredMany&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(point)

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Solution is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(coveredMany)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day6&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 6 - Lanternfish&lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Part one of &lt;a href=&#34;https://adventofcode.com/2021/day/6&#34;&gt;today&#39;s puzzle&lt;/a&gt; was deceptively simple. It asks the challenger to calculate the number of lanternfish present after a given number of steps of an iterative process. The way the puzzle&#39;s data is displayed in the examples presented, one might be tempted to keep the data as a long list of individual fish listed by the number of days till they next reproduce; then, for each step, iterate over the list and take the appropriate action. While this shold generate a solution, the list would quickly balloon out of the control. The key insight is that each fish that will, say, generate a new fish in 4 days, is identical to every other fish that will spawn a new fish in four days. So really, we don&#39;t need to track individual fish, just the total count of fish that will reproduce in a given number of days. For every day that passes, each of those counts of fish reduce their count by one, and we do some special accounting to the fish that are reproducing today, and iterate.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This quick and simple approach does make one worry that part 2 will require more convoluted reasoning though.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day6/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    inputdata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(num) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]

fishcounts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [inputdata&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(num) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
daysToRun &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(daysToRun):
    newfishcounts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fishcounts[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [fishcounts[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]
    newfishcounts[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; fishcounts[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    fishcounts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newfishcounts

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;After &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;daysToRun&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; days there are &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sum(fishcounts)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; lanternfish&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah! We&#39;ve gotten lucky here and avoided the &#39;gotcha&#39; that the puzzle writer was thinking of. The second step asks to calculate the number of fish present after 256 steps; if one had taken the &#34;process the whole list&#34; technique in part one, one would be screwed in part two as the exponential growth of the fish population really takes off. But with a condensed, iterative process like we used in part 1, one only has to change the &lt;code class=&#34;code&#34;&gt;daysToRun&lt;/code&gt; value to 256, and our answer pops out in less than a quarter of a second! Excellent. I&#39;m not even going to include the code a second time, since it is &lt;span class=&#34;italic&#34;&gt;identical to part 1 except for the value of &lt;code class=&#34;code&#34;&gt;daysToRun&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day6/Part2.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#See Day6/Part1.py, above&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day7&#34;&gt;Day 7 - The Treachery of Whales &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Just to humblebrag a bit (well, really, to brag; but hey, it&#39;s my website), I solved part 1 of day&#39;s challenge in the shower. My reasoing went something like the following:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;We&#39;re looking to select a point &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; that minimizes the function &lt;img src=&#34;day7/p1mineq.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;, as presented in problem setup.&lt;/li&gt;
    &lt;li&gt;Taking the derivative of this sum is somewhat complicated, but there&#39;s actually a better way to reason about it.&lt;/li&gt;
    &lt;li&gt;Looked at another way, we&#39;re looking to find a point &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; such that moving that point will only cause the total crab-distance traveled to increase; a local minimum.&lt;/li&gt;
    &lt;li&gt;Picture our point where our crabs our converging at a point &lt;img src=&#34;day7/x.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; on the number line, with &lt;img src=&#34;day7/n.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; crabs less than x and &lt;img src=&#34;day7/totalcrabsminusn.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; crabs great than &lt;img src=&#34;x.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; &lt;/li&gt;
    &lt;li&gt;As we slide our alignment point along the number line in a continuous fashion, if it moves a small distance &lt;img src=&#34;day7/deltax.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; in, say the positive direction:
        &lt;li class=&#34;pl-8&#34;&gt;We add &lt;img src=&#34;day7/ndeltax.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; units of additional crab travel, as we move further from the crabs at positions less than our alignment point, but&lt;/li&gt;
        &lt;li class=&#34;pl-8&#34;&gt;We subtract &lt;img src=&#34;day7/totalcrabsub.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; as we move closer to the crabs greater than our alignment point&lt;/li&gt;
    &lt;/li&gt;
    &lt;li&gt;And similarly, if &lt;img src=&#34;day7/deltax.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; is negative, we get closer to &lt;img src=&#34;day7/n.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; crabs and futher from &lt;img src=&#34;day7/totalcrabsminusn.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; crabs.&lt;/li&gt;
    &lt;li&gt;So, if &lt;img src=&#34;day7/ngreater.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;, increasing &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; will cause the total crab distance to descrease. And if &lt;img src=&#34;day7/nless.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;, decreasing &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; with cause thte total crab distance to increase.&lt;/li&gt;
    &lt;li&gt;But recall, what we want is to find a point where neither of those things is true; where &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; is at a mimumum, so any movement of it causes the total crab distance to incerase. This is only true where neither of the above inequalities is statisfied, i.e. when &lt;img src=&#34;day7/nequal.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;.&lt;/li&gt;
    &lt;li&gt;Moving some terms around, we find that the total crab distance travelled is at a mimimum when &lt;img src=&#34;day7/div2.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;, in other words, when the number of crabs greater than and less than the alignment point are equal. This is true when &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; is the median of the crab points.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;All that thinking in a warm shower yeilded a very short (and working) bit of code.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day7/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; statistics &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; median

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(num) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]

median &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; median(data)
minFuel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum([abs(d&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;median) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data])

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;minFuel&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Sadly, my brain failed me when trying to come up with a similarly clever solution for part 2, so I ended up implementing the crab-fuel-expenditure function as described in the problem statement and iteratively increasing and decreasing the alignment point value until a minimum was found. I had the code start at the median value of the list, somewhat arbitrarily, but the code still finishes in under a quarter of a second and yields the correct answer.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I skipped a couple of obvious optimizations. 
    &lt;ul class=&#34;pb-6 post-ul&#34;&gt;
        &lt;li&gt;Incrementing the position that we&#39;re currently testing the crab-distance of by only 1 unit each time probably isn&#39;t optimal (for my inputs, I had to evaluate 140 positions before finding a minimum). Perhaps some variation on Newton&#39;s method could have been used to estimate a better delta for &lt;code class=&#34;code&#34;&gt;testVal&lt;/code&gt;?&lt;/li&gt;
        &lt;li&gt;There might be a more ideal value to start the search at (the mean perhaps?).&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day7/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; statistics &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; median
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(num) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fuelUsed&lt;/span&gt;(crabPositions, position):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum([(abs(d &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; position)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(abs(d&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;position)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; crabPositions])
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lazyDict&lt;/span&gt;(dict):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__ (self, factory):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __missing__ (self, key):
            self[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory(key)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self[key]
    
    fuelToReach &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lazyDict(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: fuelUsed(data, x))
    
    med &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; median(data)
    fuelToReach[med] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fuelUsed(data, med)
    testVal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; med
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; ((fuelToReach[testVal] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; fuelToReach[testVal&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (fuelToReach[testVal] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; fuelToReach[testVal&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; fuelToReach[testVal&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; fuelToReach[testVal]: testVal &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; fuelToReach[testVal&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; fuelToReach[testVal]: testVal &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Something has gone wrong&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;fuelToReach&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Minimum required fuel is reached at position &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;testVal&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; with &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;fuelToReach[testVal]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; fuel used&amp;#34;&lt;/span&gt;)
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Calculated &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(fuelToReach)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; potential positions&amp;#34;&lt;/span&gt;)
    
    
    
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day8&#34;&gt;Day 8 - Seven Segment Search &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Whenever the first part of an AoC challenge says &lt;code class=&#34;code&#34;&gt;For now...&lt;/code&gt; you know you&#39;re in for an expansion of that area of the challenge in part 2. Today&#39;s part one specifcally says to &lt;code class=&#34;code&#34;&gt;For now, focus on the easy digits&lt;/code&gt;, meaning the hard digits are coming right down the pipe.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Part 1 is indeed pretty easy - it breaks down to parsing the input, throwing away half of it, then counting the members of a list that have a length of 2, 3, 4, or 7 letters. I had a feeling we&#39;d be parsing the actual digit information in part 2, so I fleshed out a bit of a dataclass to hold the input values, assuming I&#39;d expand this in part 2.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day8/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;displayRun&lt;/span&gt;:
    hookups: list[str]
    outputs: list[str]

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    runs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [displayRun(hookups &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;), outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)]

totalUnique &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum([sum([(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(segments) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; segments &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;outputs]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; runs])
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;totalUnique&lt;span style=&#34;color:#e6db74&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah, here we go, let&#39;s parse some digits. We&#39;ll need to figure out which actual segments (from &lt;code class=&#34;code&#34;&gt;&#39;abcdefg&#39;&lt;/code&gt;) are represented by which letters in the input rows.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll start by organizing the &#34;hookups&#34; (sequences of letters describing the segments lit up for a given digit) ina dictionary by the number of letters in each. This will help us tease apart which segment is which by looking at which segments are in how members members of each of thes lists.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For example, as part 1 illustrates, there is only 1 hookup with 2 segments (&#34;1&#34;) and 1 hookup with 2 segments (&#34;7&#34;). The segment connected to the &lt;code class=&#34;code&#34;&gt;a&lt;/code&gt; illuminator is present in the &#34;7&#34; hookup, but not in the &#34;1&#34; hookup, and that&#39;s their only difference, so it&#39;s easy to find what&#39;s wired to the &#34;a&#34; segment.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The remainder of the deductions are slightly more complicated. For example:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;In the 3 digits with 5 segments illuminated (2, 3, 5), there are three segments common to all three (segments, &lt;code class=&#34;code&#34;&gt;a&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;d&lt;/code&gt;, and &lt;code class=&#34;code&#34;&gt;g&lt;/code&gt;).&lt;/li&gt;
        &lt;li&gt;We&#39;ve already found what&#39;s hooked up to segment &lt;code class=&#34;code&#34;&gt;a&lt;/code&gt;, as above. So the remaining two common segments correspond to illuminators &lt;code class=&#34;code&#34;&gt;d&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;g&lt;/code&gt;, in some order.&lt;/li&gt;
        &lt;li&gt;The segment corresponding to &lt;code class=&#34;code&#34;&gt;d&lt;/code&gt; will be present in the single hookup with 4 illuminated sigments (which corresponds to the digit &#34;4&#34;); the segment corresponding to &lt;code class=&#34;code&#34;&gt;g&lt;/code&gt; will not. So we have established which segments should be wired now to &lt;code class=&#34;code&#34;&gt;d&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;g&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Similar logic allows us to work out:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;Segments &lt;code class=&#34;code&#34;&gt;e&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;b&lt;/code&gt; (both are in a single digit with 5 illuminated segments, with &lt;code class=&#34;codce&#34;&gt;e&lt;/code&gt; present in 2 hookups with 6 illuminated segments and &lt;code class=&#34;codce&#34;&gt;b&lt;/code&gt; present in 3).&lt;/li&gt;
        &lt;li&gt;Segments &lt;code class=&#34;code&#34;&gt;c&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;f&lt;/code&gt; (both are present in two digits with 5 illuminated segments, with &lt;code class=&#34;codce&#34;&gt;c&lt;/code&gt; present in 2 hookups with 6 illuminated segments and &lt;code class=&#34;codce&#34;&gt;f&lt;/code&gt; present in 3).&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There may be a more concise way of working this out, but this method worked out for me.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Once we know the mappings from poorly-wired-segments to true segments, we can iterate over all our input rows, transform the messed-up wirings to true wirings using this mapping, map the true mappings to digits, then sum them up.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day8/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(kw_only&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;displayRun&lt;/span&gt;:
    hookups: list[str]
    outputs: list[str]
    segmentAssigns : dict[str:str](default_factory&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dict)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    runs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [displayRun(hookups &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;), outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;), segmentAssigns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numFromSegmentsOn&lt;/span&gt;(segmentsOn):
    sortedLetters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(sorted([letter &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; letter &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; segmentsOn]))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcefg&amp;#39;&lt;/span&gt;   : &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cf&amp;#39;&lt;/span&gt;       : &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;acdeg&amp;#39;&lt;/span&gt;    : &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;acdfg&amp;#39;&lt;/span&gt;    : &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bcdf&amp;#39;&lt;/span&gt;     : &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abdfg&amp;#39;&lt;/span&gt;    : &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abdefg&amp;#39;&lt;/span&gt;   : &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;acf&amp;#39;&lt;/span&gt;      : &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;  : &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdfg&amp;#39;&lt;/span&gt;   : &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sorted letters &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sortedLetters&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; do not match any digit pattern&amp;#34;&lt;/span&gt;)


sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; runs:
    &lt;span style=&#34;color:#75715e&#34;&gt;#Determine display: control wire mapping&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#{&amp;#34;actual illuminated output: wire that currently controls it&amp;#34;}&lt;/span&gt;
    hookupsWithLen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        hookupsWithLen[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [h &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hookups &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(h) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; i]

    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;#know wiring of segment a]&lt;/span&gt;

    d_or_g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (len([h &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;])] &lt;span style=&#34;color:#75715e&#34;&gt;#based on hookups with 5 segments&lt;/span&gt;
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; d_or_g &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;#based on single length-4 hookup&lt;/span&gt;
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; d_or_g &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;]][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]


    b_or_e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len([h &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;#based on hookups with 5 segments on&lt;/span&gt;
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; b_or_e &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; len([h &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;#based on hookups with 5 segments and knowing &amp;#39;b&amp;#39; already&lt;/span&gt;
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; b_or_e &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;]][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]


    c_or_f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len([h &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;#based on hookups with 5 segments on&lt;/span&gt;
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; c_or_f &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; len([h &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; c_or_f &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;]][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

    &lt;span style=&#34;color:#75715e&#34;&gt;#convert miswired digits to real digits, then to numbers, and sum up&lt;/span&gt;
    rowSum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, digit &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;outputs):
        rewiredDigit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([seg &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;segmentAssigns[seg] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; digit])
        rewiredNum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numFromSegmentsOn(rewiredDigit)
        rowSum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; rewiredNum &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i)
    sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; rowSum

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Total of all rewired numbers: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sum&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;

&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day9&#34;&gt;Day 9 - Smoke Basin &lt;/h2&gt;&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Another classic evolution of the Advent of Code is working with adjacent items in a grid, with the biggest connundrum/gotcha being how to deal with the edges/corners. While the list comprehension I&#39;ve put together here isn&#39;t necessarily the most readable at first glance, nor the most efficient (it generates 9 positions, of which 4 are usable), it gets the job done.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day9/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; collections &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; defaultdict

data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    raw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    numRows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(raw)
    numCols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(raw[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r, row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(raw):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c, col &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(row):
            data[(r, c)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(col)

total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols):
        &lt;span style=&#34;color:#75715e&#34;&gt;#print([(r + deltar, c + deltac) for deltar in [-1, 0, 1] for deltac in [-1, 0, 1] if (deltar*deltac == 0 and deltar != deltac)])&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; all([data[(r, c)] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; data[(r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltar, c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltac)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (deltar&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;deltac &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; deltar &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; deltac)]):
            total &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; data[(r, c)] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;total&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The second part of today&#39;s challenge is essentially a flood-fill algorithm starting from the points we identified in part 1, ending when we reach the edges of the input data or a &#39;9&#39; in the data itself. By appending new points of interest to the end of the list (and only adding them if we haven&#39;t included them in the basin points already), we don&#39;t run into the issue of constantly checking points from each other.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Again, the meat of this solution is contained in a really long list comprehension. Probably not the most readable, as its checking four separate conditions to see if it should add a new point. Two have to do with generating the neighboring points, one to check if the newly checked point is a &#39;9&#39;, and one to check if we&#39;ve already included this point in the basin we&#39;re looking at.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Once we&#39;ve found the sizes of all the basins, we take the three largest sizes, multiply them together, and we have our answer.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day9/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; collections &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; defaultdict
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; prod

data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    raw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    numRows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(raw)
    numCols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(raw[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r, row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(raw):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c, col &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(row):
            data[(r, c)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(col)

basins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()

&lt;span style=&#34;color:#75715e&#34;&gt;#Find the low point for each bsain (as in part 1)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; all([data[(r, c)] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; data[(r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltar, c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltac)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (deltar&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;deltac &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; deltar &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; deltac)]):
            basins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([(r, c),])

&lt;span style=&#34;color:#75715e&#34;&gt;#Flood fill each basin until it hits a wall&lt;/span&gt;
basinLengths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; basins:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; b:
        b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extend([(pos[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltar, pos[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltac) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (deltar&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;deltac &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; deltar &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; deltac &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; data[(pos[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltar, pos[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltac)] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (pos[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltar, pos[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltac) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; b)])
    basinLengths&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(len(b))

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Solution: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;prod(sorted(basinLengths, reverse&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)[:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day10&#34;&gt;Day 10 - Syntax Scoring&lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Today&#39;s part 1 is not too hard if you understand the concept of a stack - a list from which things are only added or removed from the end. Our latest character can always be an opening bracket of some kind (starting a new chunk) or a closing bracket. For a closing bracket, if it matches the last opening bracket in our stack, pop the last opening bracket off the stack and throw both of them away. If it doesn&#39;t match, we&#39;ve found our first illegal character and can stop and score.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day10/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-96&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

lefts  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; ]
rights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; ]
points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,       &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;,     &lt;span style=&#34;color:#ae81ff&#34;&gt;1197&lt;/span&gt;,   &lt;span style=&#34;color:#ae81ff&#34;&gt;25137&lt;/span&gt;]

totalScore &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
    stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lefts:
            stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(char)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; rights:
            lastLeft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lefts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(lastLeft) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; rights&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(char):
                totalScore &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; points[rights&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(char)]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unkown character &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;totalScore&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For part 2, we&#39;ll score our incomplete lines if and only if there are no corrupt characters in the line; that is, if we reach the end of iterating through the line without hitting a corrupt character. This is what the &lt;code class=&#34;code&#34;&gt;for...else&lt;/code&gt; syntax achieves. We hand off these incomplete lines to the &lt;code class=&#34;code&#34;&gt;autocompleteScore&lt;/code&gt; method for scoring, append those scores to the list, and find the middle (median) element at the end.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day10/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; statistics &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; median

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

lefts  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; ]
rights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; ]
points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,      &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,      &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   ]

scores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;autocompleteScore&lt;/span&gt;(stack):
    score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stack[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
        score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (score &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; points[lefts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(item)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; score

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
    stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lefts:
            stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(char)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; rights:
            lastLeft &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lefts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(lastLeft) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; rights&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(char):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unkown character &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        scores&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(autocompleteScore(stack))

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;median(scores)&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day11&#34;&gt;Day 11 - Dumbo Octopus &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;We&#39;re getting deeper and deeper into coding ideas now; today&#39;s part 1 introduces a challenge which requires is to iterate over a data set, performing a unique operation as many times as we&#39;re able until we&#39;re unable to any longer.&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;Once again I&#39;m making sure of a dataclass to hold the state of each octopus, as well as lazy dictionary which allows us to treat the grid points outside of our area of interest as infinite sinks of energy.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day11/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OctoData&lt;/span&gt;:
    intensity: int
    flashedThisStep: bool

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lazyDict&lt;/span&gt;(dict):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __missing__ (self, key):
        self[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OctoData(intensity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, flashedThisStep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self[key]

grid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lazyDict()

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

numRows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data)
numCols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

&lt;span style=&#34;color:#75715e&#34;&gt;#Load data into dict&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range (numCols):
        grid[(r, c)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OctoData(intensity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(data[r][c]), flashedThisStep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printGrid&lt;/span&gt;(printFlashes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt; ):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols):
            val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intensity
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;: print(val, end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

numSteps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
numFlashes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numSteps):
    &lt;span style=&#34;color:#75715e&#34;&gt;#Increment by 1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols):
            grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        anyFlashesThisRound &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
        
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#Flash as necesasry&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;:
                    grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
                    numFlashes &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    anyFlashesThisRound &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;

                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt;(deltar &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; deltac &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;): grid[(r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltar, c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltac)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        fts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols)]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; anyFlashesThisRound: &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flashedThisStep: grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--&amp;#34;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;final:&amp;#34;&lt;/span&gt;)
printGrid()
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of Flashes: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;numFlashes&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Part 2 is very similar to part 1, except instead of tracking the total number of octopus flashes, we want to know on what step all the octopuses flash at once. The code is quite similar; I&#39;ve highlighted the key changes in the following code&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day11/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OctoData&lt;/span&gt;:
    intensity: int
    flashedThisStep: bool

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lazyDict&lt;/span&gt;(dict):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __missing__ (self, key):
        self[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OctoData(intensity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, flashedThisStep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self[key]

grid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lazyDict()

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

numRows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data)
numCols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

&lt;span style=&#34;color:#75715e&#34;&gt;#Load data into dict&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range (numCols):
        grid[(r, c)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OctoData(intensity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(data[r][c]), flashedThisStep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printGrid&lt;/span&gt;(printFlashes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt; ):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols):
            val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intensity
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;: print(val, end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;stepNumber &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;
printGrid()
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;    stepNumber &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#Increment by 1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols):
            grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        anyFlashesThisRound &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;#Flash as necesasry&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;:
                    grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
                    anyFlashesThisRound &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;

                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt;(deltar &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; deltac &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;): grid[(r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltar, c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; deltac)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        fts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols)]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; anyFlashesThisRound: &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flashedThisStep: grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sum([grid[(r,c)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numCols)]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--&amp;#34;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;final:&amp;#34;&lt;/span&gt;)
printGrid()
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All flashed on step &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;stepNumber&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day12&#34;&gt;Day 12 - Passage Pathing &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m not 100% proud of my solution to today&#39;s problems, though it definitely works. Mostly, the way I&#39;m generating the possible-next routes from the currently-arrived-at-room for any given path is just a little hacky. I&#39;m getting a list of all paths (pairs of connected caves) that include the current cave, then finding the element in that path that isn&#39;t the current cave. I have to loop through the full list of cave connections every time I want to do this, rather than generating a list of possible connections for each cave out the outset. The efficiency hit here is significant, but for the data size in the problem, it turns out to be fine. &lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day12/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Route&lt;/span&gt;():
    pathSoFar: list
    currentCave: str
    smallCavesVisited: list

startingPaths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [path &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; path]
routesInProgress &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [Route(pathSoFar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[s], smallCavesVisited&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt;(all([item &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s])) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; s, currentCave &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(set(s) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;})[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; startingPaths]
completeRoutes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(len(routesInProgress) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
    nextRoutes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; routesInProgress:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currentCave &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;:
            completeRoutes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(r)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#Get all path segments including hte current room&lt;/span&gt;
            nextPaths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [path &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currentCave &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; path]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nextPaths:
                &lt;span style=&#34;color:#75715e&#34;&gt;#Get the room this path segment would lead to (it&amp;#39;s the room that&amp;#39;s not our current room)&lt;/span&gt;
                nextCave &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [item &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; p &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currentCave][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
                &lt;span style=&#34;color:#75715e&#34;&gt;#Can&amp;#39;t go to a little room twice&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;smallCavesVisited:
                    newPath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathSoFar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [p]
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nextCave&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower():
                        &lt;span style=&#34;color:#75715e&#34;&gt;#If we&amp;#39;re now going to be in a little room, add it to the list of little rooms we&amp;#39;ve visited&lt;/span&gt;
                        newSmallCaves &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;smallCavesVisited &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [nextCave]
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                        &lt;span style=&#34;color:#75715e&#34;&gt;#Otherwise, the list of little rooms visited doens&amp;#39;t change&lt;/span&gt;
                        newSmallCaves &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;smallCavesVisited
                    nextRoutes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(Route(pathSoFar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newPath, smallCavesVisited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newSmallCaves, currentCave &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nextCave))
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

    routesInProgress &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nextRoutes

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Total routes: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(completeRoutes)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For part 2, we&#39;ll need to track not only which small caves we&#39;ve visited, but how many times we&#39;ve visited them. So we&#39;ll need the Route object to have, not just a list of small caves, but a &lt;code class=&#34;code&#34;&gt;dict&lt;/code&gt; with keys as small caves and values of how many times we&#39;ve been there. Then, we&#39;ll change the criteria for whether we can visit a small cave next to include the possibility of visited a small cave twice if we&#39;ve yet to visit any small cave twice.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day12/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Route&lt;/span&gt;():
    pathSoFar: list
    currentCave: str
    smallCavesVisited: dict &lt;span style=&#34;color:#75715e&#34;&gt;#[&amp;#39;a&amp;#39;, numberOfTimesVisited]. This is the key change&lt;/span&gt;

startingPaths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [path &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; path] 
routesInProgress &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; startingPaths:
    route &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;)
    current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower(): smalls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, str(s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]):&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: smalls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}
    routesInProgress&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(Route(pathSoFar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(route), smallCavesVisited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; smalls, currentCave &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current))

completeRoutes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(len(routesInProgress) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
    nextRoutes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; routesInProgress:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currentCave &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;:
            completeRoutes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(r)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            nextPaths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [path &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currentCave &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; path &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; path]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nextPaths:
                nextCave &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [item &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; p &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currentCave][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;smallCavesVisited &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;smallCavesVisited[nextCave] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; any([(v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;smallCavesVisited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values()])):
                    newPath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathSoFar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nextCave 
                    newSmallCaves &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;smallCavesVisited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nextCave&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower():
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;smallCavesVisited:
                            newSmallCaves[nextCave] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                            newSmallCaves[nextCave] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    nextRoutes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(Route(pathSoFar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newPath, smallCavesVisited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newSmallCaves, currentCave &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nextCave))

    routesInProgress &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nextRoutes

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Total routes: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(completeRoutes)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day13&#34;&gt;Day 13 - Transparent Origami &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A surprisingly easy challenge for day 13, I thought. Basically, for a list of points, which have (x or y as appropriate) coodinates greater than a given number, then reflect that point over a given line. So we do a little data parsing, and we use Python &lt;code class=&#34;code&#34;&gt;sets&lt;/code&gt; to eliminate duplicates.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day13/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set([(int(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]), int(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)])

foldPattern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fold along (.)=(\d+)&amp;#39;&lt;/span&gt;
folds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(foldPattern, line)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),int(re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(foldPattern, line)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;executeFold&lt;/span&gt;(points, f):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; doXFold(points, f)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; doYFold(points, f)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Expected fold in x or y, got fold &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;f&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doXFold&lt;/span&gt;(points, f):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; set([p &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; p[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (p[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]), p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doYFold&lt;/span&gt;(points, f):
    retSet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: retSet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(p)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: retSet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((p[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; retSet

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printPoints&lt;/span&gt;(points):
    maxX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max([p[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points])
    maxY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max([p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(maxY&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(maxX&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points: print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(executeFold(points, folds[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;And, since the first part sets up the general mechanics of the problem, all we need to do for part 2 is execute all the folds, then print out the formatted output.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For brevity, here&#39;s the only change required for part 2:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day13/Part2.py &lt;span class=&#34;italic&#34;&gt;(Partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; folds:
        points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; executeFold(points, f)
    printPoints(points)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day14&#34;&gt;Day 14 - Extended Polymerization &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There were lots of jokes on  &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;/r/adventofcode&lt;/a&gt; today about this being a return to the lanternfish we saw on &lt;a href=&#34;#day6&#34;&gt;day 6&lt;/a&gt;. Indeed, it has a similar flavor, with an expotentially-increasing processing space that you can brute-force your way through in part 1, if you want, but that will hose you for part 2.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The brute-forcing is easy though! For each pair of letters in the current step, we add a new letter in between them based on the rules given in our input. This means our list of letters doubles in length every step, but at only 10 steps, we should be fine, right?&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; collections &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Counter

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
rules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;):
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(..) -&amp;gt; (.)&amp;#39;&lt;/span&gt;, line)
    rules[r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doStep&lt;/span&gt;(template):
    additions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(template)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(template[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])):
        letterPair &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; template[i:i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; letterPair &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; rules: additions[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rules[letterPair]
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([val &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(template, additions) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; pair] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [template[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]])

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):
    template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; doStep(template)

counts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter(template)
lCount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sorted(counts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items(), key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

minimum, maximum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lCount[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], lCount[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Result is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;maximum &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; minimum&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;...oh, now it&#39;s 40 steps. Dang.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, just like with those dang lanternfish, we don&#39;t actually have the store the whole list of letters between each round. The key observation is that each pair of letters geneates a unique pair of pairs of letters for the next step. E.g., for the example input, the pair &lt;code class=&#34;code&#34;&gt;NN&lt;/code&gt; combined with the rule  &lt;code class=&#34;code&#34;&gt;NN -&gt; C&lt;/code&gt; means that if there is a one pair NN at the beginning of a step, there will be one &lt;code class=&#34;code&#34;&gt;NC&lt;/code&gt; and one &lt;code class=&#34;code&#34;&gt;CN&lt;/code&gt; after that step. Or at least, one of each contributed by the &lt;code class=&#34;code&#34;&gt;NN&lt;/code&gt;, as there could be more &lt;code class=&#34;code&#34;&gt;CN&lt;/code&gt;&#39;s and &lt;code class=&#34;code&#34;&gt;NC&lt;/code&gt;&#39;s generated by other rules.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But, we can store the possible letter combinations in a dictionary which tracks their count, and then apply these rules at each step to get our answer. We do have to be a little clever about counting up letters at the end - if we total up the counts from each pair a given letter is in, we&#39;ll get double our answer... except for the first and last characters of our string, which will be counted exactly 1 less time. Thankfully, the first and laster letters never change under any rule, so we can note those right at the beginning of our code and account for them later.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

firstLetter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
lastLetter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        letterPair &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][i:i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
        template[letterPair] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (template[letterPair] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; letterPair &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; template &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

rules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;):
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(..) -&amp;gt; (.)&amp;#39;&lt;/span&gt;, line)
    rules[r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doStep&lt;/span&gt;(template):
    newTemplate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pairOfLetters &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; template:
        nextPairOne &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rules[pairOfLetters][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        newTemplate[nextPairOne] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (newTemplate[nextPairOne] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; template[pairOfLetters]) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nextPairOne &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; newTemplate &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; template[pairOfLetters]

        nextPairTwo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rules[pairOfLetters][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        newTemplate[nextPairTwo] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (newTemplate[nextPairTwo] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; template[pairOfLetters]) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nextPairTwo &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; newTemplate &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; template[pairOfLetters]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; newTemplate

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getLetterCounts&lt;/span&gt;(template):
    letterCounts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; template:
        letterCounts[pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (template[pair] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; letterCounts[pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; letterCounts &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; template[pair]
        letterCounts[pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (template[pair] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; letterCounts[pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pair[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; letterCounts &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; template[pair]
    letterCounts[firstLetter] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    letterCounts[lastLetter] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {key: val&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key, val &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; letterCounts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()}

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;):
    template &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; doStep(template)

lCount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sorted(getLetterCounts(template)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items(), key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
minimum, maximum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lCount[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], lCount[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Result is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;maximum &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; minimum&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;

&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day15&#34;&gt;Day 15 - Chiton &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Dolor velit incididunt cillum incididunt sint amet reprehenderit commodo magna Lorem proident duis do.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#some code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Pariatur incididunt veniam tempor eiusmod sunt id labore occaecat nostrud fugiat.&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;At this point, I thought it might be useful to try to optimize my algorithm a little bit by tweaking my heuristic distance function.
&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#some code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;

&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day15&#34;&gt;Day 15 - Chiton &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A pathfinding day! We&#39;ll use a modified A* pathfinding algorithm to start this one, but where the H-value of each space (the heurtistic that&#39;s usually based on cartesian distance to the endpoint) is zero.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As part of the development and debugging process, I took the opportunity to explore some terminal-based display methods, using the curses library. (Well, on windows, the windows-curses port of the same). The map-utils file and the mapDisplay class allow for single-stepping the map pathfinding while exploring the value at each space.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day15/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;97
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Any
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; termcolor &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; colored, cprint
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; maputils &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; mapDisplay
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; astarutils &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; calc_h_cost

showMaps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

risk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y, line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(data):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, val &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(line):
        risk[(x, y)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(val)

maxY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data)
maxX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PointData&lt;/span&gt;():
    f_cost: int
    parent: Any

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getNeighbors&lt;/span&gt;(point):
    nList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; delta &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]:
        testPoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (point[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;delta[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], point[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; delta[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; testPoint[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; maxX) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; testPoint[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; maxY): nList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(testPoint)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nList

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printMap&lt;/span&gt;(openPoints, closedPoints, activePoint):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(maxY):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(maxX):
            val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; risk[(x,y)]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x,y) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; activePoint: cprint(val, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;grey&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;on_green&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; closedPoints: cprint(val, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; openPoints: cprint(val, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:cprint(val, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findPath&lt;/span&gt;(start, end):
    locationScores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {start: PointData(f_cost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, parent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)}
    openPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {start}
    closedPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()

    oldSelection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; showMaps:
            m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mapDisplay(maxX, maxY, risk, locationScores&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;locationScores, openPoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;openPoints, closedPoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;closedPoints, oldSelection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; oldSelection)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: exit()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: oldSelection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;selection&amp;#39;&lt;/span&gt;]

        costList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sorted([p &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; openPoints], key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; p:locationScores[p]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;f_cost)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(costList) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: lowestCostPoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; costList[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#???&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;#printMap(openPoints, closedPoints, lowestCostPoint)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(f&amp;#34;Cheapest next point is {lowestCostPoint}:{locationScores[lowestCostPoint]}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lowestCostPoint &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; end: &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; 

        closedPoints&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(lowestCostPoint)
        openPoints&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(lowestCostPoint)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; newPoint &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; getNeighbors(lowestCostPoint):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; newPoint &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; closedPoints:
                &lt;span style=&#34;color:#75715e&#34;&gt;#print(f&amp;#34;Exploring neighbor {newPoint} of {lowestCostPoint}&amp;#34;)&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; newPoint &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; openPoints: &lt;span style=&#34;color:#75715e&#34;&gt;#  or (risk[newPoint] + cost(lowestCostPoint, closedPoints[lowestCostPoint])) &amp;lt; 100000000: #TODO or new path to neighbor is cheaper&lt;/span&gt;
                    newFCost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; locationScores[lowestCostPoint]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;f_cost &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; calc_h_cost(newPoint, end) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; risk[newPoint]
                    locationScores[newPoint] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PointData(f_cost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;newFCost, parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lowestCostPoint)
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; newPoint &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; openPoints:
                        openPoints&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(newPoint)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

    scoringPoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lowestCostPoint
    totalRisk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    pathPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [scoringPoint]
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;Calculating Path Score:&amp;#34;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; locationScores[scoringPoint]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parent &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; showMaps:
            m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mapDisplay(maxX, maxY, risk, locationScores&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;locationScores, openPoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;openPoints, closedPoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;closedPoints, pathPoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pathPoints, oldSelection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; oldSelection, pathLength&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;totalRisk)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: exit()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: oldSelection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;selection&amp;#39;&lt;/span&gt;]

        totalRisk &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; risk[scoringPoint]
        scoringPoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; locationScores[scoringPoint]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parent
        pathPoints&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(scoringPoint)

    &lt;span style=&#34;color:#75715e&#34;&gt;#totalRisk -= risk[(0,0)]&lt;/span&gt;

    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;totalRisk&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    findPath((&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (maxX&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, maxY&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;pt-8 code-title&#34;&gt;Day15/maputils.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; curses
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sleep
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; astarutils &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; calc_h_cost

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mapDisplay&lt;/span&gt;():
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, maxX, maxY, risk, locationScores&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], openPoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], closedPoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], pathPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], oldSelection&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, pathLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;maxX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; maxX
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;maxY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; maxY
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;risk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; risk
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;locationScores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; locationScores
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;openPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; openPoints
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;closedPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; closedPoints
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; oldSelection
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pathPoints
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pathLength
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;retCode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;selection&amp;#39;&lt;/span&gt;: self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (maxX&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, maxY&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; end

    screen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;initscr()
    screen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keypad(&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start_color()
    &lt;span style=&#34;color:#75715e&#34;&gt;#color pair 0 is white on black standard&lt;/span&gt;
    curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_GREEN, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_BLACK) &lt;span style=&#34;color:#75715e&#34;&gt;#1 - open points&lt;/span&gt;
    curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_RED, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_BLACK) &lt;span style=&#34;color:#75715e&#34;&gt;#2 - closed points&lt;/span&gt;
    curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_YELLOW, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_BLACK) &lt;span style=&#34;color:#75715e&#34;&gt;#3 - end point &lt;/span&gt;
    curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_MAGENTA, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_BLACK) &lt;span style=&#34;color:#75715e&#34;&gt;#4 -  final path&lt;/span&gt;

    curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_WHITE) &lt;span style=&#34;color:#75715e&#34;&gt;#11 - open points highlighted&lt;/span&gt;
    curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_GREEN) &lt;span style=&#34;color:#75715e&#34;&gt;#11 - open points highlighted&lt;/span&gt;
    curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_RED) &lt;span style=&#34;color:#75715e&#34;&gt;#12 - closed points highlighted&lt;/span&gt;
    curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_YELLOW) &lt;span style=&#34;color:#75715e&#34;&gt;#13 - end point &lt;/span&gt;
    curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLOR_MAGENTA) &lt;span style=&#34;color:#75715e&#34;&gt;#14 - final path&lt;/span&gt;


    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map_pad &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newpad(maxY&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,maxX&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newpad(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Coords:&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F_Cost:&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;G_Cost:&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;H_Cost:&amp;#34;&lt;/span&gt;)

    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instruction_pad &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newpad(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instruction_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Arrow keys to move&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instruction_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter to advance&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instruction_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Esc to hard quit&amp;#34;&lt;/span&gt;)

    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open_pad &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newpad(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Open Points&amp;#34;&lt;/span&gt;, curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;A_UNDERLINE)
        
    curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;noecho()
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;redraw()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; screen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getch()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#Enter to continue&lt;/span&gt;
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#Escape to quit&lt;/span&gt;
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#d&lt;/span&gt;
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;redraw()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;456&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#numpad down&lt;/span&gt;
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, maxY)
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;redraw()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;450&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#numpad up&lt;/span&gt;
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;redraw()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;452&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#numpad left&lt;/span&gt;
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;redraw()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;454&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#numpad right&lt;/span&gt;
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, maxX)
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;redraw()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;redraw&lt;/span&gt;(self): &lt;span style=&#34;color:#75715e&#34;&gt;#pad, maxX, maxY, risk, locationScores=[], openPoints=[], closedPoints=[], selection=[0,0]):&lt;/span&gt;
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;updateMapPad()
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update_info_pad()
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update_instruction_pad()
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update_open_pad()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updateMapPad&lt;/span&gt;(self):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;maxX):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;maxY):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; [x, y] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x,y) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;end: color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathPoints: color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;openPoints: color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;closedPoints: color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x,y) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;end: color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathPoints: color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;openPoints: color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;closedPoints: color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addch(y, x, str(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;risk[(x,y)]), color)

    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;refresh(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,curses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;LINES&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update_info_pad&lt;/span&gt;(self):
    &lt;span style=&#34;color:#75715e&#34;&gt;#Coordinates&lt;/span&gt;
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;          &amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,str(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection))

    &lt;span style=&#34;color:#75715e&#34;&gt;#F Cost&lt;/span&gt;
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;          &amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; tuple(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;locationScores:
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,str(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;locationScores[tuple(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;f_cost) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;      &amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,str(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;locationScores[tuple(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;g_cost) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;      &amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unknown&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unknown&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;#H Cost&lt;/span&gt;
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;         &amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,str(calc_h_cost(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;end)))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathPoints &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; []:
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Path Length:&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,str(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pathLength))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Searching...&amp;#34;&lt;/span&gt;)

    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;refresh(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update_instruction_pad&lt;/span&gt;(self):
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instruction_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;refresh(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update_open_pad&lt;/span&gt;(self):
    pointList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sorted(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;openPoints[:min(len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;openPoints), &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;)], key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x:self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;locationScores[x]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;f_cost)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(pointList):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addstr(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;p&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; - &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;locationScores[p]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;f_cost&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open_pad&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;refresh(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, the algorithm from part 1 is efficient enough to be used in the larger data size in part 2. For brevity, here&#39;s just the input-generating lines of part 2; the algorithm is the same.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day15/Part2.py &lt;span class=&#34;italic&#34;&gt;(partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

originalRisk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y, line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(data):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, val &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(line):
        originalRisk[(x, y)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(val)

original_maxY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data)
original_maxX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

risk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x_copy &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y_copy &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(original_maxX):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(original_maxY):
                risk[(x_copy&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;original_maxX &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i, y_copy&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;original_maxY &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (originalRisk[(i,j)] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x_copy &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y_copy &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

maxY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; original_maxY &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
maxX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; original_maxX &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
totalPoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; maxY &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; maxY&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;

&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day17&#34;&gt;Day 17 - Trick Shot&lt;/h2&gt; --&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Part one of today&#39;s challenge can be solved by logical deduction with a minimum of coding. With the movement described, a probe moving upward will always pass though y=0 on its way back down; the fastest speed it can reach at this point is when its next step &lt;span class=&#34;italic&#34;&gt;just&lt;/span&gt; clips the bottom of the target area, ie. when its downward speed is equal to the lower y coordinate of our input. Because the y speed increases downward by 1 unit per timestep, the highest point on its trajectory is the sum of all speeds up to and including this one. That is, our solution will be the sum of all numbers up to and including our lower-y bound.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I solved this one using the Python REPL as a calculator using &lt;code class=&#34;code&#34;&gt;sum(range(maxY))&lt;/code&gt;, but as an actual script it might look like:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day17/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

maxY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y=(-?\d+)&amp;#39;&lt;/span&gt;, data)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
print(sum(range(abs(maxY))))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There might be a similarly clever way to reason about part 2, but I elected to just find the solutions by iterating over the (fairly reasonable) possibilities for the starting velocity. I got a little fancy with a dataclass and NamedTuple for the current location and target area, but that&#39;s not strictly necessary.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day17/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

reg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x=(\d+)\.\.(\d+), y=(-?\d+)\.\.(-?\d+)&amp;#39;&lt;/span&gt;, data)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;region&lt;/span&gt;(NamedTuple):
    minX: int
    maxX: int
    minY: int
    maxY: int

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pointIn&lt;/span&gt;(self, x, y):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;minX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;maxX) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;minY &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;maxY)

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;():
    x: int
    y: int

target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; region(minX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(reg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)), maxX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(reg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)), minY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(reg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)), maxY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(reg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)))
input(target)

validInitialVelocities &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
&lt;span style=&#34;color:#75715e&#34;&gt;#Highest Y initial speed is abs(maxY) as in part 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Lowest Y initial speed is minY&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Highest X initial speed is abs(maxX) (or we&amp;#39;ll definitely overshoot)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Lowest X initial speed is 1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; initialSpeed_X &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;maxX&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; initialSpeed_Y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;minY, abs(target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;minY)):
        currentXSpeed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; initialSpeed_X
        currentYSpeed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; initialSpeed_Y
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(f&amp;#34;Examining intial speed {(initialSpeed_X, initialSpeed_Y)}&amp;#34;)&lt;/span&gt;
        loc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; point(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (loc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;minY &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; loc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;maxX&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pointIn(loc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x, loc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y):
                validInitialVelocities&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((initialSpeed_X, initialSpeed_Y))
                &lt;span style=&#34;color:#75715e&#34;&gt;#print(f&amp;#34;Found valid velocity {(initialSpeed_X, initialSpeed_Y)}&amp;#34;)&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
            loc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; currentXSpeed
            loc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; currentYSpeed
            currentXSpeed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(currentXSpeed &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            currentYSpeed &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(validInitialVelocities)&lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt; --&gt;

&lt;!-- &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;dayxxx&#34;&gt;Day xxx - xxx &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Dolor velit incididunt cillum incididunt sint amet reprehenderit commodo magna Lorem proident duis do.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#some code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Pariatur incididunt veniam tempor eiusmod sunt id labore occaecat nostrud fugiat.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#some code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt; --&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020: Day 2-9</title>
      <link>https://jeff.glass/backup-post/advent-of-code-2020-day-2-9/</link>
      <pubDate>Wed, 02 Dec 2020 16:17:42 -0500</pubDate>
      
      <guid>https://jeff.glass/backup-post/advent-of-code-2020-day-2-9/</guid>
      <description>
&lt;!--&lt;script src=&#34;&lt;script src=&#34;https://gist.github.com/JeffersGlass/c9e89c313081b88574ebb759d7e3e72e.js&#34;&gt;&lt;/script&gt;.js&#34;&gt;&lt;/script&gt;--&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;strong&gt;&lt;a data-type=&#34;URL&#34; href=&#39;.js&#34;&#39;&gt;Code for all days is on GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Day 2&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Nothing terribly fancy going on with the day 2 challenge - essentially, reading in a text file and doing operations on strings. After developing the ability to split the input lines and validate them in part one, part 2 throws a curveball by changing up how the lines should be validated. I refactored my &#34;isValidLine&#34; code to take a validation function as one of its arguments, since the parsing/splitting of the line is the same for both parts 1 and 2.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;(&lt;em&gt;The names of the validation functions come from the problem description - they validate the passwords for a sled company and a toboggan company, respectively&lt;/em&gt;.)&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/7e97c17b46a2779e50b9005c27c26c95.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 3&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;A slightly more involved bit of data and text processing today, as we help our would-be tobogganist make it down a snowy slope covered in trees. As a way of pushing my Python knowledge, I tried to complete both parts of today&#39;s challenge using list comprehensions and iterative functions like map, reduce, enumerate, etc. My impulse is to write things out more explicitly by iterating through the elements of input in a for loop, but practicing the list comprehensions and their related utility functions feels good.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Is the inline code better than the more verbose versions? I&#39;m not entirely sure - it&#39;s certainly less readable than the expanded-into-a-loop versions. It&#39;s also somewhat harder to debug, because there aren&#39;t logical places to, say, print intermediate results. So something like my getSlopeTrees() function, as written, is just silly-long and hard to read - the getSlopeTreesVerbose() function, which I wrote as part of troubleshooting a specific issue is definitely more readable.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;The punchline of my issue was: at least in Python 3.9, floats can&#39;t be used as list indices, even if they&#39;re integers. That is, even if a float for which is_integer() returns true, you must explicitly cast that float to an integer to use it index a list. In code form:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/e2ceed37a5b459304216389328854e87.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;So, another thing learned. Thanks Advent of Code!&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Here&#39;s the full code from Day 3:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/9dbd5c3977a9ddaa59308001d55dd48a.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 4&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;We can slowly feel the difficulty starting to ramp up here in day four. We&#39;re still walking on paved roads, as it were, but they&#39;re not as well maintained as they used to be in day one.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Today&#39;s problem concerns more text parsing - the first part just says to validate, essentially, that 7 unique strings are present between sets of blank lines in the input file. The code for this is pretty straightforward - I tried for a little while to do it all in one list comprehension, but ended up splitting it into two lines, which I think is clearer. To be sure, I don&#39;t think that doing it in one comprehension would be &lt;em&gt;better&lt;/em&gt;, just that I thought it would be fun practice.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/cf670f595c99db49b8564cc600ce26c6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Of course, with the problem statement framing these 7 strings as labels for values in a passport (eyc:blu, hgt:171cm, etc), it seemed like a straight guess that we&#39;d actually have to parse those values by field and do something with them in part two. And of course, we were right. For each of the 7 fields, validation criteria are listed, including ensuring certain fields are numerical and within certain bounds, prepended or postended by certain characters, and so on. &lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;This part turned out ok - it takes the text file, splits it into individual passport strings, then splits each of those into a list of strings of the form &#34;key:value&#34;. The part that feels most &#34;un-Pythonic&#34; to me is the part (commented below) that turns that list of lists of strings into a list of dictionaries. I figure there&#39;s got to be a way to do that with a comprehension, but I couldn&#39;t quite make it work, so I did it as a couple For loops. It works fun, just feels a little clunky.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;I also implemented my own prettyPrintPassword function (and its alias &#39;ppp&#39;) - it doesn&#39;t do any sorting of the fields, and it doesn&#39;t show you &lt;em&gt;why&lt;/em&gt; a passport is invalid if it fails, but it did what I needed it to do for troubleshooting purposes.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/de08f5f205eddaccbe56980f9b3d4d29.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 5&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Wow, a quickie today! The title of the day&#39;s challenge (&#39;Binary Boarding&#39;) gives you a pretty strong clue what it&#39;s going to be about. The challenge is essentially to parse text representing binary numbers in your language of choice and find the minimum, maximum, and missing values in between. &lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;This is my shortest solution so far, at only 5 lines of code (for both parts!):&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/a233c4ef04fc5eb9422bebf8b0106770.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;This is where Python&#39;s use of convenience generators (like range), built in math functions on general iterators (like min and max), and lots of string functionality (like replace) really shines - the code is easy to write and clean.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Looking back at &lt;a &#34;=&#34;&#34; 11=&#34;&#34; 2020=&#34;&#34; 25=&#34;&#34; advent-of-code-2020=&#34;&#34; data-id=&#34;3332&#34; data-type=&#34;post&#34; href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34; jeff.glass=&#34;&#34;&gt;my goals for Code.js&#34;&amp;gt; Advent 2020&lt;/a&gt;, I&#39;d say I&#39;m doing pretty well - I&#39;m already feeling more fluent/comfortable with list/dictionary comprehensions, the git workflow is becoming more natural, and I&#39;ve completed each project on the day it&#39;s issued. Not too much challenge in terms of the algorithms and data structures so far, but then it is only day 5....&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;em&gt;This post will be updated with code from a handful of future days, until it gets too long/unwieldy.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Day 6&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;As it turns out, talking out loud while generating algorithms while writing code is... hard. &lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;I coded up the solution to Day 6 &lt;a href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34; watch?v=&#39;s7UDMUALBxU&#34;&#39; www.youtube.com=&#34;&#34;&gt;live on stream on Sunday.js&#34;&amp;gt; night&lt;/a&gt;, which was both fun and challenging. Part one of the challenge wasn&#39;t too terribly hard - it basically asks whether each letter of the alphabet is contained between any pair of blank links (&#34;\n\n&#34;) in the input file. That&#39;s a solution that only takes a few lines to write.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;I ended up writing three solutions to part 2. I ended up ordering them in the code in order of their complexity/lines of code, but that&#39;s not the order I wrote them in. I first wrote a really over-complicated solution (3), then condensed it down to a single list comprehension (1), then expanded that back out just a little to make it more readable. Like I said on stream, if I were writing this code to go into some kind of actual codebase, I think solution (2) is the one I&#39;d use - it&#39;s concise enough to be comprehensible, but long enough to not be overwhelmingly dense.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/2801abec57bce67bad64d553974984b6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 7&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Oof, this day too far, far longer than it should have, all because I misunderstood Python&#39;s strip() function. strip, for those who are wondering, removes any of the set of characters given as its arguments from the beginning or end of a string. So, &#34;Hello World&#34;.strip(&#39;Hld&#39;) =&amp;gt; &#34;ello Wor&#34;. Unfortunately, I thought that the strip function removed the exact &lt;em&gt;string&lt;/em&gt; given it it as an argument, leading to it stripping additional characters off of the end of some inputs and causing my parsing to be wrong. Oof.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;In any case, the two halves of day 7 involve creating a tree of data in two different ways (one in which parents reference children, and one in which children reference parents). Then we sum up the total number of parents or children, unweighted or weighted, respectively.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/52440fef8db4118166b0cda14c6e7a65.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 8&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Day 8 is giving me flashbacks to the &lt;a 2&#34;=&#34;&#34; 2019=&#34;&#34; adventofcode.com=&#34;&#34; day=&#34;&#34; href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34;&gt;intcode challenges&lt;/a&gt; of 2019! .js&#34;&amp;gt;But it&#39;s a much softer start this time - we only have three pseudo-assembly instructions to parse, and simpler questions to answer. Once we&#39;ve built a simple function for processing a given list of these instructions, we&#39;ve solved part one. Part 2 requires iterating over our input data and manipulating it slightly, and testing to see whether the new version of the input fulfills the required condition, so our code will need to work over general lists of instructions.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;The only thing that hung me up today was forgetting to take into account how Python&#39;s lists handle objects. Specifically, this is the behavior that I was (rightly, but unwantedly) seeing:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code&gt;listA = [[1,2],[2,4],[3,6]]&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;listB = [a for a in listA]&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;listB[0] = [4, 8]&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;print(listA)&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&amp;gt;&amp;gt;&amp;gt;[[4,8],[2,4],[3,6]]&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Though it doesn&#39;t look like listA is ever being modified, the way we&#39;ve constructed listB, it actually &lt;em&gt;references&lt;/em&gt; the same objects as listA. So when we change the object [1,2] to be [4,8], it changes everywhere that object is referenced in both lists. A little thing I once knew, but had skipped my brain for about 8 minutes. Whoops!&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/89eae182516f48540976b532e08de65c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 9&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Well that felt pretty good! The consensus across the interwebs (twitter, reddit) seems to be that today was relatively easy, and I&#39;d agree. The problem involved two different ways of comparing integers in an input list to the previous 25 numbers, and doing some math on them. There are probably slightly more efficient algorithms, especially for part 2 - currently when the running sum starting from a given position, I throw out the entire sum and start again from the next position, which is likely wasteful. But for only 1000 inputs, the code still runs in ~160 milliseconds, so I don&#39;t think it&#39;s worth the time to make it more efficient. If this problem comes back in future days, that may be worth revisiting.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/0936c84fffd5e6ce5c6044767e59282d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020: Day 2-9</title>
      <link>https://jeff.glass/post/advent-of-code-2020-day-2-9/</link>
      <pubDate>Wed, 02 Dec 2020 16:17:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2020-day-2-9/</guid>
      <description>
&lt;!--&lt;script src=&#34;&lt;script src=&#34;https://gist.github.com/JeffersGlass/c9e89c313081b88574ebb759d7e3e72e.js&#34;&gt;&lt;/script&gt;.js&#34;&gt;&lt;/script&gt;--&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;&lt;a data-type=&#34;URL&#34; href=&#39;.js&#34;&#39;&gt;Code for all days is on GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Day 2&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Nothing terribly fancy going on with the day 2 challenge - essentially, reading in a text file and doing operations on strings. After developing the ability to split the input lines and validate them in part one, part 2 throws a curveball by changing up how the lines should be validated. I refactored my &#34;isValidLine&#34; code to take a validation function as one of its arguments, since the parsing/splitting of the line is the same for both parts 1 and 2.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(&lt;em&gt;The names of the validation functions come from the problem description - they validate the passwords for a sled company and a toboggan company, respectively&lt;/em&gt;.)&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/7e97c17b46a2779e50b9005c27c26c95.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 3&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;A slightly more involved bit of data and text processing today, as we help our would-be tobogganist make it down a snowy slope covered in trees. As a way of pushing my Python knowledge, I tried to complete both parts of today&#39;s challenge using list comprehensions and iterative functions like map, reduce, enumerate, etc. My impulse is to write things out more explicitly by iterating through the elements of input in a for loop, but practicing the list comprehensions and their related utility functions feels good.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Is the inline code better than the more verbose versions? I&#39;m not entirely sure - it&#39;s certainly less readable than the expanded-into-a-loop versions. It&#39;s also somewhat harder to debug, because there aren&#39;t logical places to, say, print intermediate results. So something like my getSlopeTrees() function, as written, is just silly-long and hard to read - the getSlopeTreesVerbose() function, which I wrote as part of troubleshooting a specific issue is definitely more readable.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The punchline of my issue was: at least in Python 3.9, floats can&#39;t be used as list indices, even if they&#39;re integers. That is, even if a float for which is_integer() returns true, you must explicitly cast that float to an integer to use it index a list. In code form:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/e2ceed37a5b459304216389328854e87.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;So, another thing learned. Thanks Advent of Code!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s the full code from Day 3:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/9dbd5c3977a9ddaa59308001d55dd48a.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 4&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can slowly feel the difficulty starting to ramp up here in day four. We&#39;re still walking on paved roads, as it were, but they&#39;re not as well maintained as they used to be in day one.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Today&#39;s problem concerns more text parsing - the first part just says to validate, essentially, that 7 unique strings are present between sets of blank lines in the input file. The code for this is pretty straightforward - I tried for a little while to do it all in one list comprehension, but ended up splitting it into two lines, which I think is clearer. To be sure, I don&#39;t think that doing it in one comprehension would be &lt;em&gt;better&lt;/em&gt;, just that I thought it would be fun practice.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/cf670f595c99db49b8564cc600ce26c6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, with the problem statement framing these 7 strings as labels for values in a passport (eyc:blu, hgt:171cm, etc), it seemed like a straight guess that we&#39;d actually have to parse those values by field and do something with them in part two. And of course, we were right. For each of the 7 fields, validation criteria are listed, including ensuring certain fields are numerical and within certain bounds, prepended or postended by certain characters, and so on. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This part turned out ok - it takes the text file, splits it into individual passport strings, then splits each of those into a list of strings of the form &#34;key:value&#34;. The part that feels most &#34;un-Pythonic&#34; to me is the part (commented below) that turns that list of lists of strings into a list of dictionaries. I figure there&#39;s got to be a way to do that with a comprehension, but I couldn&#39;t quite make it work, so I did it as a couple For loops. It works fun, just feels a little clunky.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also implemented my own prettyPrintPassword function (and its alias &#39;ppp&#39;) - it doesn&#39;t do any sorting of the fields, and it doesn&#39;t show you &lt;em&gt;why&lt;/em&gt; a passport is invalid if it fails, but it did what I needed it to do for troubleshooting purposes.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/de08f5f205eddaccbe56980f9b3d4d29.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 5&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Wow, a quickie today! The title of the day&#39;s challenge (&#39;Binary Boarding&#39;) gives you a pretty strong clue what it&#39;s going to be about. The challenge is essentially to parse text representing binary numbers in your language of choice and find the minimum, maximum, and missing values in between. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is my shortest solution so far, at only 5 lines of code (for both parts!):&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/a233c4ef04fc5eb9422bebf8b0106770.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;This is where Python&#39;s use of convenience generators (like range), built in math functions on general iterators (like min and max), and lots of string functionality (like replace) really shines - the code is easy to write and clean.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Looking back at &lt;a &#34;=&#34;&#34; 11=&#34;&#34; 2020=&#34;&#34; 25=&#34;&#34; advent-of-code-2020=&#34;&#34; data-id=&#34;3332&#34; data-type=&#34;post&#34; href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34; jeff.glass=&#34;&#34;&gt;my goals for Code.js&#34;&amp;gt; Advent 2020&lt;/a&gt;, I&#39;d say I&#39;m doing pretty well - I&#39;m already feeling more fluent/comfortable with list/dictionary comprehensions, the git workflow is becoming more natural, and I&#39;ve completed each project on the day it&#39;s issued. Not too much challenge in terms of the algorithms and data structures so far, but then it is only day 5....&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;This post will be updated with code from a handful of future days, until it gets too long/unwieldy.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Day 6&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;As it turns out, talking out loud while generating algorithms while writing code is... hard. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I coded up the solution to Day 6 &lt;a href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34; watch?v=&#39;s7UDMUALBxU&#34;&#39; www.youtube.com=&#34;&#34;&gt;live on stream on Sunday.js&#34;&amp;gt; night&lt;/a&gt;, which was both fun and challenging. Part one of the challenge wasn&#39;t too terribly hard - it basically asks whether each letter of the alphabet is contained between any pair of blank links (&#34;\n\n&#34;) in the input file. That&#39;s a solution that only takes a few lines to write.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I ended up writing three solutions to part 2. I ended up ordering them in the code in order of their complexity/lines of code, but that&#39;s not the order I wrote them in. I first wrote a really over-complicated solution (3), then condensed it down to a single list comprehension (1), then expanded that back out just a little to make it more readable. Like I said on stream, if I were writing this code to go into some kind of actual codebase, I think solution (2) is the one I&#39;d use - it&#39;s concise enough to be comprehensible, but long enough to not be overwhelmingly dense.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/2801abec57bce67bad64d553974984b6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 7&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Oof, this day too far, far longer than it should have, all because I misunderstood Python&#39;s strip() function. strip, for those who are wondering, removes any of the set of characters given as its arguments from the beginning or end of a string. So, &#34;Hello World&#34;.strip(&#39;Hld&#39;) =&amp;gt; &#34;ello Wor&#34;. Unfortunately, I thought that the strip function removed the exact &lt;em&gt;string&lt;/em&gt; given it it as an argument, leading to it stripping additional characters off of the end of some inputs and causing my parsing to be wrong. Oof.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In any case, the two halves of day 7 involve creating a tree of data in two different ways (one in which parents reference children, and one in which children reference parents). Then we sum up the total number of parents or children, unweighted or weighted, respectively.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/52440fef8db4118166b0cda14c6e7a65.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 8&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Day 8 is giving me flashbacks to the &lt;a 2&#34;=&#34;&#34; 2019=&#34;&#34; adventofcode.com=&#34;&#34; day=&#34;&#34; href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34;&gt;intcode challenges&lt;/a&gt; of 2019! .js&#34;&amp;gt;But it&#39;s a much softer start this time - we only have three pseudo-assembly instructions to parse, and simpler questions to answer. Once we&#39;ve built a simple function for processing a given list of these instructions, we&#39;ve solved part one. Part 2 requires iterating over our input data and manipulating it slightly, and testing to see whether the new version of the input fulfills the required condition, so our code will need to work over general lists of instructions.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The only thing that hung me up today was forgetting to take into account how Python&#39;s lists handle objects. Specifically, this is the behavior that I was (rightly, but unwantedly) seeing:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code&gt;listA = [[1,2],[2,4],[3,6]]&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;listB = [a for a in listA]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;listB[0] = [4, 8]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;print(listA)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&amp;gt;&amp;gt;&amp;gt;[[4,8],[2,4],[3,6]]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Though it doesn&#39;t look like listA is ever being modified, the way we&#39;ve constructed listB, it actually &lt;em&gt;references&lt;/em&gt; the same objects as listA. So when we change the object [1,2] to be [4,8], it changes everywhere that object is referenced in both lists. A little thing I once knew, but had skipped my brain for about 8 minutes. Whoops!&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/89eae182516f48540976b532e08de65c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 9&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that felt pretty good! The consensus across the interwebs (twitter, reddit) seems to be that today was relatively easy, and I&#39;d agree. The problem involved two different ways of comparing integers in an input list to the previous 25 numbers, and doing some math on them. There are probably slightly more efficient algorithms, especially for part 2 - currently when the running sum starting from a given position, I throw out the entire sum and start again from the next position, which is likely wasteful. But for only 1000 inputs, the code still runs in ~160 milliseconds, so I don&#39;t think it&#39;s worth the time to make it more efficient. If this problem comes back in future days, that may be worth revisiting.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/0936c84fffd5e6ce5c6044767e59282d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020: Day 1</title>
      <link>https://jeff.glass/backup-post/advent-of-code-2020-day-1/</link>
      <pubDate>Tue, 01 Dec 2020 16:58:57 -0500</pubDate>
      
      <guid>https://jeff.glass/backup-post/advent-of-code-2020-day-1/</guid>
      <description>&lt;p class=&#34;post-paragraph&#34;&gt;&lt;em&gt;I know in &lt;a href=&#34;https://jeff.glass/2020/11/25/advent-of-code-2020/&#34;&gt;my introductory post&lt;/a&gt; I said I wasn&#39;t going to post something every day, and I meant it! But I ended up with a little extra time on my hands today and this casual summary has turned into an actual post... I&#39;m going to have to think about how I categorize these posts so anyone who stumbled across my blog isn&#39;t wading through five pages of Advent of Code writeups before getting to tiny moving lights. But for now, here&#39;s day 1.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;a href=&#34;https://github.com/JeffersGlass/codeadvent2020/tree/main/Day1&#34;&gt;&lt;em&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;&lt;strong&gt;Full code is available on GitHub.&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Much like last year, this year&#39;s Day 1 challenge starts by essentially making sure we can read in a text file and do basic math on it. The first problem asks us to find which two integers in a text file that sum to 2020 and retrieve their product; the second asks the same question, but for a set of 3 integers.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Just for gits and shiggles, I implemented the solution to part one in two different ways. The first, in a function I title &#34;naiveFind&#34;, just loads all of the numbers from the file into a list, then loops over every pair of numbers until it finds a pair that sums to 2020 (the success() function is detailed below). This is a fine way to approach this problem, but not terribly efficient for long lists:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/d481ae8dbac18127dafa9746d5e142fe.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;The speedier way to solve this problem is to use a hashmap, which we get for free in the form of Python dictionary lookups (&lt;em&gt;in most implementations of Python&lt;/em&gt;.) Rather than looping over all pairs of numbers, we can just proceed through the the list once, storing each member in a dictionary, and as we load each new number, we check to see if it&#39;s &#34;2020&#39;s complement&#34; is already in our dictionary&#39;s keys. This is faster than a raw comparison because looking via hashing is cheaper than doing a &#39;by-hand&#39; comparison of all of the numbers ourselves.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/a33279fd7dabe5869cb7923b86e5f938.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;For the second part of the problem, I only implemented a &#34;naive&#34; solution, running in O(n³) time:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/31e836eecc0434f4838598d0858b1d8b.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;With the need to now communicate a set of three numbers (and their product) that form a solution, I rewrote my success() function to accommodate any number of inputs as arguments. (The original, two-input function is commented-out at the bottom.)&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/f5d52dc0a2d5b5b8af53c9edb27e5337.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;To see how efficient these various functions were, I wrote a quick decorator function that allows me to see the (rough) execution time of each solution:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/bb312d167985d9db8c7ea0c0ca01d2f4.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Running all three of our search functions in turn:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;a href=&#34;https://jeff.glass/wp-content/uploads/2020/12/function-timing.jpg&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3340 size-full post-img&#34; height=&#34;106&#34; src=&#34;function-timing.jpg&#34; width=&#34;514&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;We can see that:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;The naïve way of looping over all the pairs of products takes about 1.5 ms to complete&lt;/li&gt;
&lt;li&gt;The hashset (dictionary) method of finding one pair of numbers takes about 0.6 ms to complete&lt;/li&gt;
&lt;li&gt;The naïve way of finding a triple of numbers takes about 65 ms to complete&lt;/li&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Some stray thoughts from today&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;When I originally tried to run my basic test code to ensure I was reading the input text file correctly, I got the error: &#34;No such file or directory.&#34; Which is odd, because the text file was just sitting in the same folder as my Python script, like always. It turns out that by default, VSCode uses the open &lt;em&gt;folder&lt;/em&gt; as its source, not where the script is actually being executed. You can change this in the Python terminal settings:&lt;img alt=&#34;image&#34; class=&#34;post-img&#34; src=&#34;https://user-images.githubusercontent.com/3840081/84087466-ff37df00-a99e-11ea-8fea-3f21dcd80e23.png&#34;/&gt;&lt;/li&gt;
&lt;li&gt;I&#39;ve made use of the functools.wraps wrapper to assist me in writing my own decorator functions before, but using it again today to write the timer function makes me want to look a little deeper under the hood to see what it&#39;s doing.&lt;/li&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;strong&gt;Postscript:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;I was just kicking around the #AdventOfCode hashtag on Twitter after completing my solutions, and ran across these super-nifty &#34;Pythonic&#34; solutions by @Brotherluii:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;https://twitter.com/Brotherluii/status/1333756750579830784&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;For those for whom the embedded tweet doesn&#39;t work:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code&gt;with open(&#39;input.txt&#39;, &#39;r&#39;) as file:&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;    data = {int(number) for number in file}&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;#Part 1&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;print({entry * (2020-entry) for entry in data if (2020-entry) in data})&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;#Part 2&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;print({entry1 * entry2 * (2020 - entry1 - entry2)&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;    for entry1 in data for entry2 in data&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;    if (2020 - entry1 - entry2) in data})&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Though I understand list comprehensions, I feel like they&#39;re never my go-to tool, but seeing them composed like this, I can see how they can be pretty beautiful in the right hands.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020: Day 1</title>
      <link>https://jeff.glass/post/advent-of-code-2020-day-1/</link>
      <pubDate>Tue, 01 Dec 2020 16:58:57 -0500</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2020-day-1/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;I know in &lt;a href=&#34;https://jeff.glass/2020/11/25/advent-of-code-2020/&#34;&gt;my introductory post&lt;/a&gt; I said I wasn&#39;t going to post something every day, and I meant it! But I ended up with a little extra time on my hands today and this casual summary has turned into an actual post... I&#39;m going to have to think about how I categorize these posts so anyone who stumbled across my blog isn&#39;t wading through five pages of Advent of Code writeups before getting to tiny moving lights. But for now, here&#39;s day 1.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://github.com/JeffersGlass/codeadvent2020/tree/main/Day1&#34;&gt;&lt;em&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;&lt;strong&gt;Full code is available on GitHub.&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Much like last year, this year&#39;s Day 1 challenge starts by essentially making sure we can read in a text file and do basic math on it. The first problem asks us to find which two integers in a text file that sum to 2020 and retrieve their product; the second asks the same question, but for a set of 3 integers.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Just for gits and shiggles, I implemented the solution to part one in two different ways. The first, in a function I title &#34;naiveFind&#34;, just loads all of the numbers from the file into a list, then loops over every pair of numbers until it finds a pair that sums to 2020 (the success() function is detailed below). This is a fine way to approach this problem, but not terribly efficient for long lists:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/d481ae8dbac18127dafa9746d5e142fe.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The speedier way to solve this problem is to use a hashmap, which we get for free in the form of Python dictionary lookups (&lt;em&gt;in most implementations of Python&lt;/em&gt;.) Rather than looping over all pairs of numbers, we can just proceed through the the list once, storing each member in a dictionary, and as we load each new number, we check to see if it&#39;s &#34;2020&#39;s complement&#34; is already in our dictionary&#39;s keys. This is faster than a raw comparison because looking via hashing is cheaper than doing a &#39;by-hand&#39; comparison of all of the numbers ourselves.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/a33279fd7dabe5869cb7923b86e5f938.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For the second part of the problem, I only implemented a &#34;naive&#34; solution, running in O(n³) time:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/31e836eecc0434f4838598d0858b1d8b.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With the need to now communicate a set of three numbers (and their product) that form a solution, I rewrote my success() function to accommodate any number of inputs as arguments. (The original, two-input function is commented-out at the bottom.)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/f5d52dc0a2d5b5b8af53c9edb27e5337.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To see how efficient these various functions were, I wrote a quick decorator function that allows me to see the (rough) execution time of each solution:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/bb312d167985d9db8c7ea0c0ca01d2f4.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Running all three of our search functions in turn:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3340 size-full post-img&#34; height=&#34;106&#34; src=&#34;function-timing.jpg&#34; width=&#34;514&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We can see that:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;The naïve way of looping over all the pairs of products takes about 1.5 ms to complete&lt;/li&gt;
&lt;li&gt;The hashset (dictionary) method of finding one pair of numbers takes about 0.6 ms to complete&lt;/li&gt;
&lt;li&gt;The naïve way of finding a triple of numbers takes about 65 ms to complete&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Some stray thoughts from today&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;When I originally tried to run my basic test code to ensure I was reading the input text file correctly, I got the error: &#34;No such file or directory.&#34; Which is odd, because the text file was just sitting in the same folder as my Python script, like always. It turns out that by default, VSCode uses the open &lt;em&gt;folder&lt;/em&gt; as its source, not where the script is actually being executed. You can change this in the Python terminal settings:&lt;img alt=&#34;image&#34; class=&#34;post-img&#34; src=&#34;https://user-images.githubusercontent.com/3840081/84087466-ff37df00-a99e-11ea-8fea-3f21dcd80e23.png&#34;/&gt;&lt;/li&gt;
&lt;li&gt;I&#39;ve made use of the functools.wraps wrapper to assist me in writing my own decorator functions before, but using it again today to write the timer function makes me want to look a little deeper under the hood to see what it&#39;s doing.&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;Postscript:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I was just kicking around the #AdventOfCode hashtag on Twitter after completing my solutions, and ran across these super-nifty &#34;Pythonic&#34; solutions by @Brotherluii:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;https://twitter.com/Brotherluii/status/1333756750579830784&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For those for whom the embedded tweet doesn&#39;t work:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code&gt;with open(&#39;input.txt&#39;, &#39;r&#39;) as file:&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    data = {int(number) for number in file}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;#Part 1&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;print({entry * (2020-entry) for entry in data if (2020-entry) in data})&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;#Part 2&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;print({entry1 * entry2 * (2020 - entry1 - entry2)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    for entry1 in data for entry2 in data&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    if (2020 - entry1 - entry2) in data})&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Though I understand list comprehensions, I feel like they&#39;re never my go-to tool, but seeing them composed like this, I can see how they can be pretty beautiful in the right hands.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020</title>
      <link>https://jeff.glass/backup-post/advent-of-code-2020/</link>
      <pubDate>Wed, 25 Nov 2020 19:31:37 -0500</pubDate>
      
      <guid>https://jeff.glass/backup-post/advent-of-code-2020/</guid>
      <description>&lt;p class=&#34;post-paragraph&#34;&gt;Last winter, I participated in the annual &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code Challenge&lt;/a&gt;, a website which offers small (&lt;em&gt;but not necessarily easy&lt;/em&gt;) programming challenges every day from December 1 through 25. It turned out to be a great way to get exposed to different corners of development in my language of choice (Python), and with a little more time on my hands this Winter, I&#39;m excited to dive into it again.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;The challenges are all written in a non-programming-language-specific way. For example, the &lt;a href=&#34;https://adventofcode.com/2019/day/1&#34;&gt;first part of the problem from December 1, 2019&lt;/a&gt; boils down to:&lt;/p&gt;
&lt;div class=&#34;pl-8 font-mono&#34;&gt;
&lt;p&gt;* Ingest a list of numbers from a text file, with one line per number&lt;/p&gt;
&lt;p&gt;* For each number, divide it by 3, round down, and subtract 2&lt;/p&gt;
&lt;p&gt;* Sum all these results together&lt;/p&gt;
&lt;p&gt;* Print/return/somehow give the user back the sum&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;While I was doing this in Python, there&#39;s no reason you couldn&#39;t do it in C, or Java, or Haskell, or ALGOL, or any language of your choice (&lt;em&gt;though of course, some of the problems will be more tractable using structures built into some langauges and not othe&lt;/em&gt;rs&lt;em&gt;)&lt;/em&gt;. The actual prompts are a bit more flavorful that that example - a narrative about needed to rescue Santa from outer-space was woven through all 25 problem last year.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;I&#39;m confident in saying that my Python has gotten significantly stronger over the past year, but I&#39;m feeling like I could be stronger in some algorithmic thinking (the &lt;em&gt;mazes&lt;/em&gt; last year slayed me) and in some process crevices around my workflow. To that end, my goals for this year are:&lt;/p&gt;
&lt;ul class=&#34;pl-8 post-ul&#34;&gt;&lt;li&gt;To strengthen my intuition for solving data-based problems with time-efficient algorithms&lt;/li&gt;&lt;li&gt;To cement the core concepts around Pythonic data structures in my knowledgebase&lt;/li&gt;&lt;li&gt;To become more comfortable with Git/GitHub, in particular its command line interface and the branch/merge/HEAD flow&lt;/li&gt;&lt;li&gt;To complete each challenge on the day it&#39;s issued&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Because nobody needs their RSS feed flooded by me every day for a month, I think I&#39;ve found a way to start a blog post on, say, December 1st, update it every day for a week, then only push to the RSS feed on the 7th - so if you want to check on them daily, you can go to the actual factual blog, or just wait for the summary posts to come out.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;If you&#39;re just interested in the code (or are reading this from the future) and want to see my solutions, I&#39;ll be posting the code &lt;a href=&#34;https://github.com/JeffersGlass/codeadvent2020&#34;&gt;over on GitHub&lt;/a&gt;. I&#39;m not going to be striving to be one of the first 100 people posting successes to each problem (&lt;a href=&#34;https://adventofcode.com/2020/leaderboard&#34;&gt;for which there is a leaderboard&lt;/a&gt;), I&#39;m just solving these for me. And I encourage anyone out there looking to build their programming confidence to do the same!&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020</title>
      <link>https://jeff.glass/post/advent-of-code-2020/</link>
      <pubDate>Wed, 25 Nov 2020 19:31:37 -0500</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2020/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Last winter, I participated in the annual &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code Challenge&lt;/a&gt;, a website which offers small (&lt;em&gt;but not necessarily easy&lt;/em&gt;) programming challenges every day from December 1 through 25. It turned out to be a great way to get exposed to different corners of development in my language of choice (Python), and with a little more time on my hands this Winter, I&#39;m excited to dive into it again.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The challenges are all written in a non-programming-language-specific way. For example, the &lt;a href=&#34;https://adventofcode.com/2019/day/1&#34;&gt;first part of the problem from December 1, 2019&lt;/a&gt; boils down to:&lt;/p&gt;
&lt;div class=&#34;pl-8 font-mono&#34;&gt;
&lt;p&gt;* Ingest a list of numbers from a text file, with one line per number&lt;/p&gt;
&lt;p&gt;* For each number, divide it by 3, round down, and subtract 2&lt;/p&gt;
&lt;p&gt;* Sum all these results together&lt;/p&gt;
&lt;p&gt;* Print/return/somehow give the user back the sum&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;While I was doing this in Python, there&#39;s no reason you couldn&#39;t do it in C, or Java, or Haskell, or ALGOL, or any language of your choice (&lt;em&gt;though of course, some of the problems will be more tractable using structures built into some langauges and not othe&lt;/em&gt;rs&lt;em&gt;)&lt;/em&gt;. The actual prompts are a bit more flavorful that that example - a narrative about needed to rescue Santa from outer-space was woven through all 25 problem last year.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m confident in saying that my Python has gotten significantly stronger over the past year, but I&#39;m feeling like I could be stronger in some algorithmic thinking (the &lt;em&gt;mazes&lt;/em&gt; last year slayed me) and in some process crevices around my workflow. To that end, my goals for this year are:&lt;/p&gt;
&lt;ul class=&#34;pl-8 post-ul&#34;&gt;&lt;li&gt;To strengthen my intuition for solving data-based problems with time-efficient algorithms&lt;/li&gt;&lt;li&gt;To cement the core concepts around Pythonic data structures in my knowledgebase&lt;/li&gt;&lt;li&gt;To become more comfortable with Git/GitHub, in particular its command line interface and the branch/merge/HEAD flow&lt;/li&gt;&lt;li&gt;To complete each challenge on the day it&#39;s issued&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Because nobody needs their RSS feed flooded by me every day for a month, I think I&#39;ve found a way to start a blog post on, say, December 1st, update it every day for a week, then only push to the RSS feed on the 7th - so if you want to check on them daily, you can go to the actual factual blog, or just wait for the summary posts to come out.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;re just interested in the code (or are reading this from the future) and want to see my solutions, I&#39;ll be posting the code &lt;a href=&#34;https://github.com/JeffersGlass/codeadvent2020&#34;&gt;over on GitHub&lt;/a&gt;. I&#39;m not going to be striving to be one of the first 100 people posting successes to each problem (&lt;a href=&#34;https://adventofcode.com/2020/leaderboard&#34;&gt;for which there is a leaderboard&lt;/a&gt;), I&#39;m just solving these for me. And I encourage anyone out there looking to build their programming confidence to do the same!&lt;/p&gt;
</description>
      &lt;
    </item>
    
  </channel>
</rss>