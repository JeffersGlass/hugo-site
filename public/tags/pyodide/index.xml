<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pyodide on Jeff Glass</title>
    <link>https://jeff.glass/tags/pyodide/</link>
    <description>Recent content in pyodide on Jeff Glass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Mar 2023 19:01:29 -0600</lastBuildDate><atom:link href="https://jeff.glass/tags/pyodide/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What&#39;s New in Pyscript 2023.03.1</title>
      <link>https://jeff.glass/post/whats-new-pyscript-2023-03-1/</link>
      <pubDate>Fri, 10 Mar 2023 19:01:29 -0600</pubDate>
      
      <guid>https://jeff.glass/post/whats-new-pyscript-2023-03-1/</guid>
      <description>&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    loaded_event = js.Event.new(&#39;pyscript_ready&#39;)
    js.document.dispatchEvent(loaded_event)
&lt;/py-script&gt;
&lt;style&gt;
    code:not(.nocode):not(.language-python):not(.language-python3):not(.language-html):not(.language-js){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
    .py-terminal{
        min-height: 10em;
        background-color: black;
        color: white;
    }
    .py-pop-up {
    text-align: center;
    width: 600px;
    }

    .py-pop-up p {
        margin: 5px;
    }

    .py-pop-up a {
        position: absolute;
        color: white;
        text-decoration: none;
        font-size: 200%;
        top: 3.5%;
        right: 5%;
    }

    /* Pop-up second layer end */
    .alert-banner {
        position: relative;
        padding: .5rem 1.5rem .5rem .5rem;
        margin: 0.5rem 2rem;
    }

    .alert-banner p {
        margin: 0;
    }

    .py-error{
        background-color: #FFE9E8;
        border: solid;
        border-color: #f0625f;
        color: #9d041c;
    }

    .py-warning {
        background-color: rgb(255, 244, 229);
        border: solid;
        border-color: #ffa016;
        color: #794700;
    }

    .alert-banner.py-error&gt;#alert-close-button {
        color: #9d041c;
    }

    .alert-banner.py-warning&gt;#alert-close-button {
        color: #794700
    }

    #alert-close-button {
    position: absolute;
    right: .5rem;
    top: .5rem;
    cursor: pointer;
    background: transparent;
    border: none;
    }
    
&lt;/style&gt;
&lt;script&gt;    
    //Create Load PyScript buttons:
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        btn_locations = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(btn_locations).forEach(div =&gt; {
            div.classList.add(&#39;my-2&#39;, &#39;mx-8&#39;, &#39;border-blue-200&#39;, &#39;rounded-xl&#39;, &#39;flex&#39;, &#39;flex-row&#39;, &#39;justify-center&#39;, &#39;w-auto&#39;, &#34;py-1&#34;)
            let p = document.createElement(&#39;p&#39;)
            p.classList.add(&#39;my-auto&#39;, &#39;mr-4&#39;, &#39;italic&#39;)
            p.innerText = &#34;Want to run these examples live in your browser?&#34;
            div.appendChild(p)
            //button
            let btn = document.createElement(&#39;button&#39;)
            btn.innerText = &#34;Load PyScript&#34;
            btn.classList.add(&#39;load-pyscript-button&#39;)
            btn.onclick = loadPyScript
            div.appendChild(btn)
        });
    })
    function setupLoadButtons(){

    }
    function loadPyScript() {
        //load css
        css_link = document.createElement(&#34;link&#34;)
        css_link.rel = &#34;stylesheet&#34;
        css_link.type = &#34;text/css&#34;
        css_link.href = &#34;https://pyscript.net/releases/2023.03.1/pyscript.css&#34;
        //css_link.href = &#34;https://pyscript.net/unstable/pyscript.css&#34;
        //css_link.href = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.css&#34;
        //css_link.href = &#34;./pyscript.css&#34;
        document.getElementsByTagName(&#39;head&#39;)[0].appendChild(css_link)

        //load cs
        script_tag = document.createElement(&#39;script&#39;)
        script_tag.src = &#34;https://pyscript.net/releases/2023.03.1/pyscript.js&#34;
        //script_tag.src = &#34;https://pyscript.net/unstable/pyscript.js&#34;
        //script_tag.src = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.js&#34;
        //script_tag.src = &#34;./pyscript.js&#34;
        document.body.append(script_tag) 
    }
    document.addEventListener(&#39;pyscript_ready&#39;, () =&gt; {
        static = document.getElementsByClassName(&#39;static-example&#39;)
        live = document.getElementsByClassName(&#39;live-example&#39;)
        Array.from(static).forEach(div =&gt; {
            div.classList.add(&#39;hidden&#39;)
        })
        Array.from(live).forEach(div =&gt; {
            div.classList.remove(&#39;hidden&#39;)
        })
        load_buttons = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(load_buttons).forEach(elem =&gt; {
            elem.classList.add(&#39;hidden&#39;)
        })
    })
&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;The PyScript team is absolutely steamrolling ahead in the past few months, working toward a new version of the PyScript open source library and &lt;span class=&#34;italic&#34;&gt;some other developments&lt;/span&gt; that will become visible in the near future. &lt;span id=&#34;tease&#34;&gt;(I hate to be a tease, but this isn&#39;t my piñata to pop).&lt;/span&gt; What follows is a writeup of the new improvements, features, and deprecations in &lt;a href=&#34;https://github.com/pyscript/pyscript/releases/tag/2023.03.1&#34;&gt;PyScript 2023.03.1&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If the &lt;a href=&#34;#pyscript&#34;&gt;PyScript section&lt;/a&gt; looks a little shorter than the last release, well, the last release set a very high bar! But there are a couple other reasons why there&#39;s less user-facing changes to talk about this time. It&#39;s partly because the team wanted to do a release to pin some key features before pushing some really significant PyScript changes that are coming soon - skip down to &lt;a href=&#34;#whatsnext&#34;&gt;&#34;What&#39;s Next?&#34;&lt;/a&gt; for those.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But additionally, a ton of work has been happening under the hood, especially in the past few weeks. Better linting, testing, deployment; unvendoring some necessary packages; refining and clarifying our approach to changes and issues. The kind of things that don&#39;t fill out a blog post, but make a big difference in the long run.&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;What&#39;s &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; listed here are bugfixes, and they have been several nice ones since the last release. For that kind of granular information, see the newly-added &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/changelog.md&#34;&gt;changelog document&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As always, for help, discussion, and bleeding-edge development on PyScript, come join us on &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;The Discord Server&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;grid justify-center p-1 m-auto bg-gray-200&#34;&gt;
    &lt;span&gt;Jump To: &lt;span&gt;
    &lt;a href=&#34;#pyscript&#34;&gt;PyScript&lt;/a&gt; • 
    &lt;a href=&#34;#plugins&#34;&gt;Plugins&lt;/a&gt; • 
    &lt;a href=&#34;#pyodide&#34;&gt;Pyodide&lt;/a&gt; • 
    &lt;a href=&#34;#documentation&#34;&gt;Documentation&lt;/a&gt; • 
    &lt;a href=&#34;#whatsnext&#34;&gt;What&#39;s Next?&lt;/a&gt;
&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;pyscript&#34;&gt;PyScript&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;output&#34;&gt;&lt;code&gt;&amp;lt;py-script&amp;gt; output=&#34;...&#34;&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code&gt;output&lt;/code&gt; attribute of the &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag has been restored. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1063&#34;&gt;#1063&lt;/a&gt;) This allows PyScript users to route Python&#39;s output to &lt;code&gt;stdout&lt;/code&gt; to a specific place in the dom, like so:&lt;/p&gt;
&lt;div class=&#34;m-2&#34;&gt;
    &lt;div&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;some-div&amp;#34;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;This output should go somewhere&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;px-2 my-2 bg-gray-200&#34;&gt;
        &lt;p class=&#34;mb-2 ml-2 text-sm text-gray-600&#34;&gt;#some-div&lt;/p&gt;
        &lt;p class=&#34;ml-2 font-mono&#34;&gt;Hello world!&lt;/p&gt;
        &lt;p class=&#34;ml-2 font-mono&#34;&gt;This output should go somewhere&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Users who are writing code &lt;span class=&#34;italic&#34;&gt;specifically for PyScript&lt;/span&gt; can use the &lt;a href=&#34;https://docs.pyscript.net/latest/reference/API/display.html&#34;&gt;display()&lt;/a&gt; function to route their output (whether text or rich MIME types) to a specific place on the DOM. The &lt;code&gt;output&lt;/code&gt; attribute is meant to allow the use of libraries which output directly to &lt;code&gt;stdout&lt;/code&gt;, like &lt;a href=&#34;https://github.com/Textualize/rich&#34;&gt;Rich&lt;/a&gt; or &lt;a href=&#34;https://pygments.org/&#34;&gt;Pygments&lt;/a&gt;. Or so, you know, &lt;code&gt;print(&#34;Hello World&#34;)&lt;/code&gt; doesn&#39;t have to print in the same location as the &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;

&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;&#34;&lt;code&gt;runtime&lt;/code&gt;&#34; is now &#34;&lt;code&gt;interpreter&lt;/code&gt;&#34;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The attribute of the PyScript object which represents the internal Python interpreter has been renamed from &lt;code&gt;runtime&lt;/code&gt; to &lt;code&gt;interpreter&lt;/code&gt;. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1082&#34;&gt;#1082&lt;/a&gt;) This is largely an internal PyScript naming change, but it does have ramifications for some users who were making use of this key access attributes of the runtime, as in:&lt;/p&gt;
&lt;div&gt;
    &lt;span class=&#34;bg-red-600&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//Previous naming using &amp;#39;pyscript.runtime&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; showX_2022_12_1(){
        console.log(&lt;span style=&#34;color:#c30&#34;&gt;`In Python right now, x = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;pyscript.runtime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;`&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//Updated attribute name in PyScript 2023.03.1 and later
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; showX_2023_03_1(){
        console.log(&lt;span style=&#34;color:#c30&#34;&gt;`In Python right now, x = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;pyscript.interpreter.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;`&lt;/span&gt;)
    }&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Hiding the Splashscreen&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Several users have &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/900&#34;&gt;requested&lt;/a&gt; the ability to hide the default splashscreen that&#39;s displayed while PyScript is loading. And we heard you! The &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag now accepts a &lt;code&gt;splashscreen.enabled&lt;/code&gt; property (defaults to &lt;code&gt;True&lt;/code&gt;). If set to &lt;code&gt;False&lt;/code&gt;, the default loading screen will not be shown. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1138&#34;&gt;#1138&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Auto-IDs for &lt;code&gt;py-[event]&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A small but very handy update to the &lt;code&gt;py-[event]&lt;/code&gt; behavior: users no longer need to specify an ID when adding this attribute to an HTML element. Under the hood, an ID is stilll necessary, but if the user doesn&#39;t provide one, PyScript now adds an auto-generated UUID as the ID. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1122&#34;&gt;#1122&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;m-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&amp;lt;!-- The &amp;#39;id&amp;#39; attribute was required in previous versions--&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;someFunction()&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;old&amp;#34;&lt;/span&gt;&amp;gt;Click me!&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;&amp;#34;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&amp;lt;!-- In version&amp;lt;h1 class=&amp;#34;text-4xl text-center text-red-800&amp;#34;&amp;gt;This is a draft this post hosted on a development server; not for release.&amp;lt;/h1&amp;gt; 2023.03.1 and later, an ID will be auto-generated for you --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;someFunction()&amp;#34;&lt;/span&gt;&amp;gt;Click me!&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;So Long, &lt;code&gt;&amp;lt;py-box&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;py-title&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;py-inputbox&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;py-button&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As previously promised, these elements (which were deprecated in version 2022.12.1) have been removed in version 2023.02.1. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1084&#34;&gt;#1084&lt;/a&gt;). If you were still making use of these custom elements, check out the &lt;a href=&#34;../whats-new-pyscript-2022-12-1#widgetdeprecation&#34;&gt;2022.12.1 release post&lt;/a&gt; for suggested plain HTML elements to use instead.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;plugins&#34;&gt;Plugins&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;What Are Plugins?&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Plugins are code objects, either in Python or JavaScript, whose methods are called at specific points in the PyScript lifecycle (e.g. as PyScript installs itself, fetches the interpreter, related resources, executes &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tags, etc). Internally, PyScript uses the plugin concept to orchestrate some behaviors like the Splashscreen and the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;, but the idea is that these methods are available for users to write their own plugins to hook into.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a super powerful functionality! Users can (for the most part) rewrite the rules of PyScript and its execution by simply pointing part of the &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; at a URL with their plugin resource. You could emit events corresponding to certain actions, pre-scan and parse the Python code and act upon it before the code executes, add additional custom tags that extend PyScript&#39;s behavior... the sky&#39;s the limit.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So if they&#39;re so powerful, why isn&#39;t there more documentation on Plugins? The honest answer is that &lt;span class=&#34;font-semibold&#34;&gt;the API is rapidly changing&lt;/span&gt;, both in naming conventions and scope, and there&#39;s some understandable reticence at putting out a significant amount of functionality that users might rely on, only for the names and conventions to entirely change in the next release. Currently, there are two major outstanding discussions:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;Rename the phases of the page lifecycle and lifecycle methods (&lt;a href=&#34;https://github.com/pyscript/pyscript/discussions/1238&#34;&gt;#1238&lt;/a&gt;)&lt;/li&gt;
        &lt;li&gt;Use a metadata file for plugin specification, instead of linking directly to a code file (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1228&#34;&gt;#1228&lt;/a&gt;) (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1229&#34;&gt;#1229&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So with both the method names and keys/format likely to change, it&#39;s daunting to write documentation that may already be out-of-date by the time it&#39;s published. That said, here&#39;s a peek at what&#39;s changed in the Plugins API since the last release:&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Plugins Can Now be Fetched from URLs&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Where in version 2022.12.1 plugin files could only be referenced from specific &lt;code&gt;.py&lt;/code&gt; files, a plugin can now be fetch&#39;d from any URL. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1065&#34;&gt;#1065&lt;/a&gt;). What&#39;s more, plugins can be written either in Python or in JavaScript.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;PyScript Tag Lifecycle Hooks&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;In addition to the hooks which happen at specific points in PyScript&#39;s loading process, we&#39;ve added a couple of hooks which are called immediately before and after any &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tags on the page, allowing plugins to check, for example, whether the source code adheres to certain guidelines, or whether the result was of a desired type. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1064&#34;&gt;#1063&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Plugin Method are Now Optional&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, any and all plugins had to be implemented for every plugin, or an error would be thrown. Now, plugins can implement any subset of the plugin methods (or none of them, although then what would be the point?). (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1134&#34;&gt;#1134&lt;/a&gt;) &lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;No Duplicate Plugin Calls&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I know I said I wasn&#39;t going to delve into bugfixes here, but this is one that was plaguing a couple of users with specific issues. In PyScript 2022.12.1, any Python plugins were being added to the list of managed plugins &lt;span class=&#34;italic&#34;&gt;twice&lt;/span&gt;, meaning each of their methods was called twice. This was causing some specific tricky issues where a plugin method (which should only run once) would run once, succeed, then appear to fail... tricksy indeed. That&#39;s no longer happening.(&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1064&#34;&gt;#1064&lt;/a&gt;)&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Changelog.md&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As mentioned at the top, PyScript now has an &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/changelog.md&#34;&gt;incremental Changelog&lt;/a&gt;! If you&#39;re sick of wading through a couple thousand of my (questionably spelled) words every time there&#39;s a release, the Changelog has the short-and-sweet version (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1066&#34;&gt;#1066&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Admittedly, the PyScript team is still getting used to updating the changelog as part of our workflow, so it&#39;s possible a few small things were missed. That changelog is meant to be primarily user-facing, and doesn&#39;t necessarily capture all the changes to PyScript&#39;s internals.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since we have this additional central document I&#39;ve opted to focus this post more on changes in features and utility, rather than minor-but-important changes like bugfixes. If you&#39;re interested in seeing what changed in a more specific way, and what previous bugs you can now safely ignore, I&#39;d recommend checking out the changelog.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Event Listeners Documentation&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript has a very handy but under-documented way of adding event listeners directly to HTML elements using the &lt;code&gt;py-[event]&lt;/code&gt; syntax. At least, it was under-documented until Mariana &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1125&#34;&gt;went and wrote some&lt;/a&gt;!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Fair warning to those making use of this feature, though - the syntax is likely to change in an upcoming version. There&#39;s &lt;a href=&#34;https://github.com/pyscript/pyscript/discussions/1222&#34;&gt;active discussion&lt;/a&gt; around the new syntax and a &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1240&#34;&gt;PR in the works&lt;/a&gt;, so keep your eyes peeled for what the next iteration of that API looks like.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;&lt;code&gt;requests&lt;/code&gt; package / &lt;code&gt;pyodide-http&lt;/code&gt; tutorial&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Of all the popular Python packages that users wish they could use in the browser, probably the most asked about is &lt;a href=&#34;https://requests.readthedocs.io/en/latest/&#34;&gt;requests&lt;/a&gt;, the ubiquitous package for making HTTP requests. Unfortunately, that package doesn&#39;t work natively within the browser, as the user doesn&#39;t have access to the same kind of low-level networking capabilities that Python running natively on a computer does.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But one person&#39;s problem is another person&#39;s call to action. &lt;a href=&#34;https://twitter.com/mr_le_fox&#34;&gt;Koen Vosson&lt;/a&gt; has created the &lt;a href=&#34;https://github.com/koenvo/pyodide-http&#34;&gt;pyodide-http&lt;/a&gt; package, which shims both the &lt;code&gt;requests&lt;/code&gt; and &lt;code&gt;urllib&lt;/code&gt; packages (if desired), allowing code previously written for &#34;desktop flavored&#34; python to just work in the browser. And to get users started smoothly, PyScript now includes a tutorial on how to integrate &lt;code&gt;pyodide-http&lt;/code&gt; into your PyScript project. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1164&#34;&gt;#1164&lt;/a&gt;)&lt;/p&gt;

&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Tutorials Overhaul&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The tutorials index page at &lt;a href=&#34;https://docs.pyscript.net/tutorials/index.html&#34;&gt;docs.pyscript.net/tutorials&lt;/a&gt; has gotten a facelift, for a better onboarding process for new users (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1090&#34;&gt;#1090&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The PyScript core team is always interested in having more tutorials and guides. Have you figured out how to do something with PyScript that you felt could use better documentation? We&#39;d love to see a &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;Pull Request&lt;/a&gt;!&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://github.com/romankehr&#34;&gt;GitHub User romankehr&lt;/a&gt; contributed a new example to the PyScript repository for uploading a CSV file into PyScript and loading it into a Pandas dataframe (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1067&#34;&gt;#1067&lt;/a&gt;). For those looking to data-sciency things with Python in the browser, this is a great place to start.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;pyodide&#34;&gt;Pyodide&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://pyodide.org&#34;&gt;Pyodide&lt;/a&gt;, the CPython-interpreter-in-WASM project that is the primary runtime for PyScript at the moment, has had a couple of releases in recent months; This release brings PyScript up-to-date with &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#version-0-22-1&#34;&gt;Pyodide 0.22.1&lt;/a&gt;, which brings a host of new and nifty features.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide&#39;s own &lt;a href=&#34;https://blog.pyodide.org/posts/0.22-release/&#34;&gt;release notes for version 0.22.0&lt;/a&gt; provide a great overview and insight into these changes, but they&#39;re so exciting that I can&#39;t help but feature them here as well:&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;JS Module Typeshed&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Many of PyScript&#39;s most powerful features rely on Pyodide&#39;s ability to &lt;code&gt;import ... from js&lt;/code&gt; to get objects from the JavaScript global namespace. But it does get a little tiring to stare at a squiggy red line underneath every instance of  &lt;span class=&#39;rl-outer&#39;&gt;&lt;span class=&#39;rl-inner&#39;&gt;&lt;code&gt;from js import console&lt;/code&gt;&lt;/span&gt;&lt;/span&gt; or &lt;span class=&#39;rl-outer&#39;&gt;&lt;span class=&#39;rl-inner&#39;&gt;&lt;code&gt;js.document.getElementById&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;. The Pyodide team have added a &lt;a href=&#34;https://mypy.readthedocs.io/en/stable/stubs.html&#34;&gt;stub (.pyi) file&lt;/a&gt; to make things a little better! Simply download a copy of the most recent &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/main/src/py/js.pyi&#34;&gt;js.pyi&lt;/a&gt; file and place in your IDE or project&#39;s location for stub files (&lt;a href=&#34;https://code.visualstudio.com/docs/python/settings-reference&#34;&gt;VS Code&lt;/a&gt;, &lt;a href=&#34;https://www.jetbrains.com/help/pycharm/stubs.html#quick-navigation&#34;&gt;PyCharm&lt;/a&gt;) or simply adjacent to your &lt;code&gt;.py&lt;/code&gt; file for simply projects. And like magic, intellisense will start filling in common attributes from the JS module! (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/3298&#34;&gt;#3298&lt;/a&gt;)&lt;/p&gt;
&lt;img src=&#34;autocomplete.gif&#34; alt=&#34;&#34; class=&#34;w-full m-auto lg:w-3/4 xl:w-1/2 p-img&#34;&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;New Packages&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A litany of new packages have been added to Pyodide, including:&lt;/p&gt;
&lt;p class=&#34;mx-4 post-p &#34;&gt;pycryptodome (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2965&#34;&gt;#2965&lt;/a&gt;), coverage-py (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3053&#34;&gt;#3053&lt;/a&gt;), bcrypt (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3125&#34;&gt;#3125&lt;/a&gt;), lightgbm (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3138&#34;&gt;#3138&lt;/a&gt;), pyheif, pillow_heif, libheif, libde265 (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3161&#34;&gt;#3161&lt;/a&gt;), wordcloud (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3173&#34;&gt;#3173&lt;/a&gt;), gdal, fiona, geopandas (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3213&#34;&gt;#3213&lt;/a&gt;), the standard library _hashlib module (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3206 &#34;&gt;#3206&lt;/a&gt;), pyinstrument (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3258&#34;&gt;#3258&lt;/a&gt;), gensim (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3326&#34;&gt;#3326&lt;/a&gt;), smart_open (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3326&#34;&gt;#3326&lt;/a&gt;), pyodide-http (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3355&#34;&gt;#3355&lt;/a&gt;) &lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Improved Python Collections APIS&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The process by which JavaScript objects are transmogrified (proxied) into Python continues to get more sophisticated - JS objects that feel like they &lt;span class=&#34;italic&#34;&gt;should&lt;/span&gt; behave like the corresponding Python collections now generally do. For instance, JavaScript arrays now implement &lt;code&gt;reverse&lt;/code&gt;, &lt;code&gt;__reversed__&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt;, and &lt;code&gt;pop&lt;/code&gt;, so that they implement the &lt;a href=&#34;https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence&#34;&gt;MutableSequence API&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2970&#34;&gt;#2970&lt;/a&gt;). This allows us to treat JavaScript arrays much more like a Python list (or other mutable sequence), eliminating the need to manually convert from one type to another. For instance, this is now possible:&lt;/p&gt;
&lt;div class=&#34;mx-6 my-2&#34;&gt;
&lt;span class=&#34;bg-red-600&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; mymap &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Map()
    mymap.set(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;);
    mymap.set(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;);
    mymap.set(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; mymap
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(mymap&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;keys()))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; key, value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; mymap&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;items():
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;key&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;p-2 pl-4 mt-4 text-white bg-black text-mono&#34;&gt;
    &lt;pre&gt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
a: 1
b: 2
c: 3&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&#34;post-p&#34;&gt;Similarly, Map-like JS objects now implement &lt;a href=&#34;https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping&#34;&gt;MutableMapping&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3275&#34;&gt;#3275&lt;/a&gt;),
    
&lt;div class=&#34;mx-6 my-2&#34;&gt;
&lt;span class=&#34;bg-red-600&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; myarray &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;PyScript&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Pyodide&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;JavaScript&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Are&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Awesome&amp;#34;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; myarray
    item &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; myarray&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(item)
    myarray&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Super!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(myarray))
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(myarray&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;p-2 pl-4 mt-4 text-white bg-black text-mono&#34;&gt;
&lt;pre&gt;
Awesome
PyScript and Pyodide and JavaScript Are Super!
2
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;code&gt;Generators&lt;/code&gt;(&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3294&#34;&gt;Pyodide  #3294&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Destructuring JS Objects with python &lt;code&gt;match&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s a neat one, combining the features of Python &gt;3.10&#39;s &lt;code&gt;match&lt;/code&gt; statement with JavaScripts (relatively simple) &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&#34;&gt;object structure&lt;/a&gt;. (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3273&#34;&gt;Pyodide #3273&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you have some JavaScript object that you&#39;ve imported into Python, it will (unless it&#39;s a very simple object) be a &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html#pyodide.ffi.JsProxy&#34;&gt;JsProxy object&lt;/a&gt; that behaves like a Pythonic &#34;interpretation&#34; of the JavaScript object, with a few additional attributes and methods related to the proxy-ing behavior itself. One of these additional methods is the &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html#pyodide.ffi.JsProxy.as_object_map&#34;&gt;as_object_map()&lt;/a&gt; function, which, as the Pyodide docs say: &lt;span class=&#34;italic&#34;&gt;returns a new JsProxy that treats the object as a map&lt;/span&gt;. This can be useful in several circumstances, but one in particular is using it with the match statement, as follows:&lt;/p&gt;
&lt;div class=&#34;mx-6 my-2&#34;&gt;
&lt;span class=&#34;bg-red-600&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; actor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
        name&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Keanu&amp;#34;&lt;/span&gt;,
        role&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Neo&amp;#34;&lt;/span&gt;,
        action&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; () =&amp;gt; {
            console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;I know kung foo&amp;#34;&lt;/span&gt;)
        }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    pyActor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;actor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;as_object_map()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; key, value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pyActor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;items():
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;key&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    match pyActor:
        case {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: name, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;role&amp;#34;&lt;/span&gt;: role}:
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;This actor is named &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; in the role &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;role&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        case _:
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No match&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;p-2 pl-4 mt-4 text-white bg-black text-mono&#34;&gt;
&lt;pre&gt;
name: Keanu
role: Neo
action: () =&gt; {
            console.log(&#34;I know kung foo&#34;)
        }
This actor is named Keanu in the role Neo
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;JS &lt;code&gt;Promises&lt;/code&gt; are &lt;code&gt;thenable&lt;/code&gt; in Python&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For users coming from the JavaScript world, it&#39;s perfectly natural to create a &lt;a href=&#34;https://masteringjs.io/tutorials/fundamentals/thenable&#34;&gt;chain of thenables&lt;/a&gt; - that is, a sequence of objects that have a &lt;code&gt;then()&lt;/code&gt; method, each calling its next one when its promise resolves. This makes it easy to write out a succession of functions, each one returning a promise that should be awaited, in a reasonable way.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, it&#39;s possible to do the same kind of then-ing directly in Python: (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2997&#34;&gt;Pyodide #2997&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;mx-6 my-2&#34;&gt;
&lt;span class=&#34;bg-red-600&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; actor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
        name&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Keanu&amp;#34;&lt;/span&gt;,
        role&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Neo&amp;#34;&lt;/span&gt;,
        action&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; () =&amp;gt; {
            console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;I know kung foo&amp;#34;&lt;/span&gt;)
        }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Example borrowed from the Pyodide tests&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;fetch_demo&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; fetch

        name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; fetch(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://pypi.org/pypi/pytest/json&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;then(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x: x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;json())
            &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;then(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x: x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name)
        )
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(name)
        
    asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(fetch_demo())&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;p-2 pl-4 mt-4 text-white bg-black text-mono&#34;&gt;
&lt;pre&gt;
pytest
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;JS Proxy Descriptors (Using JS Functions as Python Methods)&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;At a recent PyScript team gathering, I was musing with Pyodide core dev &lt;a href=&#34;https://github.com/hoodmane&#34;&gt;Hood&lt;/a&gt; about the possibility of subclassing a JavaScript object in Python, so that one could write the &#34;JavaScripty&#34; behaviors of one&#39;s class in JavaScript and subclass it into Python to handle the &#34;Pythony&#34; bits. Hood kindly let me know that that way probably lies madness, but that it &lt;span class=&#34;italic&#34;&gt;is&lt;/span&gt; now possible to use JavaScript functions as Python methods, which accomplished much of the same thing. (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3130&#34;&gt;#3130&lt;/a&gt;). And if the function is defined within the Python class statement, the &lt;code&gt;this&lt;/code&gt; object references the current Python object (like &lt;code&gt;self&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&#34;mx-6 my-2&#34;&gt;
&lt;span class=&#34;bg-red-600&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; area &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (a, b) =&amp;gt; {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; .&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; b
    }&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.code&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; run_js

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Triangle&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, a, b):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; a
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;b &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; b

        area &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;area
        hypo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; run_js(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;function h() {return Math.hypot(this.a, this.b);} h&amp;#34;&lt;/span&gt;)
        
    c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Triangle(a&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;, b&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Area is: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;area(c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;a, c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;b)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;The hypotenuse is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;hypo()&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;p-2 pl-4 mt-4 text-white bg-black text-mono&#34;&gt;
&lt;pre&gt;
Area is: 6
The hypotenuse is 5
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Mounting the Native Filesystem&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;By default, when Python in PyScript/Pyodide interacts with the filesystem (when writing something like &lt;code&gt;with open(...) as ...&lt;/code&gt;), it references a &#34;virtual&#34;, &lt;a href=&#34;https://emscripten.org/docs/api_reference/Filesystem-API.html#memfs&#34;&gt;in-memory filesystem&lt;/a&gt; that lives in the browser window&#39;s memory for as long as the page exists. But Emscripten, the c-program-to-Web-Assembly compiler that Pyodide uses to build CPython for the web, offers &lt;a href=&#34;https://emscripten.org/docs/api_reference/Filesystem-API.html&#34;&gt;additional filesystem options&lt;/a&gt;, one of them being &lt;a href=&#34;https://developer.chrome.com/articles/file-system-access/&#34;&gt;Chrome&#39;s interface for mounting directories directly&lt;/a&gt;. (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2987&#34;&gt;Pyodide #2987&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One thing to note: mounting a local folder into the browser - like &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/User_actions&#34;&gt;some other potentially-invasive browser actions&lt;/a&gt; - can only be triggered when handling a user interaction. This is so you can&#39;t, say, open Reddit and immediately be asked to mount a folder on your computer into the browser. You can imagine the kind of chaos that would cause.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This functionality currently only works in Chrome/Chromium, though it does seem that other browsers are picking it up as well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a neat-enough functionality that I want offer a live demo here. If you are using Chrome/Chromium, you can choose to mount a folder on your filesystem here, and PyScript will print the listing of its contents.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-bold text-red-700&#34;&gt;But Beware!&lt;/span&gt; When you click the button below, you will be asked for a folder on your computer that the PyScript/JavaScript code that runs will have access to. You can inspect the source on this page and see for yourself what I&#39;m doing, and I do guarantee that it&#39;s the code you see on the page here, but I want you to be aware - by mounting this folder, &lt;span class=&#34;font-semibold&#34;&gt;you are implicitly trusting me, Jeff Glass, with the contents of whatever&#39;s inside that folder.&lt;/span&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; showDirectoryPicker, Object
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide_js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;os&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;requestAndPrintFolder&lt;/span&gt;():
        modeObject &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; to_js({ &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;readwrite&amp;#34;&lt;/span&gt; }, dict_converter&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Object&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fromEntries)
        dirHandle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; showDirectoryPicker()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; dirHandle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;queryPermission(modeObject) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;granted&amp;#34;&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; dirHandle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;requestPermission(modeObject) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;granted&amp;#34;&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unable to read and write directory&amp;#34;&lt;/span&gt;)
        nativefs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; pyodide_js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;mountNativeFS(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/mount_dir&amp;#34;&lt;/span&gt;, dirHandle)
        
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(os&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;listdir(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/mount_dir&amp;#39;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;requestAndPrintFolder()&amp;#34;&lt;/span&gt;&amp;gt;Click to request folder&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;hidden live-example&#34;&gt;
    &lt;py-script class=&#34;hidden&#34;&gt;
        from js import showDirectoryPicker, Object
        from pyodide.ffi import to_js
        import pyodide_js
        import os
    
        async def requestAndPrintFolder():
            modeObject = to_js({ &#34;mode&#34;: &#34;readwrite&#34; }, dict_converter=Object.fromEntries)
            dirHandle = await showDirectoryPicker()
            if await dirHandle.queryPermission(modeObject) != &#34;granted&#34;:
                if await dirHandle.requestPermission(modeObject) != &#34;granted&#34;:
                    raise Exception(&#34;Unable to read and write directory&#34;)
            nativefs = await pyodide_js.mountNativeFS(&#34;/mount_dir&#34;, dirHandle)
            
            print(os.listdir(&#39;/mount_dir&#39;))
    &lt;/py-script&gt;
    &lt;div class=&#34;flex justify-center w-full mt-3 align-center&#34;&gt;&lt;button id=&#34;btn1&#34; py-click=&#34;requestAndPrintFolder()&#34; class=&#34;w-full px-4 py-2 bg-yellow-300 border-2 rounded-md md:w-1/2&#34;&gt;Click to request folder&lt;/button&gt;&lt;/div&gt;
    &lt;py-terminal&gt;&lt;/py-terminal&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Package Loading Improvements&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide v0.22 brings a number of changes and improvements to the package loading process, most of which won&#39;t be immediately visible to casual users of PyScript, but which are useful to know. The biggest of which is that &lt;code&gt;micropip&lt;/code&gt;, the pip-like software that handles installing packages from both PyPI and the Pyodide packages, has been moved to &lt;a href=&#34;https://github.com/pyodide/micropip&#34;&gt;it&#39;s own repository&lt;/a&gt; so it can be maintained separately from Pyodide itself. It also allows users to install different versions or copies of micropip, as opposed to being locked to one that&#39;s bundled with Pyodide.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Additionally, the error messages that Pyodide provides when a package fails to load have been beefed up quite a bit (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/3137&#34;&gt;#3137&lt;/a&gt;) (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/3263&#34;&gt;#3263&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For more details, see the &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#id1&#34;&gt;Package Loading section&lt;/a&gt; of the Pyodide changelog.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Build System Improvements&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;re interested in building packages for Pyodide, or working within the Pyodide build system, version 0.22 brings another swath of improvements. There are some new commands in the pyodide CLI which allow for finer control of the build process for specific packages, or from which sources to build. Also, the &lt;code&gt;meta.yml&lt;/code&gt; files that specify the build process for particular packages have been expanded. For more details, see the &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#id2&#34;&gt;Build System section&lt;/a&gt; of the Pyodide changelog.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Beyond that, Pyodide is now using the most recent Emscripten version (3.1.27, from 3.1.14), which I gather is quite nice, but honestly a little deeper in the stack than your humble author is familiar with. For details on that, check &lt;a href=&#34;https://github.com/emscripten-core/emscripten/blob/main/ChangeLog.md&#34;&gt;the Emscripten Changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;whatsnext&#34;&gt;What&#39;s Next?&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Web Workers&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This was a topic we touched on briefly &lt;a href=&#34;../whats-new-pyscript-2022-12-1#webworkers&#34;&gt;in the last release post&lt;/a&gt;, but a huge amount of progress has been made in this area since then... just not quite in a user-facing way.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The gist of using Web Workers, you&#39;ll recall, is to offload the actual Python execution to a separate thread so it doesn&#39;t block the main browser thread while it&#39;s executing &#34;in the background.&#34; This means that all calls in the main thread to &#34;run some Python&#34; become asynchronous, which comes with its own pitfalls. The gist of the process so far is:
    &lt;ul class=&#34;mx-4 space-y-2&#34;&gt;&lt;li&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;#669966&#34; class=&#34;inline-block w-6 h-6&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z&#34; /&gt;&lt;/svg&gt; Make calls to &lt;code&gt;runPython&lt;/code&gt; into &lt;code&gt;async&lt;/code&gt; calls. Don&#39;t do anything else different, just make sure the lifecycle is still consistent, everything that needs to be &lt;code&gt;await&lt;/code&gt;ed is awaited, etc. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1212&#34;&gt;#1212&lt;/a&gt;)&lt;/li&gt;
    &lt;li&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;#669966&#34; class=&#34;inline-block w-6 h-6&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z&#34; /&gt;&lt;/svg&gt; Split the Interpreter class (which is PyScripts abstraction around Pyodide and other future interpreters) into two classes, &lt;code&gt;InterpreterClient&lt;/code&gt; and &lt;code&gt;RemoteInterpreter&lt;/code&gt;. One calls the other, but other live in the main thread. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/1218&#34;&gt;#1218&lt;/a&gt;)&lt;/li&gt;
    &lt;li&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;#CC9999&#34; class=&#34;inline-block w-6 h-6&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M14.25 9v6m-4.5 0V9M21 12a9 9 0 11-18 0 9 9 0 0118 0z&#34; /&gt;&lt;/svg&gt;Move the &lt;code&gt;RemoteInterpreter&lt;/code&gt; to a Web Worker (this is the easy part, but then...)&lt;/li&gt;
    &lt;li&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;1.5&#34; stroke=&#34;#CC3333&#34; class=&#34;inline-block w-6 h-6&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z&#34; /&gt;&lt;/svg&gt;Work out all the message passing/proxying to maintain communication between the main thread and remote thread. This is (maybe?) the most complicated part - Antonio, Madhur, and Hood&#39;s combined efforts have yielded a &lt;a href=&#34;https://github.com/pyscript/pyscript/tree/antocuni/play-with-workers&#34;&gt;hacked together demo&lt;/a&gt; which does indeed run all the Python code in a web worker. It uses the &lt;a href=&#34;https://github.com/hoodmane/synclink&#34;&gt;synclink library&lt;/a&gt; to make the synchronous actions in Python block correctly while waiting for a response from the main thread, as well as handling message passing.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But my understanding here is there&#39;s still quite a bit of work to be done before this effort is ready to merge. But that by no means should take away from the tremendous effort already put in! Really cool things are coming in this area.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Events Overhaul&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Another issue still circling since the previous release, but after a recent PyScript core team gathering, I think we have a way forward. The new &lt;code&gt;py-[event]&lt;/code&gt; syntax (which to emphasize is &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; in this release) will be:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;For any browser event &lt;code&gt;[event]&lt;/code&gt;, the attribute &lt;code&gt;py-[event]=&#34;someCallable&#34;&lt;/code&gt; can be added to any HTML element. When the specified event is triggered on that HTML element, the Callable will be called.&lt;/li&gt;
        &lt;li class=&#34;ml-6&#34;&gt;If the callable takes no arguments, it will be called with no arguments. If the callable takes a single argument, the &lt;code&gt;event&lt;/code&gt; object generated by the browser event will be passed to it. If it takes two or more arguments, an Exception is raised.&lt;/li&gt;
        &lt;li&gt;For any browser event &lt;code&gt;[event]&lt;/code&gt;, the attribute &lt;code&gt;py-[event]-code=&#34;someExpression()&#34;&lt;/code&gt; can be added to any HTML element. When the specified event is triggered on that HTML element, the expressed is &lt;code&gt;eval()&lt;/code&gt;&#39;d in the global namespace&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The following examples illustrate the difference between the two scenarios: &lt;code&gt;py-[event]&lt;/code&gt; is for &lt;span class=&#34;italic&#34;&gt;registering event handlers&lt;/span&gt;, whereas &lt;code&gt;py-[event]-code&lt;/code&gt; is for &lt;span class=&#34;italic&#34;&gt;running snippets of code&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&#34;code-title&#34;&gt;py-[event]&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printEventTarget&lt;/span&gt;(event):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(event&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;printEventTarget&amp;#34;&lt;/span&gt;&amp;gt;Click me to print a reference to this button&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class=&#34;code-title&#34;&gt;py-[event]-code&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;addition&lt;/span&gt;(a, b):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; b&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;print(f&amp;#39;{addition(2, 3)= }&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;What is two plus three?&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt; 
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-click&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;print(&amp;#39;Hello, world!&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;Click me to print Hell Worldo&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Just to say it one more time - this syntax is &lt;span class=&#34;font-semibold&#34;&gt;coming soon&lt;/span&gt; and is &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; a part of this release. We&#39;re getting close though.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Pyxel in Pyodide&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide core dev &lt;a href=&#34;https://github.com/ryanking13&#34;&gt;Gyeongjae Choi&lt;/a&gt; has &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3508&#34;&gt;a development branch&lt;/a&gt; in the works that I&#39;m personally very excited about - it compiled Pyodide with Emscripten support for SDL (&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;Simple DirectMedia Layer&lt;/a&gt;), a cross-platform graphics library. It powers lots of desktop-oriented graphics software, like &lt;a href=&#34;https://www.pygame.org/news&#34;&gt;Pygame&lt;/a&gt; and &lt;a href=&#34;https://github.com/kitao/pyxel&#34;&gt;Pyxel&lt;/a&gt;. The branch is specifically working on integrating Pyxel, since it&#39;s written mostly in Python and Rust, which Pyodide has been increasingly included as a supported language to build against.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, Pyxel already has a &lt;a href=&#34;https://github.com/kitao/pyxel#web&#34;&gt;build-to-web&lt;/a&gt; option which compiles the requisite components into Web Assembly and spits out an html file that wraps it. But with Pyodide integration, we get all the nifty browser and JS interoperability features that we&#39;ve come to love in PyScript. For example, we can not only run games in the browser, but we can use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&#34;&gt;LocalStorage&lt;/a&gt; to save user data, add HTML control or display elements &lt;span class=&#34;italic&#34;&gt;outside&lt;/span&gt; of the game, respond to window events, or even allow game objects to be &lt;span class=&#34;italic&#34;&gt;directly scripted  by Python, in realtime, in the browser.&lt;/span&gt;. How cool is that?&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So cool I had to build a little demo, that&#39;s how cool.&lt;/p&gt;
&lt;p-post&gt;To be clear, this is all still experimental - the following demo is built against a version of Pyodide that doesn&#39;t exist in the wild, that I built from Gyeongjae&#39;s dev branch. But I got so excited about the possibilities that I just had to try it out.&lt;/p-post&gt;
&lt;p class=&#34;post-p&#34;&gt;As an example of what&#39;s possible with Pyxel in the browser, try putting focus on another browser window - you&#39;ll see that the game detects the window event and automatically pauses. Additionally, this demo uses the browser&#39;s local storage to keep track of your best time.&lt;/p&gt;
&lt;div class=&#34;mb-2 text-center&#34;&gt;
    &lt;p class=&#34;&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;CONTROLS&lt;/span&gt; Move: Left/Right      Jump: Up or Space     Pause: P &lt;/p&gt;
&lt;/div&gt;
&lt;py-config class=&#34;hidden&#34;&gt;
    packages = [&#39;pyxel&#39;]

    [[fetch]]
    files = [&#39;animated.py&#39;, &#39;collision.py&#39;, &#39;frame.py&#39;, &#39;images.pyxres&#39;, &#39;level.py&#39;, &#39;main.py&#39;, &#39;protocols.py&#39;, &#39;sounds.pyxres&#39;, &#39;wabbit-wesources.pyxres&#39;, &#39;wabbit.py&#39;, &#39;objects/coin.py&#39;]
    from = &#39;https://dev.jeff.glass/wasm-wabbit-game/src&#39;

    [[fetch]]
    files = [&#39;level_1.pyxres&#39;, &#39;level_2.pyxres&#39;, &#39;level_3.pyxres&#39;]
    from = &#39;https://dev.jeff.glass/wasm-wabbit-game/src/levels&#39;
    to_folder = &#39;levels&#39;

    [[interpreters]]
    src = &#34;https://jeff-glass-dev.s3.amazonaws.com/pyodide-pyxel/pyodide.js&#34;
    name = &#34;pyodide-0.22.1-pyxelbuild&#34;
    lang = &#34;python&#34;
&lt;/py-config&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import pyodide.code

    pyodide.code.run_js(
        &#34;&#34;&#34;
        pyscript.interpreter._remote.interface._module.canvas = document.querySelector(&#34;canvas#canvas&#34;);

        _virtualGamepadStates = [
            false, // Up
            false, // Down
            false, // Left
            false, // Right
            false, // A
            false, // B
            false, // X
            false, // Y
        ];
        &#34;&#34;&#34;
    )
    from main import App
    App()
&lt;/py-script&gt;
&lt;div class=&#34;relative static-example&#34; onclick=&#34;loadPyScript()&#34;&gt;
    &lt;img src=&#34;./wabbit-cover.png&#34; alt=&#34;&#34; class=&#34;w-full p-2 m-auto border-2 rounded-lg lg:w-1/2 md:w-3/4&#34; style=&#34;cursor: pointer&#34;&gt;
    &lt;div class=&#34;absolute px-8 py-2 text-4xl font-semibold border-2 border-gray-900 rounded-lg load-pyscript-button&#34; style=&#34;top:60%; left:50%; transform: translateX(-50%); background-color: #fda703; color: #2C2E34; cursor: pointer;&#34; &gt;Load Demo&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
    &lt;canvas id=&#34;canvas&#34; tabindex=&#34;-1&#34; class=&#34;hidden live-example&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;And more...&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As I &lt;a href=&#34;#tease&#34;&gt;teased&lt;/a&gt; about 3500 words ago, there are some very cool things coming soon for PyScript; if you want to be the first to hear about them, come join us on &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;The Discord Server&lt;/a&gt; &lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Emscripten-Shell / Py-Xterm</title>
      <link>https://jeff.glass/post/xterm/</link>
      <pubDate>Thu, 19 Jan 2023 09:11:02 -0600</pubDate>
      
      <guid>https://jeff.glass/post/xterm/</guid>
      <description>&lt;script defer src = &#34;./build/pyscript.min.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;./build/pyscript.css&#34;&gt;
&lt;style&gt;
    code:not(.nocode):not(.language-python):not(.language-python3):not(.language-html):not(.language-js){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;py-config&gt;
    plugins = [&#39;build/pyxterm.min.js&#39;]
&lt;/py-config&gt;
&lt;div class=&#34;py-2 md:px-4&#34; &gt;
    &lt;py-xterm&gt;&lt;/py-xterm&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a (very rough) demo of a multilayered project called &lt;a href=&#34;https://github.com/JeffersGlass/emscripten-shell&#34;&gt;Emscripten Shell&lt;/a&gt; (&lt;span class=&#34;font-semibold&#34;&gt;EmShell&lt;/span&gt; for short)&lt;/p&gt;
&lt;img src=&#34;./logo_full.png&#34; alt=&#34;The EmShell Logo&#34; class=&#34;w-full mx-auto md:w-1/2&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Currently, the project encompasses three different levels of usage (which really should be three separate projects):
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;The &lt;span class=&#34;font-semibold&#34;&gt;Emscripten-Shell&lt;/span&gt; itself, which is written in TypeScript/JavaScript and can be used with any program that uses the &lt;a href=&#34;https://emscripten.org/docs/porting/files/file_systems_overview.html&#34;&gt;Emscripten Filesystem&lt;/a&gt; using the custom &lt;code&gt;&amp;lt;x-term&amp;gt;&lt;/code&gt; element. &lt;/li&gt;
        &lt;li&gt;&lt;span class=&#34;font-semibold&#34;&gt;py-xterm&lt;/span&gt;, an enhancement of the Emscripten Shell for &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide&lt;/a&gt; that adds additional Python-specific functionality, including the &lt;code&gt;python&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; commands, using the &lt;code&gt;&amp;lt;py-xterm&amp;gt;&lt;/code&gt; element&lt;/li&gt;
        &lt;li&gt;A &lt;span class=&#34;font-semibold&#34;&gt;plugin&lt;/span&gt; for &lt;a href=&#34;https://pyscript.net/&#34;&gt;PyScript&lt;/a&gt; that adds the &lt;code&gt;&amp;lt;py-xterm&amp;gt;&lt;/code&gt; element to a page using PyScript.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;div id=&#34;target&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;As my primary pursuit is PyScript, this has full pyscript integration. Trying typing &lt;code&gt;python&lt;/code&gt; and using &lt;code&gt;display(&#34;Hello world&#34;, target=&#34;target&#34;)&lt;/code&gt; in the included REPL - you&#39;ll see that the in-terminal REPL has full PyScript functionality.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This project is in such early days, I hesitate to even call it an Alpha version. The shell is really more a series of hard-coded commands - things like line history, piping and redirect, variable expansion, arrow keys... none of that&#39;s here. There&#39;s also some slight weirdness going on with the REPL and imports... not sure what&#39;s happening there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In the long term, I think it would be interesting to try compiling an existing POSIX shell like &lt;a href=&#34;https://github.com/emersion/mrsh&#34;&gt;mrsh&lt;/a&gt; with Emscripten and figuring out how to integrate that with other Emscripten-built programs.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;See the &lt;a href=&#34;https://github.com/JeffersGlass/emscripten-shell#usage-pyscript&#34;&gt;usage section on GitHub&lt;/a&gt; if you want to try out this early version.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Updates&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;span class=&#34;mr-2 font-semibold&#34;&gt;Jan 19, 2023&lt;/span&gt; Initial post, with &lt;code class=&#34;code&#34;&gt;cd&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;clear&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;help&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;ls&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;pip&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;pwd&lt;/code&gt;, and &lt;code class=&#34;code&#34;&gt;python&lt;/code&gt; commands&lt;/li&gt;
        &lt;li&gt;&lt;span class=&#34;mr-2 font-semibold&#34;&gt;Jan 19, 2023&lt;/span&gt; Added rudimentary &lt;code class=&#34;code&#34;&gt;touch&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;cat&lt;/code&gt; commands&lt;/li&gt;
        &lt;li&gt;&lt;span class=&#34;mr-2 font-semibold&#34;&gt;Jan 19, 2023&lt;/span&gt; Added &lt;code class=&#34;code&#34;&gt;-m&lt;/code&gt; option for &lt;code class=&#34;code&#34;&gt;python&lt;/code&gt; command&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>What&#39;s New in Pyscript 2022.12.1</title>
      <link>https://jeff.glass/post/whats-new-pyscript-2022-12-1/</link>
      <pubDate>Mon, 12 Dec 2022 10:12:48 -0500</pubDate>
      
      <guid>https://jeff.glass/post/whats-new-pyscript-2022-12-1/</guid>
      <description>&lt;style&gt;
    code:not(.nocode):not(.language-python):not(.language-python3):not(.language-html):not(.language-js){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
    .py-terminal{
        min-height: 10em;
        background-color: black;
        color: white;
    }
    .py-pop-up {
    text-align: center;
    width: 600px;
    }

    .py-pop-up p {
        margin: 5px;
    }

    .py-pop-up a {
        position: absolute;
        color: white;
        text-decoration: none;
        font-size: 200%;
        top: 3.5%;
        right: 5%;
    }

    /* Pop-up second layer end */
    .alert-banner {
        position: relative;
        padding: .5rem 1.5rem .5rem .5rem;
        margin: 0.5rem 2rem;
    }

    .alert-banner p {
        margin: 0;
    }

    .py-error{
        background-color: #FFE9E8;
        border: solid;
        border-color: #f0625f;
        color: #9d041c;
    }

    .py-warning {
        background-color: rgb(255, 244, 229);
        border: solid;
        border-color: #ffa016;
        color: #794700;
    }

    .alert-banner.py-error&gt;#alert-close-button {
        color: #9d041c;
    }

    .alert-banner.py-warning&gt;#alert-close-button {
        color: #794700
    }

    #alert-close-button {
    position: absolute;
    right: .5rem;
    top: .5rem;
    cursor: pointer;
    background: transparent;
    border: none;
}
&lt;/style&gt;


&lt;script&gt;    
    //Create Load PyScript buttons:
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        btn_locations = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(btn_locations).forEach(div =&gt; {
            div.classList.add(&#39;my-2&#39;, &#39;mx-8&#39;, &#39;border-blue-200&#39;, &#39;rounded-xl&#39;, &#39;flex&#39;, &#39;flex-row&#39;, &#39;justify-center&#39;, &#39;w-auto&#39;, &#34;py-1&#34;)
            let p = document.createElement(&#39;p&#39;)
            p.classList.add(&#39;my-auto&#39;, &#39;mr-4&#39;, &#39;italic&#39;)
            p.innerText = &#34;Want to run these examples live in your browser?&#34;
            div.appendChild(p)
            //button
            let btn = document.createElement(&#39;button&#39;)
            btn.innerText = &#34;Load PyScript&#34;
            btn.classList.add(&#39;load-pyscript-button&#39;)
            btn.onclick = loadPyScript
            div.appendChild(btn)
        });
    })
    function setupLoadButtons(){

    }
    function loadPyScript() {
        //load css
        css_link = document.createElement(&#34;link&#34;)
        css_link.rel = &#34;stylesheet&#34;
        css_link.type = &#34;text/css&#34;
        css_link.href = &#34;https://pyscript.net/releases/2022.12.1/pyscript.css&#34;
        //css_link.href = &#34;https://pyscript.net/unstable/pyscript.css&#34;
        //css_link.href = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.css&#34;
        //css_link.href = &#34;./pyscript.css&#34;
        document.getElementsByTagName(&#39;head&#39;)[0].appendChild(css_link)

        //load cs
        script_tag = document.createElement(&#39;script&#39;)
        script_tag.src = &#34;https://pyscript.net/releases/2022.12.1/pyscript.js&#34;
        //script_tag.src = &#34;https://pyscript.net/unstable/pyscript.js&#34;
        //script_tag.src = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.js&#34;
        //script_tag.src = &#34;./pyscript.js&#34;
        document.body.append(script_tag)        
    }
    document.addEventListener(&#39;pyscript_ready&#39;, () =&gt; {
        static = document.getElementsByClassName(&#39;static-example&#39;)
        live = document.getElementsByClassName(&#39;live-example&#39;)
        Array.from(static).forEach(div =&gt; {
            div.classList.add(&#39;hidden&#39;)
        })
        Array.from(live).forEach(div =&gt; {
            div.classList.remove(&#39;hidden&#39;)
        })
        load_buttons = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(load_buttons).forEach(elem =&gt; {
            elem.classList.add(&#39;hidden&#39;)
        })
    })
&lt;/script&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    loaded_event = js.Event.new(&#39;pyscript_ready&#39;)
    js.document.dispatchEvent(loaded_event)
&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;Another couple months have flown by, and PyScript has a shiny new release: &lt;a href=&#34;https://github.com/pyscript/pyscript/releases/tag/2022.12.1&#34; class=&#34;&#34;&gt;PyScript Version 2022.12.1 is now live!&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What follows is a walkthrough of the changes since 2022.09.1, as well as notes on what&#39;s changed in the development process, the community, and what&#39;s coming next.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What&#39;s &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; covered here in depth are some of the amazing things built with or adjacent to PyScript. In particular, if you haven&#39;t seen the &lt;a href=&#34;https://pyscript.net/tech-preview/micropython/&#34; target=&#34;_blank&#34;&gt;technical preview of MicroPython running in the Browser&lt;/a&gt; or &lt;a href=&#34;https://panel.holoviz.org/user_guide/Running_in_Webassembly.html&#34; target=&#34;_blank&#34;&gt;running Panel apps in the browser&lt;/a&gt; with &lt;code&gt;panel convert&lt;/code&gt;, you absolutely must. But those deserve their own writeups, and this post will focus on the PyScript release itself.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now is a great time to remind users that, for consistent long term bevahior, I recommend projects link to pinned releases like &lt;code class=&#34;code&#34;&gt;https://pyscript.net/releases/2022.12.1/pyscript.js&lt;/code&gt;, and not to &lt;code class=&#34;code&#34;&gt;/latest/pyscript.js&lt;/code&gt;. If your project links to &lt;code class=&#34;code&#34;&gt;/latest&lt;/code&gt;, all the improvements in the new release have almost certainly broke it. Pinned releases are the way to go, and there&#39;s talk of deprecating/removing &lt;code class=&#34;code&#34;&gt;/latest&lt;/code&gt; in the near future.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And for those who want to get &lt;span class=&#34;italic&#34;&gt;really&lt;/span&gt; in the weeds, I&#39;ve prepared &lt;a href=&#34;since2022091.html&#34; target=&#34;_blank&#34;&gt;a granular Change and Issue Log of every Issue and Pull Request since the last release&lt;/a&gt;. It was made possibly by a (slightly tweaked) version of Ned Batchelder&#39;s &lt;a href=&#34;https://github.com/nedbat/dinghy&#34; target=&#34;_blank&#34;&gt;Dinghy GitHub digest tool&lt;/a&gt; &lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;grid justify-center p-1 m-auto bg-gray-200&#34;&gt;
    &lt;span&gt;Jump To: &lt;span&gt;
    &lt;a href=&#34;#Display&#34;&gt;display()&lt;/a&gt; • 
    &lt;a href=&#34;#paths&#34;&gt;[[fetch]]&lt;/a&gt; • 
    &lt;a href=&#34;#PyScript&#34;&gt;PyScript&lt;/a&gt; • 
    &lt;a href=&#34;#infrastructure&#34;&gt;Infrastructure&lt;/a&gt; • 
    &lt;a href=&#34;#pyodide&#34;&gt;Pyodide&lt;/a&gt; • 
    &lt;a href=&#34;#Community&#34;&gt;Community&lt;/a&gt; • 
    &lt;a href=&#34;#Team&#34;&gt;The PyScript Team&lt;/a&gt; • 
    &lt;a href=&#34;#Next&#34;&gt;What&#39;s Next?&lt;/a&gt;
&lt;/div&gt;
&lt;div id=&#34;toc-auto&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;Display&#34;&gt;&lt;code class=&#34;text-green-600&#34;&gt;display()&lt;/code&gt;, &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;, and &lt;code&gt;stdout&lt;/code&gt;&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;display-section&#34;&gt;&lt;code&gt;display()&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s one change to the PyScript API that&#39;s so big, it&#39;s getting its own whole section! And it has to do with how PyScript outputs to the browser window. &lt;span class=&#34;font-bold&#34;&gt;&lt;code&gt;print()&lt;/code&gt; no longer outputs to arbitrary places in the browser window!&lt;/span&gt; The new function to use is called &lt;span class=&#34;font-bold&#34;&gt;&lt;code&gt;display()&lt;/code&gt;&lt;/span&gt;. And using &lt;code&gt;print()&lt;/code&gt; has some new and interesting behaviors as well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In &#34;desktop flavored&#34; Python, &lt;code&gt;print()&lt;/code&gt; takes the &lt;code&gt;*objects&lt;/code&gt; it&#39;s given, converts them to strings &lt;a href=&#34;https://docs.python.org/3/library/functions.html#print&#34; target=&#34;_blank&#34;&gt;&#34;like &lt;code&gt;str()&lt;/code&gt; does&#34;&lt;/a&gt;, and sends the results to &lt;code class=&#34;code&#34;&gt;sys.stdout&lt;/code&gt;. &lt;code&gt;sys.stdout&lt;/code&gt; is a File-like object with methods like &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;readline()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, and so on. It represents a continuous stream of text, plus the idea that various characters break up the stream into &#34;lines.&#34; And that&#39;s about it. The simplicity of this default output stream is its power - a very similar structure can be used to represent a stream of text into a file, over a network, a buffer, etc.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Prior to 2022.12.1, Python&#39;s &lt;code&gt;sys.stdout&lt;/code&gt; was routed &lt;span class=&#34;italic&#34;&gt;to the DOM&lt;/span&gt; via fairly complicated &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/beb3aa157419ecb53863c76674069c78cb48dfe1/pyscriptjs/src/python/pyscript.py#L368-L419&#34; target=&#34;_blank&#34;&gt;wrapper setup&lt;/a&gt;. However, a browser window has so many more dimensions of possibility for where we might want to place content compared to a terminal. Thus, the metaphor of &#34;use &lt;code&gt;print()&lt;/code&gt; and we&#39;ll just send some version of that stream to a location on the page&#34; wasn&#39;t as useful as it could be.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As of 2022.12.1, &lt;span class=&#34;font-bold&#34;&gt;&lt;code&gt;print()&lt;/code&gt; (i.e. stdout) goes to the developer console; &lt;code&gt;display()&lt;/code&gt; is for outputting to the browser window&lt;/span&gt; (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/749&#34;&gt;#749&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;py-2 pl-2 m-0 ml-4 bg-green-100&#34;&gt;
    &lt;h4 class=&#34;text-xl&#34;&gt;&lt;code class=&#34;nocode&#34; &gt;display(*values, target=None, append=True)&lt;/code&gt;&lt;/h4&gt;
    &lt;div class=&#34;ml-4&#34;&gt;
        &lt;p class=&#34;pt-1 text-justify&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;*values&lt;/span&gt; (&lt;code&gt;list&lt;/code&gt;) - the list of objects to be displayed. Can be any of the following MIME types:: &#34;text/plain&#34;, &#34;text/html&#34;, &#34;image/png&#34;, &#34;image/jpeg&#34;, &#34;image/svg+xml&#34;, &#34;application/json&#34; or &#34;application/javascript&#34;&lt;/p&gt;
        &lt;p class=&#34;pt-1 mt-2 text-justify&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;target&lt;/span&gt; (&lt;code&gt;str&lt;/code&gt;)- the ID of the html tag to output to. If &lt;code&gt;none&lt;/code&gt;, output to the current &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
        &lt;p class=&#34;pt-1 mt-2 text-justify&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;append&lt;/span&gt; (&lt;code&gt;boolean&lt;/code&gt;) if the output is going to be appended or not to the `target`ed element. It creates a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag if &lt;code&gt;True&lt;/code&gt; and a &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag with a random ID if &lt;code&gt;False&lt;/code&gt;&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;If &lt;code&gt;display()&lt;/code&gt; is given a &lt;code&gt;target&lt;/code&gt; argument, it will attempt to send its *values to the HTML element on the page with that ID. If not, it will use the currently executing tag (&amp;lt;py-script&amp;gt; or &amp;lt;py-repl&amp;gt;) as that destination. Either way, the content is placed either in a new &amp;lt;div&amp;gt; as a sibling of the currently executing tag, or replace the content at the tag location, depending on whether `append` is true or false.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So for example, in place of the usual &lt;code&gt;print(&#34;Hello, world&#34;)&lt;/code&gt;, one could do one of these (they have slightly different behaviors - try them out!):&lt;/p&gt;
&lt;div class=&#34;p-2 mx-4 my-2&#34; style=&#34;background-color: #f0f3f3&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;)

display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;)

display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello world&amp;#34;&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;target-div&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;hidden live-example&#34;&gt;
    &lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-2&#34;&gt;
        &lt;div&gt;
            &lt;py-repl&gt;display(&#34;Hello World&#34;)&lt;/py-repl&gt;
            &lt;py-repl&gt;
                display(&#34;Hello&#34;)
                display(&#34;World&#34;)
            &lt;/py-repl&gt;
            &lt;py-repl&gt;display(&#34;Hello&#34;, &#34;World&#34;, append=False)&lt;/py-repl&gt;
            &lt;py-repl&gt;display(&#34;Hello world&#34;, target=&#34;target-div&#34;)&lt;/py-repl&gt;
        &lt;/div&gt;
        &lt;div class=&#34;pt-1 pl-2 bg-gray-200&#34;&gt;
            &lt;p class=&#34;text-sm text-gray-700&#34;&gt;#target-div&lt;/p&gt;
            &lt;div id=&#34;target-div&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;display()&lt;/code&gt; escapes any HTML given to it as an input string, so &lt;code&gt;display(&#34;&amp;lt;br&amp;gt;&#34;)&lt;/code&gt; prints the literal characters &lt;code class=&#34;code&#34;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; to the screen, instead of creating a newline. For non-string inputs, &lt;code&gt;display(some_obj)&lt;/code&gt; calls &lt;code&gt;repr(some_obj)&lt;/code&gt; and escapes that. If you &lt;span class=&#34;italic&#34;&gt;do&lt;/span&gt; want to inject HTML into your page, a new object is to use the new &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/515858f3134bf031497f0420e8a0e7fbc4c32be0/pyscriptjs/src/python/pyscript.py#L49&#34;&gt;HTML class&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/915&#34;&gt;#915&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;&#34;&gt;
&lt;p class=&#34;code-title&#34;&gt;HTML Class&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;You&amp;#39;ll see the angle brackets and everything here&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;)
display(HTML(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;But this is an honest-to-goodness bold paragraph!&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;hidden my-3 live-example&#34;&gt;
    &lt;py-repl&gt;
        display(&#34;&lt;p&gt;&lt;b&gt;You&#39;ll see the angle brackets and everything here&lt;/b&gt;&lt;/p&gt;&#34;)
        display(HTML(&#34;&lt;p&gt;&lt;b&gt;But this is an honest-to-goodness bold paragraph!&lt;/b&gt;&lt;/p&gt;&#34;))
    &lt;/py-repl&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;As part of this reshaping of output, the &lt;span class=&#34;font-semibold&#34;&gt;&lt;code&gt;&amp;lt;py-script output=&#34;...&#34;&amp;gt;&lt;/code&gt; attribute has been deprecated...&lt;/span&gt; at least for now. This means that if you want the stdout of your code to go to a specific place in the browser window, you&#39;ll need to handle that on the Python side. One possible way would be to use &lt;code&gt;&lt;a href=&#34;https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout&#34; target=&#34;_blank&#34;&gt;contextlib.redirect_stdout&lt;/a&gt;&lt;/code&gt;, but there are many ways to handle that behavior. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/981&#34;&gt;#981&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, it&#39;s worth nothing that the behavior of placing content based on the currently executing tag doesn&#39;t necessarily work for coroutines in async contexts. In most situations, you&#39;ll see a helpful warning banner will let you know:&lt;/p&gt;
&lt;p class=&#34;flex justify-center post-p&#34;&gt;&lt;code class=&#34;px-2 text-red-800 border-2 border-red-800 nocode&#34;&gt;Implicit target not allowed here. Please use display(..., target=...)&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But due to some tricky edge cases with how warnings percolate up from coroutines, things currently may just fail silently.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;pyterminal&#34;&gt;&lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;So if &lt;code&gt;display()&lt;/code&gt; is for writing to the screen, what does &lt;code&gt;print()&lt;/code&gt; do? Well, a couple of things, but most visibly, it writes to the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;mx-0 static-example md:mx-4&#34;&gt;
&lt;p class=&#34;code-title&#34;&gt;hello_world_terminal.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;I can count to &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;px-4 py-2 mt-2 py-terminal&#34; &gt;Hello, world!&lt;br&gt;I can count to 0&lt;br&gt;I can count to 1&lt;br&gt;I can count to 2&lt;br&gt;I can count to 3&lt;br&gt;I can count to 4&lt;br&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;div class=&#34;hidden live-example&#34;&gt;
    &lt;py-script&gt;
        print(&#34;Hello, world!&#34;)
        for i in range(3):
            print(f&#34;I can count to {i}&#34;)
    &lt;/py-script&gt;
    &lt;div class=&#34;w-full md:w-5/6 md:m-auto gap-y-4&#34;&gt;
        &lt;py-repl&gt;
        print(&#34;Hello, world!&#34;)
        for i in range(3):
            print(f&#34;I can count to {i}&#34;)
        &lt;/py-repl&gt;
        &lt;div class=&#34;px-4 py-2 bg-black&#34;&gt;
            &lt;py-terminal&gt;&lt;/py-terminal&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; achieves a couple things:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;It makes sure that output to stdout goes &lt;span class=&#34;italic&#34;&gt;somewhere&lt;/span&gt; visible; if you copy and paste Python code from your desktop environment to the browser, you can see at least something happening&lt;/li&gt;
    &lt;li&gt;If you want to use a terminal-like output for your code, this is a pre-made solution&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;The behavior and placement of the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; is configurable via a new &lt;a href=&#34;https://docs.pyscript.net/latest/reference/plugins/py-terminal.html&#34;&gt;terminal setting&lt;/a&gt; in &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;. The options are:&lt;/p&gt;
&lt;table class=&#34;w-full md:w-3/4 md:m-auto&#34;&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;value&lt;/th&gt;
            &lt;th&gt;description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr class=&#34;divide-x-2 divide-gray-400&#34;&gt;
            &lt;td class=&#34;pl-2 pr-4&#34;&gt;&lt;code&gt;&amp;quot;auto&amp;quot;&lt;/code&gt;&lt;/td&gt;
            &lt;td class=&#34;pl-4 pr-2&#34;&gt;(default) Automatically add a &lt;code&gt;&amp;lt;py-terminal auto&amp;gt;&lt;/code&gt;, to the page. The terminal is initially hidden and automatically shown as soon as something writes to &lt;code&gt;stdout&lt;/code&gt; and/or &lt;code&gt;stderr&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&#34;divide-x-2 divide-gray-400&#34;&gt;
            &lt;td class=&#34;pl-2 pr-4&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
            &lt;td class=&#34;pl-4 pr-2&#34;&gt;Automatically add a visible &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; to the page when PyScript loads. It will be added to the end of the &amp;lt;body&amp;lt; unless there is a &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; tag on the page.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&#34;divide-x-2 divide-gray-400&#34;&gt;
            &lt;td class=&#34;pl-2 pr-4&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
            &lt;td class=&#34;pl-4 pr-2&#34;&gt;Don&amp;#39;t add &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; to the page&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&#34;post-p&#34;&gt;So, if you want to stick the terminal somewhere specific, simply include &lt;code&gt;&amp;lt;py-terminal&amp;gt;&amp;lt;/py-terminal&amp;gt;&lt;/code&gt; on your page. You can even include several py-terminals - output to &lt;code&gt;stdout&lt;/code&gt; will be sent to all of them.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;stdoutconsole&#34;&gt;stdout in the Developer Console&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;In addition to going to &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;, writes to &lt;code&gt;stdout&lt;/code&gt; also go to the &lt;a href=&#34;https://support.monday.com/hc/en-us/articles/360002197259-How-to-open-the-developer-console&#34;&gt;Developer Console&lt;/a&gt;. This is the closest analog in the browser to a &#34;dumb terminal&#34;, and so it makes a certain amount of sense for &lt;code&gt;stdout&lt;/code&gt; to be routed there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are certain small differences, since of course the dev console &lt;span class=&#34;italic&#34;&gt;isn&#39;t&lt;/span&gt; a terminal. For instance, we discovered just the other day that &lt;code&gt;console.log()&lt;/code&gt; (which is used to write to the dev console) &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/472#issuecomment-1281228942&#34;&gt;doesn&#39;t output unless it receives a newline&lt;/a&gt;. So something like &lt;code class=&#34;code&#34;&gt;print(&#34;Hello world&#34;, end = &#34;&#34;)&lt;/code&gt; won&#39;t show up until you log something else with a newline in it! But for simple debugging purposes, or for output where (even temporarily) including a &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; on the page would be untenable, this is a great addition.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;remarks&#34;&gt;Remarks&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;If I were a betting man, I&#39;d hedge that the API for &lt;code&gt;display()&lt;/code&gt; is likely to continue to change and evolve. It&#39;s a brand-new and breaking feature, and I suspect its semantics are going to continue to get tweaked. If you find more issues or inconsistencies, be sure to &lt;a href=&#34;https://github.com/pyscript/pyscript/issues&#34;&gt;raise an issue on GitHub&lt;/a&gt; or come tell us about it &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;on the PyScript Discord&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;paths&#34;&gt;Fetching Files with &lt;code&gt;&amp;lt;py-config&amp;gt; [[fetch]]&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, all files listed in &lt;code&gt;&amp;lt;py-config&amp;gt; paths:&lt;/code&gt; were &lt;code&gt;fetch()&lt;/code&gt;&#39;d from the listed URLs and dropped into the embedded filesystem in the same folder as the running Python Script. Which is to say, pointing a path to the relative URL &lt;code class=&#34;code&#34;&gt;&#39;data/files/Feb-24/info.txt&#39;&lt;/code&gt; would make that file available via &lt;code class=&#34;code&#34;&gt;with open(&#39;info.txt&#39;)... &lt;/code&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;From PyScript 2022.12.1, &lt;code&gt;&amp;lt;py-config&amp;gt; paths:...&lt;/code&gt; has been replaced by &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; [[fetch]] ...&lt;/span&gt;, and it&#39;s much more powerful that its predecessor.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The new options allow the user to fetch multiple files ina  way that preserves their URL/directory structure. The parameters are all bundled in a &#34;fetch configuration&#34; table under the &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag; you can have multiple fetch configurations in a single py-config.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The options for a fetch config are:&lt;/p&gt;
&lt;table class=&#34;w-full m-2 md:w-3/4 md:m-auto&#34;&gt;
    &lt;tr class=&#34;font-bold&#34;&gt;
        &lt;td&gt;Value&lt;/td&gt;
        &lt;td&gt;Type&lt;/td&gt;
        &lt;td&gt;Description&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;`from`&lt;/td&gt;
        &lt;td&gt;string&lt;/td&gt;
        &lt;td&gt;Base URL for the resource to be fetched.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;`to_folder`&lt;/td&gt;
        &lt;td&gt;string&lt;/td&gt;
        &lt;td&gt;Name of the folder to create in the filesystem.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;`files`&lt;/td&gt;
        &lt;td&gt;List of string&lt;/td&gt;
        &lt;td&gt;List of files to be downloaded. Cannot be combined with &#34;to_file&#34;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;`to_file`&lt;/td&gt;
        &lt;td&gt;string&lt;/td&gt;
        &lt;td&gt;Name of the target to create in the filesystem. Cannot be combined with &#34;files&#34;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p class=&#34;post-p&#34;&gt;Breaking that down a bit, here&#39;s how I personally think through which parameters to use:&lt;/p&gt;
&lt;ul class=&#34;py-4 pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;&lt;code&gt;files&lt;/code&gt; vs &lt;code&gt;to_file&lt;/code&gt;:&lt;/li&gt;
    &lt;ul class=&#34;py-2 pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li&gt;If you want the files in the Emscripten file system to have the same name as on the server, use &lt;code&gt;files&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;If you want the files in the Emscripten file system to have a &lt;span class=&#34;italic&#34;&gt;different&lt;/span&gt; name than on the server, or if the URL has no file name (e.g. an API endpoint), use &lt;code&gt;to_file&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;If &lt;code&gt;from&lt;/code&gt; is specified, it will be used as the prefix for URL&#39;s to down files from (can be absolute or relative). Leave unspecified to reference the same relative URL path as the current document.
    &lt;li&gt;If &lt;code&gt;to_folder&lt;/code&gt; is specified, files will be placed in that folder in the Emscripten file system; otherwise, they&#39;ll be placed in the same folder Python scripts are executed from&lt;/li&gt;
    &lt;/li&gt;

&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;The pseudo-code for what PyScript will fetch is something like this:&lt;/p&gt;
&lt;div class=&#34;px-8 overflow-x-scroll bg-codeblock&#34;&gt;
&lt;pre&gt;
&lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; both &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;files&lt;/span&gt; and &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;to_file&lt;/span&gt; are specified: Error

&lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; is not specified, &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; = &#34;&#34;&lt;span class=&#34;text-green-700&#34;&gt; #defaults to relative URLs&lt;/span&gt;
&lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;to_folder&lt;/span&gt; is not specified, &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;to_folder&lt;/span&gt; = &#34;.&#34; &lt;span class=&#34;text-green-700&#34;&gt;#defaults to the working current directory, where Python Scripts are run&lt;/span&gt;

&lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;files&lt;/span&gt; is specified:
    for each &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;file&lt;/span&gt; in &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;files&lt;/span&gt;:
        &lt;span class=&#34;text-green-700&#34;&gt;#These concatenations are done in a smart way to try to avoid dangling/missing &#34;/&#34;s&lt;/span&gt;
        &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;source_URL&lt;/span&gt; = &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; + &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;file&lt;/span&gt;
        &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;destination&lt;/span&gt; = &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;to_folder&lt;/span&gt; + &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;file&lt;/span&gt;
        download object from the source_url to destination in the local file system

&lt;span class=&#34;font-semibold text-red-700&#34;&gt;else:&lt;/span&gt; &lt;span class=&#34;text-green-700&#34;&gt;#&#34;files&#34; not specified:&lt;/span&gt;
    &lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; to_file is specified:
        download object from url &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; to &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;(to_folder + to_file)&lt;/span&gt;
    &lt;span class=&#34;font-semibold text-red-700&#34;&gt;else if&lt;/span&gt; &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; ends in a file-name: &lt;span class=&#34;text-green-700&#34;&gt;#i.e. the part after the last &#34;/&#34;&lt;/span&gt;
        download object from url &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; to &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;(to_folder + (&#39;filename&#39; at end of from))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s look at some recipes for using these new attributes to fetch resources from the web and download them to the Emscripten local file system to Python can use them.&lt;/p&gt;
&lt;div class=&#34;p-2 border-2 border-blue-200 rounded-xl&#34; id=&#34;fetch-container&#34;&gt;
    &lt;div class=&#34;overflow-y-scroll&#34; style=&#34;height: 37rem;&#34; id=&#34;fetch-examples&#34;&gt;
        &lt;p&gt;For the examples where we&#39;re fetching our own files and modules, we&#39;ll assume our site has the following simple structure.&lt;/p&gt;
        &lt;pre class=&#34;p-4 bg-gray-200&#34;&gt;
        content/
        ├─ &lt;span class=&#34;font-bold&#34;&gt;index.html &lt;&lt;&lt; File with &amp;lt;py-config&amp;gt;&lt;/span&gt;
        ├─ info.txt
        ├─ data/
        │  ├─ sensordata.csv
        ├─ packages/
        │  ├─ my_package/
        │  │  ├─ __init__.py
        │  │  ├─ helloworld/
        │  │  │  ├─ __init__.py/
        │  │  │  ├─ greetings.py/
        &lt;/pre&gt;
        &lt;div class=&#34;grid grid-cols-1 mt-4 xl:grid-cols-2 gap-x-3 gap-y-4&#34;&gt;
        
        &lt;div class=&#34;w-full&#34;&gt;
        &lt;p class=&#34;code-title&#34;&gt;Single File&lt;/p&gt;
        &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;info.txt&amp;#39;]
    # URL defaults to &amp;#39;relative to this folder&amp;#39;
    # Destination defaults to &amp;#39;adjacent to the Python files we run&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    with open(&amp;#39;info.txt&amp;#39;, &amp;#39;r&amp;#39;) as fp:
        display(fp.read())
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    import os
    import asyncio
    from pyodide.ffi import to_js
    
    async def load_to_local(filepath, fetchpath):
        await js.pyscript.runtime.loadFromFile(filepath, fetchpath)

    asyncio.ensure_future(load_to_local(&#39;info.txt&#39;, &#39;info.txt&#39;))
&lt;/py-script&gt;
        &lt;/div&gt;
        &lt;div class=&#34;hidden mt-2 mb-6 live-example&#34;&gt;
            &lt;py-repl&gt;
            with open(&#39;info.txt&#39;, &#39;r&#39;) as fp:
                text = fp.read()
            
            text
            &lt;/py-repl&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;w-full&#34;&gt;
            &lt;p class=&#34;code-title&#34;&gt;Single File w/ Renaming&lt;/p&gt;
            &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    from = &amp;#39;info.txt&amp;#39;
    to_file = &amp;#39;info_loaded_from_web.txt&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    with open(&amp;#39;info_loaded_from_web.txt&amp;#39;, &amp;#39;r&amp;#39;) as fp:
        print(fp.read())
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;info_loaded_from_web.txt&#39;, &#39;info.txt&#39;))
&lt;/py-script&gt;
            &lt;/div&gt;
            &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                &lt;py-repl&gt;
                with open(&#39;info_loaded_from_web.txt&#39;, &#39;r&#39;) as fp:
                    text = fp.read()
                
                text
                &lt;/py-repl&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        
        &lt;div class=&#34;w-full&#34;&gt;
        &lt;p class=&#34;code-title&#34;&gt;To Another Local Folder&lt;/p&gt;
        &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;info.txt&amp;#39;]
    to_folder = &amp;#39;infofiles/loaded_info&amp;#39;
    # trailing slash would also be acceptable: &amp;#39;infofiles/loaded_info/&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    with open(&amp;#34;infofiles/loaded_info/info.txt&amp;#34;, &amp;#34;r&amp;#34;) as fp:
        print(fp.read())
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;infofiles/loaded_info/info.txt&#39;, &#39;info.txt&#39;))
&lt;/py-script&gt;
        &lt;/div&gt;
        &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
            &lt;py-repl&gt;
            with open(&#39;infofiles/loaded_info/info.txt&#39;, &#39;r&#39;) as fp:
                text = fp.read()
            
            text
            &lt;/py-repl&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;w-full&#34;&gt;
            &lt;p class=&#34;code-title&#34;&gt;From Another Folder to Current Working Directory&lt;/p&gt;
            &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;sensordata.csv&amp;#39;]
    from = &amp;#39;data/&amp;#39;
    # fetch file from URL &amp;#39;data/sensordata.csv&amp;#39; to local file &amp;#39;./sensordata.csv&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    import csv
    with open(&amp;#34;./sensordata.csv&amp;#34;, &amp;#34;r&amp;#34;) as csvfile:
        datareader = csv.reader(csvfile)
        for row in datareader:
            display(row)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;sensordata.csv&#39;, &#39;data/sensordata.csv&#39;))
&lt;/py-script&gt;
            &lt;/div&gt;
            &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                &lt;py-repl&gt;
                    import csv
                    with open(&#34;./sensordata.csv&#34;, &#34;r&#34;) as csvfile:
                        datareader = csv.reader(csvfile)
                        for row in datareader:
                            display(row)
                &lt;/py-repl&gt;
                &lt;/div&gt;
            &lt;/div&gt;

            &lt;div class=&#34;w-full&#34;&gt;
                &lt;p class=&#34;code-title&#34;&gt;From a Folder, to A Folder&lt;/p&gt;
                &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    # With no &amp;#39;files&amp;#39; or &amp;#39;to_file&amp;#39; specified, use the &amp;#34;file&amp;#34; at the end of &amp;#34;from&amp;#34;
    # This ends up at &amp;#39;./local_data/sensordata.csv&amp;#39;
    from = &amp;#39;./data/sensordata.csv&amp;#39;
    to_folder = &amp;#39;./local_data&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
import csv
with open(&amp;#34;./local_data/sensordata.csv&amp;#34;, &amp;#34;r&amp;#34;) as csvfile:
    datareader = csv.reader(csvfile)
    for row in datareader:
        display(row)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;./local_data/sensordata.csv&#39;, &#39;data/sensordata.csv&#39;))
&lt;/py-script&gt;
                &lt;/div&gt;
                &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                    &lt;py-repl&gt;
                        import csv
                        with open(&#34;./local_data/sensordata.csv&#34;, &#34;r&#34;) as csvfile:
                            datareader = csv.reader(csvfile)
                            for row in datareader:
                                display(row)
                    &lt;/py-repl&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
        
            &lt;div class=&#34;w-full&#34;&gt;
                &lt;p class=&#34;code-title&#34;&gt;Multiple Files, Preserving Folder Structure&lt;/p&gt;
                &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;__init__.py&amp;#39;, &amp;#39;helloworld/greetings.py&amp;#39;, &amp;#39;helloworld/__init__.py&amp;#39;]
    from = &amp;#39;../packages/my_package/&amp;#39;
    to_folder = &amp;#39;./my_package&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
from my_package.helloworld.greetings import say_hi
print(say_hi())
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.gather(*[
        load_to_local(&#39;./my_package/__init__.py&#39;, &#34;packages/my_package/__init__.py&#34;),
        load_to_local(&#39;./my_package/helloworld/__init__.py&#39;, &#39;packages/my_package/helloworld/__init__.py&#39;),
        load_to_local(&#39;./my_package/helloworld/greetings.py&#39;, &#39;packages/my_package/helloworld/greetings.py&#39;)
    ])
&lt;/py-script&gt;
                &lt;/div&gt;
                &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                    &lt;py-repl&gt;
                        from my_package.helloworld.greetings import say_hi
                        display(say_hi())
                    &lt;/py-repl&gt;
                    &lt;/div&gt;
                &lt;/div&gt;

                &lt;div class=&#34;w-full&#34;&gt;
                    &lt;p class=&#34;code-title&#34;&gt;Multiple Fetch Configs&lt;/p&gt;
                    &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;info.txt&amp;#39;]
    
    [[fetch]]
    from = &amp;#39;data/&amp;#39;
    files = [&amp;#39;sensordata.csv&amp;#39;]
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
with open(&amp;#39;info.txt&amp;#39;, &amp;#39;rb&amp;#39;) as fp:
    info_length = len(fp.read())

with open(&amp;#39;sensordata.csv&amp;#39;, &amp;#39;rb&amp;#39;) as fp:
    data_length = len(fp.read())

display(f&amp;#34;info.txt is {info_length} bytes and data.csv is {data_length} bytes&amp;#34;)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;py-script class=&#34;hidden&#34;&gt;
        import asyncio
        asyncio.ensure_future(load_to_local(&#39;./info.txt&#39;, &#39;./info.txt&#39;))
        asyncio.ensure_future(load_to_local(&#39;./sensordata.csv&#39;, &#39;./data/sensordata.csv&#39;))
    &lt;/py-script&gt;
                    &lt;/div&gt;
                    &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                        &lt;py-repl&gt;
                            with open(&#39;info.txt&#39;, &#39;rb&#39;) as fp:
                                info_length = len(fp.read())
                            
                            with open(&#39;sensordata.csv&#39;, &#39;rb&#39;) as fp:
                                data_length = len(fp.read())

                            display(f&#34;info.txt is {info_length} bytes and data.csv is {data_length} bytes&#34;)
                        &lt;/py-repl&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
        
            &lt;div class=&#34;w-full&#34;&gt;
                &lt;p class=&#34;code-title&#34;&gt;From an API Endpoint&lt;/p&gt;
                &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    from = &amp;#39;https://catfact.ninja/fact&amp;#39;
    to_file = &amp;#39;./cat_fact.json&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
import json
with open(&amp;#34;cat_fact.json&amp;#34;, &amp;#34;r&amp;#34;) as fp:
    data = json.load(fp)
display(data[&amp;#39;fact&amp;#39;])
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;./cat_fact.json&#39;, &#39;https://catfact.ninja/fact&#39;))
&lt;/py-script&gt;
                &lt;/div&gt;
                &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                    &lt;py-repl&gt;
                        import json
                        with open(&#34;cat_fact.json&#34;, &#34;r&#34;) as fp:
                            data = json.load(fp)
                        display(data[&#39;fact&#39;])
                    &lt;/py-repl&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
        
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&#34;expand-fetch-examples&#34; class=&#34;flex justify-center my-1&#34;&gt;
        &lt;p class=&#34;p-1 m-1 text-lg text-center text-gray-500 border-2 border-gray-200 rounded-lg&#34; id=&#34;show-fetch-examples&#34; onclick=&#34;expandFetchExamples()&#34; style=&#34;cursor: pointer&#34;&gt;--- Expand Examples ---&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;script&gt;
    function expandFetchExamples() {
        //expand examples
        let examples_container = document.getElementById(&#34;fetch-examples&#34;)
        examples_container.style.removeProperty(&#39;height&#39;)
        examples_container.classList.remove(&#39;overflow-y-scroll&#39;)

        //remove border
        document.getElementById(&#39;fetch-container&#39;).classList.remove(&#39;border-2&#39;)

        //Hide button
        document.getElementById(&#34;expand-fetch-examples&#34;).classList.add(&#39;hidden&#39;)
    }
&lt;/script&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;PyScript&#34;&gt;PyScript&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34; id=&#34;reshaping-api&#34;&gt;Reshaping the Python API&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, it wasn&#39;t possible to use any of PyScript&#39;s python API in resources outside of &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tags. Now, &lt;code&gt;import pyscript&lt;/code&gt; just works! But there&#39;s so much more going on than that.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(Almost) all of the global variables which PyScript previously made available by default have been moved into the &lt;code&gt;pyscript&lt;/code&gt; module, and should now be imported to be used. The remaining global objects are: the &lt;code class=&#34;font-semibold&#34;&gt;js&lt;/code&gt; module, the &lt;code class=&#34;font-semibold&#34;&gt;pyscript&lt;/code&gt; module, the &lt;code class=&#34;font-semibold&#34;&gt;Element&lt;/code&gt; class (&lt;code&gt;pyscript.Element&lt;/code&gt;), the &lt;code class=&#34;font-semibold&#34;&gt;display()&lt;/code&gt; function (&lt;code&gt;pyscript.display()&lt;/code&gt;), and the &lt;code class=&#34;font-semibold&#34;&gt;HTML&lt;/code&gt; class (&lt;code&gt;pyscript.HTML&lt;/code&gt;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The following global objects in PyScript 2022.09.1 should no longer be accessed as global objects, but can be imported as normal&lt;/p&gt;
&lt;ul class=&#34;py-2 pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;stdlib modules: &lt;code&gt;asyncio&lt;/code&gt;, &lt;code&gt;base64&lt;/code&gt;, &lt;code&gt;io&lt;/code&gt;, &lt;code&gt;sys&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;pyodide&lt;/code&gt;, &lt;code&gt;micropip&lt;/code&gt;. Also &lt;code&gt;textwrap.dedent&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;PyScript Objects: &lt;code&gt;PyScript&lt;/code&gt; (the class), &lt;code&gt;PyItemTemplate&lt;/code&gt;, &lt;code&gt;PyListTemplate&lt;/code&gt;, &lt;code&gt;PyWidgetTheme&lt;/code&gt;, &lt;code&gt;add_classes&lt;/code&gt;, &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Private PyScript Names (&lt;span class=&#34;italic&#34;&gt;members of the pyscript module, were global, but should be treated as private&lt;/span&gt;): &lt;code&gt;eval_formatter&lt;/code&gt;, &lt;code&gt;format_mime&lt;/code&gt;, &lt;code&gt;identity&lt;/code&gt;, &lt;code&gt;render_image&lt;/code&gt;, &lt;code&gt;MIME_RENDERERS&lt;/code&gt;, &lt;code&gt;MIME_METHODS&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;From js module: &lt;code&gt;document&lt;/code&gt;, &lt;code&gt;console&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;For example, check out the difference between the following two pieces of code from the previous and current versions:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 my-4 lg:grid-cols-2 gap-y-4 lg:gap-x-4&#34;&gt;
    &lt;div&gt;
        &lt;p class=&#34;code-title&#34;&gt;2022.09.1 Example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;my_coro&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(my_coro())

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;foo&lt;/span&gt;():
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(dedent(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;     FOO!&amp;#34;&lt;/span&gt;))

    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mydiv&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListner(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy(foo))
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;p class=&#34;code-title&#34;&gt;2022.12.1 Equivalent&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; loop
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console, document
&lt;/span&gt;
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;my_coro&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(my_coro())

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;foo&lt;/span&gt;():
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(dedent(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;     FOO!&amp;#34;&lt;/span&gt;))

    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mydiv&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListner(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy(foo))
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Users who want to make use of PyScript-specific functions in their own modules can now use &lt;code&gt;import pyscript&lt;/code&gt; to access the objects in &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/pyscriptjs/src/python/pyscript.py&#34;&gt;the pyscript module&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Not to leave users in a lunch with this large API change, all of the global objects where were previosusly prevent are &lt;span class=&#34;italic&#34;&gt;still accessible but deprecated&lt;/span&gt;. Accessing them directly will pop up a handy error message like:&lt;/p&gt;
&lt;div class=&#34;alert-banner py-warning md:mx-4&#34;&gt;Direct usage of &lt;code class=&#34;nocode&#34;&gt;console&lt;/code&gt; is deprecated. Please use &lt;code class=&#34;nocode&#34;&gt;js.console&lt;/code&gt; instead.&lt;button id=&#34;alert-close-button&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 16 16&#34; fill=&#34;currentColor&#34; width=&#34;12px&#34;&gt;&lt;path d=&#34;M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;For context: prior to this version, all of the Python side of PyScript - the hooks which made stdout work, &lt;code&gt;Element.write()&lt;/code&gt;, the PyScript class - was included into user code in a clever but inintuitive way. The methodology equivalent to loading the contents &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/pyscriptjs/src/python/pyscript.py&#34;&gt;pyscript.py&lt;/a&gt; as a string and calling &lt;code&gt;exec(contents)&lt;/code&gt; on that string. This worked, but made it difficult for users to use these PyScript functions in their own modules, and limited how the module could be used for type-checking. Things are better now!&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;plugins&#34;&gt;Plugins!&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As was so nicely phrased on the &lt;a href=&#34;#community&#34;&gt;October Community Call&lt;/a&gt;, PyScript is aiming to be a &#34;platform&#34;, not a &#34;framework&#34;. That is, it should provide lots of hooks, triggers, and signals to allow users to &lt;span class=&#34;italic&#34;&gt;expand&lt;/span&gt; the usability of PyScript, rather than forcing users to do things &#34;The PyScript Way.&#34;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The idea of using &#34;plugins&#34; to do this has been floating around for awhile now - some straightforward way of allowing users to cause their own code to be run at certain points in the PyScript lifecycle. But within that &#34;simple&#34; idea are many questions - should this be JavaScript or Python Code (or both/either)? Should the triggering mechanism be callback-based, event-based, or some other way? How much of the core functionality of PyScript should happen every time, or should we simply define a lifecycle and move &lt;span class=&#34;italic&#34;&gt;everything&lt;/span&gt; to a Plugin?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript 2022.12.1 gets the ball rolling on this by &lt;span class=&#34;font-semibold&#34;&gt;allowing users to author plugins in Python and use them to extend PyScript&lt;/span&gt;. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/961&#34;&gt;#961&lt;/a&gt;) This behavior has only be recently merged, and deserves it&#39;s own full writeup anyway, but here&#39;s a brief description of the process of authoring a Python plugin:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;In a separate &lt;code&gt;.py&lt;/code&gt; file (module), write a class that extends the &lt;code&gt;pyscript.Plugin&lt;/code&gt; class.&lt;/li&gt;
    &lt;ul class=&#34;py-1 pl-8 text-justify list-disc list-outside;&#34;&gt;
        &lt;li&gt;This class can implement any of the valid Python &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/8b7fb89c6862f9e7d3388248a4b5f5d411da06db/pyscriptjs/src/plugin.ts#L70-L96&#34;&gt;named lifecycle callbacks&lt;/a&gt;, which will be called at determined points in the PyScript loading lifecycle.&lt;/li&gt;
        &lt;li class=&#34;italic&#34;&gt;We could use some more documentation on these methods, to be honest, but the development on this is flying fast and furious. Keep your eyes peeled!&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;In this module, create an instance of this class named &lt;code&gt;plugin&lt;/code&gt;, and pass the constructor the name of the plugin. I.e. &lt;code&gt;plugin = Plugin(&#34;myNewPlugin&#34;)&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;In &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;, add the URL (relative or absolute) of this file to the &#34;plugins&#34; attribute. I.e. &lt;code&gt;plugins = [&#39;../my_folder/plugins/myNewPlugin.py&#34;]&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;When PyScript reaches any of the defined lifecycle points, the corresponding methods of the Plugin will be called.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Additionally, there&#39;s provision on the Python side for creating custom HTML elements via a Python plugin. See &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/8b7fb89c6862f9e7d3388248a4b5f5d411da06db/pyscriptjs/src/plugins/python/py_markdown.py#L23-L31&#34;&gt;the Markdown Plugin example&lt;/a&gt; for a demo of how this works.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, PyScript is using a plugin system internally to implement some of its core behaviors. The &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; page element (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/917&#34;&gt;#917&lt;/a&gt;), the splashscreen which appears when PyScript is loading, and the &lt;code&gt;importmap&lt;/code&gt; functionality which allows loading importmap ES modules into Python (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/938&#34;&gt;#938&lt;/a&gt;), are all implemented in TypeScript as plugins. Currently, there&#39;s no ability for the user to write their own JavaScript plugins, but that&#39;s a potential (and powerful) behavior for the future.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;implicit&#34;&gt;No More Implicit Coroutines&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Prior to version 2022.12.1, PyScript allowed the use of Top-Level-Await statements. That is, &lt;code&gt;await&lt;/code&gt;, &lt;code&gt;async for&lt;/code&gt;, and &lt;code&gt;async with&lt;/code&gt; outside of coroutines (&lt;code&gt;async def&lt;/code&gt; functions). When it encountered such a block of Python, it automatically wrapped the block up into a coroutine and scheduled it to run in the event loop.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;As of PyScript 2022.12.1, this is no longer allowed.&lt;/span&gt; Users should write their async functions as coroutines using &lt;code&gt;async def&lt;/code&gt;, and schedule them using &lt;a href=&#34;https://jeff.glass/post/pyscript-asyncio#webloop&#34;&gt;the allowed webloop methods&lt;/a&gt; like &lt;code&gt;asyncio.create_task()&lt;/code&gt; or &lt;code&gt;asyncio.ensure_future()&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The doesn&#39;t actually remove anything that was previously possible with PyScript - it only requires that users be more explicit about scheduling their coroutines. Compare the two following, equivalent examples from PyScript 2022.09.1 and 2022.12.1:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 my-4 lg:grid-cols-2 gap-y-4 lg:gap-x-4&#34;&gt;
    &lt;div&gt;
        &lt;p class=&#34;code-title&#34;&gt;2022.09.1 Example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
        js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(i)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;p class=&#34;code-title&#34;&gt;2022.12.1 Equivalent&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;my_coro&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
            js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(i)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(my_coro())
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;For more techniques and background, you can check out my &lt;a href=&#34;../../post/pyscript-asyncio/&#34;&gt;long writeup on Asyncio in PyScript&lt;/a&gt; from last month. Antonio and I also got &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/879#issuecomment-1289415317&#34;&gt;deep in the weeds of how Pyodide&#39;s &lt;code class=&#34;nocode&#34;&gt;runPythonAsync()&lt;/code&gt; works&lt;/a&gt; (which we previously used to implicitly schedule coroutines), and some of its limitations, if you want to dive even deep.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;jsmodule&#34;&gt;PyScript JS module&lt;/h4&gt;
&lt;h5 class=&#34;pt-3 text-lg&#34;&gt;Pyodide Runtime Access&lt;/h5&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;pyscript.js&lt;/code&gt; now exposes the instance of Pyodide it creates &lt;a href=&#34;https://docs.pyscript.net/latest/reference/pyscript-module.html&#34;&gt;as a JavaScript object&lt;/a&gt;. Users wishing to run code directly in Pyodide, or to use another JavaScript module that interacts directly with Pyodide, can use this exported reference to do so. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/868&#34;&gt;#868&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p warning-banner&#34;&gt;The current method of access makes no guarantees about the state of the runtime when accessed - users will need to implement their own method of checking whether the runtime is loaded/initialized before accessing it. This is &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/942&#34;&gt;likely to change in the future&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The Pyodide runtime is accessible as &lt;code class=&#34;code&#34;&gt;pyscript.runtime.interpreter&lt;/code&gt;, like so:&lt;/p&gt;
&lt;div class=&#34;mx-4 my-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://pyscript.net/releases/2022.12.1/pyscript.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;logFromPython()&amp;#34;&lt;/span&gt;&amp;gt;Click Me to Log&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; logFromPython() {
        pyscript.runtime.interpreter.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            from js import console
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            console.log(f&amp;#34;Hello from Python! {1 + 2 = }&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        `&lt;/span&gt;)
    }
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that the runtime will not be available until it has been loaded by PyScript and initialized. In the example above, we use a button to defer executing the desired code until sometime after PyScript has initialized; in the next example, we&#39;ll use an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Event&#34;&gt;Event&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code class=&#34;code&#34;&gt;pyscript.runtime.globals&lt;/code&gt; attribute holds a reference to Python &lt;code&gt;globals()&lt;/code&gt; dictionary, making it easy to reference Python objects from JavaScript. By the wonder that is Pyodide, the objects are proxied back and forth pretty much seamlessly, but especially when logging to the console, using the &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/js-api.html#PyProxy.toJs&#34;&gt;toJs()&lt;/a&gt; function makes the conversion explicit:&lt;/p&gt;
&lt;div class=&#34;mx-4 my-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://pyscript.net/releases/2022.12.1/pyscript.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    from js import document, Event

    techs = [&amp;#34;PyScript&amp;#34;, &amp;#34;Pyodide&amp;#34;, &amp;#34;WASM&amp;#34;]
    number_of_techs = len(techs)

    # Use an Event to trigger JS after PyScript has initialized/run:
    pydone = Event.new(&amp;#34;py-done&amp;#34;)
    document.dispatchEvent(pydone)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py-done&amp;#34;&lt;/span&gt;, () =&amp;gt; {
        console.log(pyscript.runtime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;number_of_techs&amp;#34;&lt;/span&gt;))
        console.log(pyscript.runtime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;techs&amp;#34;&lt;/span&gt;).toJs())
    })
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&#34;m-2&#34;&gt;
        &lt;p class=&#34;italic&#34;&gt;Dev Console Result:&lt;/p&gt;
        &lt;img class=&#34;border-2 border-gray-400&#34; src=&#34;consoledemo1.PNG&#34; alt=&#34;A pair of entries from the developer console reading &#39;3&#39; and &#39;PyScript&#39;, &#39;Pyodide&#39;, &#39;WASM&#39;&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h5 class=&#34;pt-3 text-lg&#34;&gt;PyScript Version Numbers (JavaScript)&lt;/h5&gt;
&lt;p class=&#34;post-p&#34;&gt;You can also access the current version of PyScript via the pyscript js module at &lt;code&gt;pyscript.version&lt;/code&gt;. This will appear as a &#34;dotted string&#34; like &lt;code class=&#34;code&#34;&gt;2022.12.1.dev&lt;/code&gt; But version numbers are even more powerful on the Python side.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;pyversionnumbers&#34;&gt;PyScript Version Numbers (Python)&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Up to this point, the current PyScript version is something a user would have to infer from what URL they sourced &lt;code class=&#34;code&#34;&gt;pyscript.js&lt;/code&gt; from. As of version 2022.12.1, though, you can access that information directly in Python via a couple of new attributes.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/reference/API/version_info.html&#34; class=&#34;font-semibold&#34;&gt;PyScript.version_info&lt;/a&gt; is a &lt;code&gt;nametuple&lt;/code&gt; representing the current version in a code-savvy way - it&#39;s intended for use when comparing version numbers, i.e. to establish feature compatibility. For example:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Using version_info&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;version_info &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;2022&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;):
          js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You should be using [[fetch]] configs&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
          js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You should be using &amp;amp;lt;py-config&amp;amp;gt; paths:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;hidden my-4 live-example&#34;&gt;
    &lt;py-repl&gt;
        import js
        if PyScript.version_info and PyScript.version_info &gt;= (2022,11,1,&#34;&#34;):
            display(&#34;This text was output using display()&#34;)
        else:
            print(&#34;This text was output using print()&#34;)
    &lt;/py-repl&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;On the other hand, &lt;a href=&#34;https://docs.pyscript.net/latest/reference/API/__version__.html&#34; class=&#34;font-semibold&#34;&gt;PyScript.__version__&lt;/a&gt; is a human-readable version of the current version, like &#34;2022.12.1.final&#34;&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Using __version__&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;The current version of PyScript running right now is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;__version__&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;hidden my-4 live-example&#34;&gt;
    &lt;py-repl&gt;
        display(f&#34;{PyScript.version_info= }&#34;)
        display(f&#34;{PyScript.__version__= }&#34;)
    &lt;/py-repl&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;widgetdeprecation&#34;&gt;&lt;code&gt;&amp;lt;py-button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;py-inputbox&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;py-box&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;py-title&amp;gt;&lt;/code&gt; are Deprecated&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;All four of these custom HTML elements, which have been present in PyScript since its alpha release, have been deprecated. In the continuing vein of trying to make PyScript into a strong, versatile, and minimal core, it was decided that these elements weren&#39;t really key - they&#39;re easy enough to implement &lt;span class=&#34;italic&#34;&gt;with&lt;/span&gt; PyScript, enough so that they don&#39;t need to be included elements by default. &lt;code&gt;&amp;lt;py-button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;py-inputbox&amp;gt;&lt;/code&gt; are simple enough to replicate with existing HTML elements and event listeners, while &lt;code&gt;&amp;lt;py-box&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;py-title&amp;gt;&lt;/code&gt; were pre-formatted &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Those components haven&#39;t been fully removed from PyScript yet, just deprecated, and nicely, the deprecation warning banner that appears suggests altenate elements with new CSS classes that maintain the old elements&#39; styling. The suggested solutions are:&lt;/p&gt;
&lt;div class=&#34;flex justify-center my-2&#34;&gt;
    &lt;table class=&#34;w-full text-center md:w-2/3&#34;&gt;
        &lt;tr&gt;
            &lt;th&gt;Deprecated Tag&lt;/th&gt;
            &lt;th&gt;Replacement Solution&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;py-button&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;button py-click=&amp;quot;function()&amp;quot; class=&amp;quot;py-button&amp;quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;py-inputbox&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;input class=&amp;quot;py-input&amp;quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;py-box&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;py-box&amp;quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;py-title&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;betterwarnings&#34;&gt;Better Warnings and Errors&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Fabio Rosado (yes, there&#39;s &lt;a href=&#34;#maintainers&#34;&gt;two Fabios&lt;/a&gt; on the PyScript team now!) put together a series of great PRs that clean up the presentation of warnings and errors caused during PyScript&#39;s lifecycle.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you write invalid TOML for &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;, say, or use a deprecated function or feature. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/909&#34;&gt;#909&lt;/a&gt;). The banners can contain either plain text or HTML, which will allow us a lot of flexibility going forward in how we use them. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/947&#34;&gt;#947&lt;/a&gt;) &lt;/p&gt;
&lt;div class=&#34;alert-banner py-error&#34;&gt;(PY1001): Unable to install package(s) &#39;pyarrow&#39;. Reason: Can&#39;t find a pure Python 3 Wheel for package(s) &#39;pyarrow&#39;. See: https://pyodide.org/en/stable/usage/faq.html#micropip-can-t-find-a-pure-python-wheel for more information.&lt;/div&gt;
&lt;div class=&#34;alert-banner py-warning&#34;&gt;Multiple &amp;lt;py-config&amp;gt; tags detected. Only the first is going to be parsed, all the others will be ignored&lt;button id=&#34;alert-close-button&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 16 16&#34; fill=&#34;currentColor&#34; width=&#34;12px&#34;&gt;&lt;path d=&#34;M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;And you might notice, the PyScript errors errors now include error codes! As the PyScript codebase grows, and community involvement increases, having short-and-simple error codes helps users find solutions to exactly the issue they&#39;re having. It encourages users to report &#34;When I do X, I get a PY2401 error&#34; instead of just &#34;I got an error.&#34; This improves searchability the &lt;a href=&#34;https://docs.pyscript.net/unstable/reference/exceptions.html&#34;&gt;error code docs&lt;/a&gt;, in the forums, and on discord, and makes it simpler to guide users to solutions to specific issues they&#39;re encountering in the PyScript lifecycle. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/959&#34;&gt;#959&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The styling of errors that occur within Python has also been improved, and reformatted to be more legible on the page:&lt;/p&gt;
&lt;pre class=&#34;mx-8 py-error&#34;&gt;Traceback (most recent call last):&lt;br&gt;  File &#34;/lib/python3.10/site-packages/_pyodide/_base.py&#34;, line 435, in eval_code&lt;br&gt;    .run(globals, locals)&lt;br&gt;  File &#34;/lib/python3.10/site-packages/_pyodide/_base.py&#34;, line 304, in run&lt;br&gt;    coroutine = eval(self.code, globals, locals)&lt;br&gt;  File &#34;&amp;lt;exec&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&lt;br&gt;ZeroDivisionError: division by zero&lt;br&gt;&lt;/pre&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;pyconfigs&#34;&gt;Streamlined py-config&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The py-config system has been overhauled to simply its use internally - including simplifying how the default configuration options are merged with user-supplied options (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/806&#34;&gt;#806&lt;/a&gt;), dealing with multiple &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;s on a page (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/826&#34;&gt;#826&lt;/a&gt;), and finally killing &lt;code&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; altogether (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/775&#34;&gt;#775&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The TOML parser handling has also been improved, in that it no longer hangs forever if given misshapen TOML. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/815&#34;&gt;#815&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;An important clarification has also been added to the docs - because of &lt;a href=&#34;https://toml.io/en/&#34;&gt;the way the TOML format works&lt;/a&gt;, if you&#39;re using TOML for your py-config, &lt;code&gt;[[runtimes]]&lt;/code&gt; must be the last element. If the &lt;code&gt;[[runtimes]]&lt;/code&gt; table precedes the other individual elements (like `paths` or `packages`), those elements end up &lt;span class=&#34;italic&#34;&gt;inside&lt;/span&gt; &lt;code&gt;[[runtimes]]&lt;/code&gt;, which will cause them to be missed. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/861&#34;&gt;#861&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This in addition to the &lt;a href=&#34;#paths&#34;&gt;changes to &lt;code&gt;[[fetch]]&lt;/code&gt; noted above&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;unidentified&#34;&gt;Undefined elements are no longer hidden&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previous, any unknown HTML elements were hidden by &lt;code&gt;pyscript.css&lt;/code&gt; in an attempt to suppress onscreen visibility of things like &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;. This had the unintended consequence of hiding elements with typos - for example, a user-typed &lt;code&gt;&amp;lt;py-scrip&amp;gt;&lt;/code&gt; element would be &#34;unknown&#34; and also hidden. Now, PyScript explicitly only hides the page-elements that need hiding. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/837&#34;&gt;#837&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;directory&#34;&gt;Directory Listings for Releases&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript releases now come with a directory-listing of files and a brief example. See, for example, &lt;a href=&#34;https://pyscript.net/unstable/&#34;&gt;https://pyscript.net/unstable&lt;/a&gt;. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/839&#34;&gt;#839&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;codemirror6&#34;c&gt;CodeMirror 6&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Just like &lt;a href=&#34;https://blog.jupyter.org/accelerating-jupyterlab-68942bb8d602#2404&#34;&gt;JupyterLab 6&lt;/a&gt;, PyScript now uses the latest version of CodeMirror to power the in-browser &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; component. This comes with a (far more stable) API and &lt;a href=&#34;https://codemirror.net/docs/migration/&#34;&gt;lots of other improvements.&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/814&#34;&gt;#814&lt;/a&gt;)&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;infrastructure&#34;&gt;Infrastructure&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;documentation&#34;&gt;Documentation&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Especially in the past couple weeks, there&#39;s been a flood of new additions to the documentation! As the changes and improvements for this release settled into their final form, the team focused on making sure as many of the changes were documented as possible. A small sample of the new pages:&lt;/p&gt;&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/reference/index.html&#34;&gt;API reference&lt;/a&gt; for &lt;code&gt;Element&lt;/code&gt;, &lt;code&gt;display()&lt;/code&gt;, &lt;code&gt;__version__&lt;/code&gt;, and &lt;code&gt;version_info&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/guides/asyncio.html&#34;&gt;Updating Implicit Async to Explicit&lt;/a&gt;, &lt;/li&gt;
    &lt;li&gt;The &lt;a href=&#34;https://docs.pyscript.net/latest/reference/modules/pyscript.html&#34;&gt;pyscript module&lt;/a&gt; in javascript&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/reference/exceptions.html&#34;&gt;Exceptions and Error Codes&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/unstable/tutorials/py-config-fetch.html&#34;&gt;Using [[fetch]] from py-config&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/unstable/tutorials/writing-to-page.html&#34;&gt;Writing content to the Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;devdocs&#34;&gt;Dev Docs&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/index.html&#34;&gt;The PyScript Documentation&lt;/a&gt; now has a &lt;a href=&#34;https://docs.pyscript.net/latest/development/&#34;&gt;Development Section&lt;/a&gt;, as a central place for notes about how the development and release process for PyScript works. In particular, there are documents on the &lt;a href=&#34;https://docs.pyscript.net/latest/development/deprecation-cycle&#34;&gt;deprecation cycle&lt;/a&gt;, &lt;a href=&#34;https://docs.pyscript.net/latest/development/setting-up-environment&#34;&gt;getting your development environment set up&lt;/a&gt;, and &lt;a href=&#34;https://docs.pyscript.net/latest/development/developing&#34;&gt;making and submitting a pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;refactoringeffots&#34;&gt;Refactoring PyScript&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Antonio, Mariana, Madhur, and many more besides have embarked on several of massive refactoring endevours of the TypeScript side of PyScript, to streamline and rationalize the process of how PyScript loads itself and Pyodide and how it then executes Python scripts. Hopefully the changes this imparts to the end-users of PyScript are minimal, but speaking from a maintenance and codebase standpoint, the amount that&#39;s been done to make sense of both of these processes makes it a significantly easier to reason about what-happens-when. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/806&#34;&gt;#806&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/850&#34;&gt;#850&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/881&#34;&gt;#881&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/884&#34;&gt;#884&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;testing&#34;&gt;Testing&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The pytest-driven test system used to re-download the Pyodide runtime and other resources for each test, significantly slowing it down. The test system now has the ability to cache resources between tests, and retry tests on network failures. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/829&#34;&gt;829&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We also now have a way for the test system to watch for and confirm that specific errors are being thrown, allowing for the writing of &lt;span class=&#34;italic&#34;&gt;negative&lt;/span&gt; integration tests (that should throw specific errors in PyScript). (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/874&#34;&gt;#874&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;sync-docs&#34;&gt;Re-Sync&#39;d Docs&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Prior to this release, documentation was being pushed to &lt;a href=&#34;https://docs.pyscript.net/latest&#34;&gt;https://docs.pyscript.net/latest&lt;/a&gt; &lt;span class=&#34;italic&#34;&gt;every time a change to the docs was merged into the main branch&lt;/span&gt;. This meant that the default (latest) version of the docs represented features which were present in the codebase, but had yet to be released!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, the /latest version of the docs corresponds to the most recent &lt;span class=&#34;italic&#34;&gt;released&lt;/span&gt; version of PyScript. Users looking for bleeding-edge docs can find them at &lt;a href=&#34;https://docs.pyscript.net/unstable/&#34;&gt;https://docs.pyscript.net/unstable/&lt;/a&gt;. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/977&#34;&gt;#977&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;goodbyesvelte&#34;&gt;Goodbye Svelte&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The original version of the &lt;a href=&#34;https://pyscript.net/examples/&#34;&gt;PyScript Demo Site&lt;/a&gt; and other parts of the build infrastructure and styling were built around &lt;a href=&#34;https://svelte.dev/&#34;&gt;Svelte&lt;/a&gt;. Thanks to several PRs and lots of refactoring, Svelte is now entirely gone (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/806&#34;&gt;#806&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/830&#34;&gt;#830&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/886&#34;&gt;#886&lt;/a&gt;) &lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;pyodide&#34;&gt;Pyodide&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide did have another minor release recently, &lt;span class=&#34;italic&#34;&gt;0.21.3&lt;/span&gt;. And while it wasn&#39;t anywhere near as big a change as the 0.20 to 0.21 release, a few critical fixes did make their way in. See &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#version-0-21-3&#34;&gt;the Pyodide Changelog&lt;/a&gt; for details.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Relative URLs for Index URLs&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;In Version 0.21.2, it was briefly impossible to use a relative URL as a the indexURL for the Pyodide package (where it looks to load the Python side of its runtime and other key support files). That&#39;s now fixed. (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3077&#34;&gt;Pyodide # 3077&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;sourcemaps&#34;&gt;Source Maps Restored&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A couple PyScript users reported concerns about seeing a &#34;Source Map Unavailable&#34; error in their dev console, thinking they had done something wrong. Turns out that was due to a minor regression in Pyodide causing that source map file not to be distributed. That&#39;s since been rectified. (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3088&#34;&gt;Pyodide #3088&lt;/a&gt;)&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;Community&#34;&gt;Community&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;discord&#34;&gt;Discord&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;PyScript Discord&lt;/a&gt; is now the official hub for realtime communication around PyScript - both internally for the maintainers and the for the community to gather, ask questions, and get help.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a really amazing shift by the staff PyScript team over at Anaconda - to bring the conversations about PyScript out to a place where the community can see them and be a part of them. Want to see the maintainers getting deep in the weeds about the Plugins API, how &lt;code&gt;[[fetch]]&lt;/code&gt; should work, or what qualifies as &#34;a Python&#34;? It&#39;s all out in the open on Discord.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Similarly, there&#39;s more an more Pyscripters hanging out in the Discord &lt;span class=&#34;font-semibold&#34;&gt;#chat&lt;/span&gt; and &lt;span class=&#34;font-semibold&#34;&gt;#pyscript-help&lt;/span&gt; channels, to help folks get unstuck or identify issues. And the &lt;span class=&#34;font-semibold&#34;&gt;#i-made-this&lt;/span&gt; and &lt;span class=&#34;font-semibold&#34;&gt;#i-found-this&lt;/span&gt; are great places to share neat things you&#39;ve made or discovered with PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Come join us!&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;community&#34;&gt;October Community Call&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The PyScript core team hosted its &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/836&#34;&gt;first Community Call&lt;/a&gt; on October 18th! (&lt;a href=&#34;https://github.com/pyscript/pyscript/issues/836&#34;&gt;#836&lt;/a&gt;) About a dozen people attended, mostly from the PyScript core team and related contributors. We unfortunately forgot to hit &#39;record&#39; on the call, but I did jot down a few notes. &lt;span class=&#34;italic&#34;&gt;(None of this should be taken as gospel or comprehesive; It&#39;s just what I, one dude, happened to scribble down.)&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;The team is going to be shooting for about 1 release per month - maybe more, maybe less, but that&#39;s a decent goal.&lt;/li&gt;
    &lt;li&gt;The lifecycle refactoring is well underway, with Antonio C leading the charge on removing global variables, streamining the loading, etc.&lt;/li&gt;
    &lt;li&gt;Similarly, the refactoring away from print() to display() being lead by Mariana was just merged yesterday!&lt;/li&gt;
    &lt;li&gt;Plugins!
        &lt;ul class=&#34;py-1 pl-8 text-justify list-disc list-outside ul-circle&#34;&gt;
            &lt;li&gt;The team is excited about streamlining and &lt;span class=&#34;italic&#34;&gt;minimizing&lt;/span&gt; the core details of what PyScript does. There&#39;s a feeling that when PyScript initializes, it should do a &#39;bare minimum&#39; to get itself running, and delegate lots of core behaviors to plugins, to allow for customizability, extensibility, and futureproofing. An emphasis on PyScript being a &#39;platform&#39; not a &#39;framework&#39;&lt;/li&gt;
            &lt;li&gt;It is very early days for this idea, but there&#39;s lots of excitement around it.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Web Workers are an awesome way to delegrate work, but there&#39;s going to be a significant amount of work integrating the message passing/isolation process with PyScript.&lt;/li&gt;
    &lt;li&gt;Cleaning up the PyScript API would be nice, in the sense of the Python objects in &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/pyscriptjs/src/python/pyscript.py#L1-L394&#34;&gt;PyScript.py&lt;/a&gt; are currently available by default when executing PyScript. Generally, there&#39;s agreement around this wanting to all be contained in a module, though there&#39;s some questions around what of that would want be &lt;code&gt;import&lt;/code&gt;ed by default into a PyScript environment.&lt;/li&gt;
        &lt;ul class=&#34;py-1 pl-8 text-justify list-disc list-outside ul-circle&#34;&gt;
            &lt;li&gt;This would allow IDE&#39;s and intellisense to have a chance at working with PyScript.&lt;/li&gt;
        &lt;/ul&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;novembercommuniyu&#34;&gt;November Community Call&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The second-even community call was held November 16th, also on Zoom, and also with a ton of great discussion and conversation. I personally missed the first three-quarters of it (&lt;span class=&#34;italic&#34;&gt;I had a 45-foot tall Christmas tree to get lit&lt;/span&gt;), but Nicholas very kindly took notes in addition to his hosting duties, which are reproduced below:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;We need to ensure we have an agenda. We&#39;ve agreed to think about this and suggest proposals here so we have a process to try by our next community call.&lt;/li&gt;
    &lt;li&gt;Given Discord does video calls, and/or there&#39;s Twitch and other services for streaming meetings that are more in or of the platform we&#39;re using for our community, we should perhaps look at those as an alternative to Zoom.&lt;/li&gt;
    &lt;li&gt;Perhaps we should record our meetings..?&lt;/li&gt;
    &lt;li&gt;PyCon US next year, what&#39;s going on. We should coordinate, compliment and amplify each others&#39; work / efforts in this area. Can tell all here please..?&lt;/li&gt;
    &lt;li&gt;Antonio - can you let Jeff know what&#39;s coming in the plugin work? (This might be helpful context: https://github.com/pyscript/pyscript/pull/938)&lt;/li&gt;
    &lt;li&gt;We had some really great in-depth technical discussion about web-assembly, DOM and JS access, GCs, blocking calls, dynamic linking and all sorts of other good stuff... oh my..!&lt;/li&gt;
    &lt;li&gt;A very positive vibe. Let&#39;s keep this up. 🎉&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;And indeed, the vibes were incredibly positive. Every maintainer on the PyScript project has gotten their hands on (in my opinion) some very neat part of PyScript in the past two months. I&#39;m very much looking forward to what this enthusiastic, generous, and considerate team does next.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;aweseompyscript&#34;&gt;Awesome PyScript&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;#maintainers&#34;&gt;Maintainer Paul Everitt&lt;/a&gt; has been hard at work assembling &lt;a href=&#34;https://github.com/pyscript/pyscript-collective/blob/main/awesome-pyscript.md&#34;&gt;Awesome PyScript&lt;/a&gt;, a curated list of awesome things relative to PyScript. If you want inspiration on what PyScript can do, this is the place to go - there&#39;s collections of videos, demos, conference talks, and more.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Have you done something awesome with PyScript? Drop the Awesome PyScript repo a comment or a Pull Request to have it included!&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;research&#34;&gt;PyScript/Research&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A new GitHub repository at &lt;a href=&#34;https://github.com/pyscript/research&#34;&gt;PyScript/Research&lt;/a&gt; has been started, as a home for overarching research, development, and proposals for PyScript. New and great ideas were popping up in issues in the main repo and being lost somewhat, so the new repo is a home for larger proposals that need need multiple files to explain, or that generate longer discussions than fit in a single issue.&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;Team&#34;&gt;The PyScript Team&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;maintainers&#34;&gt;New Maintainers&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://github.com/pauleveritt&#34;&gt;Paul Everitt&lt;/a&gt;, &lt;a href=&#34;https://github.com/FabioRosado&#34;&gt;Fabio Rosado&lt;/a&gt; and I are now community maintainers on the PyScript project. It&#39;s been tremendously exciting and satisfying working on and with PyScript the past few months - the core team over at Annaconda has been swell all around, and I&#39;m very grateful to be a part of the team in my own way. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/824&#34;&gt;#824&lt;/a&gt; &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/825&#34;&gt;#825&lt;/a&gt; &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/898&#34;&gt;#898&lt;/a&gt;)&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;Next&#34;&gt;What&#39;s Next?&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;webworkers&#34;&gt;Web Workers&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Running everything in the browser window&#39;s main thread is a bit of a bummer - anything running in Python blocks the main thread, no UI updates can happen, everything must either be async or really quick to avoid degrading the user experience.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To counteract this, there&#39;s work afoot to enable the option of running PyScript inside &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers&#34;&gt;Web Workers&lt;/a&gt;, which are designed for running scripts in the background of the page asynchronously, and passing messages to and from the main browser thread. But because they operate in a scope that doesn&#39;t have the &lt;code&gt;window&lt;/code&gt; object, DOM events and methods are not necessarily available to them. Given that DOM interaction is one of the neat possilities that running Python in the browser enables, there&#39;s lots to chew over in terms of allowing Python to run in a Web Working without degrading the DOM-access experience.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;scoped&#34;&gt;Scoped Tags&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Right now, every &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; tag executes in the same global scope. This is convenient for all the reasons that having global scope is convenient, and awful for all the reasons it&#39;s awful. There&#39;s much discussion afoot of turning each &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag into its own local namespace, probably with the ability to allow tags to share namespaces if desired.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is one I&#39;m personally very-much looking forward to. As I&#39;m currently working through this year&#39;s Advent of Code &lt;a href=&#34;post/advent-of-code-2022/&#34;&gt;entirely in PyScript&lt;/a&gt;, the challenge of not duplicating variable/function names across 50 different Python modules is a huge headache. That said, there are many good reasons to allow tags to share namespaces, so that code can be located close to its context. More to come here, I&#39;m sure.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;eventsproposals&#34;&gt;Events&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s a proposal (a couple proposals) swirling around over in &lt;a href=&#34;https://github.com/pyscript/research&#34;&gt;PyScript/Research&lt;/a&gt; about the syntax for events (&#34;py-[event]&#34; or &#34;onclick&#34; or otherwise). What&#39;s exciting is that there&#39;s tons of possibilities! Now the hard part will be to sort together the possibilities and potentiatials, weight up the pros and cons (run functions in Python vs. JavaScript, access to JS and/or Python objects as arguments, do we pass literal code or references to Callables, etc) and make the call.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;...At least for now. This is another area that might see two or three more rounds of evolution before it stabilizes. Or even potentially splits into more than one thing - there may be multiple independent systems being developed that can coexist. Time will tell.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;morepythonapi&#34;&gt;PyScript&#39;s Python API&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;With the &lt;a href=&#34;#reshaping-api&#34;&gt;modularization of the Python API&lt;/a&gt;, things have gotten quite a bit more rational in the way PyScript handles importing its &#34;built-in&#34; functions and classes. But as the possibilities around functionality, plugins, web-workers, and scope grow, I wouldn&#39;t be surprised if we continue to see the PyScript Python API continue to morph and change.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So watch this space, follow the &lt;a href=&#34;https://twitter.com/pyscript_dev&#34;&gt;PyScript Twitter&lt;/a&gt; (or &lt;a href=&#34;https://twitter.com/JeffersGlass&#34;&gt;mine&lt;/a&gt;!), join the &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;Discord&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;send the GitHub issues and pull requests&lt;/a&gt;, and show off the neat things you&#39;ve built with PyScript!&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>PyScript - Why Do We Need create_proxy()?</title>
      <link>https://jeff.glass/post/pyscript-why-create-proxy/</link>
      <pubDate>Mon, 24 Oct 2022 03:32:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-why-create-proxy/</guid>
      <description>&lt;style&gt;
    code:not(.nocode):not(.language-python){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide has an almost-magical ability to proxy objects and functions between Python and JavaScript in both directions... except when sometimes it seems to mysteriously break. Consider this stumbling block that new users often hit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;button &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;Say Hello&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console, document
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;hello&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;)

    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, hello)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This seems like a perfectly reasonable thing to do, but upon clicking the button, an error pops up in the developer console:&lt;/p&gt;
&lt;p class=&#34;post-p error-banner&#34;&gt;Uncaught Error: This borrowed proxy was automatically destroyed at the end of a function call. Try using create_proxy or create_once_callable.&lt;br&gt;The object was of type &#34;function&#34; and had repr &amp;quot;&amp;lt;function hello at 0x919828&amp;gt;&amp;quot;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The usual band-aid is wrap the Python Function in &lt;code&gt;create_proxy()&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_pyoxy(hello))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Which seems to just make things work... but why?&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;why&#34;&gt;Why &lt;code&gt;create_proxy()&lt;/code&gt;?&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;When you call something like &lt;code&gt;button.addEventListener(&#34;click&#34;, hello)&lt;/code&gt; (without create_proxy), Pyodide needs to briefly proxy the Python function &lt;code&gt;hello&lt;/code&gt; so the JS function &lt;code&gt;addEventListener&lt;/code&gt; knows how to interact with it. But once &lt;code&gt;addEventListener&lt;/code&gt; terminates, that proxy is no longer needed, it gets destroyed... and then when an event comes around to trigger your function, the proxy it should be using is gone. Which is why you&#39;ll see the error above talking about a &#34;borrowed proxy being automatically destroyed&#34;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The two functions that the Error mentions (&lt;code&gt;create_proxy()&lt;/code&gt; and &lt;code&gt;create_once_callable()&lt;/code&gt;) create a PyProxy (a JS object) of your Python object that you, the user, are supposed to manage the lifetime of, by calling &lt;code&gt;PyProxy.destroy()&lt;/code&gt; on it when you&#39;re done with it. Or, if you use &lt;code&gt;create_once_callable()&lt;/code&gt;, the proxy will destroy() itself after the first time it&#39;s called.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In practical terms, for something like an event listener, you may never want to destroy the proxy for the lifetime of your page, so you can just leave it hanging around. But it&#39;s worth noting that if you remove that event listener or button (maybe in a &#39;single-page-app&#39; where you&#39;re manipulating what&#39;s on the page quite a bit), you should plan to track and destroy the PyProxy, otherwise it just hangs around taking up memory.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;better-solution&#34;&gt;A Better Solution&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Keeping track of the proxies that wrap each of our Python functions sounds like a real pain, no? Thankfully, there&#39;s a better way, thanks to some new features in the Pyodide runtime.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since Pyodide 21.0 (PyScript 2022.09.1), there are now wrappers built into pyodide for adding event listeners: &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html?highlight=add_event_listener#pyodide.ffi.wrappers.add_event_listener&#34;&gt;pyodide.ffi.wrappers.add_event_listener()&lt;/a&gt; and &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html?highlight=remove_event_listener#pyodide.ffi.wrappers.remove_event_listener&#34;&gt;pyodide.ffi.wrappers.remove_event_listener()&lt;/a&gt; which, if you use them in conjunction, will handle proxy creation and destruction for you.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For example, here is the entirety of &lt;code&gt;pyodide.ffi.wrappers.add_event_listener&lt;/code&gt;:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;&lt;a href=&#34;https://github.com/pyodide/pyodide/blob/dc31bc8f3ecdde1eb21d345a81f8f4acc3d077ca/src/py/pyodide/ffi/wrappers.py&#34; class=&#34;underline no-style-link&#34;&gt;pyodide/wrappers.py &lt;span class=&#34;italic&#34;&gt;(partial)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_event_listener&lt;/span&gt;(
    elt: JsProxy, event: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, listener: Callable[[Any], &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;]
) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Wrapper for JavaScript&amp;#39;s addEventListener() which automatically manages the lifetime
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    of a JsProxy corresponding to the listener param.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    proxy &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(listener)
    EVENT_LISTENERS[(elt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;js_id, event, listener)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; proxy
    elt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(event, proxy)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;You can see that this:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Creates a proxy of the listener function using &lt;code&gt;create_proxy()&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Adds a reference to that proxy in an internal dictionary for later reference&lt;/li&gt;
    &lt;li&gt;Adds the event listener using the browser&#39;s &lt;code&gt;addEventListener()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;remove_event_listener&lt;/code&gt; simply undoes this process - it removes the event listener using JavaScript&#39;s &lt;code&gt;removeEventListener&lt;/code&gt;, looks up the appropriate proxy in the internal dictionary, and &lt;code&gt;destroy()&lt;/code&gt;s it.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So now, our code above would look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;button &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;Say Hello&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console, document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;hello&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;)

    btn &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;)
    add_event_listener(btn, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, hello)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;I personally recommend using these wrapper methods for all new code where possible, instead of using &lt;code&gt;create_proxy()&lt;/code&gt; and &lt;code&gt;addEventListener()&lt;/code&gt; manually.&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Asyncio in PyScript</title>
      <link>https://jeff.glass/post/pyscript-asyncio/</link>
      <pubDate>Fri, 21 Oct 2022 03:05:14 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-asyncio/</guid>
      <description>&lt;style&gt;
    code:not(.nocode){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;script defer src=&#34;https://pyscript.net/releases/2022.09.1/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;When running Python in a terminal or desktop, there&#39;s a myriad of ways to allow your code to do multiple things at once. You can spin off a new thread to handle computations, create a new process to offload work to other CPUs, even load up a while new &lt;a href=&#34;https://pythondev.readthedocs.io/subinterpreters.html&#34;&gt;subinterpretter&lt;/a&gt; (someday!) to execution more code.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;When running Python in the Browser, you get one process and (at least for now) one thread. That&#39;s it. And it&#39;s &lt;span class=&#34;italic&#34;&gt;the same thread&lt;/span&gt; that the browser window&#39;s event loop runs on. So we can&#39;t block - ever - or things fall apart.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So what if we want to do more than one thing at once? Asyncio to the rescue! In this post, we&#39;ll look at using &lt;code&gt;async/await/asyncio&lt;/code&gt; in PyScript/Pyodide to write concurrent code.&lt;/p&gt;
&lt;div class=&#34;info-banner&#34;&gt;Note that this page will focus on cooperative multitasking within Python via coroutines; for multitasking by running Python scripts in parallel in the browser, see Pyodide&#39;s documentation on &lt;a href=&#34;https://pyodide.org/en/stable/usage/webworker.html?highlight=thread&#34;&gt;Using Pyodide in a web worker&lt;/a&gt;.&lt;/div&gt;
&lt;div class=&#34;warning-banner&#34;&gt;This post was originally written for PyScript 2022.09.1. &lt;span class=&#34;font-semibold&#34;&gt;It will almost certainly be broken by later releases.&lt;/span&gt;&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;recap&#34;&gt;An Async/Await Recap&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;There are many ways of achieving the goal of &#34;do multiple things at once&#34; in Python - using multiple processes, using multiple threads within a single process, or making one thread do the work of many by requiring each piece of code to declare when it it wants to &#39;release&#39; the thread to do other work. The &lt;a href=&#34;https://docs.python.org/3/library/asyncio.html&#34;&gt;asyncio&lt;/a&gt; package in the python standard library, as well as the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords in the language, exist to support this last paradigm.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The typical way of writing these &#34;cooperative&#34; pieces of code is to declare &lt;code class=&#34;nocode&#34;&gt;Coroutines&lt;/code&gt; using the &lt;code&gt;async def&lt;/code&gt; keyword, then execute them with one of the many &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#running-an-asyncio-program&#34;&gt;asyncio execution methods&lt;/a&gt;. Within a coroutine, the &lt;code&gt;await&lt;/code&gt; keyword is used to indicate that control of the event loop (thread) should pause execution of the coroutine and move on to any others that are waiting. A statement like &lt;code class=&#34;code&#34;&gt;await foo()&lt;/code&gt; means &#34;suspend execution of the surrounding coroutine until the result of &lt;code&gt;foo()&lt;/code&gt; is returned.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;An example you can run in a regular terminal:&lt;/p&gt;
&lt;div class=&#34;mx-2&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;up_down&lt;/span&gt;():
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;What goes up&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Must come down&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;throw_things_up&lt;/span&gt;():
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# asyncio.gather() runs multiple awaitable things and gathers their return values (or errors)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;gather(up_down(), up_down(), up_down())

asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run(throw_things_up())

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# ------ Output ------&lt;/span&gt;

What goes up
What goes up
What goes up
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# ~1 second gap here&lt;/span&gt;
Must come down
Must come down
Must come down&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&#34;post-p&#34;&gt;This is just a quick and dirty primer - if asnyc/await/asyncio is a wholly new subject for you, I recommend the excellent &lt;a href=&#34;https://realpython.com/async-io-python/#the-10000-foot-view-of-async-io&#34;&gt;Real Python article on Asyncio&lt;/a&gt; for a deeper understanding before moving on.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;webloop&#34;&gt;Pyodide.Webloop&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The Pyodide runtime (which is the most common one used in PyScript at the moment) provides a custom wrapper for the asyncio event loop, that allows &lt;code&gt;async/await&lt;/code&gt; to work with the browser event loop. Many of the methods will be familiar if you&#39;ve worked with &lt;code&gt;asyncio&lt;/code&gt;, but it&#39;s worth highlighting some useful ones, as well as broken ones:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 px-2 py-2 mx-4 bg-green-100 divide-y-2 divide-green-800 md:gap-y-2 md:divide-y-0 divide-opacity-30&#34;&gt;
    &lt;div class=&#34;md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-green-800 md:divide-opacity-50 &#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold text-black&#34;&gt;create_task(coro: Coroutine)&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L342-L363&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Schedules the Coroutine into the event loop, to run concurrently as a Task. Works like &lt;code&gt;asyncio.create_task()&lt;/code&gt;&lt;/code&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-green-800 md:divide-opacity-50 &#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold text-black&#34;&gt;call_soon(callback: Callable, ...)&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L207-L221&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Schedules calling the Callable in the browser event loop using &lt;code&gt;setTimeout(callback, 0)&lt;/code&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-green-800 md:divide-opacity-50 &#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold text-black&#34;&gt;call_later(delay: float, callback: Callable, ...)&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L235-L280&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Schedules &lt;code&gt;callback&lt;/code&gt; to be called in (roughly) &lt;code&gt;delay&lt;/code&gt; seconds, using &lt;code&gt;setTimeout(callback, delay)&lt;/code&gt;. Returns a &lt;code&gt;Handle&lt;/code&gt; object with a &lt;code&gt;cancel()&lt;/code&gt; the call.&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;px-2 bg-yellow-100 md:px-0 md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-yellow-800 md:divide-opacity-50 &#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold text-black&#34;&gt;run_until_complete(future)&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L185-L201&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Since we can&#39;t block, this just ensures that the future is scheduled and returns the future. As the documentation notes, it&#39;s better to use &lt;code&gt;future.add_done_callback(do_something_with_result)&lt;/code&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;px-2 bg-yellow-100 md:px-0 md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-yellow-800 md:divide-opacity-50&#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;run_forever()&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L176-L183&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Different from asyncio.loop.run_forever - this is a a no-op! Since we can&#39;t block, this method does nothing.&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;px-2 bg-yellow-100 md:px-0 md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-yellow-800 md:divide-opacity-50&#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;asyncio.run()&lt;/span&gt; &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio.run&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;This function, like several of the base &lt;code&gt;asyncio&lt;/code&gt; functions, can&#39;t be called from &lt;span class=&#34;italic&#34;&gt;within&lt;/span&gt; an active event loop. And because we&#39;re inside the event loop in the browser, my understanding is we&#39;re &lt;span class=&#34;italic&#34;&gt;always&lt;/span&gt; in an event loop. If you see an error like this, try one of the functions above.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;We can access the Pyodide event loop at &lt;code class=&#34;code&#34;&gt;PyScript.loop&lt;/code&gt;, so we could write, for example, &lt;code class=&#34;code&#34;&gt;PyScript.loop.create_task(my_async_function())&lt;/code&gt;. It&#39;s worth looking at the full function signatures of the methods linked above - the ones which take Callables all take an *args parameter to pass arguments into your call, so you don&#39;t need to wrap them in &lt;code&gt;functools.partial&lt;/code&gt; or the like.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The presence of the Webloop implementation of the &lt;code&gt;asyncio&lt;/code&gt; event loop means that most async concepts translate pretty directly - &lt;code&gt;async for&lt;/code&gt;, &lt;code&gt;async with&lt;/code&gt;, and other constructs which generate or consume coroutines or async iterators/context managers mostly just work. But the above Webloop methods are the most useful in terms of creating behaviors you might want in your program.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Rather than walk through each method individually, I think the most instructive thing to do is simply to present and discuss examples of what I think are the most useful strategies:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;&lt;code&gt;create_task&lt;/code&gt;, which schedules a coroutine to be run soon.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;call_soon/call_later&lt;/code&gt;, which schedules a callable to be called &#34;ASAP&#34; or after a specific amount of time&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;asyncio.gather&lt;/code&gt;, for running multiple awaitables (coroutines, Tasks, and Futures) concurrently&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;webloopexamples&#34;&gt;Webloop Examples&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 gap-y-8&#34;&gt;
    &lt;div&gt;
        &lt;h4 class=&#34;post-h4&#34;&gt;&lt;code class=&#34;nocode&#34;&gt;create_task()&lt;/code&gt;&lt;/h4&gt;
        &lt;div class=&#34;flex items-stretch flex-col-reverse space-y-2   md:flex-row-reverse md:space-x-2 md:space-x-reverse  &#34;&gt;
    &lt;div class=&#34;flex flex-col items-stretch w-full md:w-1/2&#34;&gt;
        &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
        &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124&#34;&gt;
            &lt;py-script class=&#34;px-2&#34; src=&#34;clock.py&#34;&gt;&lt;/py-script&gt;
            &lt;div id=&#34;clock-output&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:w-1/2&#34;&gt;
        &lt;p class=&#34;code-title&#34;&gt;clock.py&lt;/p&gt;
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;datetime&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; datetime
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;clock_forever&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;):
        now &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;now()
        Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;clock-output&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;now&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;hour&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;now&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minute&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;now&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;second&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_task(clock_forever())&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        
    &lt;/div&gt;
&lt;/div&gt;
        &lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#task-object&#34;&gt;As the Python Documentation says&lt;/a&gt;: &lt;span class=&#34;italic&#34;&gt;Tasks are used to run coroutines in event loops. If a coroutine awaits [on a future], the Task suspends execution of the coroutine and waits for the completion of the Future.&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;This is the key behavior we want when we want coroutines (including async functions defined with &lt;code&gt;async def&lt;/code&gt;) to run concurrently.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;h4 class=&#34;mb-2 post-h4&#34;&gt;&lt;code class=&#34;nocode&#34;&gt;call_soon()&lt;/code&gt; and &lt;code class=&#34;nocode&#34;&gt;call_later()&lt;/code&gt;&lt;/h4&gt;
        &lt;div class=&#34;grid grid-cols-2&#34;&gt;
            &lt;div&gt;
                &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;timer.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;functools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; partial

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;finish_in&lt;/span&gt;(seconds):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seconds &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;timer-output&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;DONE!&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;timer-output&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(seconds, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
        PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;call_later(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, finish_in, seconds&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;call_soon(finish_in, &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
                &lt;py-script src=&#34;timer.py&#34;&gt;&lt;/py-script&gt;
            &lt;/div&gt;
            &lt;div class=&#34;flex flex-col items-stretch w-full&#34;&gt;
                &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
                &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124 md:ml-2&#34;&gt;
                    &lt;div id=&#34;timer-output&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;p class=&#34;post-p&#34;&gt;Let&#39;s say you don&#39;t have a a coroutine with an internal &lt;code&gt;await&lt;/code&gt; - you just have a regular old function (or Callable) that you&#39;d like to be called either &#34;now&#34; (but allow other Async processes to happen as well) or after an interval (while not blocking in the meantime). For that, we have &lt;code&gt;call_soon()&lt;/code&gt; and &lt;code&gt;call_later()&lt;/code&gt;, respectively.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;Notice that this example happens to use both &lt;code&gt;call_soon()&lt;/code&gt; and &lt;code&gt;call_later&lt;/code&gt;, but that&#39;s purely to illustrate their functionality. If you wanted to make an async function that counts down from 5, there are probably clearer ways to do it.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;Two positive effects of using either of these methods is that they (1) wrap your callable in a PyProxy object, so the browser garbage colletor doesn&#39;t throw them away before they&#39;re called; and (2) they return a &lt;a href=&#34;https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Handle&#34;&gt;Handle Object&lt;/a&gt; which can be used to cancel execution of the Callable prior to its calling. Neat!&lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;h4 class=&#34;mb-2 post-h4&#34;&gt;&lt;code class=&#34;nocode&#34;&gt;asyncio.gather()&lt;/code&gt;&lt;/h4&gt;
        &lt;div class=&#34;grid grid-cols-2&#34;&gt;
            &lt;div&gt;
                &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;race.py&lt;/p&gt;
    
    
    &lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;functools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; partial
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Our awaitable coroutine - we&amp;#39;ll use asyncio.gather() to run lots of these&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;racer&lt;/span&gt;(lane_element):
    speed &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;random() &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;.4&lt;/span&gt;
    lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;:
        lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; speed
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;.1&lt;/span&gt;)
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#race is over for this lane; change border color&lt;/span&gt;
    lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;border-yellow-700&amp;#39;&lt;/span&gt;)
    lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;border-green-500&amp;#39;&lt;/span&gt;)
    

NUM_RACERS &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_race&lt;/span&gt;():
    racers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#clear output&lt;/span&gt;
    output &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;race-output&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;firstChild:
        output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;removeChild(output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;firstChild)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(NUM_RACERS):
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Create new progress bars as lanes for our &amp;#34;racers&amp;#34;&lt;/span&gt;
        new_lane &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;progress&amp;#34;&lt;/span&gt;)
        new_lane&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;lane-&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;n&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
        new_lane&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;max &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;
        new_lane&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;border-4&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;border-yellow-500&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;m-2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;h-6&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;w-11/12&amp;#39;&lt;/span&gt;)
        

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Add the progress bars and labels to the document&lt;/span&gt;
        document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;race-output&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(new_lane)

        racers&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(racer(new_lane))

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Return a Promise representing the results.&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# If you don&amp;#39;t need the results, no need to return or await this&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;gather(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;racers)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Run the race over and over&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;race_monitor&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        results &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; run_race()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; results
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Start the monitoring task&lt;/span&gt;
asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_task(race_monitor())&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
    
&lt;/div&gt;
                &lt;py-script src=&#34;race.py&#34;&gt;&lt;/py-script&gt;
            &lt;/div&gt;
            &lt;div class=&#34;flex flex-col items-stretch w-full&#34;&gt;
                &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
                &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124 md:ml-2&#34;&gt;
                    &lt;div id=&#34;race-output&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;p class=&#34;post-p&#34;&gt;When you have multiple &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio-awaitables&#34;&gt;awaitable objects&lt;/a&gt; (coroutines, Tasks, and Futures) that you want to run &#34;in a group&#34; or &#34;as a batch&#34;, &lt;code&gt;asyncio.gather()&lt;/code&gt; can simplify your life. If any of the collection of awaitables is a coroutine, it is automatically wrapped in a Task (and scheduled).&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;In a PyScript/Pyodide context, one can image using &lt;code&gt;gather&lt;/code&gt; for UI management or &#34;backend&#34; work. For example, you might have a collection of onscreen objects (like the example above) that each need to update themselves asynchronously. Or you might &lt;code&gt;gather()&lt;/code&gt; a collection of coroutines that use &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/http.html?highlight=pyfetch#pyodide.http.pyfetch&#34;&gt;pyfetch()&lt;/a&gt; to retrieve network resources, allowing them to fetch asynchronously while PyScript continues executing on the page.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;implicitasync&#34;&gt;Implicit Async&lt;/h2&gt;
&lt;div class=&#34;mt-2 warning-banner&#34;&gt;As predicted, this featurew as removed in &lt;a href=&#34;../../post/whats-new-pyscript-2022-12-1#implicit&#34;&gt;PyScript 2022.12.1&lt;/a&gt;; it is described here for historical reference.&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript/Pyodide has an interesting quirk that allows an additional way of working with coroutines, that has to to with what&#39;s called &lt;span class=&#34;italic&#34;&gt;&#34;Top-Level Await&#34;&lt;/span&gt;. If you&#39;ve written async/await code before, you might be familiar with Python yelling at you for trying to use &#39;await&#39; outside of a coroutine, like so:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2&#34;&gt;
    &lt;div class=&#34;h-full m-2 overflow-x-auto&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;One plus two is... wait for it...&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#555&#34;&gt;----&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;^&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;SyntaxError&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;await&amp;#39;&lt;/span&gt; outside function&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;h-full m-2 overflow-x-auto&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_slowly&lt;/span&gt;():
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;One plus two is... wait for it...&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; add_slowly()
    &lt;span style=&#34;color:#555&#34;&gt;----&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;^&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;SyntaxError&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;await&amp;#39;&lt;/span&gt; outside &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; function&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;However, if you run those same pieces of code in PyScript, they work just fine!&lt;/p&gt;
&lt;div class=&#34;flex flex-col-reverse items-stretch space-y-2 md:flex-row-reverse md:space-x-2 md:space-x-reverse&#34;&gt;
    &lt;div class=&#34;flex flex-col items-stretch w-full md:w-1/2&#34;&gt;
        &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
        &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124&#34;&gt;
            &lt;py-script class=&#34;px-2&#34; src=&#34;bad_add.py&#34; std-out=&#34;ou\t&#34;&gt;&lt;/py-script&gt;
            &lt;div id=&#34;out&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:w-1/2&#34;&gt;
        &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;bad_add.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_slowly&lt;/span&gt;():
    Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;out&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;One plus two is... wait for it...&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)
    Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;out&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#This isn&amp;#39;t normally possible:&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; add_slowly()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The reason that code with top-level await (i.e. &#34;&lt;code&gt;await&lt;/code&gt;&#34; outside an async function) works in PyScript is due to a design decision on the part of the Pyodide team, whose thinking I imagine goes like this:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;We usually can&#39;t just nakedly &lt;code&gt;await&lt;/code&gt; things in Python, since we need an active event loop to schedule the coroutines into.&lt;/li&gt;
    &lt;li&gt;In the browser, we &lt;span class=&#34;italic&#34;&gt;always&lt;/span&gt; have an active event loop (the browser event loop)&lt;/li&gt;
    &lt;li&gt;CPython allows us to compile code with the &lt;code class=&#34;code&#34;&gt;PyCF_ALLOW_TOP_LEVEL_AWAIT&lt;/code&gt;, which, if it finds Top-Level &#39;Await&#39; statements, returns the evaluated code as a coroutine&lt;/li&gt;
    &lt;li&gt;Therefore, if we evaluate a chunk of code and the result is a coroutine, we have the option to simply schedule it into the browser event loop for the user and execute it. (If the result and discuss is not a coroutine, just return the result as normal.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;This is exactly what the internal Pyodide function &lt;code class=&#34;code&#34;&gt;runPythonAsync()&lt;/code&gt; does - compiles code with PyCF_ALLOW_TOP_LEVEL_AWAIT, and if the result is a coroutine, schedules it and returns a promise representing the result. It&#39;s essentially a convenience function that takes advantage of the fact that, by definition, we always have an every loop available to us. And since PyScript (currently) uses &lt;code class=&#34;code&#34;&gt;runPythonAsync()&lt;/code&gt; to run every code block, you can write top-level await code wherever you like.&lt;/p&gt;
&lt;p class=&#34;warning-banner&#34;&gt;Importantly, &lt;code&gt;runPythonAsync()&lt;/code&gt; &lt;span class=&#34;font-semibold&#34;&gt;does not run synchronous Python &#39;asynchronously&#39;&lt;/span&gt;. It simply allows code with Top Level Await statements to compile and be &lt;code&gt;await&lt;/code&gt;ed. &lt;a href=&#34;https://gist.github.com/JeffersGlass/10adc330d8099fda1ee481bd82bc29c7&#34;&gt;[1]&lt;/a&gt;. &lt;code class=&#34;code&#34;&gt;While True: pass&lt;/code&gt; will still block forever.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;See the following pair of demos, both of which run with top-level await&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 md:gap-2 md:grid-cols-2&#34;&gt;
    &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;sleep_1.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; count

output_1 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output-1&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; count():
    output_1&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Counted to &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
    &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;sleep_2.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; count

output_2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output-2&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; count():
    output_2&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Counted to &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;.7&lt;/span&gt;) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Note the smaller sleep time!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
&lt;py-script&gt;
    import asyncio
from itertools import count

output_1 = Element(&#34;output-1&#34;)
for i in count():
    output_1.write(f&#34;Counted to {i}&#34;)
    await asyncio.sleep(1)

&lt;/py-script&gt;
&lt;py-script&gt;
    import asyncio
from itertools import count

output_2 = Element(&#34;output-2&#34;)
for i in count():
    output_2.write(f&#34;Counted to {i}&#34;)
    await asyncio.sleep(.7) #Note the smaller sleep time!

&lt;/py-script&gt;
&lt;/div&gt;
&lt;div class=&#34;flex flex-col md:flex-row&#34;&gt;
    &lt;div class=&#34;w-full my-4 md:w-1/2&#34;&gt;
        &lt;span class=&#34;text-sm text-gray-500&#34;&gt;Output from sleep_1.py&lt;/span&gt;
        &lt;div class=&#34;h-auto text-base bg-green-100 border-2&#34; id=&#34;output-1&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full m-4 md:w-1/2&#34;&gt;
        &lt;span class=&#34;text-sm text-gray-500&#34;&gt;Output from sleep_2.py&lt;/span&gt;
        &lt;div class=&#34;h-auto text-base bg-green-100 border-2&#34; id=&#34;output-2&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;BUT BEWARE!&lt;/span&gt; This is the part that&#39;s most likely to change in future versions of PyScript. You&#39;ll note above that when we compile our Python Code, if the result is a coroutine, the JavaScript side gets a promise that resolves to the result of the coroutine. Importantly though, at least in PyScript 2022.09.1, &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/7d5f6c9ead72798f23915b2ce7b619f02322ac84/pyscriptjs/src/runtime.ts#L180&#34;&gt;we don&#39;t await that promise resolving!&lt;/a&gt; This is what allows the loader to continue, other scripts to evaluate etc. while the scheduled coroutine resolves in the background.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s been &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/763&#34;&gt;quite&lt;/a&gt; a &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/715&#34;&gt;bit&lt;/a&gt; of &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/796&#34;&gt;discussion&lt;/a&gt; around what the loader lifecycle and async scripts, so I do expect this to change in the future. At this moment, it doesn&#39;t look like it&#39;s changing in the planned 2022.10.1, but time will tell!&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Personally, I think the implicit style is nice to have for quick-and-dirty examples like those just above, but they do make it hard to reason about execution order and script completion. And like I say, I suspect the details of that are going to continue to change and morph over time, so they might not be the most future-proof solution.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That&#39;s why I&#39;d recommend, for any significant projects, you lean toward using the &lt;code&gt;Webloop&lt;/code&gt; methods for handling concurrent tasks. Back when I wrote &lt;a href=&#34;../../project/the-7-guis-pyscript/&#34;&gt;The 7 Guis in PyScript&lt;/a&gt;, I wasn&#39;t particularly familiar with Webloop, and so coded everything in the implicit style. All of the async work in those demos breaks down to essentially &#34;do a lot of setup, then run a loop asynchronously forever.&#34; Which makes quick, implicit async plausible.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But when I moved on to the much-more-integrated &lt;a href=&#34;../../project/richdemo/&#34;&gt;Rich on PyScript Project&lt;/a&gt;, I had a hell of a time reasoning about what processes would be completed when, how to cancel and monitor them etc. from the Python side - starting that project with an asyncio/Webloop approach from the beginning would have been radially easier.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, remember that while &lt;code&gt;async/await&lt;/code&gt; in PyScript/Pyodide works &lt;span class=&#34;italic&#34;&gt;mostly&lt;/span&gt; like it does on desktop or terminal, because there&#39;s an intermediate layer of reimplementation in Webloop, not all behaviors are guaranteed to be exactly the same. Troubleshoot and test thoroughly, and &lt;span class=&#34;italic&#34;&gt;don&#39;t block the loop!&lt;/span&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Whats New in Pyscript 2022.09.1</title>
      <link>https://jeff.glass/post/whats-new-pyscript-2022-09-1/</link>
      <pubDate>Fri, 30 Sep 2022 12:05:33 -0500</pubDate>
      
      <guid>https://jeff.glass/post/whats-new-pyscript-2022-09-1/</guid>
      <description>&lt;style&gt;
    body {
        scroll-margin-top: 8em;
    }
&lt;/style&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;PyScript Version 2022.09.1 was just released&lt;/span&gt;, and just as &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/337&#34;&gt;tech lead Fabio Pliger said&lt;/a&gt; in proposing the versioning scheme:&lt;/p&gt;
&lt;blockquote class=&#34;post-blockquote&#34;&gt;&#34;...An important aspect to keep in mind is that PyScript is still in its very early stages. So, we should highlight that the expectations should be that think can often break until we reach a level of maturity and stability.&#34;&lt;/blockquote&gt;
&lt;p class=&#34;post-p&#34;&gt;And wow, are there a lot of new things in this version of PyScript. What&#39;s more, the default Pyodide runtime has been upgraded to the recently-released &lt;a href=&#34;https://pyodide.org/en/0.21.2/usage/quickstart.html&#34;&gt;version 21.2&lt;/a&gt;, which itself provides many new features and improved functionality to PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I want to specificically highlight new features, breaking changes, and neat behind-the-scenes work. The full details of what&#39;s changed are captured in the &lt;a href=&#34;https://github.com/pyscript/pyscript/compare/2022.06.1...2022.09.1&#34; class=&#34;&#34;&gt;PyScript Release Changelog&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;grid justify-center p-1 m-auto bg-gray-200&#34;&gt;
        &lt;span&gt;Jump To: &lt;span&gt;
        &lt;a href=&#34;#PyScript&#34;&gt;PyScript&lt;/a&gt; • 
        &lt;a href=&#34;#Documentation&#34;&gt;Documentation&lt;/a&gt; • 
        &lt;a href=&#34;#Pyodide&#34;&gt;Pyodide&lt;/a&gt; • 
        &lt;a href=&#34;#Emscripten&#34;&gt;Emscripten&lt;/a&gt; • 
        &lt;a href=&#34;#Testing&#34;&gt;Testing&lt;/a&gt; • 
        &lt;a href=&#34;#Infrastructure&#34;&gt;Infrastructure&lt;/a&gt; • 
        &lt;a href=&#34;#Next&#34;&gt;What&#39;s Next&lt;/a&gt;        
&lt;/div&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;PyScript&#34;&gt;PyScript&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&amp;lt;py-env&amp;gt; Will Be Going Away&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, the &lt;code&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; tag was where one would specify additional libraries to download from PyPI, as well as URL&#39;s to load into the local filesystem. Now, those options are being &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md&#34;&gt;folded into &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;&lt;/a&gt;, alongside other options like plugins and &lt;a href=&#34;#runtimes&#34;&gt;runtimes&lt;/a&gt; and metadata like the pages name and version number. The use of &lt;code&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; is deprecated and &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/775&#34;&gt;will be removed in a future release&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Additionally, &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; can now &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/783&#34;&gt;accept configurations in JSON in addition to TOML&lt;/a&gt;. Creators using build systems that strip out whitespace (which isn&#39;t very kind to TOML) may find this especially useful.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
  packages: [&amp;#34;rich&amp;#34;, &amp;#34;faker&amp;#34;]
  paths: [&amp;#34;./data_file.txt&amp;#34;]
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;    
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;span class=&#34;px-1 font-mono bg-gray-200&#34;&gt;py-*&lt;/span&gt; Events&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The alpha and 2022.06.1 releases supported a couple of special attributes on HTML tags - &lt;code class=&#34;code&#34;&gt;pys-onClick&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;pys-onKeyDown&lt;/code&gt; - that PyScript hooked into to allow the running of Python code in response to a couple of common browser interactions.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Release 2022.09.1 &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/561&#34;&gt;radically expands this capability&lt;/a&gt; with &lt;a href=&#34;https://github.com/lpliger/pyscript/blob/19491d80107f17d43633b224e231cd1cf2f657d5/pyscriptjs/src/components/pyscript.ts#L128-L220&#34;&gt;many, many more browser events supported.&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/686&#34;&gt;syntax of py-* events has also changed&lt;/a&gt; to more closely match JavaScripts &lt;code class=&#34;code&#34;&gt;event&lt;/code&gt; syntax. Previously, you supplied a &lt;code&gt;Callable&lt;/code&gt; which was called with no arguments. Now you write a line of code (optionally broken up with &lt;code&gt;;&lt;/code&gt; symbols) which is run when the event triggers. The correct usage is now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    from js import console as jsconsole
    def say_hi(name):
        jsconsole.log(&amp;#34;Hi, &amp;#34; + name)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-paragraph&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-mouseover&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;say_hi(&amp;#39;Jeff&amp;#39;); jsconsole.log(&amp;#39;I did it!&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;Mouse Over Me&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that, unlike JavaScripts event syntax, the value of the &lt;code&gt;py-*&lt;/code&gt; attribute can be any valid Python code, not just a single function call.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Better Input/Output Escaping&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Embedding something that looks like HTML inside of Python inside of HTML is... well, even just saying it is a mouthful, and it comes with its own pitfalls. Previously, PyScript tags like the following would fail in a couple of ways:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;b&amp;gt;A bold tag!&amp;lt;/b&amp;gt;&amp;#34;&lt;/span&gt;)
tag_name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;I&amp;#39;m pretty sure 1 &amp;lt; 2 but 2 &amp;gt; 0&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;First, the Browser needs to be prevented from interpretting the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tag as internal HTML, and second, the output needs to recognize that the &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; symbols are &lt;i&gt;not&lt;/i&gt; an HTML tag. These issues have been solved by a &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/684&#34;&gt;pair&lt;/a&gt; of &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/481&#34;&gt;changes&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Better Logging&lt;/h4&gt;
&lt;img src=&#34;logging.PNG&#34; alt=&#34;&#34; class=&#34;float-right w-full m-2 border-2 border-gray-300 sm:w-80&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Logging to the Developer Console that PyScript does is now much cleaner, and annotated by what file the log line is generated in. This makes it easier to see what&#39;s logged by the user&#39;s program and what&#39;s being logging by the PyScript mechanisms themselves.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34; id=&#34;runtimes&#34;&gt;Framework for Multiple Runtimes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The use of a specific version of Pyodide is no longer hardcoded into a PyScript release - users may now opt to supply a URL and name for a &#39;runtime&#39; in the &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag. If one is not supplied, the default is still to load the version of Pyodide that PyScript has been most recently tested against, which should be the right option for most users. But this does open the door to future improvements like:
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Running &lt;code&gt;py-script&lt;/code&gt; blocks in different versions of Pyodide&lt;/li&gt;
    &lt;li&gt;Running &lt;code&gt;py-script&lt;/code&gt; blocks in runtimes that are &lt;i&gt;not&lt;/i&gt; Pyodide (Micropython??)&lt;/li&gt;
    &lt;li&gt;Running &lt;code&gt;py-script&lt;/code&gt; blocks in a self-built/custom build of Pyodide for experimentation or demonstrating new features&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Try PyScript&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A new &lt;a href=&#34;https://github.com/pyscript/pyscript#try-pyscript&#34;&gt;Try PyScript&lt;/a&gt; section now leads the main ReadMe on the PyScript GitHub, to more quickly get new users up to speed on how to try out PyScript in their browser.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Contributing&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; guide has been fleshed out with more guidance on developing submitting useful issues, forking the repository for local building and setting up the a development environment, and more. Both Mariana Meireles and Fabio Rosado have contributed excellent information on &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/066ecbe02219e9c9ff5aff28a57d37e7baba8ace&#34;&gt;how to build PyScript&lt;/a&gt; and &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/d203b60f446c347fdb59b6c1350e6b3a2d9f7d66&#34;&gt;how to create and submit a Pull Request&lt;/a&gt; - every open source project should be so lucky!&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;How Tos&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Two new How-To guides were added to the documentation. The first covers &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/howtos/http-requests.md&#34;&gt;how to make HTTP requests in pure Python&lt;/a&gt; by using pyodide&#39;s &lt;code class=&#34;code&#34;&gt;pyfetch&lt;/code&gt; method. The second illustrates the techniques for &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/howtos/passing-objects.md&#34;&gt;passing objects between JavaScript and Python (in PyScript)&lt;/a&gt;, including some slightly-cursed uses of JavaScript&#39;s &lt;code&gt;eval()&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Getting Started&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md&#34;&gt;Getting Started&lt;/a&gt; guide got a huge update to reflect the new &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; changes (see above).&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Pyodide&#34;&gt;Pyodide&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s no secret that the beating heart of the PyScript project is the &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide project&lt;/a&gt;, which makes it possible to run Python in the browser by compiling the CPython runtime to Web Assembly. (This is now &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/792&#34;&gt;nicely highlighted at the top of the PyScript readme&lt;/a&gt;.) Which means that improvements to Pyodide are big boons for PyScript!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While PyScript&#39;s Alpha and 2022.06.1 were designed around Pyodide 20, PyScript 2022.09.1 fully embraces Pyodide 21.2 and the many changes and improvements it brings. We&#39;ll only hit the highlights here; for more details, see the &lt;a href=&#34;https://blog.pyodide.org/posts/0.21-release/&#34;&gt;Pyodide 21 Release Post&lt;/a&gt; and &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#version-0-21-0&#34;&gt;Change Log&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;API Changes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This is probably the most visible change for the casual PyScriptian - the functionality of the Pyodide Python API has been &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2787&#34;&gt;divied&lt;/a&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2790&#34;&gt;up&lt;/a&gt; into &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api.html&#34;&gt;a number of individual packages&lt;/a&gt; for clarity and namespace control. So now, rather than using &lt;code class=&#34;code&#34;&gt;from pyodide import create_proxy&lt;/code&gt;, one would use &lt;code class=&#34;code&#34;&gt;from pyodide.ffi import create_proxy&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_hi&lt;/span&gt;(name):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hi, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;FutureWarning&lt;/span&gt;: pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy has been moved to pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ffi&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy Accessing it through the pyodide module &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; deprecated&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The old locations of the functions are still present but deprecated in version 21, so this change alone won&#39;t break code written for Pyodide 20. But you will see a deprecation warning, and any new code should obey the new namespacing as the deprecation&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Python Wrappers for &lt;code&gt;addEventListener&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt;, and more&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As part of the reorganization mentioned above, the Pyodide API &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2456&#34;&gt;added a bunch of Python utility functions&lt;/a&gt; that handle common JS actions. Specifically, within the a[href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html&#34;&gt;&lt;code&gt;pyodide.ffi.wrappers&lt;/code&gt; namespace, we now have functions for &lt;code class=&#34;code&#34;&gt;add_event_listener&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;remove_event_listener&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;set_timeout&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;clear_timeout&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;set_interval&lt;/code&gt;, and &lt;code class=&#34;code&#34;&gt;clear_interval&lt;/code&gt;. This avoids the need import those JS functions directly from &lt;code&gt;js.document&lt;/code&gt;, and since the Python functions automatically wrap passed functions with &lt;code&gt;create_proxy&lt;/code&gt;, that can be left out as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
  
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_bye&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Goodbye!&amp;#34;&lt;/span&gt;)
    
    tag &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-div&amp;#34;&lt;/span&gt;)
    add_event_listener(tag, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, say_bye)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;pyodide.code.run_js&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Yet another API addition is &lt;code class=&#34;code&#34;&gt;pyodide.code.run_js&lt;/code&gt;, which &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/code.html#pyodide.code.run_js&#34;&gt;evaluates the passed JavaScript code&lt;/a&gt; and returns the result as a JSProxy object. This removes the need to, for example, import &lt;code&gt;eval&lt;/code&gt; from JavaScript to execute JS within Python. A nice clean feature.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;New Packages&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A whole load of new packages have now been bundled with Pyodide, including &lt;code&gt;opencv-python&lt;/code&gt;, &lt;code&gt;ffmpeg&lt;/code&gt;, &lt;code&gt;svgwrite&lt;/code&gt;, &lt;code&gt;sqlite3&lt;/code&gt;, &lt;code&gt;python-magic&lt;/code&gt;, and many more. See the &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#packages&#34;&gt;full list&lt;/a&gt; to see if your favorite package is now included.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Improved Build Process for Binary Wheels&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For those looking to integrate their own Python wheels into apps built with Pyodide, the process for building binary wheels for Pyodide has been significantly improved. See &lt;a href=&#34;https://blog.pyodide.org/posts/0.21-release/#building-binary-wheels-for-pyodide&#34;&gt;the Pyodide team&#39;s blog post on Binary Wheels&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;JavaScript Array Slicing&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There are lots of little edge cases and behaviors where JavaScript&#39;s and Python&#39;s behaviors are different, and the Pyodide team is constantly working on new ways to make that interface less painful. Recently, they&#39;ve implemented &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2907&#34;&gt;slicing on JavaScript array objects&lt;/a&gt; that obeys the same syntax as Python lists, which is a neat feature for those passing data from the browser into Python for processing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s been some &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2938&#34;&gt;additional work and corrections&lt;/a&gt; to this process, and I&#39;d imagine we&#39;ll continue to see it evolve and refine.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Correct Handling of Objects with Null Constructor&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2520&#34;&gt;small but necessary improvement&lt;/a&gt; - previously, it was difficult (if not impossible) to import a javascript &lt;span class=&#34;italic&#34;&gt;module&lt;/span&gt; into Python-in-Pyodide, since JS modules don&#39;t have constructors, but Python expects everything (including modules) to be an object, and so would try to &#34;construct&#34; them. Now, JavaScript module imports work as expected.&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Emscripten&#34;&gt;Emscripten &lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Just as PyScript uses Pyodide as its primary runtime to run Python in the browser, so Pyodide relies on Emscripten to compile CPython &lt;span class=&#34;italic&#34;&gt;for&lt;/span&gt; the browser. Pyodide 21 now moves from using Emscripten version 2.0.27 to version 3.1.14&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To be honest, I&#39;m not well enough versed in EmScripten to be able to parse the &lt;a href=&#34;https://github.com/emscripten-core/emscripten/blob/main/ChangeLog.md&#34;&gt;changelog details&lt;/a&gt; enough to highlight them. If you&#39;re more familiar with that program and its capabilities, &lt;a href=&#34;https://twitter.com/JeffersGlass&#34;&gt;let me know!&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The last two categories of changes really shouldn&#39;t impact end-users of PyScript much, but they&#39;re already making a huge difference to the PyScript devs and maintainers. Prior to this release, there wasn&#39;t much of a testing regimin. Now there&#39;s multiple different means of testing the Python and TypeScript code that make up PyScript, as well as integration tests that test them &lt;span class=&#34;italic&#34;&gt;both&lt;/span&gt;, making it easier and faster to tell when something&#39;s going to break. The testing methods are:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/pyscript/pyscript/tree/main/pyscriptjs/tests/integration&#34;&gt;Integration Tests&lt;/a&gt; with &lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt; - loads HTML pages in the browser and checks that PyScript works as intended.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/pyscript/pyscript/commit/8aba271a421ac9d22006fcaeb776efe686d3892c&#34;&gt;TypeScript Testing&lt;/a&gt; with &lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt; - Testing whether Py-Script elements load correctly via TS/jS&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/pyscript/pyscript/tree/main/pyscriptjs/tests/py-unit&#34;&gt;Python Tests&lt;/a&gt; with &lt;a href=&#34;https://docs.pytest.org/en/7.1.x/&#34;&gt;PyTest&lt;/a&gt; - Test functionality in PyScript.py, Python things like Element, PyScript, ContextManager, etc. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Infrastructure&#34;&gt;Infrastructure&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, there&#39;s the bounty of little improvements that make the codebase stronger and the dev process more repeatable.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Continuous Deployment&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The CI/CD pipeline continues to get refined and grow more resiliant - there have been some improvements to the CD process to ensure &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/ebfed27630c1e41fb42f3a67ef5978df1c9a71c3&#34;&gt;PyScript is rebuilt with every commit and pushed to Unstable&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Type Annotations&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript is being developed in TypeScript, which has the nice property of allowing quick prototyping with loose typing and gradually refining the typing to make the Linter/compiler happier. Several users, especially contributor &lt;a href=&#34;https://github.com/woxtu&#34;&gt;Woxtu&lt;/a&gt; have been hard at work makign sure types line up, Promises are resolved, and type signatures are accurate.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Though end-users don&#39;t see the results directly, having thorough and consistant type signatures makes it easy to spot smelly code when adding new features. Does this function &lt;span class=&#34;italic&#34;&gt;really&lt;/span&gt; need to return two different types of thing, or should we be rethinking the code structure? Why is this &lt;code&gt;any&lt;/code&gt; necessary?&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;/h4&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Next&#34;&gt;What&#39;s Next?&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;So what&#39;s coming down the pipe next for PyScript? Frankly, a ton, and that work is largely visible in the open PR&#39;s and issues on the PyScript GitHub.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;New Output and Rendering Design&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;One of the largest overhauls coming to a near-future version of PyScript is a total rethink of how PyScript renders to the browser window. &lt;code class=&#34;code&#34;&gt;print()&lt;/code&gt; is the right output method for a terminal, but it doesn&#39;t quite make sense in the context of a browser window, where the world of UI is much much larger.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To that end, there&#39;s a &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/622&#34;&gt;large project in the works&lt;/a&gt; that, among other things:
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Introduces a new &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/749&#34;&gt;display() function&lt;/a&gt;, which is the preferred way of outputting to the browser window&lt;/li&gt;
    &lt;li&gt;Routes stdout to the developer console by default&lt;/li&gt;
    &lt;li&gt;Improves escaping of HTML-like text included inside PyScript source&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The exact syntax and methodology of &lt;code&gt;display()&lt;/code&gt; is &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/769&#34;&gt;still being hashed out&lt;/a&gt;, but work is proceding a breakneck pace, and it&#39;ll be exciting to see where it ends up.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;PyScript Lifecycle Changes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Antonio Cuni et. al. have &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/763&#34;&gt;laid the groundwork&lt;/a&gt; for a sweeping rethink of how PyScript manages the lifecylce of initializing, loading Pyodide, processing tags into custom elements, and more. It includes provisions for user-created plugins (to extend functionality) and widgets (essentially custom tags) on the page, in more-or-less a plug-and-play fashion.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This isn&#39;t the kind of dish that can be cooked up in 20 minutes - it&#39;ll touch almost every part of the PyScript codebase. But it&#39;s exciting to see the code moving in a direction that&#39;s more flexible and understandable, which will only make it more expansible.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Async Behavior&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This one is near and dear to my heart. Exactly how asynchronous code should function in PyScript has been a hot topic for some of the maintainers, considering &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/751&#34;&gt;we broke it&lt;/a&gt; and &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/796&#34;&gt;had to fix it&lt;/a&gt; again.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide has a curious feature that allows you to run code with Top Level Await, since there&#39;s always an event loop running (the browser event loop). This is both handy and confusing, since it doesn&#39;t correspond to the experience of running Python in a terminal at all. So what&#39;s to be done? Perhaps we need to &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/751#issuecomment-1250991639&#34;&gt;further specify the execution order of async tags&lt;/a&gt;? Or &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/751#issuecomment-1260999684&#34;&gt;preclude top-level-await entirely&lt;/a&gt;? Do we even entirely understand how Pyodide is interacting with the browser event loop? What if an async task never terminates? Lots to be done here.&lt;/p&gt; 
&lt;h4 class=&#34;post-h4&#34;&gt;And More&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s plenty more swirling around in the PyScript ecosystem - &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/808&#34;&gt;web workers&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/804&#34;&gt;arrow functions&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/756&#34;&gt;further documentation&lt;/a&gt;, a &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/558&#34;&gt;file API&lt;/a&gt;... &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, not all ideas become plans, and not all plans become reality, but there&#39;s no lack of great ideas to keep pushing PyScript forward.&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Pyscript/Pyodide and JS Object Passing</title>
      <link>https://jeff.glass/post/pyscript-js-functions/</link>
      <pubDate>Sun, 21 Aug 2022 07:38:14 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-js-functions/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;A question I&#39;ve been seeing quite a bit over in the &lt;a href=&#34;https://discord.gg/RUYqNXRN&#34;&gt;Unofficial PyScript Community Discord&lt;/a&gt; is: &lt;span class=&#34;italic font-semibold&#34;&gt;How do you pass objects back and forth between JavaScript and PyScript/Pyodide?&lt;/span&gt; So I&#39;ve created recipies below for passing objects back and forth between JavaScript and Python; the specifics are somewhat different depending on whether we&#39;re working in PyScript or directly in Pyodide, so both options are illustrated below.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Currently, you can:
    &lt;ul class=&#34;&#34;&gt;
        &lt;li&gt;✅ Pass objects from JavaScript to Python running in PyScript&lt;/li&gt;
        &lt;li&gt;✅ Pass objects from JavaScript Python running in Pyodide&lt;/li&gt;
        &lt;li&gt;✅ Pass objects from Python running in Pyodide to JavaScript&lt;/li&gt;
        &lt;l1&gt;⚠️ Pass objects from Python running in PyScript to JavaScript, with a little extra work. See the &lt;a href=&#34;#commentary&#34;&gt;commentary&lt;/a&gt; and &lt;a href=&#34;#demo&#34;&gt;live demo&lt;/a&gt; with the code sample below.&lt;/l1&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For our purposes, an &#39;object&#39; is anything that can be bound to a variable (a number, string, object, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function&#34;&gt;function&lt;/a&gt;, etc). Also, recall that the &lt;code class=&#34;code&#34;&gt;import js&lt;/code&gt; or &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; &lt;a href=&#34;https://pyodide.org/en/stable/usage/type-conversions.html#type-translations-using-js-obj-from-py&#34;&gt;in Pyodide&lt;/a&gt; gets objects from the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis&#34;&gt;JavaScript globalThis scope&lt;/a&gt;, so keep the &lt;a href=&#34;https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/&#34;&gt;rules of JavaScript variable scoping&lt;/a&gt; in mind.&lt;/p&gt;
&lt;p class=&#34;info-banner&#34;&gt;This post was originally written for PyScript 2022.06.1; it has been updated with current best practices and code for PyScript 2022.12.1. You can also &lt;a href=&#34;../pyscript-js-functions-original&#34;&gt;view the original post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&#34;text-xl font-semibold post-p&#34;&gt;JavaScript to Python (PyScript)&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can use the simple &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; to import JavaScript objects directly into PyScript.&lt;/p&gt;
&lt;h3 class=&#34;code-title&#34;&gt;Javascript to Python (PyScript)&lt;/h3&gt;
&lt;div class=&#34;mb-6&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//A JS variable
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Define a JS Function
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; addTwoNumbers(x, y){
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; y;
    }
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Import and use JS function in Python&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; name, addTwoNumbers, console
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.Adding 1 and 2 in Javascript: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(addTwoNumbers(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;text-xl font-semibold post-p&#34;&gt;JavaScript to Python (Pyodide)&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can also use &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; to import JavaScript objects directly into Python in Pyodide. The syntax is identical to the PyScript example above - the &amp;lt;py-script&amp;gt; calls the &lt;code class=&#34;code&#34;&gt;runPython&lt;/code&gt; function for us (among other things).&lt;/p&gt;
&lt;h3 class=&#34;code-title&#34;&gt;Javascript to Python (Pyodide)&lt;/h3&gt;
&lt;div class=&#34;mb-6&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//A JS variable
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Define a JS Function
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; addTwoNumbers(x, y){
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; y;
    }

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; main() {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;let&lt;/span&gt; pyodide &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; loadPyodide();
        result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyodide.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            # Import and use JS function in Python
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            from js import name, addTwoNumbers, console
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            console.log(&amp;#34;Hello &amp;#34; + name + &amp;#34;.Adding 1 and 2 in Javascript: &amp;#34; + str(addTwoNumbers(1, 2)))
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        `&lt;/span&gt;);
    }
    main();
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;text-xl font-semibold post-p&#34;&gt;Python (Pyodide) to JavaScript&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Just as we imported objects from the javascript global scope using the &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; syntax, we can create new objects in the global scope by assigning new objects to the js &#34;module&#34;:&lt;/p&gt;
&lt;div class=&#34;mb-6&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; pyodideRuntime &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; loadPyodide();
        pyodideRuntime.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            import js
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            name = &amp;#34;Jeff&amp;#34; # A Python variable
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            # Define a Python function
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            def multiplyTwoNumbers(x, y):
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;                return (x * y)
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            js.mult = multiplyTwoNumbers
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            js.name = name
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        `&lt;/span&gt;);
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Access and call it in JavaScript
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Multiplying 2 and 3 in Python: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; mult(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;));
        console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You&amp;#39;re welcome, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; name)
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Alternatively, once PyScript has initialized the Pyodide runtime, the JS object &lt;code class=&#34;code&#34;&gt;pyodide.globals&lt;/code&gt; is a mapping that represents the global Python namespace. We can use the &lt;code class=&#34;code&#34;&gt;get()&lt;/code&gt; method to retrieve an object from this mapping and make use of it in JavaScript.&lt;/p&gt;
&lt;h3 class=&#34;code-title&#34;&gt;Python (Pyodide) to JavaScript&lt;/h3&gt;
&lt;div class=&#34;mb-6&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; pyodideRuntime &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; loadPyodide();
    pyodideRuntime.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        name = &amp;#34;Jeff&amp;#34; # A Python variable
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        # Define a Python function
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        def multiplyTwoNumbers(x, y):
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            return (x * y)
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    `&lt;/span&gt;);
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Access and call it in JavaScript
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;let&lt;/span&gt; mult &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyodideRuntime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;multiplyTwoNumbers&amp;#39;&lt;/span&gt;);
    console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Multiplying 2 and 3 in Python: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; mult(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;));
    console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You&amp;#39;re welcome, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; pyodideRuntime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;))
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;text-lg font-semibold&#34;&gt;Python (PyScript) to JavaScript&lt;/h3&gt;
&lt;a id=&#34;commentary&#34;&gt;&lt;/a&gt;
&lt;p class=&#34;post-p&#34;&gt;Either of the methods in the Pyodide section above will work for creating JavaScript objects from within PyScript. However, if you wish to be more declarative when creating variables with specific names, you can use a more verbose method, as follows:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;First, we define a javascript function which takes an object and a string, then binds that string as a variable to that object. By calling this function from PyScript (where we have access to the Pyodide global namespace), we can bind JavaScript variables to Python objects without having direct access to that global namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; createObject(object, variableName){
        globalThis[variableName] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; object
    }
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This takes a Python Object and creates a variable pointing to it in the JavaScript global scope. So what if we made a JavaScript variable point at... the Python global namespace?&lt;/p&gt;
&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;exportGlobals.py&lt;/p&gt;
    
    
    &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from js import createObject
from pyodide.ffi import create_proxy
createObject(create_proxy(globals()), &amp;#34;pyodideGlobals&amp;#34;)&lt;/code&gt;&lt;/pre&gt;
    
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This, amazingly, just works. All Python global variables are now accessible at in JavaScript with the syntax &lt;code class=&#34;code&#34;&gt;pyodideGlobals.get(&#39;myVariableName&#39;)&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s see an example running live. The three buttons below print the values of the variables &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; respectively, as looked up in the Python global namespace. Use the REPL to set the values of those variables, and see how JavaScript goes from seeing them as &#34;undefined&#34; to their value in PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve pre-populated an example line in the REPL for you. Click the &#39;&lt;svg id=&#34;&#34; class=&#34;inline&#34; style=&#34;height:20px;width:20px;vertical-align:-.125em;transform-origin:center;overflow:visible;color:green&#34; viewBox=&#34;0 0 384 512&#34; aria-hidden=&#34;true&#34; role=&#34;img&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;g transform=&#34;translate(192 256)&#34; transform-origin=&#34;96 0&#34;&gt;&lt;g transform=&#34;translate(0,0) scale(1,1)&#34;&gt;&lt;path d=&#34;M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 29.99 73.03 39.04L361 215z&#34; fill=&#34;currentColor&#34; transform=&#34;translate(-192 -256)&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&#39; or press &lt;code&gt;shift-enter&lt;/code&gt; to run the current REPL line.&lt;/p&gt;
&lt;a id=&#34;demo&#34;&gt;&lt;/a&gt;
&lt;script src=&#34;createObject.js&#34;&gt;&lt;/script&gt;
&lt;py-script src=&#34;exportGlobals.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2&#34;&gt;
    &lt;div&gt;
        &lt;py-repl auto-generate=&#34;true&#34;&gt;x = &#34;Hello, world!&#34;&lt;/py-repl&gt;
    &lt;/div&gt;
    &lt;div class=&#34;grid grid-cols-1&#34;&gt;
        &lt;input type=&#34;button&#34; id=&#34;x&#34; value=&#34;print(x)&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
        &lt;input type=&#34;button&#34; id=&#34;y&#34; value=&#34;print(y)&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
        &lt;input type=&#34;button&#34; id=&#34;z&#34; value=&#34;print(z)&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;w-full text-yellow-700 bg-yellow-100 border-2 border-yellow-700&#34;&gt;
    &lt;p class=&#34;text-sm italic&#34;&gt;#button-output&lt;/p&gt;
    &lt;div id=&#34;button-output&#34;&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script src=&#34;assignButtons.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;buttons.js&lt;/p&gt;
&lt;div class=&#34;overflow-x-auto&#34;&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;buttonOutput &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;button-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    buttonOutput.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; pyodideGlobals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
});

&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    buttonOutput.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; pyodideGlobals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
});

&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    buttonOutput.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; pyodideGlobals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;mt-4 text-lg font-semibold&#34;&gt;A Deeper Dive&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;We don&#39;t have to export the entire Python global namespace as an object if we don&#39;t want to. The example below shows exporting a single list and a lambda function as JavaScript variables, using the same &lt;code class=&#34;code&#34;&gt;createObject&lt;/code&gt; function above.&lt;/p&gt;
&lt;p class=&#34;info-banner&#34;&gt;Again, this method is significantly more verbose than simple assigning to the &lt;code class=&#34;code&#34;&gt;js&lt;/code&gt; module; however, you may find it useful if you wish to expand/extend the behavior of &lt;code class=&#34;code&#34;&gt;createObject()&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that the names of the JavaScript variable and the Python variable don&#39;t have to be similar/identical/different - I&#39;ve named them similarly (&lt;code&gt;&#39;names&#39;&lt;/code&gt; and &lt;code&gt;&#39;names_js&#39;&lt;/code&gt;, &lt;code&gt;&#39;mutliplier&#39;&lt;/code&gt; and &lt;code&gt;&#39;multiplier_js&#39;&lt;/code&gt;) for readability.&lt;/p&gt;
&lt;span class=&#34;code-title&#34;&gt;Python (PyScript) to JavaScript&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy, to_js

names &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff Glass&amp;#34;&lt;/span&gt;]
js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createObject(create_proxy(names), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;names_js&amp;#34;&lt;/span&gt;)

multiplier &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; z: z &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createObject(create_proxy(multiplier), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;multiplier_js&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The code above binds the JavaScript variable &lt;code class=&#34;code&#34;&gt;names_js&lt;/code&gt; to a PyProxy of the Python list &lt;code class=&#34;code&#34;&gt;names&lt;/code&gt;, and the JavaScript variables &lt;code class=&#34;code&#34;&gt;multiplier_js&lt;/code&gt; to a PyProxy for the Python lambda function &lt;code class=&#34;code&#34;&gt;multiplier&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, this means we have to use the createObject function to &#34;export&#34; the objects from Python before we can use them in JavaScript. But this may be preferred for your use case.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With those objects created, we can refer to/call them like any other JS objects. To see this, let&#39;s add two buttons: one that references our function and list from within JavaScript (&#34;use-python-objects&#34;), and one that adds some names to our list so we can see it change (&#34;add-name&#34;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
    - faker
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;faker&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Faker

fake &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Faker()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_a_name&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    new_name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fake&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name()
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Adding &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;new_name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; to names&amp;#34;&lt;/span&gt;)
    names&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(new_name)

Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;add-name&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_proxy(add_a_name))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;overflow-x-auto&#34;&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;use-python-objects&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
        console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Displaying contents of Python list &amp;#39;names&amp;#39;, calling Python function &amp;#39;multiplier&amp;#39;&amp;#34;&lt;/span&gt;)
        el &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;)
        el.innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//Clear contents of output
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; name &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;of&lt;/span&gt; names_js){
            el.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Name: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br\&amp;gt;&amp;#34;&lt;/span&gt;;
        };
        number &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;Math&lt;/span&gt;.floor(&lt;span style=&#34;color:#366&#34;&gt;Math&lt;/span&gt;.random() &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//random between 1 and 10
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        el.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; number &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; times two is &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; multiplier_js(number) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br\&amp;gt;&amp;#34;&lt;/span&gt;;
    });&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;mt-6 text-lg font-semibold&#34;&gt;Python (PyScript) Individual Objects to JavaScript Demo&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The code in the preceding section is running live on this page. Click &#34;Add Name to List&#34; to append a new name (provided by the Faker library) to the list &lt;code class=&#34;code&#34;&gt;names&lt;/code&gt;; click &#34;Use Python Objects&#34; to reference that list (and the &lt;code class=&#34;code&#34;&gt;multiplier&lt;/code&gt; function) and display the results in the green box. Open your browser&#39;s development console to see additional output.&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 space-x-1 space-y-2 md:grid-cols-2&#34;&gt;
    &lt;div class=&#34;grid grid-cols-2 space-x-1&#34;&gt;
        &lt;input type=&#34;button&#34; value=&#34;Use Python Objects&#34; id=&#34;use-python-objects&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
        &lt;input type=&#34;button&#34; value=&#34;Add a Name&#34; id=&#34;add-name&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full h-auto bg-green-100 border-2 border-green-600&#34;&gt;
        &lt;p class=&#34;text-sm italic text-green-700&#34;&gt;#output:&lt;/p&gt;
        &lt;div  class=&#34;p-1&#34; id=&#34;output&#34;&gt;&lt;br&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;py-config&gt;
    packages = [&#39;faker&#39;]
&lt;/py-config&gt;
&lt;script defer src=&#34;https://pyscript.net/releases/2022.12.1/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://pyscript.net/releases/2022.12.1/pyscript.css&#34; /&gt;

&lt;script src=&#34;createObject.js&#34;&gt;&lt;/script&gt;
&lt;py-script src=&#34;registerJsObjects.py&#34;&gt;&lt;/py-script&gt;
&lt;py-script src=&#34;nameButton.py&#34;&gt;&lt;/py-script&gt;
&lt;script src=&#34;usePythonButton.js&#34;&gt;&lt;/script&gt;
&lt;h3 class=&#34;mt-4 text-lg font-semibold&#34;&gt;Viewing &lt;code&gt;globals()&lt;/code&gt;&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Since we have a reference to the PyScript global namespace, we can also just view its contents from JavaScript. And again so we can see it really changing, let&#39;s add a button that creates new Python objects with random names using &lt;a href=&#34;https://docs.python.org/3/library/functions.html#exec&#34;&gt;exec()&lt;/a&gt;:&lt;/p&gt;&lt;p class=&#34;code-title&#34;&gt;displayGlobals.js&lt;/p&gt;
&lt;div class=&#34;overflow-x-auto&#34;&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;printGlobals&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    console.warn(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Clicked print globals&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;globals&amp;#34;&lt;/span&gt;).innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyodideGlobals;
});&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;my-3&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;makeNewObjects.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; choice, randint
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy, to_js

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;makePythonObject&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([choice(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)])
    value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; randint(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;)
    exec_string &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;global &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
    exec(exec_string)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;makeObject&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_proxy(makePythonObject))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Click the Print Globals button to see the Python global objects visible from JavaScript; click the Make Python Variable to make a new Python variable with a 5-letter name (then click Print Globals again to see it). Since this shares a global namespace with the rest of the PyScript code on this page, you may also see variables like &#39;&lt;code&gt;x&lt;/code&gt;&#39;, &#39;&lt;code&gt;y&lt;/code&gt;&#39;, and &#39;&lt;code&gt;z&lt;/code&gt;&#39; from the example above.&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 my-2 space-x-2 md:grid-cols-2&#34;&gt;
    &lt;input type=&#34;button&#34; value=&#34;Print Globals&#34; id=&#34;printGlobals&#34; class=&#34;col-span-1 p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
    &lt;input type=&#34;button&#34; value=&#34;Make Python Variable&#34; id=&#34;makeObject&#34; class=&#34;col-span-1 p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;w-full col-span-2 bg-blue-200 border-2 border-blue-700&#34;&gt;
    &lt;p class=&#34;text-sm italic text-blue-700&#34;&gt;#globals:&lt;/p&gt;
    &lt;div id=&#34;globals&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;makeNewObjects.py&#34;&gt;&lt;/py-script&gt;
&lt;script src=&#34;showGlobalsButton.js&#34;&gt;&lt;/script&gt;</description>
      &lt;
    </item>
    
  </channel>
</rss>