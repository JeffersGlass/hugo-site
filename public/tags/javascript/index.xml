<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Jeff Glass</title>
    <link>https://jeff.glass/tags/javascript/</link>
    <description>Recent content in Javascript on Jeff Glass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Sep 2022 12:05:33 -0500</lastBuildDate><atom:link href="https://jeff.glass/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Whats New in Pyscript 2022.09.1</title>
      <link>https://jeff.glass/post/whats-new-pyscript-2022-09-1/</link>
      <pubDate>Fri, 30 Sep 2022 12:05:33 -0500</pubDate>
      
      <guid>https://jeff.glass/post/whats-new-pyscript-2022-09-1/</guid>
      <description>&lt;style&gt;
    body {
        scroll-margin-top: 8em;
    }
&lt;/style&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;PyScript Version 2022.09.1 was just released&lt;/span&gt;, and just as &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/337&#34;&gt;tech lead Fabio Pliger said&lt;/a&gt; in proposing the versioning scheme:&lt;/p&gt;
&lt;blockquote class=&#34;post-blockquote&#34;&gt;&#34;...An important aspect to keep in mind is that PyScript is still in its very early stages. So, we should highlight that the expectations should be that think can often break until we reach a level of maturity and stability.&#34;&lt;/blockquote&gt;
&lt;p class=&#34;post-p&#34;&gt;And wow, are there a lot of new things in this version of PyScript. What&#39;s more, the default Pyodide runtime has been upgraded to the recently-released &lt;a href=&#34;https://pyodide.org/en/0.21.2/usage/quickstart.html&#34;&gt;version 21.2&lt;/a&gt;, which itself provides many new features and improved functionality to PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I want to specificically highlight new features, breaking changes, and neat behind-the-scenes work. The full details of what&#39;s changed are captured in the &lt;a href=&#34;https://github.com/pyscript/pyscript/compare/2022.06.1...2022.09.1&#34; class=&#34;&#34;&gt;PyScript Release Changelog&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;grid justify-center p-1 m-auto bg-gray-200&#34;&gt;
        &lt;span&gt;Jump To: &lt;span&gt;
        &lt;a href=&#34;#PyScript&#34;&gt;PyScript&lt;/a&gt; • 
        &lt;a href=&#34;#Documentation&#34;&gt;Documentation&lt;/a&gt; • 
        &lt;a href=&#34;#Pyodide&#34;&gt;Pyodide&lt;/a&gt; • 
        &lt;a href=&#34;#Emscripten&#34;&gt;Emscripten&lt;/a&gt; • 
        &lt;a href=&#34;#Testing&#34;&gt;Testing&lt;/a&gt; • 
        &lt;a href=&#34;#Infrastructure&#34;&gt;Infrastructure&lt;/a&gt; • 
        &lt;a href=&#34;#Next&#34;&gt;What&#39;s Next&lt;/a&gt;        
&lt;/div&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;PyScript&#34;&gt;PyScript&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&amp;lt;py-env&amp;gt; Will Be Going Away&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, the &lt;code&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; tag was where one would specify additional libraries to download from PyPI, as well as URL&#39;s to load into the local filesystem. Now, those options are being &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md&#34;&gt;folded into &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;&lt;/a&gt;, alongside other options like plugins and &lt;a href=&#34;#runtimes&#34;&gt;runtimes&lt;/a&gt; and metadata like the pages name and version number. The use of &lt;code&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; is deprecated and &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/775&#34;&gt;will be removed in a future release&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Additionally, &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; can now &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/783&#34;&gt;accept configurations in JSON in addition to TOML&lt;/a&gt;. Creators using build systems that strip out whitespace (which isn&#39;t very kind to TOML) may find this especially useful.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
  packages: [&amp;#34;rich&amp;#34;, &amp;#34;faker&amp;#34;]
  paths: [&amp;#34;./data_file.txt&amp;#34;]
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;    
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;span class=&#34;px-1 font-mono bg-gray-200&#34;&gt;py-*&lt;/span&gt; Events&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The alpha and 2022.06.1 releases supported a couple of special attributes on HTML tags - &lt;code class=&#34;code&#34;&gt;pys-onClick&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;pys-onKeyDown&lt;/code&gt; - that PyScript hooked into to allow the running of Python code in response to a couple of common browser interactions.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Release 2022.09.1 &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/561&#34;&gt;radically expands this capability&lt;/a&gt; with &lt;a href=&#34;https://github.com/lpliger/pyscript/blob/19491d80107f17d43633b224e231cd1cf2f657d5/pyscriptjs/src/components/pyscript.ts#L128-L220&#34;&gt;many, many more browser events supported.&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/686&#34;&gt;syntax of py-* events has also changed&lt;/a&gt; to more closely match JavaScripts &lt;code class=&#34;code&#34;&gt;event&lt;/code&gt; syntax. Previously, you supplied a &lt;code&gt;Callable&lt;/code&gt; which was called with no arguments. Now you write a line of code (optionally broken up with &lt;code&gt;;&lt;/code&gt; symbols) which is run when the event triggers. The correct usage is now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    from js import console as jsconsole
    def say_hi(name):
        jsconsole.log(&amp;#34;Hi, &amp;#34; + name)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-paragraph&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-mouseover&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;say_hi(&amp;#39;Jeff&amp;#39;); jsconsole.log(&amp;#39;I did it!&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;Mouse Over Me&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that, unlike JavaScripts event syntax, the value of the &lt;code&gt;py-*&lt;/code&gt; attribute can be any valid Python code, not just a single function call.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Better Input/Output Escaping&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Embedding something that looks like HTML inside of Python inside of HTML is... well, even just saying it is a mouthful, and it comes with its own pitfalls. Previously, PyScript tags like the following would fail in a couple of ways:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;b&amp;gt;A bold tag!&amp;lt;/b&amp;gt;&amp;#34;&lt;/span&gt;)
tag_name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;I&amp;#39;m pretty sure 1 &amp;lt; 2 but 2 &amp;gt; 0&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;First, the Browser needs to be prevented from interpretting the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tag as internal HTML, and second, the output needs to recognize that the &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; symbols are &lt;i&gt;not&lt;/i&gt; an HTML tag. These issues have been solved by a &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/684&#34;&gt;pair&lt;/a&gt; of &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/481&#34;&gt;changes&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Better Logging&lt;/h4&gt;
&lt;img src=&#34;logging.PNG&#34; alt=&#34;&#34; class=&#34;float-right w-full m-2 border-2 border-gray-300 sm:w-80&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Logging to the Developer Console that PyScript does is now much cleaner, and annotated by what file the log line is generated in. This makes it easier to see what&#39;s logged by the user&#39;s program and what&#39;s being logging by the PyScript mechanisms themselves.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34; id=&#34;runtimes&#34;&gt;Framework for Multiple Runtimes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The use of a specific version of Pyodide is no longer hardcoded into a PyScript release - users may now opt to supply a URL and name for a &#39;runtime&#39; in the &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag. If one is not supplied, the default is still to load the version of Pyodide that PyScript has been most recently tested against, which should be the right option for most users. But this does open the door to future improvements like:
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Running &lt;code&gt;py-script&lt;/code&gt; blocks in different versions of Pyodide&lt;/li&gt;
    &lt;li&gt;Running &lt;code&gt;py-script&lt;/code&gt; blocks in runtimes that are &lt;i&gt;not&lt;/i&gt; Pyodide (Micropython??)&lt;/li&gt;
    &lt;li&gt;Running &lt;code&gt;py-script&lt;/code&gt; blocks in a self-built/custom build of Pyodide for experimentation or demonstrating new features&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Try PyScript&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A new &lt;a href=&#34;https://github.com/pyscript/pyscript#try-pyscript&#34;&gt;Try PyScript&lt;/a&gt; section now leads the main ReadMe on the PyScript GitHub, to more quickly get new users up to speed on how to try out PyScript in their browser.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Contributing&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; guide has been fleshed out with more guidance on developing submitting useful issues, forking the repository for local building and setting up the a development environment, and more. Both Mariana Meireles and Fabio Rosado have contributed excellent information on &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/066ecbe02219e9c9ff5aff28a57d37e7baba8ace&#34;&gt;how to build PyScript&lt;/a&gt; and &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/d203b60f446c347fdb59b6c1350e6b3a2d9f7d66&#34;&gt;how to create and submit a Pull Request&lt;/a&gt; - every open source project should be so lucky!&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;How Tos&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Two new How-To guides were added to the documentation. The first covers &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/howtos/http-requests.md&#34;&gt;how to make HTTP requests in pure Python&lt;/a&gt; by using pyodide&#39;s &lt;code class=&#34;code&#34;&gt;pyfetch&lt;/code&gt; method. The second illustrates the techniques for &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/howtos/passing-objects.md&#34;&gt;passing objects between JavaScript and Python (in PyScript)&lt;/a&gt;, including some slightly-cursed uses of JavaScript&#39;s &lt;code&gt;eval()&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Getting Started&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md&#34;&gt;Getting Started&lt;/a&gt; guide got a huge update to reflect the new &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; changes (see above).&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Pyodide&#34;&gt;Pyodide&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s no secret that the beating heart of the PyScript project is the &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide project&lt;/a&gt;, which makes it possible to run Python in the browser by compiling the CPython runtime to Web Assembly. (This is now &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/792&#34;&gt;nicely highlighted at the top of the PyScript readme&lt;/a&gt;.) Which means that improvements to Pyodide are big boons for PyScript!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While PyScript&#39;s Alpha and 2022.06.1 were designed around Pyodide 20, PyScript 2022.09.1 fully embraces Pyodide 21.2 and the many changes and improvements it brings. We&#39;ll only hit the highlights here; for more details, see the &lt;a href=&#34;https://blog.pyodide.org/posts/0.21-release/&#34;&gt;Pyodide 21 Release Post&lt;/a&gt; and &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#version-0-21-0&#34;&gt;Change Log&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;API Changes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This is probably the most visible change for the casual PyScriptian - the functionality of the Pyodide Python API has been &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2787&#34;&gt;divied&lt;/a&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2790&#34;&gt;up&lt;/a&gt; into &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api.html&#34;&gt;a number of individual packages&lt;/a&gt; for clarity and namespace control. So now, rather than using &lt;code class=&#34;code&#34;&gt;from pyodide import create_proxy&lt;/code&gt;, one would use &lt;code class=&#34;code&#34;&gt;from pyodide.ffi import create_proxy&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_hi&lt;/span&gt;(name):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hi, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;FutureWarning&lt;/span&gt;: pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy has been moved to pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ffi&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy Accessing it through the pyodide module &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; deprecated&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The old locations of the functions are still present but deprecated in version 21, so this change alone won&#39;t break code written for Pyodide 20. But you will see a deprecation warning, and any new code should obey the new namespacing as the deprecation&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Python Wrappers for &lt;code&gt;addEventListener&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt;, and more&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As part of the reorganization mentioned above, the Pyodide API &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2456&#34;&gt;added a bunch of Python utility functions&lt;/a&gt; that handle common JS actions. Specifically, within the a[href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html&#34;&gt;&lt;code&gt;pyodide.ffi.wrappers&lt;/code&gt; namespace, we now have functions for &lt;code class=&#34;code&#34;&gt;add_event_listener&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;remove_event_listener&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;set_timeout&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;clear_timeout&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;set_interval&lt;/code&gt;, and &lt;code class=&#34;code&#34;&gt;clear_interval&lt;/code&gt;. This avoids the need import those JS functions directly from &lt;code&gt;js.document&lt;/code&gt;, and since the Python functions automatically wrap passed functions with &lt;code&gt;create_proxy&lt;/code&gt;, that can be left out as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
  
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_bye&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Goodbye!&amp;#34;&lt;/span&gt;)
    
    tag &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-div&amp;#34;&lt;/span&gt;)
    add_event_listener(tag, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, say_bye)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;pyodide.code.run_js&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Yet another API addition is &lt;code class=&#34;code&#34;&gt;pyodide.code.run_js&lt;/code&gt;, which &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/code.html#pyodide.code.run_js&#34;&gt;evaluates the passed JavaScript code&lt;/a&gt; and returns the result as a JSProxy object. This removes the need to, for example, import &lt;code&gt;eval&lt;/code&gt; from JavaScript to execute JS within Python. A nice clean feature.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;New Packages&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A whole load of new packages have now been bundled with Pyodide, including &lt;code&gt;opencv-python&lt;/code&gt;, &lt;code&gt;ffmpeg&lt;/code&gt;, &lt;code&gt;svgwrite&lt;/code&gt;, &lt;code&gt;sqlite3&lt;/code&gt;, &lt;code&gt;python-magic&lt;/code&gt;, and many more. See the &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#packages&#34;&gt;full list&lt;/a&gt; to see if your favorite package is now included.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Improved Build Process for Binary Wheels&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For those looking to integrate their own Python wheels into apps built with Pyodide, the process for building binary wheels for Pyodide has been significantly improved. See &lt;a href=&#34;https://blog.pyodide.org/posts/0.21-release/#building-binary-wheels-for-pyodide&#34;&gt;the Pyodide team&#39;s blog post on Binary Wheels&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;JavaScript Array Slicing&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There are lots of little edge cases and behaviors where JavaScript&#39;s and Python&#39;s behaviors are different, and the Pyodide team is constantly working on new ways to make that interface less painful. Recently, they&#39;ve implemented &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2907&#34;&gt;slicing on JavaScript array objects&lt;/a&gt; that obeys the same syntax as Python lists, which is a neat feature for those passing data from the browser into Python for processing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s been some &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2938&#34;&gt;additional work and corrections&lt;/a&gt; to this process, and I&#39;d imagine we&#39;ll continue to see it evolve and refine.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Correct Handling of Objects with Null Constructor&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2520&#34;&gt;small but necessary improvement&lt;/a&gt; - previously, it was difficult (if not impossible) to import a javascript &lt;span class=&#34;italic&#34;&gt;module&lt;/span&gt; into Python-in-Pyodide, since JS modules don&#39;t have constructors, but Python expects everything (including modules) to be an object, and so would try to &#34;construct&#34; them. Now, JavaScript module imports work as expected.&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Emscripten&#34;&gt;Emscripten &lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Just as PyScript uses Pyodide as its primary runtime to run Python in the browser, so Pyodide relies on Emscripten to compile CPython &lt;span class=&#34;italic&#34;&gt;for&lt;/span&gt; the browser. Pyodide 21 now moves from using Emscripten version 2.0.27 to version 3.1.14&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To be honest, I&#39;m not well enough versed in EmScripten to be able to parse the &lt;a href=&#34;https://github.com/emscripten-core/emscripten/blob/main/ChangeLog.md&#34;&gt;changelog details&lt;/a&gt; enough to highlight them. If you&#39;re more familiar with that program and its capabilities, &lt;a href=&#34;https://twitter.com/JeffersGlass&#34;&gt;let me know!&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The last two categories of changes really shouldn&#39;t impact end-users of PyScript much, but they&#39;re already making a huge difference to the PyScript devs and maintainers. Prior to this release, there wasn&#39;t much of a testing regimin. Now there&#39;s multiple different means of testing the Python and TypeScript code that make up PyScript, as well as integration tests that test them &lt;span class=&#34;italic&#34;&gt;both&lt;/span&gt;, making it easier and faster to tell when something&#39;s going to break. The testing methods are:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/pyscript/pyscript/tree/main/pyscriptjs/tests/integration&#34;&gt;Integration Tests&lt;/a&gt; with &lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt; - loads HTML pages in the browser and checks that PyScript works as intended.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/pyscript/pyscript/commit/8aba271a421ac9d22006fcaeb776efe686d3892c&#34;&gt;TypeScript Testing&lt;/a&gt; with &lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt; - Testing whether Py-Script elements load correctly via TS/jS&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/pyscript/pyscript/tree/main/pyscriptjs/tests/py-unit&#34;&gt;Python Tests&lt;/a&gt; with &lt;a href=&#34;https://docs.pytest.org/en/7.1.x/&#34;&gt;PyTest&lt;/a&gt; - Test functionality in PyScript.py, Python things like Element, PyScript, ContextManager, etc. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Infrastructure&#34;&gt;Infrastructure&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, there&#39;s the bounty of little improvements that make the codebase stronger and the dev process more repeatable.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Continuous Deployment&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The CI/CD pipeline continues to get refined and grow more resiliant - there have been some improvements to the CD process to ensure &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/ebfed27630c1e41fb42f3a67ef5978df1c9a71c3&#34;&gt;PyScript is rebuilt with every commit and pushed to Unstable&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Type Annotations&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript is being developed in TypeScript, which has the nice property of allowing quick prototyping with loose typing and gradually refining the typing to make the Linter/compiler happier. Several users, especially contributor &lt;a href=&#34;https://github.com/woxtu&#34;&gt;Woxtu&lt;/a&gt; have been hard at work makign sure types line up, Promises are resolved, and type signatures are accurate.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Though end-users don&#39;t see the results directly, having thorough and consistant type signatures makes it easy to spot smelly code when adding new features. Does this function &lt;span class=&#34;italic&#34;&gt;really&lt;/span&gt; need to return two different types of thing, or should we be rethinking the code structure? Why is this &lt;code&gt;any&lt;/code&gt; necessary?&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;/h4&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Next&#34;&gt;What&#39;s Next?&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;So what&#39;s coming down the pipe next for PyScript? Frankly, a ton, and that work is largely visible in the open PR&#39;s and issues on the PyScript GitHub.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;New Output and Rendering Design&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;One of the largest overhauls coming to a near-future version of PyScript is a total rethink of how PyScript renders to the browser window. &lt;code class=&#34;code&#34;&gt;print()&lt;/code&gt; is the right output method for a terminal, but it doesn&#39;t quite make sense in the context of a browser window, where the world of UI is much much larger.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To that end, there&#39;s a &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/622&#34;&gt;large project in the works&lt;/a&gt; that, among other things:
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Introduces a new &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/749&#34;&gt;display() function&lt;/a&gt;, which is the preferred way of outputting to the browser window&lt;/li&gt;
    &lt;li&gt;Routes stdout to the developer console by default&lt;/li&gt;
    &lt;li&gt;Improves escaping of HTML-like text included inside PyScript source&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The exact syntax and methodology of &lt;code&gt;display()&lt;/code&gt; is &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/769&#34;&gt;still being hashed out&lt;/a&gt;, but work is proceding a breakneck pace, and it&#39;ll be exciting to see where it ends up.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;PyScript Lifecycle Changes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Antonio Cuni et. al. have &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/763&#34;&gt;laid the groundwork&lt;/a&gt; for a sweeping rethink of how PyScript manages the lifecylce of initializing, loading Pyodide, processing tags into custom elements, and more. It includes provisions for user-created plugins (to extend functionality) and widgets (essentially custom tags) on the page, in more-or-less a plug-and-play fashion.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This isn&#39;t the kind of dish that can be cooked up in 20 minutes - it&#39;ll touch almost every part of the PyScript codebase. But it&#39;s exciting to see the code moving in a direction that&#39;s more flexible and understandable, which will only make it more expansible.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Async Behavior&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This one is near and dear to my heart. Exactly how asynchronous code should function in PyScript has been a hot topic for some of the maintainers, considering &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/751&#34;&gt;we broke it&lt;/a&gt; and &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/796&#34;&gt;had to fix it&lt;/a&gt; again.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide has a curious feature that allows you to run code with Top Level Await, since there&#39;s always an event loop running (the browser event loop). This is both handy and confusing, since it doesn&#39;t correspond to the experience of running Python in a terminal at all. So what&#39;s to be done? Perhaps we need to &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/751#issuecomment-1250991639&#34;&gt;further specify the execution order of async tags&lt;/a&gt;? Or &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/751#issuecomment-1260999684&#34;&gt;preclude top-level-await entirely&lt;/a&gt;? Do we even entirely understand how Pyodide is interacting with the browser event loop? What if an async task never terminates? Lots to be done here.&lt;/p&gt; 
&lt;h4 class=&#34;post-h4&#34;&gt;And More&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s plenty more swirling around in the PyScript ecosystem - &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/808&#34;&gt;web workers&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/804&#34;&gt;arrow functions&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/756&#34;&gt;further documentation&lt;/a&gt;, a &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/558&#34;&gt;file API&lt;/a&gt;... &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, not all ideas become plans, and not all plans become reality, but there&#39;s no lack of great ideas to keep pushing PyScript forward.&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Pyscript/Pyodide and JS Object Passing</title>
      <link>https://jeff.glass/post/pyscript-js-functions/</link>
      <pubDate>Sun, 21 Aug 2022 07:38:14 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-js-functions/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;A question I&#39;ve been seeing quite a bit over in the &lt;a href=&#34;https://discord.gg/RUYqNXRN&#34;&gt;Unofficial PyScript Community Discord&lt;/a&gt; is: &lt;span class=&#34;italic font-semibold&#34;&gt;How do you pass objects back and forth between JavaScript and PyScript/Pyodide?&lt;/span&gt; So I&#39;ve created recipies below for passing objects back and forth between JavaScript and Python; the specifics are somewhat different depending on whether we&#39;re working in PyScript or directly in Pyodide, so both options are illustrated below.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Currently, you can:
    &lt;ul class=&#34;&#34;&gt;
        &lt;li&gt;✅ Pass objects from JavaScript to Python running in PyScript&lt;/li&gt;
        &lt;li&gt;✅ Pass objects from JavaScript Python running in Pyodide&lt;/li&gt;
        &lt;li&gt;✅ Pass objects from Python running in Pyodide to JavaScript&lt;/li&gt;
        &lt;l1&gt;⚠️ Pass objects from Python running in PyScript to JavaScript, with a little extra work. See the &lt;a href=&#34;#commentary&#34;&gt;commentary&lt;/a&gt; and &lt;a href=&#34;#demo&#34;&gt;live demo&lt;/a&gt; with the code sample below.&lt;/l1&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For our purposes, an &#39;object&#39; is anything that can be bound to a variable (a number, string, object, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function&#34;&gt;function&lt;/a&gt;, etc). Also, recall that the &lt;code class=&#34;code&#34;&gt;import js&lt;/code&gt; or &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; &lt;a href=&#34;https://pyodide.org/en/stable/usage/type-conversions.html#type-translations-using-js-obj-from-py&#34;&gt;in Pyodide&lt;/a&gt; gets objects from the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis&#34;&gt;JavaScript globalThis scope&lt;/a&gt;, so keep the &lt;a href=&#34;https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/&#34;&gt;rules of JavaScript variable scoping&lt;/a&gt; in mind.&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;(At time of writing, the most current versions are &lt;span class=&#34;&#34;&gt;PyScript Version 2022.06.1&lt;/span&gt; and &lt;span class=&#34;&#34;&gt;Pyodide v21&lt;/span&gt;. Both are changing fast, so if you&#39;re reading this in the far future, check the documentation and forums for new best procedures.)&lt;/p&gt;
&lt;h2 class=&#34;text-xl font-semibold post-p&#34;&gt;JavaScript to Python (PyScript)&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can use the simple &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; to import JavaScript objects directly into PyScript.&lt;/p&gt;
&lt;h3 class=&#34;code-title&#34;&gt;Javascript to Python (PyScript)&lt;/h3&gt;
&lt;div class=&#34;mb-6&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//A JS variable
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Define a JS Function
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; addTwoNumbers(x, y){
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; y;
    }
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Import and use JS function in Python&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; name, addTwoNumbers, console
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.Adding 1 and 2 in Javascript: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(addTwoNumbers(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;text-xl font-semibold post-p&#34;&gt;JavaScript to Python (Pyodide)&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can also use &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; to import JavaScript objects directly into Python in Pyodide. The syntax is identical to the PyScript example above - the &amp;lt;py-script&amp;gt; calls the &lt;code class=&#34;code&#34;&gt;runPython&lt;/code&gt; function for us (among other things).&lt;/p&gt;
&lt;h3 class=&#34;code-title&#34;&gt;Javascript to Python (Pyodide)&lt;/h3&gt;
&lt;div class=&#34;mb-6&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//A JS variable
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Define a JS Function
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; addTwoNumbers(x, y){
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; y;
    }

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; main() {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;let&lt;/span&gt; pyodide &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; loadPyodide();
        result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyodide.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            # Import and use JS function in Python
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            from js import name, addTwoNumbers, console
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            console.log(&amp;#34;Hello &amp;#34; + name + &amp;#34;.Adding 1 and 2 in Javascript: &amp;#34; + str(addTwoNumbers(1, 2)))
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        `&lt;/span&gt;);
    }
    main();
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;text-xl font-semibold post-p&#34;&gt;Python (Pyodide) to JavaScript&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;One we&#39;ve initialized the Pyodide runtime, the JS object &lt;code class=&#34;code&#34;&gt;pyodide.globals&lt;/code&gt; is a mapping that represents the global Python namespace. We can use the &lt;code class=&#34;code&#34;&gt;get()&lt;/code&gt; method to retrieve an object from this mapping and make use of it in JavaScript.&lt;/p&gt;
&lt;h3 class=&#34;code-title&#34;&gt;Python (Pyodide) to JavaScript&lt;/h3&gt;
&lt;div class=&#34;mb-6&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; pyodideRuntime &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; loadPyodide();
    pyodideRuntime.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        name = &amp;#34;Jeff&amp;#34; # A Python variable
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        # Define a Python function
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        def multiplyTwoNumbers(x, y):
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            return (x * y)
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    `&lt;/span&gt;);
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Access and call it in JavaScript
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;let&lt;/span&gt; mult &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyodideRuntime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;multiplyTwoNumbers&amp;#39;&lt;/span&gt;);
    console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Multiplying 2 and 3 in Python: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; mult(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;));
    console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You&amp;#39;re welcome, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; pyodideRuntime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;))
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;text-lg font-semibold&#34;&gt;Python (PyScript) to JavaScript&lt;/h3&gt;
&lt;a id=&#34;commentary&#34;&gt;&lt;/a&gt;
&lt;p class=&#34;post-p&#34;&gt;Since &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/494&#34;&gt;PyScript doesn&#39;t export its instance of Pyodide&lt;/a&gt; and only one instance of Pyodide can be running in a browser window at a time, there isn&#39;t currently a way for Javascript to access Objects defined inside PyScript tags &lt;span class=&#34;italic&#34;&gt;&#34;directly&#34;&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;However, I&#39;ve found a workaround using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&#34;&gt;JavaScript&#39;s eval() function&lt;/a&gt;, which executes a string as code much like &lt;a href=&#34;https://docs.python.org/3/library/functions.html#eval&#34;&gt;Python&#39;s eval()&lt;/a&gt;. First, we create a JS function &lt;code class=&#34;code&#34;&gt;createObject&lt;/code&gt; which takes an object and a string, then uses eval() to bind that string as a variable to that object. By calling this function from PyScript (where we have access to the Pyodide global namespace), we can bind JavaScript variables to Python objects without having direct access to that global namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; createObject(object, variableName){
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//Bind a variable whose name is the string variableName
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// to the object called &amp;#39;object&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;let&lt;/span&gt; execString &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; variableName &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; = object&amp;#34;&lt;/span&gt;
        console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Running `&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; execString &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;`&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#366&#34;&gt;eval&lt;/span&gt;(execString)
    }
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This takes a Python Object and creates a variable pointing to it in the JavaScript global scope. So what if we made a JavaScript variable point at... the Python global namespace?&lt;/p&gt;
&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;exportGlobals.py&lt;/p&gt;
    
    
    &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from js import createObject
from pyodide import create_proxy
createObject(create_proxy(globals()), &amp;#34;pyodideGlobals&amp;#34;)&lt;/code&gt;&lt;/pre&gt;
    
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This, amazingly, just works. All Python global variables are now accessible at in JavaScript with the syntax &lt;code class=&#34;code&#34;&gt;pyodideGlobals.get(&#39;myVariableName&#39;)&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s see an example running live. The three buttons below print the values of the variables &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; respectively, as looked up in the Python global namespace. Use the REPL to set the values of those variables, and see how JavaScript goes from seeing them as &#34;undefined&#34; to their value in PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve pre-populated an example line in the REPL for you. Click the &#39;&lt;svg id=&#34;&#34; class=&#34;inline&#34; style=&#34;height:20px;width:20px;vertical-align:-.125em;transform-origin:center;overflow:visible;color:green&#34; viewBox=&#34;0 0 384 512&#34; aria-hidden=&#34;true&#34; role=&#34;img&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;g transform=&#34;translate(192 256)&#34; transform-origin=&#34;96 0&#34;&gt;&lt;g transform=&#34;translate(0,0) scale(1,1)&#34;&gt;&lt;path d=&#34;M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 29.99 73.03 39.04L361 215z&#34; fill=&#34;currentColor&#34; transform=&#34;translate(-192 -256)&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&#39; or press &lt;code&gt;shift-enter&lt;/code&gt; to run the current REPL line.&lt;/p&gt;
&lt;a id=&#34;demo&#34;&gt;&lt;/a&gt;
&lt;script src=&#34;createObject.js&#34;&gt;&lt;/script&gt;
&lt;py-script src=&#34;exportGlobals.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2&#34;&gt;
    &lt;div&gt;
        &lt;py-repl auto-generate=&#34;true&#34;&gt;x = &#34;Hello, world!&#34;&lt;/py-repl&gt;
    &lt;/div&gt;
    &lt;div class=&#34;grid grid-cols-1&#34;&gt;
        &lt;input type=&#34;button&#34; id=&#34;x&#34; value=&#34;print(x)&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
        &lt;input type=&#34;button&#34; id=&#34;y&#34; value=&#34;print(y)&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
        &lt;input type=&#34;button&#34; id=&#34;z&#34; value=&#34;print(z)&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;w-full text-yellow-700 bg-yellow-100 border-2 border-yellow-700&#34;&gt;
    &lt;p class=&#34;text-sm italic&#34;&gt;#button-output&lt;/p&gt;
    &lt;div id=&#34;button-output&#34;&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script src=&#34;assignButtons.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;buttons.js&lt;/p&gt;
&lt;div class=&#34;overflow-x-auto&#34;&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;buttonOutput &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;button-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    buttonOutput.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; pyodideGlobals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
});

&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    buttonOutput.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; pyodideGlobals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
});

&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    buttonOutput.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; pyodideGlobals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;mt-4 text-lg font-semibold&#34;&gt;A Deeper Dive&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;We don&#39;t have to export the entire Python global namespace as an object if we don&#39;t want to. The example below shows exporting a single list and a lambda function as JavaScript variables, using the same &lt;code class=&#34;code&#34;&gt;createObject&lt;/code&gt; function above.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that the names of the JavaScript variable and the Python variable don&#39;t have to be similar/identical/different - I&#39;ve named them similarly (&lt;code&gt;&#39;names&#39;&lt;/code&gt; and &lt;code&gt;&#39;names_js&#39;&lt;/code&gt;, &lt;code&gt;&#39;mutliplier&#39;&lt;/code&gt; and &lt;code&gt;&#39;multiplier_js&#39;&lt;/code&gt;) for readability.&lt;/p&gt;
&lt;span class=&#34;code-title&#34;&gt;Python (PyScript) to JavaScript&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy, to_js

names &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff Glass&amp;#34;&lt;/span&gt;]
js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createObject(create_proxy(names), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;names_js&amp;#34;&lt;/span&gt;)

multiplier &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; z: z &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createObject(create_proxy(multiplier), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;multiplier_js&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The code above binds the JavaScript variable &lt;code class=&#34;code&#34;&gt;names_js&lt;/code&gt; to a PyProxy of the Python list &lt;code class=&#34;code&#34;&gt;names&lt;/code&gt;, and the JavaScript variables &lt;code class=&#34;code&#34;&gt;multiplier_js&lt;/code&gt; to a PyProxy for the Python lambda function &lt;code class=&#34;code&#34;&gt;multiplier&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, this means we have to use the createObject function to &#34;export&#34; the objects from Python before we can use them in JavaScript. But this may be preferred for your use case.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With those objects created, we can refer to/call them like any other JS objects. To see this, let&#39;s add two buttons: one that references our function and list from within JavaScript (&#34;use-python-objects&#34;), and one that adds some names to our list so we can see it change (&#34;add-name&#34;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
    - faker
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;faker&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Faker

fake &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Faker()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_a_name&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    new_name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fake&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name()
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Adding &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;new_name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; to names&amp;#34;&lt;/span&gt;)
    names&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(new_name)

Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;add-name&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_proxy(add_a_name))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;overflow-x-auto&#34;&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;use-python-objects&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
        console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Displaying contents of Python list &amp;#39;names&amp;#39;, calling Python function &amp;#39;multiplier&amp;#39;&amp;#34;&lt;/span&gt;)
        el &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;)
        el.innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//Clear contents of output
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; name &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;of&lt;/span&gt; names_js){
            el.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Name: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br\&amp;gt;&amp;#34;&lt;/span&gt;;
        };
        number &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;Math&lt;/span&gt;.floor(&lt;span style=&#34;color:#366&#34;&gt;Math&lt;/span&gt;.random() &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//random between 1 and 10
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        el.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; number &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; times two is &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; multiplier_js(number) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br\&amp;gt;&amp;#34;&lt;/span&gt;;
    });&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;mt-6 text-lg font-semibold&#34;&gt;Python (PyScript) Individual Objects to JavaScript Demo&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The code in the preceding section is running live on this page. Click &#34;Add Name to List&#34; to append a new name (provided by the Faker library) to the list &lt;code class=&#34;code&#34;&gt;names&lt;/code&gt;; click &#34;Use Python Objects&#34; to reference that list (and the &lt;code class=&#34;code&#34;&gt;multiplier&lt;/code&gt; function) and display the results in the green box. Open your browser&#39;s development console to see additional output.&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 space-x-1 space-y-2 md:grid-cols-2&#34;&gt;
    &lt;div class=&#34;grid grid-cols-2 space-x-1&#34;&gt;
        &lt;input type=&#34;button&#34; value=&#34;Use Python Objects&#34; id=&#34;use-python-objects&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
        &lt;input type=&#34;button&#34; value=&#34;Add a Name&#34; id=&#34;add-name&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full h-auto bg-green-100 border-2 border-green-600&#34;&gt;
        &lt;p class=&#34;text-sm italic text-green-700&#34;&gt;#output:&lt;/p&gt;
        &lt;div  class=&#34;p-1&#34; id=&#34;output&#34;&gt;&lt;br&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;py-env&gt;
    - faker
&lt;/py-env&gt;
&lt;script defer src=&#34;https://pyscript.net/releases/2022.06.1/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://pyscript.net/releases/2022.06.1/pyscript.css&#34; /&gt;

&lt;script src=&#34;createObject.js&#34;&gt;&lt;/script&gt;
&lt;py-script src=&#34;registerJsObjects.py&#34;&gt;&lt;/py-script&gt;
&lt;py-script src=&#34;nameButton.py&#34;&gt;&lt;/py-script&gt;
&lt;script src=&#34;usePythonButton.js&#34;&gt;&lt;/script&gt;
&lt;h3 class=&#34;mt-4 text-lg font-semibold&#34;&gt;Viewing &lt;code&gt;globals()&lt;/code&gt;&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Since we have a reference to the PyScript global namespace, we can also just view its contents from JavaScript. And again so we can see it really changing, let&#39;s add a button that creates new Python objects with random names using &lt;a href=&#34;https://docs.python.org/3/library/functions.html#exec&#34;&gt;exec()&lt;/a&gt;:&lt;/p&gt;&lt;p class=&#34;code-title&#34;&gt;displayGlobals.js&lt;/p&gt;
&lt;div class=&#34;overflow-x-auto&#34;&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;printGlobals&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    console.warn(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Clicked print globals&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;globals&amp;#34;&lt;/span&gt;).innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyodideGlobals;
});&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;my-3&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;makeNewObjects.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; choice, randint
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy, to_js

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;makePythonObject&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([choice(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)])
    value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; randint(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;)
    exec_string &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;global &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
    exec(exec_string)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;makeObject&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_proxy(makePythonObject))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Click the Print Globals button to see the Python global objects visible from JavaScript; click the Make Python Variable to make a new Python variable with a 5-letter name (then click Print Globals again to see it). Since this shares a global namespace with the rest of the PyScript code on this page, you may also see variables like &#39;&lt;code&gt;x&lt;/code&gt;&#39;, &#39;&lt;code&gt;y&lt;/code&gt;&#39;, and &#39;&lt;code&gt;z&lt;/code&gt;&#39; from the example above.&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 my-2 space-x-2 md:grid-cols-2&#34;&gt;
    &lt;input type=&#34;button&#34; value=&#34;Print Globals&#34; id=&#34;printGlobals&#34; class=&#34;col-span-1 p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
    &lt;input type=&#34;button&#34; value=&#34;Make Python Variable&#34; id=&#34;makeObject&#34; class=&#34;col-span-1 p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;w-full col-span-2 bg-blue-200 border-2 border-blue-700&#34;&gt;
    &lt;p class=&#34;text-sm italic text-blue-700&#34;&gt;#globals:&lt;/p&gt;
    &lt;div id=&#34;globals&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;makeNewObjects.py&#34;&gt;&lt;/py-script&gt;
&lt;script src=&#34;showGlobalsButton.js&#34;&gt;&lt;/script&gt;</description>
      &lt;
    </item>
    
  </channel>
</rss>