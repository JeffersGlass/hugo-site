<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>anvil on Jeff Glass</title>
    <link>https://jeff.glass/tags/anvil/</link>
    <description>Recent content in anvil on Jeff Glass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 May 2024 09:49:41 -0500</lastBuildDate><atom:link href="https://jeff.glass/tags/anvil/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>py.space</title>
      <link>https://jeff.glass/post/pyspace/</link>
      <pubDate>Sat, 18 May 2024 09:49:41 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyspace/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I had a lovely chat at on the floor at PyCon US with Ian Davies at &lt;a href=&#34;https://anvil.works/&#34;&gt;Anvil&lt;/a&gt;, and specifically their newly launch &lt;a href=&#34;https://py.space&#34;&gt;py.space&lt;/a&gt; product. In short - it&#39;s a stripped down/streamlined version of Anvil that&#39;s being offered free to users to write online Python applications.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is going to be just my lab notebook as a stumble through the product for 45 minutes before the next talks. Ian demo&#39;d a bunch of their features to embed Python inside webpages, and as you can imagine, that&#39;s something I value! So let&#39;s see how it works in the wild&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This isn&#39;t an ad, and I hope it doesn&#39;t come off as one. I&#39;m just flush with PyCon exciting and looking to try things out. So many of us have identified both web and Python as the most popular platforms of the future, and I&#39;m always game to try out another one.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Getting Started&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;A welcome page with a &#39;get started&#39; button is always welcome:&lt;/p&gt;
&lt;img class=&#34;post-img&#34; src=&#34;intro.png&#34; alt=&#34;A screenshot of the py.space homepage showing a &#39;get started&#39; button&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;On the login page, py.space describes itself as &#34;An online space for writing, running and deploying Python scripts and APIs.&#34; The API&#39;s note is curious, and not sometime I think I&#39;ve seen made available in other web-python-IDE&#39;s of this type.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;On registering via GitHub, you&#39;re asked to choose a username. I&#39;ll be &lt;code&gt;@JeffGlass&lt;/code&gt;, I suppose.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The first thing that pops up is a section asking &#34;What do you Want to Build?&#34;, and offers Script, API, and GUI as options. There&#39;s also some featured examples.&lt;/p&gt;
&lt;img class=&#34;post-img&#34; src=&#34;whatdoyouwanttobuild.png&#34; alt=&#34;A screenshot of py.space showing the section &#39;What do you Want to Build&#39; and offering three options.&#34;&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Scripts&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s try making a Script. Clicking that button brings up a pop-up code editor - looks like it&#39;s &lt;a href=&#34;https://codemirror.net/&#34;&gt;CodeMirror&lt;/a&gt; under the hood, which &lt;a href=&#34;https://docs.pyscript.net/2024.5.2/user-guide/editor/&#34;&gt;PyScript also loves&lt;/a&gt;.  The rest of the user interface is quite minimal - Run and Schedule buttons, packages and secrets tabs, a private/public togger, sharing, settings, and help.&lt;/p&gt;
&lt;img class=&#34;post-img&#34; src=&#34;helloworld.png&#34; alt=&#34;The anvil code editor showing &#39;print(Hello, world!&#39;).&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s try running the provided &lt;code&gt;print(&#34;Hello, world!&#34;)&lt;/code&gt; code:&lt;/p&gt;
&lt;img class=&#34;post-img&#34; src=&#34;output.png&#34; alt=&#34;&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;After taking 8-10 seconds with the run button saying &#34;Launching&#34;, we see the output in a new pane at the bottom of the editor. A second execution took about a quarter of a second - so something special must be initializing the first time you run a project.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s try importing some packages. I know very little about Anvil and it&#39;s packaging model, so let&#39;s see what we can learn.&lt;/p&gt;
&lt;img class=&#34;post-img&#34; src=&#34;packages.png&#34; alt=&#34;&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;The packages pane has fields for &lt;code&gt;package&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt;, or &lt;span class=&#34;italic&#34;&gt;edit requirements.txt directly&lt;/span&gt;, which is an interesting option. I wonder if can point to dev packages on test.pypi.org? Typing in my favorite testing packages, &lt;a href=&#34;https://github.com/Textualize/rich&#34;&gt;rich&lt;/a&gt;, Anvil brings up a list of versions which seems up to date - so either it&#39;s really querying PyPI or its internal mirroring/compatibility is handling it well. Let&#39;s use the latest version.&lt;/p&gt;
&lt;img class=&#34;post-img&#34; src=&#34;richversions.png&#34; alt=&#34;&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;It took about 45 seconds of &#34;Building&#34; before the installation process was complete - and in the middle of it, an interesting security warning popped up. Not sure if that&#39;s something generated on the Anvil side or from PyPI or what, but it&#39;s an interesting touch.&lt;/p&gt;
&lt;img src=&#34;security.png&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;The code does indeed run! Looks like there&#39;s not support for terminal formmatting commands, but I that&#39;s very reasonable - something like a fully &lt;a href=&#34;https://xtermjs.org/&#34;&gt;xterm.js&lt;/a&gt; is a bit heavy for this application. It does seem like the packages pane visually bleeds into the input pane - I&#39;ve pinged the py.space forum about that, assuming its an ok place to report bugs.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One of the things Ian showed off as we were chatting this morning is the embedding feature... so let&#39;s try that out! Here&#39;s the code above embedded in my site:&lt;/p&gt;
&lt;script src=&#34;https://py.space/embed/g/HQD5BNPM6C5Q4L7Z.js&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m hoping that will appear for most people, but in case it doesn&#39;t (or as a historical record in case it changes later), here&#39;s what I see:&lt;/p&gt;
&lt;img src=&#34;embedded.png&#34; alt=&#34;&#34; class=&#34;post-img w-1/2&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah, so what appears is the full code snippet, with a similar nice UI and such. The action is Fork to Run, which is interesting... so there&#39;s not a way for viewers of this block to actually &lt;span class=&#34;italic&#34;&gt;run&lt;/span&gt; this code directly on my site - they&#39;d need to fork it to their own (free) Anvil account in order to run it. This takes me back to a lot of the conversations that were had around &lt;a href=&#34;https://pyscript.com&#34;&gt;PyScript.com&lt;/a&gt; (PSDC) - I&#39;m not a part of that team, but naturally I know a bunch of the players. Where PSDC offers an option for &lt;span class=&#34;italic&#34;&gt;any&lt;/span&gt; user to run your code and then fork it if they want, in this context forking is required. Not that either is better or worse, just different models of what code sharing means.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;API&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s go back to the start page and try building an API&lt;/p&gt;
&lt;img src=&#34;apistart.png&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;We get a very similar editor, this time pre-populated with what I assume is boilerplate Anvil server code. I also see there&#39;s a URL at the bottom: &lt;a href=&#34;https://clumsy-nervous-handle.anvil.app/hello&#34;&gt;https://clumsy-nervous-handle.anvil.app/hello&lt;/a&gt;, which looks like an auto-generated prefix. Just hitting that URL in my browser at this point does give me a &lt;code&gt;{&#34;hello&#34;:&#34;world&#34;}&lt;/code&gt; response - so they API is live from the time of creation! That&#39;s pretty slick.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s try adding another endpoint that doubles the number we feed it. It&#39;s not obvious from the &lt;a href=&#34;https://py.space/docs/tutorials/api&#34;&gt;py.space docs&lt;/a&gt; how we do this, but my understanding from Ian is that all of these are full Anvil apps under the hood, so let&#39;s see if the &lt;a href=&#34;https://anvil.works/docs/server&#34;&gt;Anvil Docs&lt;/a&gt; answer that question. And yes! Not too complicated:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, hitting &lt;a href=&#34;https://clumsy-nervous-handle.anvil.app/double/10&#34;&gt;&lt;code&gt;https://clumsy-nervous-handle.anvil.app/double/10&lt;/code&gt;&lt;/a&gt; gives me back &lt;code&gt;{&#34;result&#34;:20}&lt;/code&gt; as desired. Instant API online... very very cool.&lt;/p&gt;
&lt;script src=&#34;https://py.space/embed/g/6ACLXGXUEHSZYL5F.js&#34;&gt;&lt;/script&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;GUI?&lt;/h2&gt;
&lt;img src=&#34;gui.png&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;The GUI editor looks very exciting... and from Ian&#39;s demo, has more features than I can explored before the next open space at the con. So that&#39;ll have to wait till another time.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here ends the stream of consciousness. Hope all are having a great pycon!&lt;/p&gt;</description>
      &lt;
    </item>
    
  </channel>
</rss>