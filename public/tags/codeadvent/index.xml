<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>codeadvent on Jeff Glass</title>
    <link>https://jeff.glass/tags/codeadvent/</link>
    <description>Recent content in codeadvent on Jeff Glass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Nov 2023 07:23:16 -0600</lastBuildDate><atom:link href="https://jeff.glass/tags/codeadvent/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advent of Code 2023</title>
      <link>https://jeff.glass/post/advent-of-code-2023/</link>
      <pubDate>Thu, 30 Nov 2023 07:23:16 -0600</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2023/</guid>
      <description>&lt;script src=&#34;mini-coi.js&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;Where does the time go?? Surely it can&#39;t be time for another &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt; challenge? Alas, it&#39;s once again December, which means 25 more mini coding challenges for the next twenty five days. This will be my sixth year particpating in advent of code, and my fourth writing about it - you can check out my &lt;a href=&#34;tags/codeadvent/&#34;&gt;previous years&#39; Advent of Code posts&lt;/a&gt; as well, if you like.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As in years before, I&#39;ll be writing my solutions to run in &lt;a href=&#34;https://pyscript.net&#34;&gt;PyScript&lt;/a&gt;  right here in the browser window. Feel free to enter your own AoC input and test your answers right here on this page! All the computations run in your own browser window, so no AoC data is transmitted to me or any server, and there&#39;s zero overhead on my end, so test as many times as you like.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Personally, I have three goals in presenting these solutions: learn form the challenges themselves, dogfood the use of PyScript to learn where our gaps in functionality are, and demonstrate the use of Python in the browser. Here&#39;s hoping we can achieve all three.&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;w-auto pt-2 pb-4 pl-2 mr-2 -ml-2 align-top bg-gray-200&#34;&gt;
    &lt;p class=&#34;text-2xl relative-anchor&#34; id=&#34;toc&#34;&gt;Table of Contents&lt;/p&gt;
    &lt;div class=&#34;ml-8 font-semibold&#34; id=&#34;toc-contents&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day0&#39;&gt;Day 0: Testing the Machinery&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;As with past years, I&#39;m making use of Hugo&#39;s templating system to allow me to quickly write and share each day&#39;s code. The setup will look much like this, with a brief explanation here, the code below, and an option to run live demos. The &lt;code&gt;get_input&lt;/code&gt; function handles getting input from the textarea or file upload.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day0-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day0-upload-input&#34; name=&#34;day0-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day0-run-btn&#34; py-click=&#34;main_day0&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day0-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day0-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day0/main.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day0-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day0=&#34;#day0-code&#34; class=&#34;active tab code-title&#34;&gt;day0.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day0-code&#34; data-tab-content-day0 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day0&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day0&amp;#34;&lt;/span&gt;)
    display(data, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day0-output&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday0 = document.querySelectorAll(&#39;[data-tab-target-day0]&#39;)
    const tabContentsday0 = document.querySelectorAll(&#39;[data-tab-content-day0]&#39;)

    tabsday0.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay0
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday0.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday0.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day1_1&#39;&gt;Day 1: Trebuchet?! (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;In most years, the first day&#39;s problems aren&#39;t too complicated - they tend to focus on reading input and parsing strings, and this year&#39;s is no exception.&lt;/p&gt;&lt;p&gt;I opted to pursue a solution purely using regex, since it&#39;s always good to stretch those muscles early on in Advent of Code. I couldn&#39;t quite find the right pattern to match &lt;span class=&#34;italic&#34;&gt;both&lt;/span&gt; the case where there are are multiple numerals in the input line or only one, so I cheated a bit and split them into two separate cases.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;Ultimately, this solution probably could have looked more like the solution to part 2 - using &lt;code&gt;re.finditer()&lt;/code&gt; to find all the digits in a given line, then sorting that collection to find the earliest and latest digits, but it felt good to refresh on regex matching.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day1_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day1_1-upload-input&#34; name=&#34;day1_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day1_1-run-btn&#34; py-click=&#34;main_day1_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day1_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day1_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day1/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day1_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day1_1=&#34;#day1_1-code&#34; class=&#34;active tab code-title&#34;&gt;day1_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day1_1-code&#34; data-tab-content-day1_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day1_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[a-zA-Z]*(?P&amp;lt;first&amp;gt;\d)\w*(?P&amp;lt;last&amp;gt;\d)[a-zA-Z]*&amp;#34;&lt;/span&gt;)
    single_digit_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[a-zA-Z]*(?P&amp;lt;first&amp;gt;\d)\w*&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(pattern, line)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; match: match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(single_digit_pattern, line)
        number &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (first&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;))) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;groupdict() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(first))
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; number

    display(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-output&amp;#34;&lt;/span&gt;)     &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday1_1 = document.querySelectorAll(&#39;[data-tab-target-day1_1]&#39;)
    const tabContentsday1_1 = document.querySelectorAll(&#39;[data-tab-content-day1_1]&#39;)

    tabsday1_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay1_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday1_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday1_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day1_2&#39;&gt;Day 1: Trebuchet?! (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&#34;The strings which represent a given numeral&#34; &lt;span class=&#34;italic&#34;&gt;feels&lt;/span&gt; like something that should be included in Python&#39;s &#39;batteries included&#39;, but as far as I can tell, it isn&#39;t. Rather than pull something in from PYPI, I created a tiny dictionary matching numerals to strings. After finding all the literal numerals and &#39;spelled-out&#39; numerals in each line, we find the earliest and latest match, grab their value with the tiny &lt;code&gt;get_value()&lt;/code&gt; function, and concatenate them to get the value of that line.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day1_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day1_2-upload-input&#34; name=&#34;day1_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day1_2-run-btn&#34; py-click=&#34;main_day1_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day1_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day1_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day1/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day1_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day1_2=&#34;#day1_2-code&#34; class=&#34;active tab code-title&#34;&gt;day1_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day1_2-code&#34; data-tab-content-day1_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

patterns &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;four&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;five&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;six&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;seven&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;eight&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;nine&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;,
    }

digit_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;\d&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_value&lt;/span&gt;(s):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(s)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; patterns[s]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day1_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        line_matches &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pattern &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; patterns:
            line_matches&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;extend(re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(pattern, line))

        line_matches&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;extend(re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(digit_pattern, line))
        line_matches&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sort(key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; m: m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start())
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; get_value(line_matches[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; get_value(line_matches[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;))

    display(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_2-output&amp;#34;&lt;/span&gt;)  

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day1_2()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday1_2 = document.querySelectorAll(&#39;[data-tab-target-day1_2]&#39;)
    const tabContentsday1_2 = document.querySelectorAll(&#39;[data-tab-content-day1_2]&#39;)

    tabsday1_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay1_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday1_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday1_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day2_1&#39;&gt;Day 2: Cube Conundrum (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Happy once again that I picked up the regex track early this year! The specific syntax around things like named group, non-capturing groups, &lt;code&gt;findall&lt;/code&gt; vs &lt;code&gt;finditer&lt;/code&gt; is easy to forget if you haven&#39;t touched it in a few months.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;Today&#39;s challenge was pretty simple - iterating over lines of input text and, based on some condition, adding a sentinel number to a given total. There&#39;s probably a cleaner way to break out of that nest-inner-loop than using a flag, but it works.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day2_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day2_1-upload-input&#34; name=&#34;day2_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day2_1-run-btn&#34; py-click=&#34;main_day2_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day2_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day2_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day2/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day2_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day2_1=&#34;#day2_1-code&#34; class=&#34;active tab code-title&#34;&gt;day2_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day2_1-code&#34; data-tab-content-day2_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Getting local input&amp;#34;&lt;/span&gt;)    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
    

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day2_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day2_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    game_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Game (?P&amp;lt;day_number&amp;gt;\d+)&amp;#34;&lt;/span&gt;)
    color_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(?P&amp;lt;quantity&amp;gt;\d+) (?P&amp;lt;color&amp;gt;(?:red)|(?:green)|(?:blue))&amp;#34;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        id_value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(game_pattern, line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day_number&amp;#34;&lt;/span&gt;))
        pulls &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;)
        valid_line &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pulls:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; valid_line: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
            colors &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(color_pattern, p)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; colors:
                color, quant &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;quantity&amp;#39;&lt;/span&gt;))
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (color &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; quant &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (color &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; quant &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;13&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (color &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; quant &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;): 
                    valid_line &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
                    id_value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;                    
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; id_value
    
    display(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day2_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Only runs if not running in the browser&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules: 
    main_day2_1()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday2_1 = document.querySelectorAll(&#39;[data-tab-target-day2_1]&#39;)
    const tabContentsday2_1 = document.querySelectorAll(&#39;[data-tab-content-day2_1]&#39;)

    tabsday2_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay2_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday2_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday2_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day2_2&#39;&gt;Day 2: Cube Conundrum (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;The second part of today&#39;s challenge isn&#39;t too different from the first; we iterate over all the parts of each line of the input and, for each line, calculate the appropriate product of the minmum number of cubes of each color.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In both parts of today&#39;s challenge, I&#39;ve found it useful to run my code locally for testing before popping it into PyScript. You can see my strategy for this in both parts of today&#39;s solution - similar to what Pyodide recommends, we can check if the &lt;code&gt;js&lt;/code&gt; module is in &lt;code&gt;sys.modules&lt;/code&gt;. If it is, we can assume we&#39;re running in PyScript/in the Browser; if not, we&#39;re likely in &#34;normal&#34; desktop python.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;The need to override &lt;code&gt;display()&lt;/code&gt; was the original reason I had implemented the &lt;code&gt;output&lt;/code&gt; attribute of PyScript tags in previous releases of PyScript... perhaps I&#39;ll want to do that again.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day2_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day2_2-upload-input&#34; name=&#34;day2_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day2_2-run-btn&#34; py-click=&#34;main_day2_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day2_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day2_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day2/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day2_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day2_2=&#34;#day2_2-code&#34; class=&#34;active tab code-title&#34;&gt;day2_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day2_2-code&#34; data-tab-content-day2_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
    
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day2_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day2_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    color_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(?P&amp;lt;quantity&amp;gt;\d+) (?P&amp;lt;color&amp;gt;(?:red)|(?:green)|(?:blue))&amp;#34;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        max_red, max_green, max_blue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

        colors &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(color_pattern, line)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; colors:
            color, quant &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;quantity&amp;#39;&lt;/span&gt;))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; color &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; quant &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_red: max_red &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; quant
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; color &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; quant &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_green: max_green &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; quant
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; color &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; quant &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_blue: max_blue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; quant     
        power &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; max_red &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; max_green &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; max_blue
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; power
    
    display(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day2_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Only runs if not running in the browser&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:    
    main_day2_2()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday2_2 = document.querySelectorAll(&#39;[data-tab-target-day2_2]&#39;)
    const tabContentsday2_2 = document.querySelectorAll(&#39;[data-tab-content-day2_2]&#39;)

    tabsday2_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay2_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday2_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday2_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day3_1&#39;&gt;Day 3: Gear Ratios (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Advent of Code has a history of requiring the parsing of data in grids, and this year we&#39;re starting early. While it&#39;s tempting to build a data structure that represents each position in the grid and is querable, for sparsely populated grid I&#39;ve ususally found it&#39;s easier and faster to build a &lt;code&gt;set&lt;/code&gt; of the relevant points and query for presence in that set. This handles a lot of edge cases automatically - like in this case, a &lt;code&gt;part number&lt;/code&gt; being adjacent to the edge of the grid.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Once we have a collection of the symbols and numbers (&#39;parts&#39;) in the input, we can iterate over each number and determine whether any of the coordinates corresponding to &#39;symbols&#39; are adjacent to their positions, then sum them up.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day3_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day3_1-upload-input&#34; name=&#34;day3_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day3_1-run-btn&#34; py-click=&#34;main_day3_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day3_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day3_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day3/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day3_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day3_1=&#34;#day3_1-code&#34; class=&#34;active tab code-title&#34;&gt;day3_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day3_1-code&#34; data-tab-content-day3_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; namedtuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; List

position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;line&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;char&amp;#39;&lt;/span&gt;])

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Number&lt;/span&gt;:
    value: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    line: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    start: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    end: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day3_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    symbols &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
    part_numbers: List[Number] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []

    symbol_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[^0123456789.]&amp;#34;&lt;/span&gt;)
    number_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(\d+)&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(symbol_pattern, line):
            symbols&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add((line_index, s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start()))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(number_pattern, line):
            part_numbers&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Number(
                    value&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group()),
                    line &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line_index,
                    start &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start(),
                    end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end()))
    
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; number &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; part_numbers:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;line, number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; symbols &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;line, number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; symbols:
            &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;line&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; symbols &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt;\
            (number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;line&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; symbols:
                &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;
    display(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Only runs if not running in the browser&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:   
    main_day3_1()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday3_1 = document.querySelectorAll(&#39;[data-tab-target-day3_1]&#39;)
    const tabContentsday3_1 = document.querySelectorAll(&#39;[data-tab-content-day3_1]&#39;)

    tabsday3_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay3_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday3_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday3_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day3_2&#39;&gt;Day 3: Gear Ratios (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I do like dataclasses - having autocomplete on the handful of elements in a simple &#34;data-like&#34; object is an easy way to prevent confusion and typos. You&#39;ll see on this day&#39;s problem I&#39;ve actually combined both &lt;code&gt;Dataclasses&lt;/code&gt; and &lt;code&gt;namedtuples&lt;/code&gt;; the latter being easier to use as the keys of a dictionary. But if there&#39;s any Mutable data - in my case, a flag which helps track whether a specific gear has seen zero, one, or two or more times already - dataclass is quite useful.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With that change to the parsing, the solution is to again iterate over all of the numbers, find which correspond to the given criteria, and sum them up.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day3_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day3_2-upload-input&#34; name=&#34;day3_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day3_2-run-btn&#34; py-click=&#34;main_day3_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day3_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day3_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day3/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day3_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day3_2=&#34;#day3_2-code&#34; class=&#34;active tab code-title&#34;&gt;day3_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day3_2-code&#34; data-tab-content-day3_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;89
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; namedtuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; List, Dict

position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;line&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;char&amp;#39;&lt;/span&gt;])

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Gear&lt;/span&gt;:
    value: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    seen_once: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt; 

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Number&lt;/span&gt;:
    value: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    line: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    start: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    end: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processGear&lt;/span&gt;(g: Gear, part_number: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;):
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;_summary_
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        g (Gear): The gear currently being processed
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        part_number (int): The part number being processed
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Returns: The value to be added to the running sum, if any
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; g&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;seen_once:
        g&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; part_number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        g&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;seen_once &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Seen twice&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; g&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; g&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: 
            g&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; part_number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
            g&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;seen_once &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day3_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    gears: Dict[position: Gear] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {}
    part_numbers: List[Number] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []

    gear_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[*]&amp;#34;&lt;/span&gt;)
    number_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(\d+)&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(gear_pattern, line):
            gears[position(line&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;line_index, char&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start())] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Gear()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(number_pattern, line):
            part_numbers&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Number(
                    value&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group()),
                    line &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line_index,
                    start &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start(),
                    end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end()))
    
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; number &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; part_numbers:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pos &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [(number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;line, number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# left of number&lt;/span&gt;
                    (number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;line, number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end), &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# right of number&lt;/span&gt;
                    &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;((number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;line&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)), &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# above number&lt;/span&gt;
                    &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;((number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;line&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, number&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# below number&lt;/span&gt;
                    ]:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; pos &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; gears:
                &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; processGear(gears[pos], part_number&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;number)
    
    display(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_2-output&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Only runs if not running in the browser&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:  
    main_day3_2()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday3_2 = document.querySelectorAll(&#39;[data-tab-target-day3_2]&#39;)
    const tabContentsday3_2 = document.querySelectorAll(&#39;[data-tab-content-day3_2]&#39;)

    tabsday3_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay3_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday3_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday3_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day4_1&#39;&gt;Day 4 (Part 1): Scratchcards&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Python&#39;s set operations really shine here - one we&#39;ve parsed each line of input into its winning numbers and scratchcard numbers, we can use &lt;code&gt;isdisjoint()&lt;/code&gt; to determine if there&#39;s any overlap between the two sets, and and &lt;code&gt;winning_numbers &amp; my_numbers&lt;/code&gt; to find it if it is. From there, we calculate 2 to the power of the length of this set of numbers, and sum up those values.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day4_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day4_1-upload-input&#34; name=&#34;day4_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day4_1-run-btn&#34; py-click=&#34;main_day4_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day4_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day4_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day4/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day4_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day4_1=&#34;#day4_1-code&#34; class=&#34;active tab code-title&#34;&gt;day4_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day4_1-code&#34; data-tab-content-day4_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

card_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Card (\d+)&amp;#34;&lt;/span&gt;)
number_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;\d+&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day4_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day4_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        _, numbers_section &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)
        winning_numbers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(number_pattern, numbers_section&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))
        my_numbers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(number_pattern, numbers_section&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]))
        value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; winning_numbers&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;isdisjoint(my_numbers) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(winning_numbers &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; my_numbers) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; value

    display(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day4_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day4_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday4_1 = document.querySelectorAll(&#39;[data-tab-target-day4_1]&#39;)
    const tabContentsday4_1 = document.querySelectorAll(&#39;[data-tab-content-day4_1]&#39;)

    tabsday4_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay4_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday4_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday4_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day4_2&#39;&gt;Day 4 (Part 2): Scratchcards&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I like to look at the Advent of Code subreddit after finishing a day&#39;s problems, to look at alternate solutions and see what pitfulls I shared/avoided. In this case, most of Day 4 Part 2&#39;s solutions talked about using recurssion, which honestly haden&#39;t occured to me. Since each Scratchcard can only propogate copies to higher indices, my impulse was to just walk the data once and pile up the additional scratchcards with each additional index processed, in a functional-programming way. I do think this is faster.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day4_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day4_2-upload-input&#34; name=&#34;day4_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day4_2-run-btn&#34; py-click=&#34;main_day4_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day4_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day4_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day4/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day4_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day4_2=&#34;#day4_2-code&#34; class=&#34;active tab code-title&#34;&gt;day4_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day4_2-code&#34; data-tab-content-day4_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

card_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Card (\d+)&amp;#34;&lt;/span&gt;)
number_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;\d+&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day4_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day4_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    card_counts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        _, numbers_section &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)
        winning_numbers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(number_pattern, numbers_section&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))
        my_numbers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(number_pattern, numbers_section&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(winning_numbers &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; my_numbers)&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
            card_counts[i &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; m] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; card_counts[i]

    display(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(card_counts), target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day4_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day4_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday4_2 = document.querySelectorAll(&#39;[data-tab-target-day4_2]&#39;)
    const tabContentsday4_2 = document.querySelectorAll(&#39;[data-tab-content-day4_2]&#39;)

    tabsday4_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay4_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday4_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday4_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day5_1&#39;&gt;Day 5 (Part 1): If You Give A Seed A Fertilizer&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;If programming is thinking-written-down, I find a significant amount of my thinking occurs in devising the data structure and object format to encapsulate a given problem. In this case, the &lt;code&gt;almanac_op&lt;/code&gt; function which applies a mapping rule to a given number. I tend to write out full docstrings for these &lt;span class=&#34;italic&#34;&gt;&#39;problem-critical&#39;&lt;/span&gt; code sections, and not worry about them for more procedural code like a main method.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One of the opporunties to stub your toe on a challenge like Day 5 Part 1 is remembering that, once you&#39;ve applied a mapping rule successfully to a given location, you need to skip the remainder of the rules and cary on to the next set of mappings immediately. Otherwise, you risk applying multiple rules from a single set, which is incorrect.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day5_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day5_1-upload-input&#34; name=&#34;day5_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day5_1-run-btn&#34; py-click=&#34;main_day5_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day5_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day5_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day5/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day5_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day5_1=&#34;#day5_1-code&#34; class=&#34;active tab code-title&#34;&gt;day5_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day5_1-code&#34; data-tab-content-day5_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Tuple

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;almanac_op&lt;/span&gt;(given: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, dest_start: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, source_start: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, length: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Takes an index of a location and applies the specified mapping rule to it
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        given (int): The starting location
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        dest_start (int): The starting index of the destination range
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        source_start (int): The starting index of the source range
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        length (int): The length of both ranges
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        int: The new location after the mapping
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; given &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; source_start &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; given &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; (source_start &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; length &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (given &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; source_start) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; dest_start
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; given


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day5_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1&amp;#34;&lt;/span&gt;)

    seeds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group()) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;\d+&amp;#34;&lt;/span&gt;, data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]
    map_sets &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)]
   
    &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;inf&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seed &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; seeds:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; map_set &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; map_sets:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; op &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; map_set:
                result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; almanac_op(seed, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(op[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(op[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(op[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]))
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; result &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; seed:
                    seed &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; result
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
            
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seed &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; seed

    display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;FINAL:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:  
    main_day5_1()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday5_1 = document.querySelectorAll(&#39;[data-tab-target-day5_1]&#39;)
    const tabContentsday5_1 = document.querySelectorAll(&#39;[data-tab-content-day5_1]&#39;)

    tabsday5_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay5_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday5_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday5_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day5_2&#39;&gt;Day 5 (Part 2): If You Give A Seed A Fertilizer&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I fell prey to a classic Advent of Code trick: &lt;span class=&#34;italic&#34;&gt;&#34;We see your Part 1 solution works for single numbers... now make it work for MILLIONS OF NUMBERS!&#34;&lt;/span&gt; Still, not too complicated of a solution, even if it did take me some time to work out the logic around which relationships of sources/destinations/ranges cause which effects to happen to the resulting ranges.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;There&#39;s also the possibility here to get stuck in the track of modifying a collection (say, the current list of ranges) while also iterating over that collection. The old &lt;code&gt;new_collection += result&lt;/code&gt;, &lt;code&gt;collection = new_collection&lt;/code&gt; pattern helps here.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;I&#39;m also leaving my &lt;code&gt;assert&lt;/code&gt; startments in at the end of this code, as they were hugely helpful in debugging my primary algorithm.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day5_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day5_2-upload-input&#34; name=&#34;day5_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day5_2-run-btn&#34; py-click=&#34;main_day5_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day5_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day5_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day5/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day5_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day5_2=&#34;#day5_2-code&#34; class=&#34;active tab code-title&#34;&gt;day5_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day5_2-code&#34; data-tab-content-day5_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; itemgetter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Tuple

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;almanac_op_range&lt;/span&gt;(seed_ranges, dest_start: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, source_start: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, length:&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Tuple[Tuple[Tuple[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]], Tuple[Tuple[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]]]:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Given a list of ranges as input, and a single mapping given by a starting
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    destination index, starting source index, and length, return a list of ranges
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    that have not been touched by this rule and a list of ranges that have been modified
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    by this rule
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        seed_ranges (_type_): _description_
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        dest_start (int): _description_
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        source_start (int): _description_
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        length (int): _description_
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Raises:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        ValueError: A troubleshooting step, to validate that the rules for processing
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        ranges cover all possible cases
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        List[Tuple[int, int]], List[Tuple[int, int]]: A list of untouched ranges, followe
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        by a list of ranges that had been moved
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    source_end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; source_start &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; length &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    dest_end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dest_start &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; length &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    untouched &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    moved &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; given &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; seed_ranges:
        given_start, given_end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; given[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], given[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;given = {given_start, given_end}, dest={dest_start, dest_end}, source={source_start, source_end}&amp;#34;)&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; given_end &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; source_start &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; given_start &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; source_end: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#outside of source range&lt;/span&gt;
            untouched&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(given)
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; given_start &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; source_start &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; given_end &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; source_end: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# given entirely within source range&lt;/span&gt;
            moved&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(((given_start &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; source_start &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; dest_start), (given_end &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; source_start &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; dest_start)))
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; given_start &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; source_start &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; given_end &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; source_end: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# given entirely surrounds source range&lt;/span&gt;
            untouched&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append((given_start, source_start&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))
            untouched&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append((source_end &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, given_end))
            moved&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append((dest_start, dest_end))
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; given_start &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; source_start &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; given_end &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; source_end: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# starts is within source, end isn&amp;#39;t&lt;/span&gt;
            moved&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append((given_start &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; source_start &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; dest_start,source_end&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;source_start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;dest_start))
            untouched&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append((source_end&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, given_end))

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; given_start &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; source_start &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; given_end &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; source_end: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# starts before source, ends inside&lt;/span&gt;
            untouched&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append((given_start, source_start &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))
            moved&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append((dest_start,given_end&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;source_start&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;dest_start))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Should never be here&amp;#34;&lt;/span&gt;)
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; untouched, moved

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day5_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_2&amp;#34;&lt;/span&gt;)

    seed_ranges &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(\d+) (\d+)&amp;#34;&lt;/span&gt;, data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]
    map_sets &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

    untouched &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; seed_ranges
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; map_set &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; map_sets:
        moved &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []  
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; op &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; map_set:
            untouched, new_moved &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; almanac_op_range(untouched, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(op[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(op[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(op[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]))
            moved&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;extend(new_moved)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; untouched: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If there&amp;#39;s no numbers that haven&amp;#39;t been mapped, no need to keep processing rules&lt;/span&gt;
        untouched&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;extend(moved)
        untouched &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(untouched))

    minimum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(r[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; untouched)

    display(minimum, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day5_2()

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Assertions used during testing, left in for interest&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; almanac_op_range(((&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;),), &lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ([(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)],[]) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#outside of source range&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; almanac_op_range([(&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;105&lt;/span&gt;)], &lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ([(&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;105&lt;/span&gt;)],[]) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#outside of source range&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; almanac_op_range([(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;)], &lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt;  ([(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;), (&lt;span style=&#34;color:#f60&#34;&gt;17&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;)], [(&lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;51&lt;/span&gt;)]) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# given entirely surrounds source range&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; almanac_op_range([(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;)], &lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;30&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ([],[(&lt;span style=&#34;color:#f60&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;65&lt;/span&gt;)]) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# given entirely within source range&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; almanac_op_range([(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;)], &lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ([(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;)], [(&lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;55&lt;/span&gt;)]) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# starts is within source, end isn&amp;#39;t&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; almanac_op_range([(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;)], &lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ([(&lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;)],[(&lt;span style=&#34;color:#f60&#34;&gt;55&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;59&lt;/span&gt;)]) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# starts before source, ends inside&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday5_2 = document.querySelectorAll(&#39;[data-tab-target-day5_2]&#39;)
    const tabContentsday5_2 = document.querySelectorAll(&#39;[data-tab-content-day5_2]&#39;)

    tabsday5_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay5_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday5_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday5_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day6_1&#39;&gt;Day 6 (Part 1): Day 6: Wait For It&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;The utility of grabbing numbers out of a list of text is now fully evident. It gracefully handles line endings, spaces, comma, etc. Not that I won&#39;t be back to (and indeed, already am using) &lt;code&gt;split()&lt;/code&gt; and friends, but the time regexes have saved on input so far has been enlightening.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day6_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day6_1-upload-input&#34; name=&#34;day6_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day6_1-run-btn&#34; py-click=&#34;main_day6_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day6_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day6_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day6/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day6_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day6_1=&#34;#day6_1-code&#34; class=&#34;active tab code-title&#34;&gt;day6_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day6_1-code&#34; data-tab-content-day6_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day6_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day6_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    races &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(
        (&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(d&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group()) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;\d+&amp;#34;&lt;/span&gt;, data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])), &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# times&lt;/span&gt;
        (&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(d&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group()) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;\d+&amp;#34;&lt;/span&gt;, data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]))  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# distances&lt;/span&gt;
        )

    prod &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; race &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; races:
        count &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        total_time, distance_goal &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; race
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; hold_time &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(total_time):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (total_time &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; hold_time) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; hold_time &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; distance_goal: count &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; 
        prod &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; count

    display(prod, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day6_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day6_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday6_1 = document.querySelectorAll(&#39;[data-tab-target-day6_1]&#39;)
    const tabContentsday6_1 = document.querySelectorAll(&#39;[data-tab-content-day6_1]&#39;)

    tabsday6_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay6_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday6_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday6_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day6_2&#39;&gt;Day 6 (Part 2): Day 6: Wait For It&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Having been bit yesterday, I was pretty confident that part 2 of day 6 would have a similar explosion in time/space requirements. And it did... only it doesn&#39;t seem to have mattered, as the &#39;naive&#39; solution here still runs in about a second. Just lucky I guess.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day6_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day6_2-upload-input&#34; name=&#34;day6_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day6_2-run-btn&#34; py-click=&#34;main_day6_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day6_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day6_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day6/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day6_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day6_2=&#34;#day6_2-code&#34; class=&#34;active tab code-title&#34;&gt;day6_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day6_2-code&#34; data-tab-content-day6_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day6_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day6_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    total_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(d&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;\d&amp;#39;&lt;/span&gt;, data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])))
    distance_goal &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(d&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;\d&amp;#39;&lt;/span&gt;, data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])))

    count &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; hold_time &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(total_time):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (total_time &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; hold_time) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; hold_time &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; distance_goal: count &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; 

    display(count, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day6_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day6_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday6_2 = document.querySelectorAll(&#39;[data-tab-target-day6_2]&#39;)
    const tabContentsday6_2 = document.querySelectorAll(&#39;[data-tab-content-day6_2]&#39;)

    tabsday6_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay6_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday6_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday6_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day7_1&#39;&gt;Day 7 (Part 1): Camel Cards&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;The complexity of the problems is ramping up at this point, if not quite the difficulty. Since today is ultimately a sorting problem, I was looking for a way to transform the input into a sortable form; by tranforming the &#34;face card&#34; labels (&#34;AKQJT&#34;) into Hexadeical characters with the matching rank, then evaluating the hand&#39;s strength using &lt;code&gt;collections.Counter&lt;/code&gt; and appending that as another Hex character to the front, the sorting is then straightforward.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day7_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day7_1-upload-input&#34; name=&#34;day7_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day7_1-run-btn&#34; py-click=&#34;main_day7_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day7_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day7_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day7/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day7_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day7_1=&#34;#day7_1-code&#34; class=&#34;active tab code-title&#34;&gt;day7_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day7_1-code&#34; data-tab-content-day7_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Counter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;score_lines_7_1&lt;/span&gt;(lines: Iterable[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(lines))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;sort_lines_7_1&lt;/span&gt;(lines: Iterable[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(lines, key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rank_7_1)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;rank_7_1&lt;/span&gt;(line):
    hand &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    counts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Counter(hand)
    vals &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;((counts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;values()), reverse&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; vals &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;,): rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 5 of a kind&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; vals &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;): rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 4 of a kind&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; vals &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;): rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Full House&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; vals &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;): rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Three of a kind&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; vals &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;): rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Two Pair&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; vals &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;): rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt;

    hand_as_hex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rank&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;remap_card_names_7_1(hand)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(hand_as_hex, base&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;remap_card_names_7_1&lt;/span&gt;(hand):
    trans &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maketrans(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;AKQJT&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;FEDCB&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; hand&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;translate(trans)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day7_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; score_lines_7_1(sort_lines_7_1(data))
    
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day7_1()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday7_1 = document.querySelectorAll(&#39;[data-tab-target-day7_1]&#39;)
    const tabContentsday7_1 = document.querySelectorAll(&#39;[data-tab-content-day7_1]&#39;)

    tabsday7_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay7_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday7_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday7_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day7_2&#39;&gt;Day 7 (Part 2): Camel Cards&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;A relatively benign change to part one, invovling adjusting the ranking algorithm to incorporate Jokers and adjusting the translation table. One of the (minor) pain points in using PyScript is that if you&#39;re using main-thread tags, you get exactly on interpreter and one global namespace, so name collisions across multiple problems are a given. Hence the clunky names in both parts of this problem.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;Perhaps I should switch to &lt;code&gt;worker&lt;/code&gt; tags...&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day7_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day7_2-upload-input&#34; name=&#34;day7_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day7_2-run-btn&#34; py-click=&#34;main_day7_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day7_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day7_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day7/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day7_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day7_2=&#34;#day7_2-code&#34; class=&#34;active tab code-title&#34;&gt;day7_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day7_2-code&#34; data-tab-content-day7_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Counter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; itemgetter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

pat &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;\d+&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;score_lines_7_2&lt;/span&gt;(lines: Iterable[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Take in a list of input sorted by rank, and return
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    the score required by the pizzle
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        lines (Iterable[str]): A sorted Iterable of input lines
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        _type_: _description_
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(lines))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;sort_lines_7_2&lt;/span&gt;(lines: Iterable[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(lines, key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rank_7_2)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;rank_7_2&lt;/span&gt;(line):
    hand &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; hand &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;JJJJJ&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;F11111&amp;#34;&lt;/span&gt;, base&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;)

    counts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Counter(hand)
    vals &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(s) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(counts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;items(), key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;itemgetter(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), reverse&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move count of jokers to the next-most-common card&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; vals[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;: vals[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; vals[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: vals[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; counts[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt;]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Find the count that corresponds to jokers, and remove it&lt;/span&gt;
    j_items &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; vals &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; i[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt;]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; j_items:
        vals&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(j_items[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
    
    vals &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;(v[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; vals)


    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; vals &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;,): rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 5 of a kind&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; vals &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;): rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 4 of a kind&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; vals &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;): rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Full House&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; vals &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;): rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Three of a kind&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; vals &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;): rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Two Pair&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; vals &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;): rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:rank &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt;
    
    new_card &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rank &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; remap_card_names_7_2(hand)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(new_card, base&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;remap_card_names_7_2&lt;/span&gt;(hand):
    trans &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maketrans(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;AKQJT&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;FED1B&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; hand&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;translate(trans)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day7_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; sort_lines_7_2(data)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(line)
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; score_lines_7_2(data)

    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day7_2()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday7_2 = document.querySelectorAll(&#39;[data-tab-target-day7_2]&#39;)
    const tabContentsday7_2 = document.querySelectorAll(&#39;[data-tab-content-day7_2]&#39;)

    tabsday7_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay7_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday7_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday7_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day8_1&#39;&gt;Day 8 (Part 1): Haunted Wasteland&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;We&#39;ve seen challenges like this in previous years&#39; advents of code, and I suspect we&#39;ll see more like it this year. The input is a list of transformations on some input point, as indexed by some other part of the index. The only real trick is to make sure you&#39;re starting and ending points correctly identified; with Python&#39;s &lt;code&gt;str.startswith()&lt;/code&gt; and &lt;code&gt;str.endswith()&lt;/code&gt;, this is pretty trivial.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day8_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day8_1-upload-input&#34; name=&#34;day8_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day8_1-run-btn&#34; py-click=&#34;main_day8_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day8_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day8_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day8/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day8_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day8_1=&#34;#day8_1-code&#34; class=&#34;active tab code-title&#34;&gt;day8_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day8_1-code&#34; data-tab-content-day8_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; cycle
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;:
    left: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    right: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day8_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;([A-Z]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{3}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;) = \(([A-Z]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{3}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;), ([A-Z]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{3}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;)\)&amp;#34;&lt;/span&gt;)

    turns &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cycle(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip())
    node_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(pattern, line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
                 Instruction(left&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;), right&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;:] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (m &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(pattern, line))}
    
    steps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    loc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;AAA&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; loc &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;ZZZ&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        next_step &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; node_data[loc]
        direction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(turns)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;: loc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; next_step&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;R&amp;#39;&lt;/span&gt;: loc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; next_step&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;right
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Direction must be L or R&amp;#34;&lt;/span&gt;)

        steps&lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; steps
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day8_1()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday8_1 = document.querySelectorAll(&#39;[data-tab-target-day8_1]&#39;)
    const tabContentsday8_1 = document.querySelectorAll(&#39;[data-tab-content-day8_1]&#39;)

    tabsday8_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay8_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday8_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday8_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day8_2&#39;&gt;Day 8 (Part 2): Haunted Wasteland&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;The niave solution here would be to simply set up an array of locations to track, and let them all run for a long time until they all simultaneously were on locations that end in &#39;Z&#39;. However, with the ghosts having periods that are large and co-prime, the resulting overall period can (and in my case, is) over 14 digits long.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;The solution is to recognize that you can identify when each ghost has reached it&#39;s &#39;destination&#39; (location that ends in &#39;Z&#39;) to find the period of that ghost. Then, the overall period is the least-common-multiple of all the ghosts&#39; periods. Again, thanks to Python 3.9&#39;s addition of &lt;code&gt;math.lcm&lt;/code&gt;, this is straightforward.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day8_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day8_2-upload-input&#34; name=&#34;day8_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day8_2-run-btn&#34; py-click=&#34;main_day8_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day8_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day8_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day8/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day8_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day8_2=&#34;#day8_2-code&#34; class=&#34;active tab code-title&#34;&gt;day8_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day8_2-code&#34; data-tab-content-day8_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; cycle
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;math&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; prod, lcm
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;:
    left: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    right: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day8_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;([A-Z]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{3}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;) = \(([A-Z]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{3}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;), ([A-Z0-9]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{3}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;)\)&amp;#34;&lt;/span&gt;)

    turns &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cycle(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip())
    node_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(pattern, line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
                 Instruction(left&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;), right&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;:] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (m &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(pattern, line))}
    
    steps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    ghosts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [loc &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; loc &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node_data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;keys() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;)]
    periods &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(ghosts))]
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(ghosts)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;(p &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; periods): &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        direction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(turns)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, ghost &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(ghosts):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; ghost&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;): periods[index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; steps
            next_step &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; node_data[ghost]
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;: ghosts[index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; next_step&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;R&amp;#39;&lt;/span&gt;: ghosts[index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; next_step&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;right
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Direction must be L or R&amp;#34;&lt;/span&gt;)

        steps&lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(ghosts)&lt;/span&gt;

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lcm(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;periods)
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day8_2()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday8_2 = document.querySelectorAll(&#39;[data-tab-target-day8_2]&#39;)
    const tabContentsday8_2 = document.querySelectorAll(&#39;[data-tab-content-day8_2]&#39;)

    tabsday8_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay8_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday8_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday8_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day9_1&#39;&gt;Day 9 (Part 1): Mirage Maintenance&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I&#39;m sure there have been earlier days that could have been solved recursively. Indeed, my first catastrophic attempt for Day 5 Part 2 used some lazy recursion. But today&#39;s problem - repeatedly doing the same opeartion until hitting a base case - just screams for recurssion.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;In truth, the problem description essentially lays out the algorithm itself, step by step. All that&#39;s left is implementation.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day9_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day9_1-upload-input&#34; name=&#34;day9_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day9_1-run-btn&#34; py-click=&#34;main_day9_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day9_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day9_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day9/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day9_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day9_1=&#34;#day9_1-code&#34; class=&#34;active tab code-title&#34;&gt;day9_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day9_1-code&#34; data-tab-content-day9_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; pairwise
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_next_number_9_1&lt;/span&gt;(l: Iterable[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;(n &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; l): &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    diff_sequence &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairwise(l)]
    diff_sequence&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(get_next_number_9_1(diff_sequence))
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; l[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff_sequence[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] 

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; result


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day9_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group()) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-?\d+&amp;#34;&lt;/span&gt;, line)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day9_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)]
    
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(get_next_number_9_1(d) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)

    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day9_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day9_1()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday9_1 = document.querySelectorAll(&#39;[data-tab-target-day9_1]&#39;)
    const tabContentsday9_1 = document.querySelectorAll(&#39;[data-tab-content-day9_1]&#39;)

    tabsday9_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay9_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday9_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday9_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day9_2&#39;&gt;Day 9 (Part 2): Mirage Maintenance&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Part 2&#39;s solution is very similar to part 1&#39;s, with a change of indices, and appending to the start of our list-of-differences instead of the end.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;On most day&#39;s, there&#39;s a seductively easy solution to part 1 (usually brute force) that blows up for part 2. But I&#39;m struggling to see how the solutions to part 1 and part 2 would be significantly different... perhaps for a different choice of language, inserting a number at the beginning of a list is significantly more challenging?&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day9_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day9_2-upload-input&#34; name=&#34;day9_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day9_2-run-btn&#34; py-click=&#34;main_day9_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day9_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day9_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day9/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day9_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day9_2=&#34;#day9_2-code&#34; class=&#34;active tab code-title&#34;&gt;day9_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day9_2-code&#34; data-tab-content-day9_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; pairwise
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_previous_number&lt;/span&gt;(seq: Iterable[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;(n &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; seq): &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    diff_sequence &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairwise(seq)]
    diff_sequence&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;insert(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, get_previous_number(diff_sequence))
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; seq[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; diff_sequence[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] 

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; result


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day9_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group()) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;finditer(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-?\d+&amp;#34;&lt;/span&gt;, line)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day9_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)]
    
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(get_previous_number(d) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)

    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day9_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day9_2()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday9_2 = document.querySelectorAll(&#39;[data-tab-target-day9_2]&#39;)
    const tabContentsday9_2 = document.querySelectorAll(&#39;[data-tab-content-day9_2]&#39;)

    tabsday9_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay9_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday9_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday9_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day10_1&#39;&gt;Day 10 (Part 1): Pipe Maze&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Ah, back to processing input on a grid. As with earlier puzzles, I usually find it easier to create a running dictionary of &lt;code&gt;data[(row, column)]&lt;/code&gt; instead of tested dicts &lt;code&gt;data[row][column]&lt;/code&gt;, since then a single &lt;code&gt;(x, y) in data&lt;/code&gt; suffices to check for precence.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day10_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day10_1-upload-input&#34; name=&#34;day10_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day10_1-run-btn&#34; py-click=&#34;main_day10_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day10_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day10_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day10/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day10_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day10_1=&#34;#day10_1-code&#34; class=&#34;active tab code-title&#34;&gt;day10_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day10_1-code&#34; data-tab-content-day10_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;93
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; defaultdict
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; List

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;print_pipes&lt;/span&gt;(data, current, seen):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (l, c) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; current: rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[red]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/red]&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (l, c) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; seen: rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print((&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[green]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/green]&amp;#34;&lt;/span&gt;), end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; : rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[gray]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/gray]&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[white]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/white]&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day10_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data: List[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    _map_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {(line_num, char_num): char &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_num, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char_num, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line)}
    map_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, _map_data)

    start_line, _start_line_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(index, line)&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    start_char &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _start_line_data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print_pipes(data, [], [])&lt;/span&gt;

    north_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;))
    east_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))
    south_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;))
    west_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))

    instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;: north_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;: south_entry
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;: east_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;: west_entry
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt; : west_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt; : south_entry
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt; : east_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt; : south_entry
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt; : east_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt; : north_entry,
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt; : west_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt; : north_entry
        }
    }

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Find starting direction:&lt;/span&gt;
    adjacent_dirs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, (start_line, start_char &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; map_data[(start_line, start_char &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
                     (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, (start_line, start_char &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; map_data[(start_line, start_char &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, 
                     (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, (start_line &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, start_char)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; map_data[(start_line &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, start_char)] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, 
                     (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;, (start_line &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, start_char)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; map_data[(start_line &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, start_char)] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;]

    entry_dir, position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [a &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; adjacent_dirs &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; a][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    
    count &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(start_line, start_char), position]
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; (current_space&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; map_data[position]) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;:
        count &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        entry_dir, position_delta &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instructions[current_space][entry_dir]
        position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (position[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; position_delta[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], position[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; position_delta[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])
        seen&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(position)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print_pipes(data, position, seen)&lt;/span&gt;

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; count &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day10_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday10_1 = document.querySelectorAll(&#39;[data-tab-target-day10_1]&#39;)
    const tabContentsday10_1 = document.querySelectorAll(&#39;[data-tab-content-day10_1]&#39;)

    tabsday10_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay10_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday10_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday10_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day10_2&#39;&gt;Day 10 (Part 2): Pipe Maze&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Part two is a bit of a curveball, in that it asks you to find an entirely new property of the curve/data from part one. My initial impulse was to use something like a &lt;a href=&#34;https://en.wikipedia.org/wiki/Flood_fill&#34;&gt;flood fill&lt;/a&gt; algorith, but the second set of example problems show that some &#34;outside&#34; areas might be trapped and &#34;unfloodable&#34;.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;I ultimately used a version of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Point_in_polygon#Ray_casting_algorithm&#34;&gt;Raycasting/Jordan Curve&lt;/a&gt; agorithm, iterating along each line and determining whether a given position was &#34;inside&#34; or &#34;outside&#34; the curve. Whenenver a &lt;code&gt;|&lt;/code&gt; is crossed, one passes from inside to outside; corners are a little harder: &lt;code&gt;&#34;L----7&#34;&lt;/code&gt; and &lt;code&gt;&#34;F----J&#34;&lt;/code&gt; count as crossings, but &lt;code&gt;&#34;L----J&#34;&lt;/code&gt; and &lt;code&gt;&#34;F----7&#34;&lt;/code&gt; do not. Finally, the original starting point &lt;code&gt;S&lt;/code&gt; has to be replaced with the appropriate symbol before processing, or everything after it on that line may go sideways.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day10_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day10_2-upload-input&#34; name=&#34;day10_2-upload&#34;&gt;
                &lt;/div&gt;
                
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day10_2-run-btn&#34; py-click=&#34;main_day10_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;script type=&#34;py&#34; src=&#34;day10/viz_2.py&#34;  terminal worker &gt;&lt;/script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day10_2-viz-btn&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day10_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day10_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day10/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day10_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day10_2=&#34;#day10_2-code&#34; class=&#34;active tab code-title&#34;&gt;day10_2.py&lt;/li&gt;
        &lt;li data-tab-target-day10_2=&#34;#day10_2-viz-code&#34; class=&#34;tab code-title&#34;&gt;day10_2-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day10_2-code&#34; data-tab-content-day10_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; defaultdict
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; List

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;r&lt;/span&gt;(char: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;):
    table &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maketrans(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|-JLF7&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;│─┘└┌┐&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; char&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;translate(table)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;replace_char&lt;/span&gt;(s, index, char):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; s[:index] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; s[index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;print_pipes_10_2&lt;/span&gt;(data, current, seen):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (l, c) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; current: rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[red]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;r(char)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/red]&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (l, c) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; seen: rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print((&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[green]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;r(char)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/green]&amp;#34;&lt;/span&gt;), end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; : rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[gray]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;r(char)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/gray]&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[white]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;r(char)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/white]&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;count_inner_cells&lt;/span&gt;(data: List[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], loop: List[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]]):
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Count the number of cells contained within the loop. Starting
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    from the beginning of each line, and with a boolean is_inside set to false, 
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    each time we cross the loop, invert that boolean, and add any non-loop 
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    space to a running count. &amp;#34;|&amp;#34; spaces are an obvious crossing; corners
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    need to be handled specially.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        data List[str]: The original data,  split into lines
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        loop List[tuple[int, int]]: A list of (line, char_index) pairs comprising the loop.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        int: The number of cells inside the loop
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    count &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        is_inside &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
        crossing_start &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (l, c) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; loop:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;: is_inside &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; is_inside
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;): crossing_start &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; char
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; crossing_start &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; crossing_start &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;: is_inside &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; is_inside
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; crossing_start &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;: is_inside &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; is_inside
                    crossing_start &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; is_inside: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#rich.print(f&amp;#34;[{color}]{r(char)}[/{color}]&amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; is_inside: 
                    count &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
                    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#rich.print(f&amp;#34;[white on green]{char}[/white on green]&amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
                    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#rich.print(f&amp;#34;[red]{char}[/red]&amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;&amp;#34;)&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; count


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day10_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data: List[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    _map_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {(line_num, char_num): char &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_num, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char_num, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line)}
    map_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, _map_data)

    start_line, _start_line_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(index, line)&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    start_char &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _start_line_data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;)

    north_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;))
    east_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))
    south_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;))
    west_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))

    instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;: north_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;: south_entry
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;: east_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;: west_entry
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt; : west_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt; : south_entry
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt; : east_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt; : south_entry
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt; : east_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt; : north_entry,
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt; : west_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt; : north_entry
        }
    }

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Find starting direction:&lt;/span&gt;
    adjacent_dirs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, (start_line, start_char &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; map_data[(start_line, start_char &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
                     (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, (start_line, start_char &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; map_data[(start_line, start_char &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, 
                     (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, (start_line &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, start_char)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; map_data[(start_line &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, start_char)] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, 
                     (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;, (start_line &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, start_char)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; map_data[(start_line &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, start_char)] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Pick an arbitrary starting direction&lt;/span&gt;
    entry_dir, position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [a &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; adjacent_dirs &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; a][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    
    count &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    loop &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(start_line, start_char), position]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Find all the cells in the loop&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; (current_space&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; map_data[position]) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;:
        count &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        entry_dir, position_delta &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instructions[current_space][entry_dir]
        position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (position[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; position_delta[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], position[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; position_delta[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])
        loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(position)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Replace the starting &amp;#39;S&amp;#39; with the appropriate symbol to make the next algorithm simpler&lt;/span&gt;
    starting_directions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;(a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; adjacent_dirs &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; a)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; starting_directions &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;): data[start_line] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; replace_char(data[start_line], start_char, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; starting_directions &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;): data[start_line] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; replace_char(data[start_line], start_char, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; starting_directions &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;): data[start_line] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; replace_char(data[start_line], start_char, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; starting_directions &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;): data[start_line] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; replace_char(data[start_line], start_char, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; starting_directions &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;): data[start_line] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; replace_char(data[start_line], start_char, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; starting_directions &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;): data[start_line] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; replace_char(data[start_line], start_char, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt;)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; count_inner_cells(data, loop)

    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day10_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day10_2-viz-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;153
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;154
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;155
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;156
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;157
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;158
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;159
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;160
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;161
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;162
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;163
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input, output_redirect_to_xterm
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; defaultdict
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; List

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.console&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Console

rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_console &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Console(color_system&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;256&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;r&lt;/span&gt;(char: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;):
    table &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maketrans(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|-JLF7&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;│─┘└┌┐&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; char&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;translate(table)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;replace_char_viz&lt;/span&gt;(s, index, char):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; s[:index] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; s[index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;print_pipes_10_2_viz&lt;/span&gt;(data, current, seen):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (l, c) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; current: rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[red]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;r(char)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/red]&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (l, c) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; seen: rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print((&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[green]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;r(char)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/green]&amp;#34;&lt;/span&gt;), end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; : rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[gray]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;r(char)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/gray]&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[white]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;r(char)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/white]&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;count_inner_cells_viz&lt;/span&gt;(data: List[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], loop: List[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]]):
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Count the number of cells contained within the loop. Starting
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    from the beginning of each line, and with a boolean is_inside set to false, 
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    each time we cross the loop, invert that boolean, and add any non-loop 
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    space to a running count. &amp;#34;|&amp;#34; spaces are an obvious crossing; corners
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    need to be handled specially.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        data List[str]: The original data,  split into lines
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        loop List[tuple[int, int]]: A list of (line, char_index) pairs comprising the loop.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        int: The number of cells inside the loop
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    count &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        is_inside &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
        crossing_start &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (l, c) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; loop:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;: is_inside &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; is_inside
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;): crossing_start &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; char
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; crossing_start &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; crossing_start &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;: is_inside &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; is_inside
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; crossing_start &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;: is_inside &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; is_inside
                    crossing_start &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; is_inside: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;
                rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;color&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;r(char)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;color&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; is_inside: 
                    count &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
                    rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[white on green]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/white on green]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
                    rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[red]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/red]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; count

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day10_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; output_redirect_to_xterm(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day10_2-viz&amp;#39;&lt;/span&gt;):
        _viz_day10_2()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_viz_day10_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data: List[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    _map_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {(line_num, char_num): char &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_num, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char_num, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line)}
    map_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, _map_data)

    start_line, _start_line_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(index, line)&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    start_char &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _start_line_data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;)

    north_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;))
    east_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))
    south_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;))
    west_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))

    instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;: north_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;: south_entry
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;: east_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;: west_entry
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt; : west_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt; : south_entry
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt; : east_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt; : south_entry
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt; : east_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt; : north_entry,
        },
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;: {
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt; : west_entry,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt; : north_entry
        }
    }

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Find starting direction:&lt;/span&gt;
    adjacent_dirs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, (start_line, start_char &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; map_data[(start_line, start_char &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
                     (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, (start_line, start_char &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; map_data[(start_line, start_char &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, 
                     (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, (start_line &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, start_char)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; map_data[(start_line &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, start_char)] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, 
                     (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;, (start_line &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, start_char)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; map_data[(start_line &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, start_char)] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Pick an arbitrary starting direction&lt;/span&gt;
    entry_dir, position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [a &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; adjacent_dirs &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; a][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    
    count &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    loop &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(start_line, start_char), position]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Find all the cells in the loop&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; (current_space&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; map_data[position]) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;:
        count &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        entry_dir, position_delta &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instructions[current_space][entry_dir]
        position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (position[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; position_delta[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], position[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; position_delta[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])
        loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(position)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Replace the starting &amp;#39;S&amp;#39; with the appropriate symbol to make the next algorithm simpler&lt;/span&gt;
    starting_directions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;(a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; adjacent_dirs &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; a)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; starting_directions &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;): data[start_line] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; replace_char_viz(data[start_line], start_char, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; starting_directions &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;): data[start_line] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; replace_char_viz(data[start_line], start_char, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; starting_directions &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;): data[start_line] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; replace_char_viz(data[start_line], start_char, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; starting_directions &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;): data[start_line] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; replace_char_viz(data[start_line], start_char, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; starting_directions &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;): data[start_line] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; replace_char_viz(data[start_line], start_char, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; starting_directions &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;): data[start_line] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; replace_char_viz(data[start_line], start_char, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt;)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; count_inner_cells_viz(data, loop)

    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; output_redirect_to_xterm(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day10_2-viz&amp;#39;&lt;/span&gt;):
        viz_day10_2()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    add_event_listener(document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_2-viz-btn&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, _viz_day10_2)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday10_2 = document.querySelectorAll(&#39;[data-tab-target-day10_2]&#39;)
    const tabContentsday10_2 = document.querySelectorAll(&#39;[data-tab-content-day10_2]&#39;)

    tabsday10_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay10_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday10_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday10_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day11_1&#39;&gt;Day 11 (Part 1): Cosmic Expansion&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;What I&#39;ve taken away from the first chunk of Advent of Code this year is:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;Inserting additional features into your original data structure is often a mistake, as insertions don&#39;t scale well.&lt;/li&gt;
        &lt;li&gt;When faced with a task that involves a grid, think carefully about whether you need to store the full structure of the grid, or just some important coordinates.&lt;/li&gt;
    &lt;/ul&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day11_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day11_1-upload-input&#34; name=&#34;day11_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day11_1-run-btn&#34; py-click=&#34;main_day11_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day11_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day11_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day11/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day11_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day11_1=&#34;#day11_1-code&#34; class=&#34;active tab code-title&#34;&gt;day11_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day11_1-code&#34; data-tab-content-day11_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; combinations
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day11_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day11_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    expanding_row_indices &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;(char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line)]
    expanding_col_indices &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;(line[i] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)]
    stars &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;  [(line_index, char_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;]

    total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s1, s2, &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; combinations(stars, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;):
        manhattan_dist &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(s2[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(s2[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# expanding rows; stars are in row order, so s2[0] &amp;gt;= s1[0]&lt;/span&gt;
        row_total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([r &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; expanding_row_indices &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; r &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; s2[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]])

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# expanding columns, not necessarily ordered&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; s2[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]: 
            col_total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; s2[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
            col_total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([c &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; expanding_col_indices &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; s2[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]])
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# s2[1] &amp;lt; s1[1] &lt;/span&gt;
            col_total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([c &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; expanding_col_indices &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; s2[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]])

        total &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; manhattan_dist &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; row_total &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; col_total
    
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; total
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day11_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day11_1()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday11_1 = document.querySelectorAll(&#39;[data-tab-target-day11_1]&#39;)
    const tabContentsday11_1 = document.querySelectorAll(&#39;[data-tab-content-day11_1]&#39;)

    tabsday11_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay11_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday11_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday11_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day11_2&#39;&gt;Day 11 (Part 2): Cosmic Expansion&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;The only critical hint I&#39;d give about part to is: &lt;span class=&#34;italic&#34;&gt;beware of off-by-one errors&lt;/span&gt;. Otherwise, the solution to part 2 is very similar to part 1.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day11_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day11_2-upload-input&#34; name=&#34;day11_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day11_2-run-btn&#34; py-click=&#34;main_day11_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day11_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day11_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day11/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day11_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day11_2=&#34;#day11_2-code&#34; class=&#34;active tab code-title&#34;&gt;day11_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day11_2-code&#34; data-tab-content-day11_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; combinations
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day11_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day11_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    expanding_row_indices &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;(char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line)]
    expanding_col_indices &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;(line[i] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)]
    stars &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;  [(line_index, char_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;]

    total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s1, s2, &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; combinations(stars, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;):
        manhattan_dist &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(s2[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(s2[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# expanding rows; stars are in row order, so s2[0] &amp;gt;= s1[0]&lt;/span&gt;
        row_total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([r &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; expanding_row_indices &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; r &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; s2[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]])

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# expanding columns, not necessarily ordered&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; s2[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]: 
            col_total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; s2[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
            col_total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([c &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; expanding_col_indices &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; s2[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]])
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# s2[1] &amp;lt; s1[1] &lt;/span&gt;
            col_total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([c &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; expanding_col_indices &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; s2[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; s1[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]])

        total &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; manhattan_dist &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (row_total &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; col_total) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;999_999&lt;/span&gt;
    
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; total
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day11_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day11_2()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday11_2 = document.querySelectorAll(&#39;[data-tab-target-day11_2]&#39;)
    const tabContentsday11_2 = document.querySelectorAll(&#39;[data-tab-content-day11_2]&#39;)

    tabsday11_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay11_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday11_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday11_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;!-- &lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day12_1&#39;&gt;Day 12 (Part 1): Hot Springs&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;DESCRIPTION&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day12_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day12_1-upload-input&#34; name=&#34;day12_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day12_1-run-btn&#34; py-click=&#34;main_day12_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day12_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day12_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day12/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day12_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day12_1=&#34;#day12_1-code&#34; class=&#34;active tab code-title&#34;&gt;day12_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day12_1-code&#34; data-tab-content-day12_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;95
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input_test.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)
                
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable, List

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;match&lt;/span&gt;(value: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, pattern: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Whether the given value is valid given the (start) of
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    the pattern. 
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Consider inlining this.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        value (str): The value to be checked
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        pattern (str): The pattern to match
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        bool: Whether the value is valid given the (initial) part of the pattern
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;(pattern[i] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; value[i] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; pattern[i] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(value)))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;gen_runs_of_springs&lt;/span&gt;(num_springs: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, max_len: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; List[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;All the possible ways of slotting a group of num_springs &amp;#34;#&amp;#34; chars
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    into a sequnce of length max_len
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        num_springs (int): The number broken springs in a group
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        max_len (int): The length of sequences to generatre
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        List[str]: The generated sequences of strings
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;i &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; num_springs &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;(max_len&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;num_springs&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;i) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(max_len&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;num_springs&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;min_length_of_sequence_set&lt;/span&gt;(sequences: Iterable[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;The minimum length you can squeeze a sequence of groupings of springs into,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    with a single &amp;#39;.&amp;#39; between them
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        sequences (Iterable[int]): The sequnces of springs
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        int: The minimum space
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(sequences) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(sequences)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(sequences) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(sequences) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_valid_options&lt;/span&gt;(sequences: Iterable[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;], pattern, prefix &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;):
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Counting valid options for &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;sequences&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; against &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pattern&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(sequences) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Only 1 sequence left&amp;#34;&lt;/span&gt;)
        g &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [s &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; gen_runs_of_springs(sequences[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; match(s, pattern)]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(prefix &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; new &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; new &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; g)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        valid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
        min_space_for_first_group &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; sequences[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        max_space_for_first_group &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; min_length_of_sequence_set(sequences[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:])
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# TODO there is an error in here, not accounting for needing a &amp;#39;.&amp;#39; between groups if the first&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# group ends in a &amp;#34;#&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; length_for_first_group &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(min_space_for_first_group &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, max_space_for_first_group&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; possibilty &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (g &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; g &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; gen_runs_of_springs(sequences[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], length_for_first_group)):
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Starting possibility: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;possibilty&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; match(possibilty, pattern):
                    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Getting extensions&amp;#34;&lt;/span&gt;)
                    valid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; valid&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;union(get_valid_options(sequences[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:], pattern[length_for_first_group:], prefix&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;possibilty[:length_for_first_group]))
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Invalid prefix match&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;--&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; valid
    
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;count_valid_options&lt;/span&gt;(sequences, pattern):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(get_valid_options(sequences, pattern))
        

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day12_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day12_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day12_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(get_valid_options([&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;??.??&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#main_day12_1()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday12_1 = document.querySelectorAll(&#39;[data-tab-target-day12_1]&#39;)
    const tabContentsday12_1 = document.querySelectorAll(&#39;[data-tab-content-day12_1]&#39;)

    tabsday12_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay12_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday12_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday12_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day12_2&#39;&gt;Day 12 (Part 2): Hot Springs&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;DESCRIPTION&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day12_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day12_2-upload-input&#34; name=&#34;day12_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day12_2-run-btn&#34; py-click=&#34;main_day12_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day12_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day12_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day12/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day12_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day12_2=&#34;#day12_2-code&#34; class=&#34;active tab code-title&#34;&gt;day12_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day12_2-code&#34; data-tab-content-day12_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input_test.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)
                
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day12_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day12_2&amp;#34;&lt;/span&gt;)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day12_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day12_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday12_2 = document.querySelectorAll(&#39;[data-tab-target-day12_2]&#39;)
    const tabContentsday12_2 = document.querySelectorAll(&#39;[data-tab-content-day12_2]&#39;)

    tabsday12_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay12_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday12_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday12_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt; --&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day13_1&#39;&gt;Day 13 (Part 1): Point of Incidence&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Today&#39;s problem involves finding lines of symmetry in the given data, either horizontally or vertically. In cases like this, I find Python&#39;s shortcutting &lt;code&gt;any()&lt;/code&gt; builtin quite easy - when comparing if the two halves of data across a potential mirror line don&#39;t match in &lt;span class=&#34;italic&#34;&gt;any&lt;/span&gt; position, immediately move on.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day13_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day13_1-upload-input&#34; name=&#34;day13_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day13_1-run-btn&#34; py-click=&#34;main_day13_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day13_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day13_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day13/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day13_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day13_1=&#34;#day13_1-code&#34; class=&#34;active tab code-title&#34;&gt;day13_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day13_1-code&#34; data-tab-content-day13_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)
                
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; List

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Vertical Mirrors - index 0 is between first_line[0] and first_line[1]&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_vertical_mirror&lt;/span&gt;(pattern: List[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pattern&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seam_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        good_seam &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# sentinel to allow shortcutting out of the loop&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; lower, upper &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(seam_index, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(seam_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;(line[lower] &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; line[upper] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pattern):
                good_seam &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; good_seam: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; seam_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Counted in original problem is one different from this index&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_horizontal_mirror&lt;/span&gt;(pattern: List[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pattern&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seam_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern)&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        good_seam &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; lower, upper &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(seam_index, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(seam_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern))):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;(pattern[lower][i] &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; pattern[upper][i] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))):
                good_seam &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; good_seam: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; seam_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;



&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day13_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    patterns &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day13_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pattern &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; patterns:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; mirror_index &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; find_vertical_mirror(pattern):
            total &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; mirror_index
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; mirror_index &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; find_horizontal_mirror(pattern):
            total &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; mirror_index

    display(total, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day13_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day13_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday13_1 = document.querySelectorAll(&#39;[data-tab-target-day13_1]&#39;)
    const tabContentsday13_1 = document.querySelectorAll(&#39;[data-tab-content-day13_1]&#39;)

    tabsday13_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay13_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday13_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday13_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day13_2&#39;&gt;Day 13 (Part 2): Point of Incidence&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Having established a general logic for part 1, part two is not too terribly different - but sadly, we can&#39;t immediately bail out when any single position between the two &#34;mirrored&#34; halves differ. Rather, we track in &lt;span class=&#34;italic&#34;&gt;how many&lt;/span&gt; positions they differ - if it&#39;s ever more than one, we can bail out immediately; otherwise, if we get to the end of a potential mirror line and &lt;span class=&#34;italic&#34;&gt;exactly one&lt;/span&gt; position differs, we&#39;ve found our mirror.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day13_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day13_2-upload-input&#34; name=&#34;day13_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day13_2-run-btn&#34; py-click=&#34;main_day13_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day13_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day13_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day13/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day13_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day13_2=&#34;#day13_2-code&#34; class=&#34;active tab code-title&#34;&gt;day13_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day13_2-code&#34; data-tab-content-day13_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)
                
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; List

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Vertical Mirrors - index 0 is between first_line[0] and first_line[1]&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_vertical_mirror&lt;/span&gt;(pattern: List[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pattern&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seam_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        good_seam &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# sentinel to allow shortcutting out of the loop&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; lower, upper &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(seam_index, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(seam_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;(line[lower] &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; line[upper] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pattern):
                good_seam &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; good_seam: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; seam_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Counted in original problem is one different from this index&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_horizontal_mirror&lt;/span&gt;(pattern: List[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pattern&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seam_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern)&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        good_seam &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; lower, upper &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(seam_index, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(seam_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern))):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;(pattern[lower][i] &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; pattern[upper][i] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))):
                good_seam &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; good_seam: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; seam_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Vertical Mirrors - index 0 is between first_line[0] and first_line[1]&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_smudged_vertical_mirror&lt;/span&gt;(pattern: List[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pattern&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seam_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        smudge_count &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        good_seam &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# sentinel to allow shortcutting out of the loop&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; lower, upper &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(seam_index, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(seam_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))):
            smudge_count &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; [line[lower] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; line[upper] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pattern]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; smudge_count &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If count is to high, exist immediately&lt;/span&gt;
                good_seam &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; good_seam &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; smudge_count &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; seam_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Counted in original problem is one different from this index&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_smudged_horizontal_mirror&lt;/span&gt;(pattern: List[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pattern&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seam_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern)&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        smudge_count &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        good_seam &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# sentinel to allow shortcutting out of the loop&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; lower, upper &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(seam_index, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(seam_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern))):
            smudge_count &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; [pattern[lower][i] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; pattern[upper][i] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; smudge_count &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
                good_seam &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; good_seam &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; smudge_count &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; seam_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Counted in original problem is one different from this index&lt;/span&gt;



&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day13_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    patterns &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day13_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, pattern &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(patterns): 
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; smudge_index &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; find_smudged_vertical_mirror(pattern):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; smudge_index &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; find_vertical_mirror(pattern):
                total &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; smudge_index
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; smudge_index &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; find_smudged_horizontal_mirror(pattern):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; smudge_index &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; find_horizontal_mirror(pattern):
                total &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; smudge_index
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No smudge found in pattern &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; (line &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pattern &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; patterns[:index])&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;)&amp;#34;&lt;/span&gt;)

    display(total, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day13_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day13_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday13_2 = document.querySelectorAll(&#39;[data-tab-target-day13_2]&#39;)
    const tabContentsday13_2 = document.querySelectorAll(&#39;[data-tab-content-day13_2]&#39;)

    tabsday13_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay13_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday13_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday13_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day14_1&#39;&gt;Day 14 (Part 1): Parabolic Reflector Dish&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;A rolling stone gathers no moss, and today&#39;s stones are no exception. For part 1, we can iterate over a list of strings an compare them, then &#34;roll&#34; the stone characters down each list as necessary.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In both part 1 and part 2 of today&#39;s challenge, I started with a more complex data structure to hold the state of the grid, before reverting to simply using a string as-is. But in the switch, I forgot that some of the operations I was doing - like comparisons across multiple indices, and doing a &lt;code&gt;deepcopy&lt;/code&gt; of the data each time, we unnecessary with (immutable) strings. Whoops! That&#39;s some free performance gain, I suppose.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day14_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day14_1-upload-input&#34; name=&#34;day14_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day14_1-run-btn&#34; py-click=&#34;main_day14_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day14_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day14_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day14/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day14_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day14_1=&#34;#day14_1-code&#34; class=&#34;active tab code-title&#34;&gt;day14_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day14_1-code&#34; data-tab-content-day14_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; pairwise      
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;rollNorth&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; first, second &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairwise(pattern):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(first)):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; first[char_index] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; second[char_index] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;:
                first[char_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;
                second[char_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pattern)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day14_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day14_1&amp;#34;&lt;/span&gt;)

    new_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rollNorth(data)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; new_data &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; data:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; new_data
        new_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rollNorth(data)

    load &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(new_data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)):
        row_value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(new_data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; row_index
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; row:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;: load &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; row_value

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; load
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day14_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day14_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday14_1 = document.querySelectorAll(&#39;[data-tab-target-day14_1]&#39;)
    const tabContentsday14_1 = document.querySelectorAll(&#39;[data-tab-content-day14_1]&#39;)

    tabsday14_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay14_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday14_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday14_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day14_2&#39;&gt;Day 14 (Part 2): Parabolic Reflector Dish&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Yet another Advent of Code challenge that takes a quantity in part 1 (roll once), and amps it way up in part 2 (roll a billion times).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The key insight is to glean (hope) that the stones will fall into a repeating pattern at some point; after which, we can calculate where in that repeating cycle the stones will be after a billion steps, and calculate the load at that point. For me, after 124 cycles of North/West/South/East movement, the stones enter a repeating pattern of 26 cycles.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day14_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day14_2-upload-input&#34; name=&#34;day14_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day14_2-run-btn&#34; py-click=&#34;main_day14_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day14_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day14_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day14/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day14_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day14_2=&#34;#day14_2-code&#34; class=&#34;active tab code-title&#34;&gt;day14_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day14_2-code&#34; data-tab-content-day14_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; pairwise, count      
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;cycle&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; completely(data, rollNorth)
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; completely(data, rollWest)
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; completely(data, rollSouth)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; completely(data, rollEast)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;completely&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, f: [&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    new_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; f(data)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; new_data &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; data:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; new_data
        new_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; f(data)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; new_data

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;rollNorth&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; first, second &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairwise(pattern):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(first)):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; first[char_index] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; second[char_index] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;:
                first[char_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;
                second[char_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pattern)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;rollSouth&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; first, second &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairwise(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;(pattern)):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(first)):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; first[char_index] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; second[char_index] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;:
                first[char_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;
                second[char_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pattern)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;rollEast&lt;/span&gt;(data:&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; first_index, second_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairwise(&lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pattern:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; line[second_index] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; line[first_index] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;:
                line[second_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;
                line[first_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pattern)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;rollWest&lt;/span&gt;(data:&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; first_index, second_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairwise(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(pattern[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])))):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pattern:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; line[second_index] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; line[first_index] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;:
                line[second_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;
                line[first_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pattern)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;print_pattern&lt;/span&gt;(data:&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(line)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_load&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;:
    load &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)):
        row_value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; row_index
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; row:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;: load &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; row_value
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; load

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day14_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day14_2&amp;#34;&lt;/span&gt;)
    configs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []

    counter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; count()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; data &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; configs:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(loop_point&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; counter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;__next__(), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;, get_load(data) )
        configs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(data)
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cycle(data)

    loop_point &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    first_occurance &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; configs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(data)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;After &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;loop_point&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; iterations, the stones were in the same place as after &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;first_occurance&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    loop_length &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; loop_point &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; first_occurance
    target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1_000_000_000&lt;/span&gt;
    last_loop &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;((target &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; first_occurance)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;loop_length)) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; loop_length &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; first_occurance
    difference &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; target &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; last_loop

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(difference):
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cycle(data)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_load(data)
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day14_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day14_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday14_2 = document.querySelectorAll(&#39;[data-tab-target-day14_2]&#39;)
    const tabContentsday14_2 = document.querySelectorAll(&#39;[data-tab-content-day14_2]&#39;)

    tabsday14_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay14_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday14_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday14_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day15_1&#39;&gt;Day 15 (Part 1): Lens Library&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day15_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day15_1-upload-input&#34; name=&#34;day15_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day15_1-run-btn&#34; py-click=&#34;main_day15_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day15_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day15_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day15/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day15_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day15_1=&#34;#day15_1-code&#34; class=&#34;active tab code-title&#34;&gt;day15_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day15_1-code&#34; data-tab-content-day15_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)
                

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;hash&lt;/span&gt;(s: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;:
    value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; s:
        value &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;ord&lt;/span&gt;(char)
        value &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;17&lt;/span&gt;
        value &lt;span style=&#34;color:#555&#34;&gt;%=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;256&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; value

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day15_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day15_1&amp;#34;&lt;/span&gt;)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;hash&lt;/span&gt;(s) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;))
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day15_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day15_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday15_1 = document.querySelectorAll(&#39;[data-tab-target-day15_1]&#39;)
    const tabContentsday15_1 = document.querySelectorAll(&#39;[data-tab-content-day15_1]&#39;)

    tabsday15_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay15_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday15_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday15_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day15_2&#39;&gt;Day 15 (Part 2): Lens Library&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day15_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day15_2-upload-input&#34; name=&#34;day15_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day15_2-run-btn&#34; py-click=&#34;main_day15_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day15_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day15_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day15/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day15_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day15_2=&#34;#day15_2-code&#34; class=&#34;active tab code-title&#34;&gt;day15_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day15_2-code&#34; data-tab-content-day15_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)
                

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;hash&lt;/span&gt;(s: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;:
    value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; s:
        value &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;ord&lt;/span&gt;(char)
        value &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;17&lt;/span&gt;
        value &lt;span style=&#34;color:#555&#34;&gt;%=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;256&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; value

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Lens&lt;/span&gt;:
    label: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    focal_length: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __eq__(self, other):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;label &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; other &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(other, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;label &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;label)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day15_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day15_2&amp;#34;&lt;/span&gt;)

    boxes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;256&lt;/span&gt;)]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; command &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Processing &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;command&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(?P&amp;lt;label&amp;gt;[a-zA-Z]+)(?P&amp;lt;inst&amp;gt;[-]|=)(?P&amp;lt;num&amp;gt;\d)?&amp;#34;&lt;/span&gt;, command)
        label, inst &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;), m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;inst&amp;#34;&lt;/span&gt;)
        box &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; boxes[&lt;span style=&#34;color:#366&#34;&gt;hash&lt;/span&gt;(label)]
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;label&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;inst&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; inst &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; label &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; box: box&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(label)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; inst &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;:
            focal_length &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; label &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; box:
                location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; box&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(label)
                box[location] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Lens(label&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;label, focal_length&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;focal_length)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                box&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Lens(label&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;label, focal_length&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;focal_length))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Inst must be &amp;#39;-&amp;#39; or &amp;#39;=&amp;#39;, not &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;inst&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(boxes):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; boxes:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# print(f&amp;#34;{i}\t{b}&amp;#34;)&lt;/span&gt;

    total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(boxes):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l, lens &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(b):
            total &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; (i &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (l &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(lens&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;focal_length))

    display(total, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day15_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day15_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday15_2 = document.querySelectorAll(&#39;[data-tab-target-day15_2]&#39;)
    const tabContentsday15_2 = document.querySelectorAll(&#39;[data-tab-content-day15_2]&#39;)

    tabsday15_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay15_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday15_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday15_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day16_1&#39;&gt;Day 16 (Part 1): The Floor Will Be Lava&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day16_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day16_1-upload-input&#34; name=&#34;day16_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day16_1-run-btn&#34; py-click=&#34;main_day16_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day16_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day16_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day16/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day16_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day16_1=&#34;#day16_1-code&#34; class=&#34;active tab code-title&#34;&gt;day16_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day16_1-code&#34; data-tab-content-day16_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)
                
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;copy&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deepcopy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable


LEFT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
RIGHT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
UP &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
DOWN &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_next_tiles&lt;/span&gt;(coords: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;], direction: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;], data, dims: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Iterable[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]]:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Off edge of map&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; coords [&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; dims[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; coords [&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; dims[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
    
    value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[(coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move through empty space and parallel splitters&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (direction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (LEFT, RIGHT) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (direction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (UP, DOWN) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; direction[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; direction[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), direction)]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Vertical Splitter&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; direction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (LEFT, RIGHT) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), UP),
                 ((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), DOWN)]
    

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Horizontal Splitter&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; direction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (UP, DOWN) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), LEFT),
                 ((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), RIGHT)]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Bouncing Down&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; RIGHT &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; LEFT &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), DOWN)]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Bouncing Up&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; RIGHT &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; LEFT &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; , coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), UP)]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Bouncing Left&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; DOWN &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; UP &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), LEFT)]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Bouncing Right&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; DOWN &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; UP &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), RIGHT)]
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unhandled Instruction&amp;#34;&lt;/span&gt;)   

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printGrid&lt;/span&gt;(lasers, inp, illuminated_spaces):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(inp):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
            lasers_here &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; laser &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; lasers &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; char_index]
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; lasers_here:
                rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[red]X[/red]&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (line_index, char_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; illuminated_spaces:
                rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[blue]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/blue]&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(char, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
    



&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day16_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    inp &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day16_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {(line_index, char): value &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(inp) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char, value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line)}

    lasers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([((&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;), RIGHT),])
    illuminated_spaces &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),])
    old_lasers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()


    dims &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(inp), &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(inp[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; lasers:

        new_lasers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; laser &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; lasers:
            new_lasers &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(get_next_tiles(laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], laser[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], data, dims))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; new_lasers &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; old_lasers: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        old_lasers &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; new_lasers
        lasers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; new_lasers
        illuminated_spaces &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; illuminated_spaces&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;union(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;((laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; laser &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; lasers))

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#printGrid(lasers, inp, illuminated_spaces)&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#rich.print(f&amp;#39;[red]{lasers}[/red]&amp;#39;)&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#rich.print(f&amp;#34;[blue]{illuminated_spaces}[/blue]&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;&amp;#34;)&lt;/span&gt;

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([s &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; illuminated_spaces &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; s[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; dims[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; s[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; dims[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])])
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day16_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day16_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday16_1 = document.querySelectorAll(&#39;[data-tab-target-day16_1]&#39;)
    const tabContentsday16_1 = document.querySelectorAll(&#39;[data-tab-content-day16_1]&#39;)

    tabsday16_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay16_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday16_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday16_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day16_2&#39;&gt;Day 16 (Part 2): The Floor Will Be Lava&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day16_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day16_2-upload-input&#34; name=&#34;day16_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day16_2-run-btn&#34; py-click=&#34;main_day16_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day16_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day16_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day16/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day16_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day16_2=&#34;#day16_2-code&#34; class=&#34;active tab code-title&#34;&gt;day16_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day16_2-code&#34; data-tab-content-day16_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)
                
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;copy&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deepcopy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable


LEFT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
RIGHT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
UP &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
DOWN &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_next_tiles&lt;/span&gt;(coords: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;], direction: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;], data, dims: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Iterable[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]]:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Off edge of map&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; coords [&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; dims[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; coords [&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; dims[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
    
    value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[(coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move through empty space and parallel splitters&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (direction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (LEFT, RIGHT) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (direction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (UP, DOWN) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; direction[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; direction[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), direction)]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Vertical Splitter&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; direction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (LEFT, RIGHT) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), UP),
                 ((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), DOWN)]
    

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Horizontal Splitter&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; direction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (UP, DOWN) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), LEFT),
                 ((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), RIGHT)]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Bouncing Down&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; RIGHT &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; LEFT &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), DOWN)]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Bouncing Up&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; RIGHT &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; LEFT &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; , coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), UP)]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Bouncing Left&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; DOWN &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; UP &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), LEFT)]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Bouncing Right&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; DOWN &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
        (direction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; UP &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [((coords[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], coords[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), RIGHT)]
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unhandled Instruction&amp;#34;&lt;/span&gt;)   

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printGrid&lt;/span&gt;(lasers, inp, illuminated_spaces):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(inp):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
            lasers_here &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; laser &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; lasers &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; char_index]
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; lasers_here:
                rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[red]X[/red]&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (line_index, char_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; illuminated_spaces:
                rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[blue]#[/blue]&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(char, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;score_16_2&lt;/span&gt;(start_space: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;], start_dir: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;], inp) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {(line_index, char): value &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(inp) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char, value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line)}

    lasers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([(start_space, start_dir),])
    illuminated_spaces &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([start_space,])
    old_lasers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    dims &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(inp), &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(inp[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; lasers:
        new_lasers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; laser &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; lasers:
            new_lasers &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(get_next_tiles(laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], laser[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], data, dims))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; new_lasers &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; old_lasers: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        old_lasers &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; new_lasers
        lasers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; new_lasers
        illuminated_spaces &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; illuminated_spaces&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;union(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;((laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], laser[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; laser &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; lasers))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([s &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; illuminated_spaces &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; s[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; dims[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; s[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; dims[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day16_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    inp &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day16_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    max_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Left and Right Sides&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(inp)):
        max_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(max_score, score_16_2((i, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;), RIGHT, inp))
        max_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(max_score, score_16_2((i, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(inp[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), LEFT, inp))

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Top and Bottom&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(inp[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        max_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(max_score, score_16_2((&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, i), DOWN, inp))
        max_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(max_score, score_16_2((&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(inp)&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, i), UP, inp))
    
    display(max_score, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day16_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day16_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday16_2 = document.querySelectorAll(&#39;[data-tab-target-day16_2]&#39;)
    const tabContentsday16_2 = document.querySelectorAll(&#39;[data-tab-content-day16_2]&#39;)

    tabsday16_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay16_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday16_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday16_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;!-- &lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day17_1&#39;&gt;Day 17 (Part 1): Clumsy Crucible&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day17_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day17_1-upload-input&#34; name=&#34;day17_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day17_1-run-btn&#34; py-click=&#34;main_day17_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day17_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day17_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day17/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day17_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day17_1=&#34;#day17_1-code&#34; class=&#34;active tab code-title&#34;&gt;day17_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day17_1-code&#34; data-tab-content-day17_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input_test.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;bisect&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass                
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

RIGHT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
LEFT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
UP &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
DOWN &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Header&lt;/span&gt;:
    location: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]
    direction: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]
    total_length: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    moves_this_dir: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getNewHeaders&lt;/span&gt;(Header, data) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Iterable[Header]:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# TODO maybe this is the wrong algorithm....&lt;/span&gt;



&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day17_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    inp &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day17_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {(line_index, char): value &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(inp) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char, value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line)}

    headers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [Header((&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;), RIGHT, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
               Header((&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;), DOWN, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)]
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# TODO &lt;/span&gt;

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day17_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day17_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday17_1 = document.querySelectorAll(&#39;[data-tab-target-day17_1]&#39;)
    const tabContentsday17_1 = document.querySelectorAll(&#39;[data-tab-content-day17_1]&#39;)

    tabsday17_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay17_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday17_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday17_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day17_2&#39;&gt;Day 17 (Part 2): Clumsy Crucible&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day17_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day17_2-upload-input&#34; name=&#34;day17_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day17_2-run-btn&#34; py-click=&#34;main_day17_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day17_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day17_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day17/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day17_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day17_2=&#34;#day17_2-code&#34; class=&#34;active tab code-title&#34;&gt;day17_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day17_2-code&#34; data-tab-content-day17_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input_test.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)
                
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day17_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day17_2&amp;#34;&lt;/span&gt;)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day17_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day17_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday17_2 = document.querySelectorAll(&#39;[data-tab-target-day17_2]&#39;)
    const tabContentsday17_2 = document.querySelectorAll(&#39;[data-tab-content-day17_2]&#39;)

    tabsday17_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay17_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday17_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday17_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt; --&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day18_1&#39;&gt;Day 18 (Part 1): Lavaduct Lagoon&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day18_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day18_1-upload-input&#34; name=&#34;day18_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day18_1-run-btn&#34; py-click=&#34;main_day18_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day18_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day18_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day18/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day18_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day18_1=&#34;#day18_1-code&#34; class=&#34;active tab code-title&#34;&gt;day18_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day18_1-code&#34; data-tab-content-day18_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deque
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; pairwise
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;    
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Location&lt;/span&gt;:
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

inst &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;: Location(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;: Location(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;U&amp;#34;&lt;/span&gt;: Location(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;: Location(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;score_shoelace&lt;/span&gt;(data):
    loc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Location(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    trench &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [Location(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)]

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(?P&amp;lt;dir&amp;gt;[RDLU]) (?P&amp;lt;num&amp;gt;\d)&amp;#34;&lt;/span&gt;, line)
        &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;, num &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;), m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num)):
            loc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Location(loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; inst[&lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; inst[&lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y)
        trench&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(loc)
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (one, two) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairwise(trench):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(one, two)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;((one&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; two&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; (two&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; one&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (one, two) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairwise(trench))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_trench&lt;/span&gt;(data):
    loc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Location(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    trench &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([Location(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)])

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(?P&amp;lt;dir&amp;gt;[RDLU]) (?P&amp;lt;num&amp;gt;\d+)&amp;#34;&lt;/span&gt;, line)
        &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;, num &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;), m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num)):
            loc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Location(loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; inst[&lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; inst[&lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y)
            trench&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(loc)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; loc &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Location(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; trench

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;score_flood_fill&lt;/span&gt;(trench):
    left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; loc &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; trench)
    right &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; loc &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; trench)
    top &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; loc &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; trench)
    bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; loc &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; trench)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;left&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;right&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;top&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;bottom&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    nodes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([Location(left&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, top&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)])
    seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(nodes)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; nodes:
        current &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; nodes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
        seen&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(current)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; new_node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (Location(current&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, current&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
                         Location(current&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, current&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
                         Location(current&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, current&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y),
                         Location(current&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, current&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y)):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; new_node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; left &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; \
                new_node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; right &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; \
                new_node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; top &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; \
                new_node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; bottom &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; \
                new_node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; trench &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; \
                new_node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; seen:
                nodes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(new_node)   
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(nodes))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;viz.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(top&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, bottom&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(left&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, right&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; Location(x, y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; seen: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;,end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; , file &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; f)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, file &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; f)
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,file &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; f)

    area &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (right&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;left&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (bottom&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;top&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Total area: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;area&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Flooded exterior = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(seen)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Interior = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;area &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(seen)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day18_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day18_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#result = score_shoelace(data)&lt;/span&gt;
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; score_flood_fill(get_trench(data))

    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day18_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day18_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday18_1 = document.querySelectorAll(&#39;[data-tab-target-day18_1]&#39;)
    const tabContentsday18_1 = document.querySelectorAll(&#39;[data-tab-content-day18_1]&#39;)

    tabsday18_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay18_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday18_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday18_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day18_2&#39;&gt;Day 18 (Part 2): Lavaduct Lagoon&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day18_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day18_2-upload-input&#34; name=&#34;day18_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day18_2-run-btn&#34; py-click=&#34;main_day18_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day18_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day18_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day18/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day18_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day18_2=&#34;#day18_2-code&#34; class=&#34;active tab code-title&#34;&gt;day18_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day18_2-code&#34; data-tab-content-day18_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deque
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; pairwise
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;    
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Location&lt;/span&gt;:
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

inst &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;: Location(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;: Location(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;U&amp;#34;&lt;/span&gt;: Location(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;: Location(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;score_shoelace&lt;/span&gt;(trench, length):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (one, two) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairwise(trench):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(one, two)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;.5&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;((one&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; two&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; (two&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; one&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (one, two) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairwise(trench)) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;.5&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; length &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_trench_2&lt;/span&gt;(data):
    loc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Location(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    trench &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [Location(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)]
    length &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; 

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(?P&amp;lt;num&amp;gt;[0-9a-f]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{5}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;)(?P&amp;lt;dir&amp;gt;[0-3])&amp;#34;&lt;/span&gt;, line)
        num &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;), base&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;translate(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maketrans(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0123&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;RDLU&amp;#34;&lt;/span&gt;))
        loc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Location(loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (inst[&lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; num), loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (inst[&lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; num))
        length &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; num
        trench&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(loc)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; loc &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Location(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; trench, length

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day18_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day18_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; score_shoelace(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;get_trench_2(data))

    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day18_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day18_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday18_2 = document.querySelectorAll(&#39;[data-tab-target-day18_2]&#39;)
    const tabContentsday18_2 = document.querySelectorAll(&#39;[data-tab-content-day18_2]&#39;)

    tabsday18_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay18_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday18_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday18_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day19_1&#39;&gt;Day 19 (Part 1): Aplenty&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day19_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day19_1-upload-input&#34; name=&#34;day19_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day19_1-run-btn&#34; py-click=&#34;main_day19_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day19_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day19_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day19/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day19_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day19_1=&#34;#day19_1-code&#34; class=&#34;active tab code-title&#34;&gt;day19_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day19_1-code&#34; data-tab-content-day19_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;97
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass      
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;operator&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Part&lt;/span&gt;:
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    m: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    a: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    s: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    status: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;InProgress&amp;#34;&lt;/span&gt;
    rule: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;

    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(?P&amp;lt;attribute&amp;gt;[xmas])(?P&amp;lt;op&amp;gt;[&amp;lt;&amp;gt;])(?P&amp;lt;num&amp;gt;\d+)&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;test_rule&lt;/span&gt;(self, rule: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pattern, rule)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;&amp;#34;&lt;/span&gt;: op &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; operator&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lt
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;: op &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; operator&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;gt
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Op must be &amp;lt; or &amp;gt; not &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;op&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; op(&lt;span style=&#34;color:#366&#34;&gt;getattr&lt;/span&gt;(self, m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;attribute&amp;#34;&lt;/span&gt;)), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;)))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;apply_flow&lt;/span&gt;(self, flow: Iterable[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;{flow} to part {self}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; rule &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; flow:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; rule &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;:
                self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;status &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; rule &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;:
                self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;status &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
            
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;(char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; rule &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;)):
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Jumping to new rule {rule}&amp;#34;)&lt;/span&gt;
                self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;rule &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rule
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
            
            prep, new_rule &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rule&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;test_rule(prep):
                self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;rule &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; new_rule
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;rule &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;:
                    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;status &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;rule &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;:
                    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;status &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
                
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Updated rule to {self.rule}&amp;#34;)&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;BufferError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Should have found a way out of flow &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;flow&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day19_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    raw_flows, raw_parts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day19_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    part_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;\{x=(?P&amp;lt;x&amp;gt;\d+),m=(?P&amp;lt;m&amp;gt;\d+),a=(?P&amp;lt;a&amp;gt;\d+),s=(?P&amp;lt;s&amp;gt;\d+)\}&amp;#34;&lt;/span&gt;
    parts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; raw_parts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;):
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(part_pattern, line)
        parts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Part(x&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;)), m&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;)), a&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;)), s&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt;))))

    flow_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(?P&amp;lt;name&amp;gt;[a-z]+)\{(?P&amp;lt;rest&amp;gt;.+)\}&amp;#34;&lt;/span&gt;
    flows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; raw_flows&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;):
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(flow_pattern, line)
        flows[m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;rest&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; part &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; parts:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; part&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;status &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;):
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Applying &amp;#39;{part.rule}&amp;#39;&amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
            part&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;apply_flow(flows[part&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;rule])
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Part has status &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;part&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;status&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;m, p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;a, p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;s]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; parts &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;status &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day19_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day19_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday19_1 = document.querySelectorAll(&#39;[data-tab-target-day19_1]&#39;)
    const tabContentsday19_1 = document.querySelectorAll(&#39;[data-tab-content-day19_1]&#39;)

    tabsday19_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay19_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday19_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday19_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day19_2&#39;&gt;Day 19 (Part 2): Aplenty&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day19_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day19_2-upload-input&#34; name=&#34;day19_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day19_2-run-btn&#34; py-click=&#34;main_day19_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day19_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day19_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day19/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day19_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day19_2=&#34;#day19_2-code&#34; class=&#34;active tab code-title&#34;&gt;day19_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day19_2-code&#34; data-tab-content-day19_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass      
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;math&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; prod
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable, Self

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;PartRange&lt;/span&gt;:
    x_min: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    x_max: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    m_min: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    m_max: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    a_min: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    a_max: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    s_min: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    s_max: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    status: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;InProgress&amp;#34;&lt;/span&gt;
    rule: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;

    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(?P&amp;lt;attribute&amp;gt;[xmas])(?P&amp;lt;op&amp;gt;[&amp;lt;&amp;gt;])(?P&amp;lt;num&amp;gt;\d+)&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;fromPartRange&lt;/span&gt;(other, x_min&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, x_max&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, m_min &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, m_max &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, a_min &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, a_max &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, s_min &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, s_max &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, rule&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; PartRange(x_min&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;x_min &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; other&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x_min, x_max&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;x_max &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; other&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x_max,
                         m_min&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;m_min &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; other&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;m_min, m_max&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;m_max &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; other&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;m_max,
                         a_min&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;a_min &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; other&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;a_min, a_max&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;a_max &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; other&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;a_max,
                         s_min&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;s_min &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; other&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;s_min, s_max&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;s_max &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; other&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;s_max,
                         rule &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rule &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; other&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;rule)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;count&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; prod([(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x_max &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x_min &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;m_max &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;m_min &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;a_max &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;a_min &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;s_max &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;s_min &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)])
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;apply_flow&lt;/span&gt;(self, flow: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Iterable[Self]:
        outgoing &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; rule &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; flow&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; rule &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;: 
                self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;status &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;
                outgoing&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(self)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; outgoing
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; rule &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;:
                self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;status &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; outgoing
        
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;(char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; rule &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;)):
                self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;rule &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rule
                outgoing&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(self)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; outgoing
            
            prep, new_rule &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rule&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)
            m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pattern, prep)

            attr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;attribute&amp;#34;&lt;/span&gt;)
            num &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;))

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;&amp;#34;&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;getattr&lt;/span&gt;(self, attr&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;_min&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; num:
                    first_kwargs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {attr&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;_max&amp;#34;&lt;/span&gt;: num&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;}
                    outgoing&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fromPartRange(self, rule&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;new_rule, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;first_kwargs))
                    &lt;span style=&#34;color:#366&#34;&gt;setattr&lt;/span&gt;(self, attr&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;_min&amp;#34;&lt;/span&gt;, num)
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;op&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;getattr&lt;/span&gt;(self, attr&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;_max&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; num:
                    first_kwargs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {attr&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;_min&amp;#34;&lt;/span&gt;: num&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;}
                    outgoing&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fromPartRange(self, rule&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;new_rule, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;first_kwargs))
                    &lt;span style=&#34;color:#366&#34;&gt;setattr&lt;/span&gt;(self, attr&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;_max&amp;#34;&lt;/span&gt;, num)
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Rule &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;rule&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; did not match anything&amp;#34;&lt;/span&gt;)                
      

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day19_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    raw_flows, raw_parts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day19_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    flow_pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(?P&amp;lt;name&amp;gt;[a-z]+)\{(?P&amp;lt;rest&amp;gt;.+)\}&amp;#34;&lt;/span&gt;
    flows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; raw_flows&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;):
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(flow_pattern, line)
        flows[m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;rest&amp;#34;&lt;/span&gt;)

    ranges &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [PartRange(x_min&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, x_max&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4000&lt;/span&gt;,m_min&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, m_max&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4000&lt;/span&gt;,a_min&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, a_max&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4000&lt;/span&gt;,s_min&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, s_max&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4000&lt;/span&gt;)]

    accepted &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; ranges:
        r &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ranges&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;status &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;rule &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;:
            accepted&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(r)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;status &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;rule &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            ranges&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;extend(r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;apply_flow(flows[r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;rule]))

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; accepted))

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day19_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day19_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday19_2 = document.querySelectorAll(&#39;[data-tab-target-day19_2]&#39;)
    const tabContentsday19_2 = document.querySelectorAll(&#39;[data-tab-content-day19_2]&#39;)

    tabsday19_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay19_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday19_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday19_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day20_1&#39;&gt;Day 20 (Part 1): Pulse Propagation&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day20_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day20_1-upload-input&#34; name=&#34;day20_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day20_1-run-btn&#34; py-click=&#34;main_day20_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day20_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day20_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day20/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day20_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day20_1=&#34;#day20_1-code&#34; class=&#34;active tab code-title&#34;&gt;day20_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day20_1-code&#34; data-tab-content-day20_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;math&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; prod
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; attrgetter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable, Mapping    

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pulse&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; pulse_list, Pulse, Level
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Broadcaster, FlipFlop, Conjunction, Dummy, Module

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;push_button&lt;/span&gt;(modules: Mapping[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, Module]):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#button = Broadcaster([modules[&amp;#39;broadcaster&amp;#39;]])&lt;/span&gt;
    pulse_list&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Pulse(_from&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;button&amp;#39;&lt;/span&gt;, to&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;broadcaster&amp;#39;&lt;/span&gt;, level&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Level&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;LO))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(pulse_list):
        p: Pulse &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pulse_list&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;popleft()
        modules[p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;to]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;receive_pulse(p)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day20_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day20_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    modules: &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, Module] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {}
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(?P&amp;lt;name&amp;gt;((?P&amp;lt;flag&amp;gt;[%&amp;amp;])(?P&amp;lt;label&amp;gt;[a-z]+))|broadcaster) -&amp;gt; (?P&amp;lt;destinations&amp;gt;[a-z ,]+)&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Build network&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(pattern, line)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Handle case with dummy &amp;#39;output&amp;#39; destination&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;output&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;destinations&amp;#34;&lt;/span&gt;):
            modules[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;output&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Broadcaster(label&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;, destinations&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[])

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt;:
            modules[m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FlipFlop(label&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;:
            modules[m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Conjunction(label&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;broadcaster&amp;#34;&lt;/span&gt;:
            modules[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;broadcaster&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Broadcaster(label&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;broadcaster&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Flag must be % or &amp;amp; or name must be &amp;#39;broadcaster&amp;#39;; line was &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;line&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Wire up modules&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(pattern, line)
        dests &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [d&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;destinations&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (label&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;)): modules[label]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;destinations &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dests
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (name&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;broadcaster&amp;#39;&lt;/span&gt;: modules[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;broadcaster&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;destinations &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dests
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Line was not a valid label or &amp;#39;broadcaster&amp;#39;: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;line&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Set up conjunction module inputs&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; dests:
            name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;broadcaster&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; modules: modules[d] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Dummy(label&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;name)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;(modules[d]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Conjunction: modules[d]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;last_pulse[name] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Level&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;LO


    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;):
        push_button(modules)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pulse_list&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;prod(pulse_list&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;values())&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day20_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day20_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday20_1 = document.querySelectorAll(&#39;[data-tab-target-day20_1]&#39;)
    const tabContentsday20_1 = document.querySelectorAll(&#39;[data-tab-content-day20_1]&#39;)

    tabsday20_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay20_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday20_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday20_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;!-- &lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day20_2&#39;&gt;Day 20 (Part 2): Pulse Propagation&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day20_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day20_2-upload-input&#34; name=&#34;day20_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day20_2-run-btn&#34; py-click=&#34;main_day20_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day20_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day20_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day20/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day20_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day20_2=&#34;#day20_2-code&#34; class=&#34;active tab code-title&#34;&gt;day20_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day20_2-code&#34; data-tab-content-day20_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;90
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; count
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;math&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; prod
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; attrgetter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable, Mapping    

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pulse&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; pulse_list, Pulse, Level
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Broadcaster, FlipFlop, Conjunction, Dummy, Module, Counter

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;push_button_2&lt;/span&gt;(modules: Mapping[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, Module]):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#button = Broadcaster([modules[&amp;#39;broadcaster&amp;#39;]])&lt;/span&gt;
    pulse_list&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Pulse(_from&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;button&amp;#39;&lt;/span&gt;, to&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;broadcaster&amp;#39;&lt;/span&gt;, level&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Level&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;LO))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(pulse_list):
        p: Pulse &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pulse_list&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;popleft()
        modules[p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;to]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;receive_pulse(p)


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;hash_state&lt;/span&gt;(modules: Mapping[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, Module]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    flops: Iterable[FlipFlop] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;((m &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; modules&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;values() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;(m) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; FlipFlop), key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;attrgetter(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;label &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;H&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;state &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Level&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;HI &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; flops)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;load_modules&lt;/span&gt;(data: Iterable[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, Module]:
    modules: &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, Module] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {}
    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(?P&amp;lt;name&amp;gt;((?P&amp;lt;flag&amp;gt;[%&amp;amp;])(?P&amp;lt;label&amp;gt;[a-z]+))|broadcaster) -&amp;gt; (?P&amp;lt;destinations&amp;gt;[a-z ,]+)&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Build network&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(pattern, line)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Handle case with dummy &amp;#39;output&amp;#39; destination&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;output&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;destinations&amp;#34;&lt;/span&gt;):
            modules[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;output&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Broadcaster(label&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;, destinations&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[])

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt;:
            modules[m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FlipFlop(label&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;:
            modules[m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Conjunction(label&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;broadcaster&amp;#34;&lt;/span&gt;:
            modules[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;broadcaster&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Broadcaster(label&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;broadcaster&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Flag must be % or &amp;amp; or name must be &amp;#39;broadcaster&amp;#39;; line was &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;line&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Wire up modules&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(pattern, line)
        dests &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [d&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;destinations&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (label&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;)): modules[label]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;destinations &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dests
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (name&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;broadcaster&amp;#39;&lt;/span&gt;: modules[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;broadcaster&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;destinations &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dests
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Line was not a valid label or &amp;#39;broadcaster&amp;#39;: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;line&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
         
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Set up conjunction module inputs&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; dests:
            name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;broadcaster&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; modules: modules[d] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Counter(label&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;name)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;(modules[d]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Conjunction: modules[d]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;last_pulse[name] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Level&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;LO
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; modules

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day20_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day20_2&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    modules &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; load_modules(data)
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; count():
        push_button_2(modules)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; i &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10_000&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(i)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; modules[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rx&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt; 
        modules[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rx&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;) 

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day20_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    main_day20_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday20_2 = document.querySelectorAll(&#39;[data-tab-target-day20_2]&#39;)
    const tabContentsday20_2 = document.querySelectorAll(&#39;[data-tab-content-day20_2]&#39;)

    tabsday20_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay20_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday20_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday20_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt; --&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day21_1&#39;&gt;Day 21 (Part 1): Step Counter&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day21_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day21_1-upload-input&#34; name=&#34;day21_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day21_1-run-btn&#34; py-click=&#34;main_day21_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day21_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day21_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day21/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day21_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day21_1=&#34;#day21_1-code&#34; class=&#34;active tab code-title&#34;&gt;day21_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day21_1-code&#34; data-tab-content-day21_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)
                
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day21_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day21_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    empties &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;((line_index, char_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;)
    steps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([(line_index, char_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;])
    width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
    height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;64&lt;/span&gt;):
        new_steps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; steps:
            new_steps &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([(step[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, step[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]),
                             (step[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, step[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]),
                             (step[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], step[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), 
                             (step[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], step[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)])
        steps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; new_steps &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;empties  

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(steps)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(steps)

    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day21_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day21_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday21_1 = document.querySelectorAll(&#39;[data-tab-target-day21_1]&#39;)
    const tabContentsday21_1 = document.querySelectorAll(&#39;[data-tab-content-day21_1]&#39;)

    tabsday21_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay21_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday21_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday21_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;!-- &lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day21_2&#39;&gt;Day 21 (Part 2): Step Counter&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day21_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day21_2-upload-input&#34; name=&#34;day21_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day21_2-run-btn&#34; py-click=&#34;main_day21_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day21_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day21_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day21/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day21_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day21_2=&#34;#day21_2-code&#34; class=&#34;active tab code-title&#34;&gt;day21_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day21_2-code&#34; data-tab-content-day21_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input_test.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)
                
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day21_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day21_2&amp;#34;&lt;/span&gt;)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day21_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day21_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday21_2 = document.querySelectorAll(&#39;[data-tab-target-day21_2]&#39;)
    const tabContentsday21_2 = document.querySelectorAll(&#39;[data-tab-content-day21_2]&#39;)

    tabsday21_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay21_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday21_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday21_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt; --&gt;

&lt;!-- &lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day22_1&#39;&gt;Day 22 (Part 1): Sand Slabs&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day22_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day22_1-upload-input&#34; name=&#34;day22_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day22_1-run-btn&#34; py-click=&#34;main_day22_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day22_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day22_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day22/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day22_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day22_1=&#34;#day22_1-code&#34; class=&#34;active tab code-title&#34;&gt;day22_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day22_1-code&#34; data-tab-content-day22_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass, field
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; namedtuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; permutations
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Self

Point &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Point&amp;#34;&lt;/span&gt;, [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;point_under&lt;/span&gt;(p: Point) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Point:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Point(p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;point_above&lt;/span&gt;(p:Point) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Point:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Point(p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;z&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;(slots&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Brick&lt;/span&gt;:
    cells: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[Point]
    vertical: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
    supported_by: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[Self] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; field(default_factory&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;)
    
    &lt;span style=&#34;color:#99f&#34;&gt;@property&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;footprint&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[Point]:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;vertical:
            cell &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;iter&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cells))
            x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cell&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x
            y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cell&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y
            z &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cells)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([Point(x, y, z)])
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cells &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# If not vertical, footprint is self&lt;/span&gt;
    

bricks: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[Brick] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;brick_in&lt;/span&gt;(loc: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;], bricks: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[Brick], current_brick&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Brick &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; bricks:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; loc &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cells: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; b
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (length&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(matches&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; [b &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; bricks &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; loc &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cells])) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: 
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; matches[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; current_brick: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow comapring to current brick&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; matches[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; length &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Detected more than one brick in cell &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;loc&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;matches&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day22_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;(get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day22_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(\d+),(\d+),(\d+)~(\d+),(\d+),(\d+)&amp;#34;&lt;/span&gt;, line)
        x1, x2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;))
        x1, x2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(x1, x2), &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(x1, x2)
        y1, y2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;))
        y1, y2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(y1, y2), &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(y1, y2)
        z1, z2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;))
        z1, z2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(z1, z2), &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(z1, z2)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; x1 &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; x2: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Along X direction&lt;/span&gt;
            bricks&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Brick(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(Point(x, y1, z1) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(x1, x2&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;): &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Along y direction&lt;/span&gt;
            bricks&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Brick(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(Point(x1, y, z1) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(y1, y2&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))))
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;): &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Along z direction&lt;/span&gt;
            bricks&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Brick(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(Point(x1, y1, z) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; z &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(z1, z2&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)), vertical&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;))
            
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            bricks&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Brick(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([Point(x1, y1, z1),])))

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Bricks created&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Let bricks fall down&lt;/span&gt;
    anything_moved &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; anything_moved:
        anything_moved &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(bricks):
            stationary &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; cell &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;footprint:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; cell&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# on ground&lt;/span&gt;
                    stationary &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; x&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; brick_in(point_under(cell), bricks, b): &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# space underneath is occupied&lt;/span&gt;
                    stationary &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; stationary:
                bricks[index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Brick(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(Point(c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;z&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cells), vertical&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;vertical)
                anything_moved &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Bricks have fallen&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#calculate supporting bricks for all bricks&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; bricks:
        b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;supported_by &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [brick_in(point_under(c), bricks) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;footprint &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; brick_in(point_under(c), bricks) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;]

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(bricks):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;supported_by:
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Brick &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; is supported by bricks &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(bricks&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(c)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;supported_by)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Brick &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; is not supported by any other bricks&amp;#34;&lt;/span&gt;)
    

    removable_bricks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; a_index, a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(bricks):
        a_removable &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; bricks:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; b: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;supported_by &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;supported_by &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;supported_by) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
                a_removable &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; a_removable: 
            removable_bricks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;(removable_bricks)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#711 was too high&lt;/span&gt;
        

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day22_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day22_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday22_1 = document.querySelectorAll(&#39;[data-tab-target-day22_1]&#39;)
    const tabContentsday22_1 = document.querySelectorAll(&#39;[data-tab-content-day22_1]&#39;)

    tabsday22_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay22_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday22_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday22_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day22_2&#39;&gt;Day 22 (Part 2): Sand Slabs&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day22_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day22_2-upload-input&#34; name=&#34;day22_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day22_2-run-btn&#34; py-click=&#34;main_day22_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day22_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day22_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day22/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day22_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day22_2=&#34;#day22_2-code&#34; class=&#34;active tab code-title&#34;&gt;day22_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day22_2-code&#34; data-tab-content-day22_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input_test.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)
                
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day22_2&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day22_2&amp;#34;&lt;/span&gt;)

    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day22_2-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day22_2()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday22_2 = document.querySelectorAll(&#39;[data-tab-target-day22_2]&#39;)
    const tabContentsday22_2 = document.querySelectorAll(&#39;[data-tab-content-day22_2]&#39;)

    tabsday22_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay22_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday22_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday22_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt; --&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day24_1&#39;&gt;Day 24 (Part 1): Never Tell Me The Odds&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day24_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day24_1-upload-input&#34; name=&#34;day24_1-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day24_1-run-btn&#34; py-click=&#34;main_day24_1&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day24_1-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day24_1-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day24/main_1.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day24_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day24_1=&#34;#day24_1-code&#34; class=&#34;active tab code-title&#34;&gt;day24_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day24_1-code&#34; data-tab-content-day24_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; combinations
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;, slots&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Stone&lt;/span&gt;:
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    z: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    vx: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    vy: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    vz: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    slope_2d:&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;sign&lt;/span&gt;(x):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(x)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;x

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day24_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day24_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(-?\d+),\s+(-?\d+),\s+(-?\d+) @\s+(-?\d+),\s+(-?\d+),\s+(-?\d+)&amp;#34;&lt;/span&gt;

    stone_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(pattern, line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)
    stones &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [Stone(x&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)),
                    y&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)),
                    z&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)),
                    vx&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)),
                    vy&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)),
                    vz&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;)),
                    slope_2d&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;))&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)))
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; stone_data]
    
    count &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    bounds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;200000000000000&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;400000000000000&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; a, b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; combinations(stones, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; a&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;slope_2d &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;slope_2d: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# parallel&lt;/span&gt;
        x_cross &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (a&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;slope_2d &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; a&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;slope_2d &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; a&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; (a&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;slope_2d &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;slope_2d)
        y_cross &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;slope_2d &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (x_cross &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; a&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; a&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; bounds[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; x_cross &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; bounds[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; bounds[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; y_cross &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; bounds[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; \
            sign(x_cross &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; a&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; sign(a&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;vx) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; sign(x_cross &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; sign(b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;vx):
            count &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    display(count, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day24_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day24_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday24_1 = document.querySelectorAll(&#39;[data-tab-target-day24_1]&#39;)
    const tabContentsday24_1 = document.querySelectorAll(&#39;[data-tab-content-day24_1]&#39;)

    tabsday24_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay24_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday24_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday24_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;!-- &lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day24_2&#39;&gt;Day 24 (Part 2): Never Tell Me The Odds&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;italic&#34;&gt;A description for this part of the day&#39;s problem is coming soon.&lt;/span&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day24_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day24_2-upload-input&#34; name=&#34;day24_2-upload&#34;&gt;
                &lt;/div&gt;
                
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-pyscript-button&#34; id=&#34;day24_2-run-btn&#34; py-click=&#34;main_day24_2&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day24_2-output&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;script type=&#34;py&#34;&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day24_2-upload-input&#39;)
            &lt;/script&gt;
            &lt;script type=&#34;py&#34; src=&#34;day24/main_2.py&#34;&gt;&lt;/script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day24_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day24_2=&#34;#day24_2-code&#34; class=&#34;active tab code-title&#34;&gt;day24_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day24_2-code&#34; data-tab-content-day24_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_input&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; kwargs:
            kwargs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;, slots&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Stone&lt;/span&gt;:
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    z: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    vx: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    vy: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    vz: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    slope_2d:&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;sign&lt;/span&gt;(x):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(x)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;x

pattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(-?\d+),\s+(-?\d+),\s+(-?\d+) @\s+(-?\d+),\s+(-?\d+),\s+(-?\d+)&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day24_1&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day24_1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    stone_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(pattern, line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)
    stones &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [Stone(x&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)),
                    y&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)),
                    z&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)),
                    vx&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)),
                    vy&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)),
                    vz&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;)),
                    slope_2d&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;))&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)))
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; stone_data]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# If N is the number of hailstones, we will solve for N+6 Independent&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Variables - x, y, z, vx, vy, vz for the thrown projectile, &lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# and the N intercept times&lt;/span&gt;

    

    
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;

    display(result, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day24_1-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    main_day24_1()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday24_2 = document.querySelectorAll(&#39;[data-tab-target-day24_2]&#39;)
    const tabContentsday24_2 = document.querySelectorAll(&#39;[data-tab-content-day24_2]&#39;)

    tabsday24_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay24_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday24_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday24_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt; --&gt;

&lt;!--NEW_DAYS_ABOVE_THIS_LINE--&gt;

&lt;py-config style=&#34;display:none&#34;&gt;
    packages=[&#39;rich&#39;]
    [js_modules.main]
    &#34;https://cdn.jsdelivr.net/npm/xterm@5.3.0/+esm&#34; = &#39;xterm&#39;
    &#34;https://cdn.jsdelivr.net/npm/xterm@5.3.0/css/xterm.css&#34; = &#39;xterm&#39;
    [files] 
    &#34;./utils.py&#34; = &#34;./utils.py&#34;
&lt;/py-config&gt;

&lt;style&gt;
    /* Code tags not in highlight blocks */
    code:not(.nocode):not(.language-python){
        --tw-text-opacity: 1; 
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;


&lt;script&gt;    
    //Create Load PyScript buttons:
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        btn_locations = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(btn_locations).forEach(div =&gt; {
            div.classList.add(&#39;my-2&#39;, &#39;md:mx-4&#39;, &#39;border-2&#39;, &#39;border-blue-200&#39;, &#39;p-2&#39;, &#39;grid&#39;, &#39;grid-cols-1&#39;, &#39;rounded-xl&#39;, &#39;flex&#39;, &#39;flex-row&#39;, &#39;justify-center&#39;, &#39;w-auto&#39;, &#34;py-1&#34;, &#39;h-auto&#39;, &#39;md:h-full&#39;)
            let p = document.createElement(&#39;p&#39;)
            p.classList.add(&#39;my-auto&#39;, &#39;mr-4&#39;, &#39;italic&#39;, &#39;want-to-run-text&#39;)
            p.innerHTML = &#34;Want to run these examples live in your browser?&#34;
            if (div.classList.contains(&#34;viz&#34;)){
                p.innerHTML += &#39; &lt;p class=&#34;font-semibold text-green-600&#34;&gt;This example includes a visualization.&lt;/p&gt;&#39;
            }
            div.appendChild(p)
            //button
            let btn = document.createElement(&#39;button&#39;)
            btn.innerText = &#34;Load PyScript&#34;
            btn.classList.add(&#39;load-pyscript-button&#39;, &#39;h-12&#39;)
            btn.onclick = loadPyScript
            div.appendChild(btn)
        });
    })

    /* Make Table of Contents */
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        headings = document.getElementsByClassName(&#39;post-h2&#39;)
        tocContents = document.getElementById(&#39;toc-contents&#39;)
        Array.from(headings).forEach(header =&gt; {
            //&lt;p&gt;&lt;a class = &#34;text-gray-500&#34; href=&#34;#day1&#34;&gt;Day 1&lt;/a&gt;&lt;/p&gt;
            const line = document.createElement(&#39;p&#39;)
            const link = document.createElement(&#39;a&#39;)
            link.href = `#${header.id}`
            link.innerText = header.innerText
            line.appendChild(link)
            if (document.getElementById(`${header.id}-viz-btn`) !== null){
                const viztag = document.createElement(&#34;span&#34;)
                viztag.innerText = &#34; - Includes Visualization&#34;
                line.appendChild(viztag)
            }
            tocContents.appendChild(line)
        })
    })

    function loadPyScript() {     
        delete loadPyScript //only run this function once

        load_buttons = document.getElementsByClassName(&#39;load-pyscript-button&#39;)
        Array.from(load_buttons).forEach(elem =&gt; {
            elem.innerHTML = &#34;&lt;/span&gt;&lt;span class=&#39;align-middle spinner&#39;&gt;&lt;/span&gt;&lt;span class=&#39;inline-block&#39;&gt;Loading...&#34;
            elem.classList.add(&#34;load-pyscript-button-loading&#34;)
        })

        /* &lt;div class=&#34;smooth spinner&#34;&gt;&lt;/div&gt; */

        /* texts = document.getElementsByClassName(&#39;want-to-run-text&#39;)
        Array.from(texts).forEach(elem =&gt; {
            elem.innerHTML = &#34;&#34;
        }) */

        //load css
        css_link = document.createElement(&#34;link&#34;)
        css_link.rel = &#34;stylesheet&#34;
        css_link.type = &#34;text/css&#34;
        css_link.href = &#34;https://pyscript.net/releases/2023.12.1/core.css&#34;
        //css_link.href = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.css&#34;
        document.getElementsByTagName(&#39;head&#39;)[0].appendChild(css_link)

        //load cs
        script_tag = document.createElement(&#39;script&#39;)
        script_tag.src = &#34;https://pyscript.net/releases/2023.12.1/core.js&#34;
        script_tag.type = &#34;module&#34;
        //script_tag.src = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.js&#34;
        document.body.append(script_tag)        
    }
    document.addEventListener(&#39;py:ready&#39;, () =&gt; {
        static = document.getElementsByClassName(&#39;static-example&#39;)
        live = document.getElementsByClassName(&#39;live-example&#39;)
        Array.from(static).forEach(div =&gt; {
            div.classList.add(&#39;hidden&#39;)
        })
        Array.from(live).forEach(div =&gt; {
            div.classList.remove(&#39;hidden&#39;)
        })
        load_buttons = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(load_buttons).forEach(elem =&gt; {
            elem.classList.add(&#39;hidden&#39;)
        })
    })
&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;tabs.css&#34;&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2022</title>
      <link>https://jeff.glass/post/advent-of-code-2022/</link>
      <pubDate>Sat, 26 Nov 2022 14:23:16 -0600</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2022/</guid>
      <description>&lt;style&gt;
    /* Code tags not in highlight blocks */
    code:not(.nocode):not(.language-python){
        --tw-text-opacity: 1; 
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;p class=&#34;post-p&#34;&gt;Another year, another 25 curious code challenges from &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code!&lt;/a&gt; This year, I&#39;ll be attempting to make as many solutions as possible something you can run right here in your browser window via &lt;a href=&#34;https://pyscript.net&#34;&gt;PyScript&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;w-auto pt-2 pb-4 pl-2 mr-2 -ml-2 align-top bg-gray-200&#34;&gt;
    &lt;p class=&#34;text-2xl relative-anchor&#34; id=&#34;toc&#34;&gt;Table of Contents&lt;/p&gt;
    &lt;div class=&#34;ml-8 font-semibold&#34; id=&#34;toc-contents&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;py-config class=&#34;hidden&#34;&gt;
    packages = [&#39;anytree&#39;, &#39;rich&#39;]
    terminal = false
    [[fetch]]
    files = [&#39;utils.py&#39;]
    [[fetch]]
    from = &#39;./day10&#39;
    files = [&#39;addition.py&#39;, &#39;computer.py&#39;, &#39;instruction.py&#39;, &#39;instructionparser.py&#39;, &#39;noop.py&#39;, &#39;parser_10_1.py&#39;, &#39;register.py&#39;, &#39;screen.py&#39;]
    #to_folder = &#39;day10&#39;
&lt;/py-config&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day0&#39;&gt;Day 0 - Testing the Machinery&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;In preparation for this year&#39;s AoC, I&#39;ve set up a Hugo templating system to allow me to quickly write and share each day&#39;s code. The setup will look much like this, with a brief explanation here, the code below, and an option to run live demos. The &lt;code&gt;get_input&lt;/code&gt; function handles getting input from the textarea or file upload.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day0-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day0-upload-input&#34; name=&#34;day0-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day0-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day0-run-btn&#34; py-click=&#34;main_day0()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day0-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day0/main.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day0-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day0=&#34;#day0-code&#34; class=&#34;active tab code-title&#34;&gt;day0.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day0-code&#34; data-tab-content-day0 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day0&lt;/span&gt;():
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Input given: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day0&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
         target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day0-output&amp;#34;&lt;/span&gt;,
         append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday0 = document.querySelectorAll(&#39;[data-tab-target-day0]&#39;)
    const tabContentsday0 = document.querySelectorAll(&#39;[data-tab-content-day0]&#39;)

    tabsday0.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay0
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday0.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday0.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day1_1&#39;&gt;Day 1: Calorie Counting (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;And we&#39;re off! As common for day 1 of AoC, this puzzle is is about making sure you can read input and identify line breaks, and do some very simple parsing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One way to solve this problem would be to calculate the sum of calories in every elf&#39;s pack, then find the max of those. Astute coders will notice that you don&#39;t need to actually hold all the packs in memory at once; you can calculate them one at a time and retain the highest value seen so far, which avoids undue memory usage. Python more-or-less does this for us if we use generator expressions for everything.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day1_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day1_1-upload-input&#34; name=&#34;day1_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day1_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day1_1-run-btn&#34; py-click=&#34;main_day1_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day1/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day1_1-viz-btn&#34; py-click=&#34;viz_day1_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day1_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day1/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day1_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day1_1=&#34;#day1_1-code&#34; class=&#34;active tab code-title&#34;&gt;day1_1.py&lt;/li&gt;
        &lt;li data-tab-target-day1_1=&#34;#day1_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day1_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day1_1-code&#34; data-tab-content-day1_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day1_1&lt;/span&gt;():
    elf_packs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day1_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    elf_calories &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; elf_packs)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(elf_calories)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
         target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-output&amp;#34;&lt;/span&gt;,
         append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day1_1-viz-code&#34; data-tab-content-day1_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Chart, document, Object
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;j&lt;/span&gt;(obj):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; to_js(obj, dict_converter&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Object&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fromEntries)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day1_1&lt;/span&gt;():
    asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(viz_day1_1_coro())

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day1_1_coro&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; ctx&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-viz-canvas&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        ctx &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;canvas&amp;#34;&lt;/span&gt;)
        ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-viz-canvas&amp;#34;&lt;/span&gt;
        parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-viz&amp;#34;&lt;/span&gt;)
        parent&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(ctx)
        parent&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;48rem&amp;#34;&lt;/span&gt;
        parent&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;24rem&amp;#34;&lt;/span&gt;
        parent&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;relative&amp;#39;&lt;/span&gt;

    elf_packs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day1_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    elf_calories &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; elf_packs]
    most &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(elf_calories)
    most_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; elf_calories&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(most)

    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(elf_calories)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
         target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-output&amp;#34;&lt;/span&gt;,
         append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

    my_chart &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Chart&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(ctx, j({
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: j({
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Elf &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(elf_packs))],
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;datasets&amp;#34;&lt;/span&gt;: [j({
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: elf_calories,
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;stack&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;backgroundColor&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rgba(75,192,192,0.4)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; cal &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; most &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; cal &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; elf_calories ] 
            })]
        }),
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;options&amp;#34;&lt;/span&gt;: j({
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;animation&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;responsive&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;, 
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;: j({
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;legend&amp;#34;&lt;/span&gt;: j({
                    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
                }),
            }),
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;scales&amp;#34;&lt;/span&gt;: j({
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;: j({
                    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;stacked&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
                }),
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;: j({
                    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;beginAtZero&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
                })
            })
        })
    }))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday1_1 = document.querySelectorAll(&#39;[data-tab-target-day1_1]&#39;)
    const tabContentsday1_1 = document.querySelectorAll(&#39;[data-tab-content-day1_1]&#39;)

    tabsday1_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay1_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday1_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday1_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day1_2&#39;&gt;Day 1: Calorie Counting (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Another common theme with Advent of Code - part 2 on a given day will try to subvert the optimizations you may have made in part 1!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For a quick-and-dirty solution here, I&#39;ll use the &lt;code&gt;sorted&lt;/code&gt; function to convert our generator into a sorted list, then sum the last (largest) three elements. If this were a larger list of elements, we could come up with our own generator that injested elements from an Iterable one by one, and retained the largest three.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day1_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day1_2-upload-input&#34; name=&#34;day1_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day1_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day1_2-run-btn&#34; py-click=&#34;main_day1_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day1_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day1/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day1_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day1_2=&#34;#day1_2-code&#34; class=&#34;active tab code-title&#34;&gt;day1_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day1_2-code&#34; data-tab-content-day1_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day1_2&lt;/span&gt;():
    elf_packs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day1_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    elf_calories &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; elf_packs)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(elf_calories[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;:])&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
         target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_2-output&amp;#34;&lt;/span&gt;,
         append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday1_2 = document.querySelectorAll(&#39;[data-tab-target-day1_2]&#39;)
    const tabContentsday1_2 = document.querySelectorAll(&#39;[data-tab-content-day1_2]&#39;)

    tabsday1_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay1_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday1_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday1_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day2_1&#39;&gt;Day 2: Rock Paper Scissors (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Some slightly more complicated input handling today, with some slightly more involved conditional logic to accumulate a score&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s also quite useful to me to be able to run these examples from the terminal, as well as in PyScript. If you look at the end of today&#39;s code, you&#39;ll see a use of checking whether we&#39;re running in pyodide (&lt;code&gt;if &#39;pyodide&#39; in sys.modules&lt;/code&gt;), and chosing where to snag the input from based on that determination.&lt;/code&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day2_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day2_1-upload-input&#34; name=&#34;day2_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day2_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day2_1-run-btn&#34; py-click=&#34;main_day2_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day2_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day2/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day2_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day2_1=&#34;#day2_1-code&#34; class=&#34;active tab code-title&#34;&gt;day2_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day2_1-code&#34; data-tab-content-day2_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;translateLine&lt;/span&gt;(s):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;translate(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maketrans({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;}))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreFromStrategy&lt;/span&gt;(theirs, mine):
    selectedShapePoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;}
    points &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; selectedShapePoints[mine]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; theirs &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; mine: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#draw&lt;/span&gt;
        points &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt;  ((theirs, mine) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt;
        (theirs, mine) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt;
        (theirs, mine) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;)): &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#win&lt;/span&gt;
        points &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; points

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreFromInput&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(scoreFromStrategy(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;translateLine(line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day2_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day2_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day2_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday2_1 = document.querySelectorAll(&#39;[data-tab-target-day2_1]&#39;)
    const tabContentsday2_1 = document.querySelectorAll(&#39;[data-tab-content-day2_1]&#39;)

    tabsday2_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay2_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday2_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday2_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day2_2&#39;&gt;Day 2: Rock Paper Scissors (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I fully admit to my solution here trying to be way too clever. The speediest way to solve this problem (both in execution time and in writing) would almost certainly be to create a looking table of the 9 possible input lines with their resultant scores, and just loop over the input and sum according to those scores.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That said, this is a good chance to start stirring the brain cells on another common theme in Advnent of Code challenges - using one part of the input to determine how to interpret another part of the input.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day2_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day2_2-upload-input&#34; name=&#34;day2_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day2_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day2_2-run-btn&#34; py-click=&#34;main_day2_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day2_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day2/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day2_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day2_2=&#34;#day2_2-code&#34; class=&#34;active tab code-title&#34;&gt;day2_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day2_2-code&#34; data-tab-content-day2_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; cycle
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;translateLine&lt;/span&gt;(s):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;translate(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maketrans({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;}))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreFromStrategy&lt;/span&gt;(theirs, result):
    theirsIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(theirs) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# X,Y,Z =&amp;gt; 0,1,2&lt;/span&gt;
    relativeIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Offset by whether we lose, win, or draw&lt;/span&gt;
    selectedShape &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;][(theirsIndex &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; relativeIndex[result]) &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Find our choice&lt;/span&gt;
    selectedShapePoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Points for our choice&lt;/span&gt;

    resultPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;}
    score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; selectedShapePoints[selectedShape] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; resultPoints[result]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; score 

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreFromInput&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(scoreFromStrategy(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;translateLine(line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day2_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day2_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day2_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday2_2 = document.querySelectorAll(&#39;[data-tab-target-day2_2]&#39;)
    const tabContentsday2_2 = document.querySelectorAll(&#39;[data-tab-content-day2_2]&#39;)

    tabsday2_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay2_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday2_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday2_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day3_1&#39;&gt;Day 3: Rucksack Reorganization (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;This is one of those neat days where one can use a neat feature of Python - set operations - to make finding common elements between two iterables fast and easy.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;On a whim, I &lt;a href=&#34;https://youtu.be/VELprb8t9zg&#34;&gt;hopped on a livestream&lt;/a&gt; and whipped up a visualization of this part of the solution, which you can check out if you run the live examples on this page.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day3_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day3_1-upload-input&#34; name=&#34;day3_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day3_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day3_1-run-btn&#34; py-click=&#34;main_day3_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day3/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day3_1-viz-btn&#34; py-click=&#34;viz_day3_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day3_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day3/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day3_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day3_1=&#34;#day3_1-code&#34; class=&#34;active tab code-title&#34;&gt;day3_1.py&lt;/li&gt;
        &lt;li data-tab-target-day3_1=&#34;#day3_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day3_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day3_1-code&#34; data-tab-content-day3_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

charValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase)} &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;\
            {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_uppercase)}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prioritySum&lt;/span&gt;(data):
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        midpoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(line[:midpoint])
        second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(line[midpoint:])
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; charValue[(first &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; second)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day3_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day3_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;prioritySum(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; prioritySum(data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;result&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day3_1-viz-code&#34; data-tab-content-day3_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

charValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase)} &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;\
            {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_uppercase)}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prioritySum&lt;/span&gt;(data):
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        midpoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(line[:midpoint])
        second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(line[midpoint:])
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; charValue[(first &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; second)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;visualizeProcessing&lt;/span&gt;(data, tbody):    
    tbody&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fontFamily &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;monospace&amp;#39;&lt;/span&gt;
    tbody&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;unformatted-table&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;tr&amp;#39;&lt;/span&gt;)
        scoreElement &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;)
        firstElement &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;)
        secondElement &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#styling&lt;/span&gt;
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bg-gray-900&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-gray-300&amp;#34;&lt;/span&gt;)
        scoreElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;paddingRight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2rem&amp;#34;&lt;/span&gt;
        firstElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;textAlign &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;
        firstElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;paddingRight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0.5rem&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Actually add the content&lt;/span&gt;
        midpoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line[:midpoint]
        second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line[midpoint:]
        commonChar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(first) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(second))&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
        score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; charValue[commonChar]

        first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; first&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;replace(commonChar, &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span style=&amp;#34;text-shadow: 0 0 5px #ffffff; color: rgb(255, 255, 255)&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;commonChar&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;)
        second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; second&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;replace(commonChar, &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span style=&amp;#34;text-shadow: 0 0 5px #ffffff; color: rgb(255, 255, 255)&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;commonChar&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Format and insert text&lt;/span&gt;
        firstElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;span&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; first &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;/span&amp;gt;&amp;#34;&lt;/span&gt;
        secondElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;span&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; second &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;/span&amp;gt;&amp;#34;&lt;/span&gt;
        scoreElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;commonChar&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;score&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#34;&lt;/span&gt;

        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(scoreElement)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(firstElement)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(secondElement)
        tbody&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(row)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#grayRows = js.document.querySelectorAll(&amp;#34;tbody tr:nth-child(2n-1)&amp;#34;)&lt;/span&gt;
    grayRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;querySelectorAll(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;tr&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; grayRows:
        js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;removeProperty(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;background-color&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;setupTable&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    table &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;table&amp;#39;&lt;/span&gt;)
    table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;)
    tbody &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;tbody&amp;#39;&lt;/span&gt;)
    table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(tbody)
    vizelem &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_1-viz&amp;#34;&lt;/span&gt;)
    vizelem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;)
    vizelem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;h-76&amp;#34;&lt;/span&gt;)
    vizelem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-scroll&amp;#34;&lt;/span&gt;)
    vizelem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(table)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; tbody

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day3_1&lt;/span&gt;():
        tbody &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; setupTable()
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day3_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        visualizeProcessing(data, tbody)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;prioritySum(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; prioritySum(data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;result&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday3_1 = document.querySelectorAll(&#39;[data-tab-target-day3_1]&#39;)
    const tabContentsday3_1 = document.querySelectorAll(&#39;[data-tab-content-day3_1]&#39;)

    tabsday3_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay3_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday3_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday3_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day3_2&#39;&gt;Day 3: Rucksack Reorganization (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Similar to part 1, part 2 is much easier if you use your chosen language&#39;s set operations to quickly narrow down the given elements to only the ones common between each trio of elves. I suppose the &#34;gotcha&#34; in this part is meant to catch out anyone who implemented a nested-for-loop, check-each-element-one-by-one solution to part 1.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day3_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day3_2-upload-input&#34; name=&#34;day3_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day3_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day3_2-run-btn&#34; py-click=&#34;main_day3_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day3_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day3/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day3_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day3_2=&#34;#day3_2-code&#34; class=&#34;active tab code-title&#34;&gt;day3_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day3_2-code&#34; data-tab-content-day3_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Collection

charValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase)} &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;\
            {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_uppercase)}
        
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreBy3&lt;/span&gt;(data):
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data[::&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;]):
        b &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
        c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]
        common &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(a) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(b) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(c))
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(common) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        common &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; common&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()

        score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; charValue[common]
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; score
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day3_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day3_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreBy3(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; scoreBy3(data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;result&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday3_2 = document.querySelectorAll(&#39;[data-tab-target-day3_2]&#39;)
    const tabContentsday3_2 = document.querySelectorAll(&#39;[data-tab-content-day3_2]&#39;)

    tabsday3_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay3_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday3_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday3_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day4_1&#39;&gt;Day 4: Camp Cleanup (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Some year, somewhere, I shant be tricked by forgetting to convert input strings to integers.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is not that year apparently. The provided example input works if you only compair the inputs alphanumerically, since it only uses single-digit numbers, but the real input only yields the correct solution if you remember to convert the inputs to integers.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day4_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day4_1-upload-input&#34; name=&#34;day4_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day4_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day4_1-run-btn&#34; py-click=&#34;main_day4_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day4_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day4/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day4_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day4_1=&#34;#day4_1-code&#34; class=&#34;active tab code-title&#34;&gt;day4_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day4_1-code&#34; data-tab-content-day4_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;fullyContains&lt;/span&gt;(a: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;] , b: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solutionFromInput&lt;/span&gt;(data):
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ((p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;), p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (((&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])), (&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]))) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    matches &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (fullyContains(pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; fullyContains(pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;],pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; matches)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day4_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day4_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solutionFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day4_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solutionFromInput(data))
       &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday4_1 = document.querySelectorAll(&#39;[data-tab-target-day4_1]&#39;)
    const tabContentsday4_1 = document.querySelectorAll(&#39;[data-tab-content-day4_1]&#39;)

    tabsday4_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay4_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday4_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday4_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day4_2&#39;&gt;Day 4: Camp Cleanup (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I&#39;m certain there&#39;s a more clever way to determine whether two ranges overlap; I&#39;ve used the brute-force method to check if either of the endpoints of each pair lies within (or equals) the endpoints of the other pair. I have a feeling, from the symmetry of the boolean logic, that it could be simplified somehow, but this is functional.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day4_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day4_2-upload-input&#34; name=&#34;day4_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day4_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day4_2-run-btn&#34; py-click=&#34;main_day4_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day4_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day4/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day4_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day4_2=&#34;#day4_2-code&#34; class=&#34;active tab code-title&#34;&gt;day4_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day4_2-code&#34; data-tab-content-day4_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;overlaps&lt;/span&gt;(a: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;] , b: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
           (b[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (b[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solutionFromInput&lt;/span&gt;(data):
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ((p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;), p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (((&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])), (&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]))) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    matches &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (overlaps(pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; matches)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day4_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day4_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(data)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solutionFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day4_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solutionFromInput(data))
       &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday4_2 = document.querySelectorAll(&#39;[data-tab-target-day4_2]&#39;)
    const tabContentsday4_2 = document.querySelectorAll(&#39;[data-tab-content-day4_2]&#39;)

    tabsday4_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay4_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday4_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday4_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day5_1&#39;&gt;Day 5: Supply Stacks (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;As I&#39;ve experienced in previous years, the process of identifying a strategy or algorithm to solve a problem, and the creating the data structure for that algorithm, go hand in hand.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;In today&#39;s case, the fact that the input is presented row-by-row, but the data is relevant column-by-column, means that a cerain amount of input processessing is necessary to make the data useful. But once it is, the solution is relatively straightfoward.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day5_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day5_1-upload-input&#34; name=&#34;day5_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day5_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day5_1-run-btn&#34; py-click=&#34;main_day5_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day5/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day5_1-viz-btn&#34; py-click=&#34;viz_day5_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day5_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day5/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day5_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day5_1=&#34;#day5_1-code&#34; class=&#34;active tab code-title&#34;&gt;day5_1.py&lt;/li&gt;
        &lt;li data-tab-target-day5_1=&#34;#day5_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day5_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day5_1-code&#34; data-tab-content-day5_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewType

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# The &amp;#39;yard&amp;#39; is the collection of all the stacks of crates&lt;/span&gt;
yardType &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; NewType(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;yardType&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(NamedTuple):
    quantity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    from_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    to_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#(&amp;#34;Instruction&amp;#34;, (&amp;#39;quantity&amp;#39;, &amp;#39;from_stack&amp;#39;, &amp;#39;to_stack&amp;#39;))&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solutionFromInput&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    stacks, instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parseInput(data)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructions:
        stacks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; operateOn(stacks, ins)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; topCrates(stacks)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parseInput&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[yardType, &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[Instruction]]:
    firstBlankLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
    cratePositions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[:firstBlankLine]
    cratePositions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reverse() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#ordered bottom to top&lt;/span&gt;
    instructionLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[firstBlankLine&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Create crate data struction&lt;/span&gt;
    crateNameLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#get crate labels from line&lt;/span&gt;
    crates &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {name: [] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; name &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crateNameLine&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#create dicts per line&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, crateName &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;::&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;]):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; crateName &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
                crates[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(crateNameLine[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crateName) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Add crate to list&lt;/span&gt;
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Parse instructions&lt;/span&gt;
    instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructionLines:
        match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;move (?P&amp;lt;num&amp;gt;\d+) from (?P&amp;lt;from_stack&amp;gt;\d+) to (?P&amp;lt;to_stack&amp;gt;\d+)&amp;#39;&lt;/span&gt;, ins)
        num, from_stack, to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)

        instructions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Instruction(
                quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;)),
                from_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;),
                to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)
            ))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (crates, instructions)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;operateOn&lt;/span&gt;(crates: yardType, ins: Instruction) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; yardType:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#printCrates(crates)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity):
        crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop())
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; crates

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;topCrates&lt;/span&gt;(crates: yardType):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;values()])
    

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day5_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day5_1&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solutionFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;inputtest.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solutionFromInput(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day5_1-viz-code&#34; data-tab-content-day5_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;153
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;154
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;155
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;156
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;157
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;158
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;159
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;160
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;161
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;162
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;163
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;164
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;165
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;166
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;167
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;168
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;169
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;170
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;171
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;172
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;173
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;174
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;175
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;176
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;177
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;178
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;179
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;180
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;181
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;182
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;183
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;184
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;185
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;186
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;187
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;188
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;189
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;190
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;191
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;192
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;193
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;194
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;195
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;196
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;197
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;198
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;199
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;200
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;201
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;202
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;203
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;204
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;205
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;206
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;207
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;208
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;209
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;210
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;211
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;212
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;213
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;214
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;215
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;216
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;217
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;218
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;219
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;220
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;221
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;222
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;223
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;224
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;225
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;226
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;227
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;228
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;229
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;230
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;231
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;232
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;233
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;234
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;235
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;236
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;237
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;238
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;239
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;240
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;241
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;242
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;243
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;244
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;245
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;246
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;247
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;248
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;249
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;250
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;251
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;252
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;253
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;254
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;255
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;256
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day5_1&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;functools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; partial
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; anime, Object
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js, create_proxy
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewType

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# The &amp;#39;yard&amp;#39; is the collection of all the stacks of crates&lt;/span&gt;
    yardType &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; NewType(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;yardType&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;])

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(NamedTuple):
        quantity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
        from_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
        to_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;j&lt;/span&gt;(obj):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; to_js(obj, dict_converter&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Object&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fromEntries)

    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day5_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)        

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parseInput&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[yardType, &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[Instruction]]:
        firstBlankLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        cratePositions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[:firstBlankLine]
        cratePositions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reverse() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#ordered bottorstBlankLine = data.index(&amp;#34;&amp;#34;)&lt;/span&gt;
        cratePositions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[:firstBlankLine]
        cratePositions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reverse() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#ordered bottom to top&lt;/span&gt;
        instructionLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[firstBlankLine&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Create crate data struction&lt;/span&gt;
        crateNameLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#get crate labels from line&lt;/span&gt;
        crates &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {name: [] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; name &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crateNameLine&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#create dicts per line&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, crateName &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;::&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;]):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; crateName &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
                    crates[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(crateNameLine[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crateName) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Add crate to list&lt;/span&gt;
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Parse instructions&lt;/span&gt;
        instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructionLines:
            match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;move (?P&amp;lt;num&amp;gt;\d+) from (?P&amp;lt;from_stack&amp;gt;\d+) to (?P&amp;lt;to_stack&amp;gt;\d+)&amp;#39;&lt;/span&gt;, ins)
            num, from_stack, to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)

            instructions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Instruction(
                    quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;)),
                    from_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;),
                    to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)
                ))
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (crates, instructions)

    yard, instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parseInput(data)

    &lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Crate&lt;/span&gt;():
        label:&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
        element:&lt;span style=&#34;color:#366&#34;&gt;object&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __str__(self):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;label

    &lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Stack&lt;/span&gt;():
        crates: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;
        x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

    overall &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1-viz&amp;#34;&lt;/span&gt;)
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;margin &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;50px 50px 50px 50px&amp;#34;&lt;/span&gt;
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;relative&amp;#34;&lt;/span&gt;
    div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(div)

    divHeight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;800&lt;/span&gt;
    divWidth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;600&lt;/span&gt;

    startColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Aquamarine&amp;#34;&lt;/span&gt;
    endColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;

    div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divHeight&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
    div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divWidth&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
    div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#eee&amp;#34;&lt;/span&gt;

    floorY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; divHeight &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;

    floor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;floor&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#777&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;10px&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divWidth&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divHeight&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;floorY&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0px&amp;#34;&lt;/span&gt;
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(floor)

    textOutput &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;)
    textOutput&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1_text_output&amp;#34;&lt;/span&gt;
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;insertBefore(textOutput, overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;nextSibling)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#&amp;lt;button onclick=&amp;#34;startAnimation()&amp;#34;&amp;gt;Play&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#js.startAnimation = myTimeline.play&lt;/span&gt;
    playButton &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;)
    playButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Play&amp;#34;&lt;/span&gt;
    playButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;padding &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.5rem 1rem .5rem 1rem&amp;#34;&lt;/span&gt;
    playButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;border &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2px solid #2c2e34&amp;#34;&lt;/span&gt;
    playButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#bbf7d0&amp;#34;&lt;/span&gt;
    

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#&amp;lt;button onclick=&amp;#34;stopAnimation()&amp;#34;&amp;gt;Pause&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#js.stopAnimation = myTimeline.pause&lt;/span&gt;
    pauseButton &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;)
    pauseButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Pause&amp;#34;&lt;/span&gt;
    pauseButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;padding &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.5rem 1rem .5rem 1rem&amp;#34;&lt;/span&gt;
    pauseButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;border &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2px solid #2c2e34&amp;#34;&lt;/span&gt;
    pauseButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#fef08a&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#&amp;lt;input type=&amp;#34;range&amp;#34; id=&amp;#34;seekbar&amp;#34; min=&amp;#34;0&amp;#34; max=&amp;#34;100&amp;#34; value=&amp;#34;0&amp;#34; oninput=&amp;#34;myTimeline.pause();myTimeline.seek(myTimeline.duration * (this.value/100))&amp;#34; style=&amp;#34;width: 100%&amp;#34;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
    seekbar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;)
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;type &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;range&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;seekbar&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;min &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;max &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;400px&amp;#34;&lt;/span&gt;

    controlHolder &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;)
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_2_controls&amp;#34;&lt;/span&gt;
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(playButton)
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(pauseButton)
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(seekbar)
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute&amp;#34;&lt;/span&gt;
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;10px&amp;#34;&lt;/span&gt;
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;20px&amp;#34;&lt;/span&gt;
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;100%&amp;#34;&lt;/span&gt;
    div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(controlHolder)

    crateSize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;25&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;indexToBottom&lt;/span&gt;(index):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; divHeight &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; floorY &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (crateSize&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; index

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;makeDisplay&lt;/span&gt;(yard):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(yard):
            newStackList &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
            leftEdge &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (crateSize &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;25&lt;/span&gt;

            stackLabel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;crateSize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;crateSize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;leftEdge&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;top &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;floorY &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;textAlign &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;
            label &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;)
            label&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stack
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(label)
            div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(stackLabel)

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stackLevel, crate &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(yard[stack]):
                bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; indexToBottom(stackLevel)
                container &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; startColor
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;crateSize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;border &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2px solid #2c2e34&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;bottom&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;leftEdge&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;textAlign &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;

                label &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;)
                label&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(crate)
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(label)

                newStackList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Crate(crate, container))
                div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(container)
            yard[stack] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Stack(crates&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newStackList, x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; leftEdge)

    makeDisplay(yard)

    myTimeline &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; anime&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;timeline(j({
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;duration&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;500&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;easing&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;easeInOutSine&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;autoplay&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
    }))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;seekbar_input&lt;/span&gt;(evt):
        myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pause()
        myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;seek(myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;duration &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(evt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;srcElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;))

    add_event_listener(seekbar, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;, seekbar_input)
    add_event_listener(playButton, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; _: myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;play())
    add_event_listener(pauseButton, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; _: myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pause())

    progressElement &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;seekbar&amp;#34;&lt;/span&gt;)
    prevProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;updateSeekbar&lt;/span&gt;(yard, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nonlocal&lt;/span&gt; prevProgress
        progressElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;progress
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;progress &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; yard:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates):
                    topCrate &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
                    topCrate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; endColor
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; prevProgress &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; yard:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; crate &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates:
                    crate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; startColor

        prevProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;progress


    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;displayOnMove&lt;/span&gt;(from_stack, to_stack, quantity, instructionCount, instructionIndex, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Instruction &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;instructionIndex&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;: Move &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;quantity&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; crate&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; quantity &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; from stack &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;from_stack&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; to stack &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;to_stack&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;. &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;instructionCount&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; of &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;quantity&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; complete&amp;#34;&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1_text_output&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doFinalOutput&lt;/span&gt;(yard, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        solution &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; yard:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates):
                topCrate &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
                topCrate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;
                solution &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; topCrate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;label
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;SOLUTION: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1_text_output&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;moveOneCrate&lt;/span&gt;(yard: yardType, from_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, to_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, quantity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, timeline, instructionCount, instructionIndex, final):
        js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;moveOneCrate&amp;#34;&lt;/span&gt;)
        crate &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; yard[from_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
        yard[to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crate)
        newBottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; indexToBottom(yard[to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(crate))
        timeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(j({
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;targets&amp;#34;&lt;/span&gt;: crate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;keyframes&amp;#34;&lt;/span&gt;: [
                j({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bottom&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divHeight &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; crateSize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;}),
                j({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;: yard[to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x}),
                j({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bottom&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;newBottom&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;})
            ],
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;begin&amp;#34;&lt;/span&gt;: partial(displayOnMove, from_stack, to_stack, quantity, instructionCount, instructionIndex),
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt;: partial(updateSeekbar, yard),
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;complete&amp;#34;&lt;/span&gt;: partial(doFinalOutput, yard) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; final &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; _: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)
        }))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;operateOn&lt;/span&gt;(yard: yardType, ins: Instruction, instructionIndex: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, final:&lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; yard:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; instructionCount &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity):
            moveOneCrate(yard, ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack, ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;to_stack, ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity, myTimeline, instructionCount, instructionIndex, final &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; final &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; instructionCount &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doAllInstructions&lt;/span&gt;(instructions):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; instructionIndex, ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(instructions):
            operateOn(yard, ins, instructionIndex, final &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; instructionIndex &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(instructions) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

    doAllInstructions(instructions)

    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;window)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday5_1 = document.querySelectorAll(&#39;[data-tab-target-day5_1]&#39;)
    const tabContentsday5_1 = document.querySelectorAll(&#39;[data-tab-content-day5_1]&#39;)

    tabsday5_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay5_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday5_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday5_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day5_2&#39;&gt;Day 5: Supply Stacks (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I was wondering when I would get bit by one of PyScript&#39;s core limitations (currently) - all &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tags are executed in the same global namespace. Meaning if you have two functions with the same name in two separate files/script tags, any objects whos names overlap previous tags &lt;span class=&#34;italic&#34;&gt;overwrite those objects&lt;/span&gt;. Hence names like &lt;code&gt;operateOn5_2()&lt;/code&gt; to ensure the functions are unique to this day/part.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day5_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day5_2-upload-input&#34; name=&#34;day5_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day5_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day5_2-run-btn&#34; py-click=&#34;main_day5_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day5_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day5/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day5_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day5_2=&#34;#day5_2-code&#34; class=&#34;active tab code-title&#34;&gt;day5_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day5_2-code&#34; data-tab-content-day5_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewType

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# The &amp;#39;yard&amp;#39; is the collection of all the stacks of crates&lt;/span&gt;
yardType &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; NewType(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;yardType&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(NamedTuple):
    quantity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    from_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    to_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solutionWithClumpedStacks&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    stacks, instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parseInput5_2(data)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructions:
        stacks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; operateOn5_2(stacks, ins)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; topCrates5_2(stacks)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parseInput5_2&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[yardType, &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[Instruction]]:
    firstBlankLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
    cratePositions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[:firstBlankLine]
    cratePositions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reverse() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#ordered bottom to top&lt;/span&gt;
    instructionLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[firstBlankLine&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Create crate data struction&lt;/span&gt;
    crateNameLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#get crate labels from line&lt;/span&gt;
    crates &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {name: [] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; name &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crateNameLine&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#create dicts per line&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, crateName &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;::&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;]):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; crateName &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
                crates[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(crateNameLine[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crateName) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Add crate to list&lt;/span&gt;
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Parse instructions&lt;/span&gt;
    instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructionLines:
        match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;move (?P&amp;lt;num&amp;gt;\d+) from (?P&amp;lt;from_stack&amp;gt;\d+) to (?P&amp;lt;to_stack&amp;gt;\d+)&amp;#39;&lt;/span&gt;, ins)
        num, from_stack, to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)

        instructions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Instruction(
                quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;)),
                from_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;),
                to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)
            ))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (crates, instructions)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;operateOn5_2&lt;/span&gt;(crates: yardType, ins: Instruction) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; yardType:
    to_move &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack][&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity:]
    crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack][:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity]
    crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;extend(to_move)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; crates

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;topCrates5_2&lt;/span&gt;(crates: yardType):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;values()])
    

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day5_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day5_2&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solutionWithClumpedStacks(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solutionWithClumpedStacks(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday5_2 = document.querySelectorAll(&#39;[data-tab-target-day5_2]&#39;)
    const tabContentsday5_2 = document.querySelectorAll(&#39;[data-tab-content-day5_2]&#39;)

    tabsday5_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay5_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday5_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday5_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day6_1&#39;&gt;Day 6: Tuning Trouble (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Part of the fun of Advent of Code is trying to guess what things in Part 1 of each day are going to get turned topsy-turvy in Part 2. Today&#39;s question, involving finding when elements in a sliding window are unique, lead me to a few guesses. Would there be some other criteria for determining success? Only one duplicated letter perhaps? Perhaps the window would need to ignore only its center element, or the window would jump by twos, or something.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day6_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day6_1-upload-input&#34; name=&#34;day6_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day6_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day6_1-run-btn&#34; py-click=&#34;main_day6_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day6_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day6/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day6_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day6_1=&#34;#day6_1-code&#34; class=&#34;active tab code-title&#34;&gt;day6_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day6_1-code&#34; data-tab-content-day6_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deque
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;findIndexAllDifferent&lt;/span&gt;(input_stream, n):
    window &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; deque(maxlen&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;n)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, token &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(input_stream):
        window&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(token)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(window)) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; n:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day6_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day6_1&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;findIndexAllDifferent(data, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day6_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(findIndexAllDifferent(data, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;))
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday6_1 = document.querySelectorAll(&#39;[data-tab-target-day6_1]&#39;)
    const tabContentsday6_1 = document.querySelectorAll(&#39;[data-tab-content-day6_1]&#39;)

    tabsday6_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay6_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday6_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday6_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day6_2&#39;&gt;Day 6: Tuning Trouble (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Thankfully, it turned out part 2 made the simplest possible adjustment - the length of the window. Hence, the code for the two parts looks almost identical. I suppose the objective was to catch out anyone who &#34;manually&#34; checked each element of the sliding window for uniqueness against the other three.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day6_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day6_2-upload-input&#34; name=&#34;day6_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day6_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day6_2-run-btn&#34; py-click=&#34;main_day6_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day6_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day6/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day6_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day6_2=&#34;#day6_2-code&#34; class=&#34;active tab code-title&#34;&gt;day6_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day6_2-code&#34; data-tab-content-day6_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deque
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;findIndexAllDifferent_6_2&lt;/span&gt;(input_stream, n):
    window &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; deque(maxlen&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;n)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, token &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(input_stream):
        window&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(token)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(window)) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; n:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day6_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day6_2&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;findIndexAllDifferent_6_2(data, &lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day6_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(findIndexAllDifferent_6_2(data, &lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday6_2 = document.querySelectorAll(&#39;[data-tab-target-day6_2]&#39;)
    const tabContentsday6_2 = document.querySelectorAll(&#39;[data-tab-content-day6_2]&#39;)

    tabsday6_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay6_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday6_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday6_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day7_1&#39;&gt;Day 7: No Space Left on Device (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;When running into a challenge like today&#39;s, the question is always: &#34;Should I implement my own data structure, or make use of a built-in/pre-existing module?&#34; Today I opted for the later, and discovered the &lt;a href=&#34;https://github.com/c0fec0de/anytree&#34;&gt;anytree package&lt;/a&gt; for the first time. It has all the functionality I could way - children/parent tracking, arbitrary attributes on Nodes, provision for walking/tranversing/searching the tree, importing/exporting dictionaries/JSON, symlinks... I suspect I&#39;m going to get a lot of use out of this.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day7_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day7_1-upload-input&#34; name=&#34;day7_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day7_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day7_1-run-btn&#34; py-click=&#34;main_day7_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day7/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day7_1-viz-btn&#34; py-click=&#34;viz_day7_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day7_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day7/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day7_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day7_1=&#34;#day7_1-code&#34; class=&#34;active tab code-title&#34;&gt;day7_1.py&lt;/li&gt;
        &lt;li data-tab-target-day7_1=&#34;#day7_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day7_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day7_1-code&#34; data-tab-content-day7_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Node, RenderTree, PreOrderIter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.search&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; findall

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_7_1&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (root_cmd &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$ cd /&amp;#34;&lt;/span&gt;:
        root &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;First command something other than cd / : &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;root_cmd&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; processLine_7_1(line, root, currentNode)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# After constructing tree, pre-calculate folder sizes.&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# A bit inefficient, but fine&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; PreOrderIter(root):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFolder_7_1(node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;):
            node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; containedFileSize_7_1(node)

    small_folders &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; findall(root, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(n, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100_000&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; small_folders)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processLine_7_1&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, rootNode: Node, currentNode: Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Processes one line of input; mutates the tree pointed to by rootNode,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    returns the new currentNode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode
    match line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split():
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out to root&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rootNode
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out one level&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move to directory {dir}&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [child &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#list files&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;, dirname]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New directory {dirname}&lt;/span&gt;
            newDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dirname, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode)
        case [size, filename]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New file {filename}&lt;/span&gt;
            newFile &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;filename, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;currentNode, size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(size))
        case _:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow unmatched??&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nextCurrentNode

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printTree_7_1&lt;/span&gt;(root:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFile_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFolder_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;containedFileSize_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_1(node):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(containedFileSize_7_1(n) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day7_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day7_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_7_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solution_7_1(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day7_1-viz-code&#34; data-tab-content-day7_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;contextlib&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; redirect_stdout
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;io&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; StringIO
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Node, RenderTree, PreOrderIter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.search&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; findall
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.render&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; ContStyle

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day7_1&lt;/span&gt;():    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;local_main&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; 

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (root_cmd &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$ cd /&amp;#34;&lt;/span&gt;:
            root &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;First command something other than cd / : &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;root_cmd&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
            currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; processLine_7_1(line, root, currentNode)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# After constructing tree, pre-calculate folder sizes.&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# A bit inefficient, but fine&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; PreOrderIter(root):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFolder_7_1(node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;):
                node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; containedFileSize_7_1(node)

        small_folders &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; findall(root, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(n, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100_000&lt;/span&gt;)
        display(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; small_folders),
                target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-output&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
        

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (pre&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-pre&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Make pre tag for output&lt;/span&gt;
            pre &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pre&amp;#34;&lt;/span&gt;)
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-pre&amp;#34;&lt;/span&gt;
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bg-gray-900&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-gray-300&amp;#34;&lt;/span&gt;)
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lineHeight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.1&amp;#39;&lt;/span&gt;
            container &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-viz&amp;#34;&lt;/span&gt;)
            container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;max-h-124&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;overflow-y-auto&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;my-4&amp;#39;&lt;/span&gt;)
            container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(pre)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#clear existing output&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root, style&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;ContStyle()):
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#if node in small_folders:&lt;/span&gt;
            nameSegment &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;): displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder size:&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder_size&amp;#39;&lt;/span&gt;): displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder size:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

            contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;nameSegment&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;60&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;displaySize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Highlight solution lines&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100_000&lt;/span&gt;:
                contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span style=&amp;#34;text-shadow: 0 0 8px #ffffff; color: rgb(255, 255, 255)&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
            
            display(HTML(contents),
                    target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-pre&amp;#34;&lt;/span&gt;)
      

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processLine_7_1&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, rootNode: Node, currentNode: Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Processes one line of input; mutates the tree pointed to by rootNode,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        returns the new currentNode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode
        match line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split():
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out to root&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rootNode
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out one level&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move to directory {dir}&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [child &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#list files&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;, dirname]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New directory {dirname}&lt;/span&gt;
                newDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dirname, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode)
            case [size, filename]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New file {filename}&lt;/span&gt;
                newFile &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;filename, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;currentNode, size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(size))
            case _:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow unmatched??&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nextCurrentNode

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printTree_7_1&lt;/span&gt;(root:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root):
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFile_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFolder_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;containedFileSize_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_1(node):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(containedFileSize_7_1(n) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children)

    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day7_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    local_main(data)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday7_1 = document.querySelectorAll(&#39;[data-tab-target-day7_1]&#39;)
    const tabContentsday7_1 = document.querySelectorAll(&#39;[data-tab-content-day7_1]&#39;)

    tabsday7_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay7_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday7_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday7_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day7_2&#39;&gt;Day 7: No Space Left on Device (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Another part-2 problem which requires taking the data discovered in part 1, sorting it (by some key), and finding the smallest (largest) value, possibly beyond some threshhold. Using &lt;code&gt;anytree.search.findall&lt;/code&gt; makes it easy to find the folders, and &lt;code&gt;sorted(key = lamabda node: node.folder_size)&lt;/code&gt; allows us to sort by the relevant key.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day7_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day7_2-upload-input&#34; name=&#34;day7_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day7_2-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day7_2-run-btn&#34; py-click=&#34;main_day7_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day7/viz_2.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day7_2-viz-btn&#34; py-click=&#34;viz_day7_2()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day7_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day7/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day7_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day7_2=&#34;#day7_2-code&#34; class=&#34;active tab code-title&#34;&gt;day7_2.py&lt;/li&gt;
        &lt;li data-tab-target-day7_2=&#34;#day7_2-viz-code&#34; class=&#34;tab code-title&#34;&gt;day7_2-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day7_2-code&#34; data-tab-content-day7_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;90
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Node, RenderTree, PreOrderIter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.search&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; findall

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_7_2&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (root_cmd &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$ cd /&amp;#34;&lt;/span&gt;:
        root &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;First command something other than cd / : &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;root_cmd&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; processLine_7_2(line, root, currentNode)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; PreOrderIter(root):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFolder_7_2(node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;):
            node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; containedFileSize_7_2(node)

    size_used &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size
    total_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;70_000_000&lt;/span&gt;
    size_available &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; total_size &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; size_used

    size_needed_for_update &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;30_000_000&lt;/span&gt;
    minimum_delete &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; size_needed_for_update &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; size_available

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Sort folders by size, find the smallest one larger than the needed size&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; folder &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(findall(root, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(n, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;)), key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; folder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; minimum_delete:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; folder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processLine_7_2&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, rootNode: Node, currentNode: Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Processes one line of input; mutates the tree pointed to by rootNode,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    returns the new currentNode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode
    match line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split():
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out to root&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rootNode
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out one level&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move to directory {dir}&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [child &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# List Files&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;, dirname]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New directory {dirname}&lt;/span&gt;
            newDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dirname, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode)
        case [size, filename]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New file {filename}&lt;/span&gt;
            newFile &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;filename, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;currentNode, size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(size))
        case _:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow unmatched??&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Somehow unmatched??&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nextCurrentNode

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printTree_7_2&lt;/span&gt;(root:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFile_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFolder_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;containedFileSize_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_2(node):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(containedFileSize_7_2(n) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day7_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day7_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_7_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solution_7_2(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day7_2-viz-code&#34; data-tab-content-day7_2 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;contextlib&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; redirect_stdout
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;io&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; StringIO
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Node, RenderTree, PreOrderIter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.search&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; findall
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.render&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; ContStyle

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day7_2&lt;/span&gt;():    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;local_main&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; 

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (root_cmd &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$ cd /&amp;#34;&lt;/span&gt;:
            root &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;First command something other than cd / : &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;root_cmd&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
            currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; processLine_7_2(line, root, currentNode)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# After constructing tree, pre-calculate folder sizes.&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# A bit inefficient, but fine&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; PreOrderIter(root):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFolder_7_2(node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;):
                node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; containedFileSize_7_2(node)

        size_used &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size
        total_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;70_000_000&lt;/span&gt;
        size_available &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; total_size &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; size_used

        size_needed_for_update &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;30_000_000&lt;/span&gt;
        minimum_delete &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; size_needed_for_update &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; size_available

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Sort folders by size, find the smallest one larger than the needed size&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; folder &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(findall(root, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(n, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;)), key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; folder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; minimum_delete:
                selectedFolder &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; folder
                display(folder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-output&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;        

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (pre&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-pre&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Make pre tag for output&lt;/span&gt;
            pre &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pre&amp;#34;&lt;/span&gt;)
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-pre&amp;#34;&lt;/span&gt;
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bg-gray-900&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-gray-300&amp;#34;&lt;/span&gt;)
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lineHeight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.1&amp;#39;&lt;/span&gt;
            container &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-viz&amp;#34;&lt;/span&gt;)
            container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;max-h-124&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;overflow-y-auto&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;my-4&amp;#39;&lt;/span&gt;)
            container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(pre)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#clear existing output&lt;/span&gt;

        runningTotal &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root, style&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;ContStyle()):
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#if node in small_folders:&lt;/span&gt;
            nameSegment &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;): displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder size:&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder_size&amp;#39;&lt;/span&gt;): displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder size:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

            contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;nameSegment&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;60&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;displaySize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Highlight solution lines&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; selectedFolder &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; selectedFolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;descendants &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; isFile_7_2(node)):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; selectedFolder: contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;85&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; SOLUTION&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_2(node):
                    runningTotal &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
                    contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;85&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; Running Total: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;runningTotal&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
                contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span style=&amp;#34;text-shadow: 0 0 8px #ffffff; color: rgb(255, 255, 255)&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
            
            display(HTML(contents),
                    target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-pre&amp;#34;&lt;/span&gt;)
      

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processLine_7_2&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, rootNode: Node, currentNode: Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Processes one line of input; mutates the tree pointed to by rootNode,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        returns the new currentNode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode
        match line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split():
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out to root&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rootNode
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out one level&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move to directory {dir}&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [child &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#list files&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;, dirname]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New directory {dirname}&lt;/span&gt;
                newDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dirname, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode)
            case [size, filename]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New file {filename}&lt;/span&gt;
                newFile &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;filename, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;currentNode, size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(size))
            case _:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow unmatched??&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nextCurrentNode

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printTree_7_2&lt;/span&gt;(root:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root):
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFile_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFolder_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;containedFileSize_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_2(node):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(containedFileSize_7_2(n) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children)

    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day7_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    local_main(data)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday7_2 = document.querySelectorAll(&#39;[data-tab-target-day7_2]&#39;)
    const tabContentsday7_2 = document.querySelectorAll(&#39;[data-tab-content-day7_2]&#39;)

    tabsday7_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay7_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday7_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday7_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day8_1&#39;&gt;Day 8: Treetop Tree House (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;More parsing, more fun! I suspect there&#39;s some data structure that makes it simpler to iterate over both the rows and columns of a grid... or perhaps I should create my own, as that&#39;s the kind of thing that seems to come up often in Advent of Code.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day8_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day8_1-upload-input&#34; name=&#34;day8_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day8_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day8_1-run-btn&#34; py-click=&#34;main_day8_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day8/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day8_1-viz-btn&#34; py-click=&#34;viz_day8_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day8_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day8/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day8_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day8_1=&#34;#day8_1-code&#34; class=&#34;active tab code-title&#34;&gt;day8_1.py&lt;/li&gt;
        &lt;li data-tab-target-day8_1=&#34;#day8_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day8_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day8_1-code&#34; data-tab-content-day8_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_8_1&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# (rowIndex, columnIndex)&lt;/span&gt;
    visible_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows left to right&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, line_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line(row)}
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows right to left&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;([row[::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]):
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(row) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line(row)}
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Top to Bottom:&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[column_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, column_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line(column)}

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Bottom to Top:&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[column_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data][::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(column) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; row_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, column_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line(column)}
        
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#printVisibleTrees(data, visible_trees)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visible_trees)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printVisibleTrees&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], visbile_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]]):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_trees:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[green on dark_red]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_black]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_visible_in_line&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]:
    max_height_seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    visible_in_line &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, tree &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_height_seen:
            visible_in_line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(line_index)
            max_height_seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; max_height_seen &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; visible_in_line     

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day8_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day8_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_8_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_8_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day8_1-viz-code&#34; data-tab-content-day8_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; repeat
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; stdout

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display, HTML

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.segment&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Segment
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.console&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewLine
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.text&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Text
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.jupyter&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Patch the rich library to enable output&lt;/span&gt;

c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()
c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_rich_printer&lt;/span&gt;(target):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display_pyscript&lt;/span&gt;(segments: Iterable[Segment], text: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Allow output of raw HTML within pyscript/pyodide&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        html &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_render_segments(segments)
        display(HTML(html), target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;target, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
    rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; display_pyscript
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Solution code:&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day8_1&lt;/span&gt;():
    prepare_day8_1_element()
    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-viz&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day8_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_viz8_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
        target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-output&amp;#34;&lt;/span&gt;,
        append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
    post_day8_1_element()


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prepare_day8_1_element&lt;/span&gt;():
    viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-viz&amp;#34;&lt;/span&gt;)
    viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-x-auto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-auto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;whitespace-nowrap&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;post_day8_1_element&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js

    viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-viz&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pretag &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementsByTagName(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pre&amp;#39;&lt;/span&gt;):
        pretag&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;whiteSpace &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;nowrap&amp;#34;&lt;/span&gt;
        pretag&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;inline-block&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_viz8_1&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# (rowIndex, columnIndex)&lt;/span&gt;
    visible_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows left to right&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, line_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line_viz(row)}
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows right to left&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;([row[::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]):
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(row) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line_viz(row)}
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Top to Bottom:&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[column_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, column_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line_viz(column)}

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Bottom to Top:&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[column_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data][::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(column) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; row_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, column_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line_viz(column)}
        
    printVisibleTrees_viz(data, visible_trees)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visible_trees))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printVisibleTrees_viz&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], visbile_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]]):
    row_strings &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        line_elements &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_trees:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_white on dark_green]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[aquamarine3]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
        row_strings&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line_elements))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; row_strings:
        get_rich_printer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-viz&amp;#34;&lt;/span&gt;)(r)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#rprint_8_1_viz(r)&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_visible_in_line_viz&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]:
    max_height_seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    visible_in_line &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, tree &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_height_seen:
            visible_in_line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(line_index)
            max_height_seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; max_height_seen &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; visible_in_line     &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday8_1 = document.querySelectorAll(&#39;[data-tab-target-day8_1]&#39;)
    const tabContentsday8_1 = document.querySelectorAll(&#39;[data-tab-content-day8_1]&#39;)

    tabsday8_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay8_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday8_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday8_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day8_2&#39;&gt;Day 8: Treetop Tree House (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Figuring out all the indices, ranges, and &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/zfrgul/2022_day_8_i_know_i_should_read_it_more_carefully/&#34;&gt;exactly what was being asked&lt;/a&gt; was a bit hairy in this second part, but the ultimate stumbling block for me ended up being multiplying the running score by itself, rather than by the new trees seen in a given direction. Oops!&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day8_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day8_2-upload-input&#34; name=&#34;day8_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day8_2-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day8_2-run-btn&#34; py-click=&#34;main_day8_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day8/viz_2.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day8_2-viz-btn&#34; py-click=&#34;viz_day8_2()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day8_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day8/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day8_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day8_2=&#34;#day8_2-code&#34; class=&#34;active tab code-title&#34;&gt;day8_2.py&lt;/li&gt;
        &lt;li data-tab-target-day8_2=&#34;#day8_2-viz-code&#34; class=&#34;tab code-title&#34;&gt;day8_2-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day8_2-code&#34; data-tab-content-day8_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_8_2&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    max_trees_visible &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    high_score_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    visible_from_high_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; house_row_index, treehouse_row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; house_col_index, treehouse_height &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(treehouse_row):
        
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
            score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Row left to right&lt;/span&gt;
            row_to_right &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[house_row_index][house_col_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_8_2(row_to_right, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index, line_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; house_col_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows right to left&lt;/span&gt;
            row_to_left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;(data[house_row_index][:house_col_index]))
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_8_2(row_to_left, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index, house_col_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Top to Bottom:&lt;/span&gt;
            column_down &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[house_col_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[house_row_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]]
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_8_2(column_down, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, house_col_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns bottom to top:&lt;/span&gt;
            column_up &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;([row[house_col_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[:house_row_index]]))
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_8_2(column_up, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, house_col_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; score &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_trees_visible:
                max_trees_visible &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; score
                high_score_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (house_row_index, house_col_index)
                visible_from_high_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; visible_trees
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#printVisibleTrees(data, visible_from_high_score, special=high_score_location)&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; max_trees_visible


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printVisibleTrees&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], visible_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]], special &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; special:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[black dark_slate_gray_1]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visible_trees:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[green on dark_red]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_black]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_visible_in_line_8_2&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, max_height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Visible in line {list(line)} from height {max_height}; &amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
    visible_trees &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; line:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;Nothing here, score 0&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; visible_trees

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, tree &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; max_height:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Score: {line_index+1}&amp;#34;)&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, line_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Max length, score {len(line)}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day8_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day8_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_8_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_8_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day8_2-viz-code&#34; data-tab-content-day8_2 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; repeat
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; stdout

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display, HTML

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.segment&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Segment
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.console&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewLine
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.text&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Text
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.jupyter&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Patch the rich library to enable output&lt;/span&gt;

c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()
c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_rich_printer&lt;/span&gt;(target):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display_pyscript&lt;/span&gt;(segments: Iterable[Segment], text: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Allow output of raw HTML within pyscript/pyodide&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        html &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_render_segments(segments)
        display(HTML(html), target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;target, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
    rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; display_pyscript
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Solution code&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day8_2&lt;/span&gt;():
    prepare_day8_2_element()
    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-viz&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day8_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_viz8_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
        target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-output&amp;#34;&lt;/span&gt;,
        append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
    post_day8_2_element()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prepare_day8_2_element&lt;/span&gt;():
    viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-viz&amp;#34;&lt;/span&gt;)
    viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-x-auto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-auto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;whitespace-nowrap&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;post_day8_2_element&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js

    viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-viz&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pretag &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementsByTagName(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pre&amp;#39;&lt;/span&gt;):
        pretag&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;whiteSpace &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;nowrap&amp;#34;&lt;/span&gt;
        pretag&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;inline-block&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_viz8_2&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    max_trees_visible &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    high_score_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    visible_from_high_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; house_row_index, treehouse_row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; house_col_index, treehouse_height &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(treehouse_row):
        
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
            score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Row left to right&lt;/span&gt;
            row_to_right &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[house_row_index][house_col_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_viz8_2(row_to_right, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index, line_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; house_col_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows right to left&lt;/span&gt;
            row_to_left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;(data[house_row_index][:house_col_index]))
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_viz8_2(row_to_left, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index, house_col_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Top to Bottom:&lt;/span&gt;
            column_down &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[house_col_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[house_row_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]]
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_viz8_2(column_down, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, house_col_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns bottom to top:&lt;/span&gt;
            column_up &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;([row[house_col_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[:house_row_index]]))
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_viz8_2(column_up, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, house_col_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; score &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_trees_visible:
                max_trees_visible &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; score
                high_score_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (house_row_index, house_col_index)
                visible_from_high_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; visible_trees
    
    printVisibleTrees_viz_8_2(data, visible_from_high_score, special&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;high_score_location)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; max_trees_visible


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printVisibleTrees_viz_8_2&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], visbile_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]], special &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
    row_strings &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        line_elements &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; special:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_white on dark_violet]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_trees:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_white on dark_green]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[aquamarine3]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
        row_strings&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line_elements))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; row_strings:
        get_rich_printer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-viz&amp;#34;&lt;/span&gt;)(r)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_visible_in_line_viz8_2&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, max_height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Visible in line {list(line)} from height {max_height}; &amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
    visible_trees &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; line:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;Nothing here, score 0&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; visible_trees

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, tree &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; max_height:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Score: {line_index+1}&amp;#34;)&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, line_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Max length, score {len(line)}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday8_2 = document.querySelectorAll(&#39;[data-tab-target-day8_2]&#39;)
    const tabContentsday8_2 = document.querySelectorAll(&#39;[data-tab-content-day8_2]&#39;)

    tabsday8_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay8_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday8_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday8_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day9_1&#39;&gt;Day 9: Rope Bridge (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I felt quite clever during this first part of today&#39;s problem, when I noticed that, when the tail of the rope has to move, it always moves to where the head was in the previous step. This saves a fair amount of figuring out the logic of exactly where the tail moves to in each step - it can just reuse the previous position of the head, if necessary.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day9_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day9_1-upload-input&#34; name=&#34;day9_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day9_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day9_1-run-btn&#34; py-click=&#34;main_day9_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day9_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day9/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day9_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day9_1=&#34;#day9_1-code&#34; class=&#34;active tab code-title&#34;&gt;day9_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day9_1-code&#34; data-tab-content-day9_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Vector&lt;/span&gt;(NamedTuple):
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

direction_to_vector &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;U&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_9_1&lt;/span&gt;(data):
    head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    tail &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    tail_visited &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {tail}

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;):
        direction, quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
        diff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; direction_to_vector[direction]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(quantity)):
            prev_head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; head
            head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; too_far_9_1(head, tail):
                tail &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; prev_head
                tail_visited&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(tail)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(tail_visited)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;too_far_9_1&lt;/span&gt;(head, tail):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day9_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day9_1&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_9_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day9_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_9_1(data)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday9_1 = document.querySelectorAll(&#39;[data-tab-target-day9_1]&#39;)
    const tabContentsday9_1 = document.querySelectorAll(&#39;[data-tab-content-day9_1]&#39;)

    tabsday9_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay9_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday9_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday9_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day9_2&#39;&gt;Day 9: Rope Bridge (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Of course, I was being too clever by half, and the logic in part 1 doesn&#39;t hold in part two; I ended up chasing a nasty typo in the logic of determining where each tail segment moves for quite awhile. I&#39;ve left my rudimentary testing code and print statements in place and commented out for illustrative purposes.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day9_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day9_2-upload-input&#34; name=&#34;day9_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day9_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day9_2-run-btn&#34; py-click=&#34;main_day9_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day9_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day9/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day9_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day9_2=&#34;#day9_2-code&#34; class=&#34;active tab code-title&#34;&gt;day9_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day9_2-code&#34; data-tab-content-day9_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Point&lt;/span&gt;(NamedTuple):
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    previous: &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Vector&lt;/span&gt;(NamedTuple):
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

direction_to_vector &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;U&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_9_2&lt;/span&gt;(data):
    head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Point(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;))
    tails &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [Point(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;)]
    tail_visited &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {(tails[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, tails[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y)}

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;\n{line=}&amp;#34;)&lt;/span&gt;
        direction, quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
        head_move &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; direction_to_vector[direction]

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(quantity)):
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Segments:  {&amp;#39;&amp;#39;.join([f&amp;#39;({str(s.x): &amp;gt;2},{str(s.y): &amp;gt;2})&amp;#39; for s in [head, *tails]])}&amp;#34;)&lt;/span&gt;
            head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Point(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; head_move&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; head_move&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, previous&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Vector(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y))
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Head moves by ({head_move.x},{head_move.y}) to ({head.x}, {head.y})&amp;#34;)&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#move first tail&lt;/span&gt;
            diff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;  catchup_step(head, tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
            tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Point(tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, Vector(tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y))

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Move other tails&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, following_tail &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(tails[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]):
                local_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
                diff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;  catchup_step(tails[local_index&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], following_tail)
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#39;Moving tail at index {local_index} by {diff}&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;({str(diff.x): &amp;gt;2},{str(diff.y): &amp;gt;2})&amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
                tails[local_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Point(following_tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, following_tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, Vector(following_tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, following_tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y))

            tail_visited&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add((tails[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, tails[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y))
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Segments:  {&amp;#39;&amp;#39;.join([f&amp;#39;({str(s.x): &amp;gt;2},{str(s.y): &amp;gt;2})&amp;#39; for s in [head, *tails]])}&amp;#34;)&lt;/span&gt;
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;&amp;#34;)&lt;/span&gt;
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#input(&amp;#34;&amp;#34;)&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(tail_visited)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;catchup_step&lt;/span&gt;(head: Point, tail: Point) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Vector:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
        xdiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        ydiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x:
            xdiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x:
            xdiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y:
            ydiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y:
            ydiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Vector(xdiff, ydiff)
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;test_catchup_step&lt;/span&gt;():
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Identity&lt;/span&gt;
    zero_vector &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#1 off&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(Vector(x, y), zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#2 off&lt;/span&gt;
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#2, 1 off&lt;/span&gt;
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(c:= catchup_step(a, zero_vector))&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(c:= catchup_step(a, zero_vector))&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 2, 2 off&lt;/span&gt;
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Tests pass&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day9_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day9_2&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_9_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day9_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_9_2(data)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#test_catchup_step()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday9_2 = document.querySelectorAll(&#39;[data-tab-target-day9_2]&#39;)
    const tabContentsday9_2 = document.querySelectorAll(&#39;[data-tab-content-day9_2]&#39;)

    tabsday9_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay9_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday9_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday9_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day10_1&#39;&gt;Day 10: Cathode Ray Tube (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I had a very long dog walk this morning, during which I chose to vastly over-engineer today&#39;s problem. Partly for the fun of visualizing the solution on a quiet walk, and partly because this is the &lt;a href=&#34;https://adventofcode.com/2019/day/2&#34;&gt;kind of problem&lt;/a&gt; that tends to &lt;a href=&#34;https://adventofcode.com/2019/day/9&#34;&gt;come back&lt;/a&gt; in &lt;a href=&#34;https://adventofcode.com/2019/day/25&#34;&gt;later days&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also thoroughly type-hinted my solution, which I find tremendously helpful in keeping new data structures straight when developing them.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day10_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day10_1-upload-input&#34; name=&#34;day10_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day10_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day10_1-run-btn&#34; py-click=&#34;main_day10_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day10_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day10/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day10_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day10_1=&#34;#day10_1-code&#34; class=&#34;active tab code-title&#34;&gt;day10_1.py&lt;/li&gt;
         
        
        
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10computerpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/computer.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10parser_10_1py-code&#34; class=&#34;tab code-title&#34;&gt;day10/parser_10_1.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10registerpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/register.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10instructionpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/instruction.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10additionpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/addition.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10nooppy-code&#34; class=&#34;tab code-title&#34;&gt;day10/noop.py&lt;/li&gt;
            
        
    &lt;/ul&gt;

    &lt;div id=&#34;day10_1-code&#34; data-tab-content-day10_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;os&lt;/span&gt;
    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(os&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;listdir(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;parser_10_1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Parser_10_1


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_10_1&lt;/span&gt;(data):
    comp &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Computer(instructions&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;iter&lt;/span&gt;(data), parser&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Parser_10_1())
    signal_strength &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; breakpoint &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;)):
        comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run_until_clock(breakpoint)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Current instruction is {comp._current_instruction} with {comp._current_instruction._ellapsed_ticks} ellapsed ticks at index {comp._instruction_index}&amp;#34;)&lt;/span&gt;
        x_register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get()
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;{x_register=} &amp;#34;)&lt;/span&gt;
        signal_value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; breakpoint &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get()
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;At {breakpoint}, signal is {signal_value}&amp;#34;)&lt;/span&gt;
        signal_strength &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; signal_value
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Running total {signal_strength= }\n&amp;#34;)&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;(signal_strength)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day10_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day10_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_10_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solve_10_1(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    
        
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10computerpy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instructionparser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; InstructionParser
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;register&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Register

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Computer&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, instructions: Iterable[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], parser: InstructionParser &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instructions
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parser

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Register(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_instruction_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()
        

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Computer running&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_single_step&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Returns True if successfully completed a step, false if halted&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_until_clock&lt;/span&gt;(self, cycles) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Computer running until clock is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;cycles&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; cycles &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;next&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions))
        
        instruction_complete &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tick()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (instruction_complete):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;at_complete()
            
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;advance_instruction&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions), self)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_instruction_index &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Instruction advanced to {self._current_instruction}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;StopIteration&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
        
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10parser_10_1py-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instructionparser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; InstructionParser, InstructionParseException
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;addition&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Addition
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;noop&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Noop


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Parser_10_1&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parse&lt;/span&gt;(self, instruction: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, computer: Computer) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Instruction:
        str_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()
        match str_instruction:
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;noop&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Noop(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, computer)
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;addx&amp;#34;&lt;/span&gt;, value] :
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Addition(duration&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, computer&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;computer, register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x, addend &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(value))
            case _:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; InstructionParseException(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No instruction matching &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;instruction&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;inputtest_long.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    p &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Parser_10_1()
    computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Computer(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(instruction&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;line, computer&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;computer))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10registerpy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Register&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, data):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;set&lt;/span&gt;(self, data):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10instructionpy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;abc&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; ABC, abstractmethod
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#from computer import Computer&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(ABC):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, duration: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, computer):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;duration &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; duration
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; computer

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;

    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10additionpy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;register&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Register

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Addition&lt;/span&gt;(Instruction):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, duration: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, computer: Computer, register: Register, addend: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;):
        &lt;span style=&#34;color:#366&#34;&gt;super&lt;/span&gt;()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;__init__(duration, computer)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register: Register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; register
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addend: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; addend

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;set(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get() &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addend)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10nooppy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Noop&lt;/span&gt;(Instruction):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Only 1 tick&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
    

&lt;/div&gt;
&lt;script&gt;
    const tabsday10_1 = document.querySelectorAll(&#39;[data-tab-target-day10_1]&#39;)
    const tabContentsday10_1 = document.querySelectorAll(&#39;[data-tab-content-day10_1]&#39;)

    tabsday10_1.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay10_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday10_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday10_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day10_2&#39;&gt;Day 10: Cathode Ray Tube (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vero recusandae sint illo ab ullam deserunt. Fugiat debitis, harum velit corporis facilis modi perferendis consequuntur et eaque libero rem minima voluptatum?&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day10_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day10_2-upload-input&#34; name=&#34;day10_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day10_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day10_2-run-btn&#34; py-click=&#34;main_day10_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day10_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day10/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day10_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day10_2=&#34;#day10_2-code&#34; class=&#34;active tab code-title&#34;&gt;day10_2.py&lt;/li&gt;
         
        
        
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10computerpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/computer.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10screenpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/screen.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10parser_10_1py-code&#34; class=&#34;tab code-title&#34;&gt;day10/parser_10_1.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10registerpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/register.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10instructionpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/instruction.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10additionpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/addition.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10nooppy-code&#34; class=&#34;tab code-title&#34;&gt;day10/noop.py&lt;/li&gt;
            
        
    &lt;/ul&gt;

    &lt;div id=&#34;day10_2-code&#34; data-tab-content-day10_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;screen&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Screen
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;parser_10_1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Parser_10_1

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_10_2&lt;/span&gt;(data):
    screen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Screen()
    comp &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Computer(instructions&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;iter&lt;/span&gt;(data), parser&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Parser_10_1())

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        input_from_computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get()
        screen&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tick(input_from_computer)
        should_continue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run_single_step()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; should_continue:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(screen)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prepare_10_2&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
        viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_2-viz&amp;#34;&lt;/span&gt;)
        pre &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pre&amp;#34;&lt;/span&gt;)
        pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_1-pre&amp;#34;&lt;/span&gt;
        pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bg-gray-900&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-gray-300&amp;#34;&lt;/span&gt;)
        pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lineHeight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.1&amp;#39;&lt;/span&gt;
        viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(pre)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day10_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day10_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        prepare_10_2()
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_10_2(data)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_1-pre&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solve_10_2(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    
        
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10computerpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instructionparser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; InstructionParser
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;register&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Register

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Computer&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, instructions: Iterable[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], parser: InstructionParser &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instructions
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parser

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Register(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_instruction_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()
        

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Computer running&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_single_step&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Returns True if successfully completed a step, false if halted&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_until_clock&lt;/span&gt;(self, cycles) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Computer running until clock is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;cycles&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; cycles &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;next&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions))
        
        instruction_complete &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tick()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (instruction_complete):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;at_complete()
            
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;advance_instruction&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions), self)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_instruction_index &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Instruction advanced to {self._current_instruction}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;StopIteration&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
        
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10screenpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Screen&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;)]
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;  Position(row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lines)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self, input_from_computer: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;column &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; input_from_computer) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lines[self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;row][self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;column] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;

        next_column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;column &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; next_column &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;:
            next_column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
            next_row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;row &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            next_row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;row
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Position(row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; next_row, column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; next_column)
        

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Position&lt;/span&gt;(NamedTuple):
    row: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    column: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10parser_10_1py-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instructionparser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; InstructionParser, InstructionParseException
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;addition&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Addition
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;noop&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Noop


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Parser_10_1&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parse&lt;/span&gt;(self, instruction: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, computer: Computer) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Instruction:
        str_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()
        match str_instruction:
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;noop&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Noop(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, computer)
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;addx&amp;#34;&lt;/span&gt;, value] :
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Addition(duration&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, computer&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;computer, register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x, addend &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(value))
            case _:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; InstructionParseException(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No instruction matching &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;instruction&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;inputtest_long.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    p &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Parser_10_1()
    computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Computer(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(instruction&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;line, computer&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;computer))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10registerpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Register&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, data):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;set&lt;/span&gt;(self, data):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10instructionpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;abc&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; ABC, abstractmethod
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#from computer import Computer&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(ABC):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, duration: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, computer):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;duration &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; duration
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; computer

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;

    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10additionpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;register&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Register

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Addition&lt;/span&gt;(Instruction):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, duration: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, computer: Computer, register: Register, addend: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;):
        &lt;span style=&#34;color:#366&#34;&gt;super&lt;/span&gt;()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;__init__(duration, computer)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register: Register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; register
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addend: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; addend

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;set(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get() &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addend)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10nooppy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Noop&lt;/span&gt;(Instruction):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Only 1 tick&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
    

&lt;/div&gt;
&lt;script&gt;
    const tabsday10_2 = document.querySelectorAll(&#39;[data-tab-target-day10_2]&#39;)
    const tabContentsday10_2 = document.querySelectorAll(&#39;[data-tab-content-day10_2]&#39;)

    tabsday10_2.forEach(tab =&gt; {
        console.log(tab)
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay10_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday10_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday10_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;


&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    loaded_event = js.Event.new(&#39;pyscript_ready&#39;)
    js.document.dispatchEvent(loaded_event)
&lt;/py-script&gt;

&lt;style&gt;
    .code-container {
        border-width: 2px;
    }
&lt;/style&gt;
&lt;span class=&#34;text-green&#34;&gt;&lt;/span&gt;
&lt;script&gt;    
    //Create Load PyScript buttons:
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        btn_locations = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(btn_locations).forEach(div =&gt; {
            div.classList.add(&#39;my-2&#39;, &#39;md:mx-4&#39;, &#39;border-2&#39;, &#39;border-blue-200&#39;, &#39;p-2&#39;, &#39;grid&#39;, &#39;grid-cols-1&#39;, &#39;rounded-xl&#39;, &#39;flex&#39;, &#39;flex-row&#39;, &#39;justify-center&#39;, &#39;w-auto&#39;, &#34;py-1&#34;, &#39;h-auto&#39;, &#39;md:h-full&#39;)
            let p = document.createElement(&#39;p&#39;)
            p.classList.add(&#39;my-auto&#39;, &#39;mr-4&#39;, &#39;italic&#39;)
            p.innerHTML = &#34;Want to run these examples live in your browser?&#34;
            if (div.classList.contains(&#34;viz&#34;)){
                p.innerHTML += &#39; &lt;p class=&#34;font-semibold text-green-600&#34;&gt;This example includes a visualization.&lt;/p&gt;&#39;
            }
            div.appendChild(p)
            //button
            let btn = document.createElement(&#39;button&#39;)
            btn.innerText = &#34;Load PyScript&#34;
            btn.classList.add(&#39;load-pyscript-button&#39;, &#39;h-12&#39;)
            btn.onclick = loadPyScript
            div.appendChild(btn)
        });
    })

    /* Make Table of Contents */
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        headings = document.getElementsByClassName(&#39;post-h2&#39;)
        tocContents = document.getElementById(&#39;toc-contents&#39;)
        Array.from(headings).forEach(header =&gt; {
            //&lt;p&gt;&lt;a class = &#34;text-gray-500&#34; href=&#34;#day1&#34;&gt;Day 1&lt;/a&gt;&lt;/p&gt;
            const line = document.createElement(&#39;p&#39;)
            const link = document.createElement(&#39;a&#39;)
            link.href = `#${header.id}`
            link.innerText = header.innerText
            line.appendChild(link)
            if (document.getElementById(`${header.id}-viz-btn`) !== null){
                const viztag = document.createElement(&#34;span&#34;)
                viztag.innerText = &#34; - Includes Visualization&#34;
                line.appendChild(viztag)
            }
            tocContents.appendChild(line)
        })
    })

    function loadPyScript() {
        //load chartjs
        chartlink = document.createElement(&#39;script&#39;)
        chartlink.src = &#34;https://cdn.jsdelivr.net/npm/chart.js&#34;
        document.body.append(chartlink)

        //load animejs
        animejslink = document.createElement(&#39;script&#39;)
        animejslink.src=&#34;https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js&#34;
        document.body.append(animejslink)
        
        //load css
        css_link = document.createElement(&#34;link&#34;)
        css_link.rel = &#34;stylesheet&#34;
        css_link.type = &#34;text/css&#34;
        css_link.href = &#34;https://pyscript.net/unstable/pyscript.css&#34;
        //css_link.href = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.css&#34;
        document.getElementsByTagName(&#39;head&#39;)[0].appendChild(css_link)

        //load cs
        script_tag = document.createElement(&#39;script&#39;)
        script_tag.src = &#34;https://pyscript.net/unstable/pyscript.js&#34;
        //script_tag.src = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.js&#34;
        document.body.append(script_tag)        
    }
    document.addEventListener(&#39;pyscript_ready&#39;, () =&gt; {
        static = document.getElementsByClassName(&#39;static-example&#39;)
        live = document.getElementsByClassName(&#39;live-example&#39;)
        Array.from(static).forEach(div =&gt; {
            div.classList.add(&#39;hidden&#39;)
        })
        Array.from(live).forEach(div =&gt; {
            div.classList.remove(&#39;hidden&#39;)
        })
        load_buttons = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(load_buttons).forEach(elem =&gt; {
            elem.classList.add(&#39;hidden&#39;)
        })
    })
&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;tabs.css&#34;&gt;
&lt;!-- &lt;script src=&#34;tabs.js&#34;&gt;&lt;/script&gt; --&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2021</title>
      <link>https://jeff.glass/post/advent-of-code-2021/</link>
      <pubDate>Tue, 30 Nov 2021 02:30:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2021/</guid>
      <description>&lt;script src=&#34;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;fixed flex items-center w-2/3 h-10 align-top center top-14 z-15&#34;&gt;
    &lt;div id=&#34;toc-tab&#34; class=&#34;px-8 py-2 m-auto text-xl text-center text-green-200 transition-all duration-300 bg-green-800 opacity-0 flex-0 rounded-b-2xl&#34;&gt;&lt;a href=&#34;#TOC&#34; class=&#34;no-style-link&#34;&gt;Back to Table of Contents&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
    $(document).scroll(function() {
        var y = $(this).scrollTop();
        var startOfPosts = document.querySelector(&#34;div#day1&#34;).getBoundingClientRect()
        if (y &gt; startOfPosts.bottom + 600) {
            $(&#39;div#toc-tab&#39;).addClass(&#39;opacity-100&#39;)
            //console.log(&#34;unhide tab&#34;)
        } else {
            $(&#39;div#toc-tab&#39;).removeClass(&#39;opacity-100&#39;)
            //console.log(&#34;unhide tab&#34;)
        }
        });
&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;Is it Advent of Code time again? Well, here goes nothing. Let&#39;s see wha we can cook up.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m planning on completing most (all) of this year&#39;s challenges in Python, &lt;a href=&#34;../../post/advent-of-code-2020/&#34;&gt;same as last year&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;w-auto pt-2 pb-4 pl-2 mr-2 -ml-2 align-top bg-gray-200 md:w-130&#34;&gt;
    &lt;p class=&#34;text-2xl relative-anchor&#34;&gt;Table of Contents&lt;/p&gt;
    &lt;div class=&#34;ml-8 font-semibold&#34;&gt;
        &lt;p&gt;&lt;a href=&#34;#day1&#34;&gt;Day 1 - Sonar Sweep&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day2&#34;&gt;Day 2 - Dive!&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day3&#34;&gt;Day 3 - Binary Diagnostic&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day4&#34;&gt;Day 4 - Giant Squid&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day5&#34;&gt;Day 5 - Hydrothermal Venture&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day6&#34;&gt;Day 6 - Lanternfish&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day7&#34;&gt;Day 7 - The Treachery of Whales&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day8&#34;&gt;Day 8 - Seven Segment Search&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day9&#34;&gt;Day 9 - Smoke Basin&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day10&#34;&gt;Day 10 - Syntax Scoring&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day11&#34;&gt;Day 11 - Dumbo Octopus&lt;/a&gt;&lt;/p&gt;        
        &lt;p&gt;&lt;a href=&#34;#day12&#34;&gt;Day 12 - Passage Pathing&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day13&#34;&gt;Day 13 - Transparent Origami&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day14&#34;&gt;Day 14 - Exteded Polymerization&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day15&#34;&gt;Day 15 - Chiton&lt;/a&gt;&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 16 - Packet Decoder (In Progress)&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;#day17&#34;&gt;Day 17 - Trick Shot&lt;/a&gt;&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 18 - Snailfish (In Progress)&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 19 - Beacon Scanner (In Progress)&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 20 - Trench Map (In Progress)&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 21 - Dirac Dice (In Progress)&lt;/p&gt;
        &lt;p class=&#34;text-gray-500&#34;&gt;Day 22 - Reactor Reboot (In Progress)&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day1&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto pb-1 border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 1 - Sonar Sweep&lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I feel like it&#39;s Advent of Code tradition for me to read in the input from file (as strings) and try to do comparisons on it like ints, forgetting to cast them to intergers. Which means I was comparing textually, instead of numerically, so my answer was off by &lt;span class=&#34;italic&#34;&gt;two&lt;/span&gt;. Absurd. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;You really could do &lt;a href=&#34;https://adventofcode.com/2021/day/1&#34;&gt;today&#39;s challenge&lt;/a&gt; entirely in one line, but I think it&#39;s slightly more readable broken up as I&#39;ve done. Here&#39;s the complete code:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day1/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(t) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]
&lt;/span&gt;
numDecreases &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([pair &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(data[:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]])

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;numDecreases&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;The offending line, where I remembered to cast the input to ints.&lt;/p&gt;
&lt;h4 class=&#34;pt-4 pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Part 2 could also probably be inlined, but the list-comprehension-within-list-comprehension is, again, not the most readable thing, I think. Breaking out the three key steps (creating triples of the data, finding their sums, and finding where adjacent sums are decreasing) into 3 lines of code I think makes the solution more parsable.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day1/Part2.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(t) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

triples &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(data[:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;], data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], data[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;:])
windowSums &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(t)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; triples]

numDecreases &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([t &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(windowSums[:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], windowSums[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; t[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; t[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]])

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;numDecreases&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day2&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 2 - Dive!&lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The first part of today&#39;s challenge has us dealing with a list of things that happen sequentially (tracking the horizontal and vertical movements of our submarine), but the answer only has to do with summing them in some specific ways. This smells strongly of a &#39;gotcha&#39; coming in part 2 - if we can the easy, just-sum-it-up route for part 1, we won&#39;t be able to reuse any code for part 2 when the order actually matters. But that&#39;s alright, I guess, we&#39;ll take the easy route on this one.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s a fair amount of repetition in my list comprehensions here, but for a 7-line program I don&#39;t terribly feel like factoring it out.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day2/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# data is a list of tuples; each tuple is of form (&amp;#39;instruction&amp;#39;, int) where &amp;#39;instruction&amp;#39; is forward, down, up&lt;/span&gt;
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

horizontal &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([step[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; step[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;forward&amp;#39;&lt;/span&gt;])
depth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([step[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; step[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;down&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([step[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; step[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;up&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Solution product is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;horizontal &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; depth &lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As expected, we&#39;re paying the (small) price for not doing the first part iteratively. That&#39;s alright, we can implement it now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This does give me a chance to play with a new feature of Python 3.10: structural pattern matching. It&#39;s like a switch-case structure on steroids. To make sure I&#39;m running this code in Python 3.10 specifically, I&#39;ll use pipenv to lock the version to 3.10.0 by running &lt;code class=&#34;code&#34;&gt;pipenv install --python 3.10&lt;/code&gt; on the command line.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Our code is ultimately fairly simple; thankfully, I encountered no &#34;unmatched instruction&#34; errors, which means I parsed the input correctly.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day2/Part2.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# data is a list of tuples; each tuple is of form (&amp;#39;instruction&amp;#39;, int) where &amp;#39;instruction&amp;#39; is forward, down, up&lt;/span&gt;
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

horizontal, depth, aim &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
    match d:
        case (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;down&amp;#39;&lt;/span&gt;, num):
            aim &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; num
        case (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;up&amp;#39;&lt;/span&gt;, num):
            aim &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; num
        case (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;forward&amp;#39;&lt;/span&gt;, num):
            horizontal &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; num
            depth &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; aim &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; num
        case _:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unmatched instruction &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;d&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Solution is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;horizontal&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;depth&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day3&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 3 - Binary Diagnostic &lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah, day 3 of Advent of Code, where we traditionally get into nested-processing, working with binary, and parsing numbers based on their digits. I don&#39;t know that this literally happens on day 3 every year, but it seems a familiar progression in the early days of an Advent of Code challenge. My first thought is - let&#39;s make sure we iterate through the entire input as few times as possible, something made easier by the fact that epsilon and gamma are, in some sense, complements of each other.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This one&#39;s not too hard - using a &lt;code class=&#34;code&#34;&gt;defaultdict&lt;/code&gt; from the &lt;code class=&#34;code&#34;&gt;collections&lt;/code&gt; module makes the process of adding up the number of &#34;1&#34;&#39;s in all the input numbers a little cleaner.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day3/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; defaultdict

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

numInputs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)
onesCount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Count the number of &amp;#34;1&amp;#34;&amp;#39;s at each digit position in all of the input numbers&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, digit &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(num):
        onesCount[i] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(digit)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Calculate gamma, epison as lists of strings (&amp;#34;1&amp;#34; and &amp;#34;0&amp;#34;)&lt;/span&gt;
gamma &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; onesCount[i] &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; (numInputs &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(onesCount))]
epsilon &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; gamma[i] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(onesCount))]

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Concatenate lists, as 0b to represent binary, cast to int&lt;/span&gt;
result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;0b&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(gamma), &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;0b&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(epsilon), &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;gamma&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;epsilon&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;result&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Now we&#39;re moving into the realm of processing some input data with multiple passes, while restricting which data is in each pass based on our processing of previous steps. My initial solution was a little cumbersome, but I think gets the intention accross pretty well. &lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day2/Part2.py (Version 1)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    inputdata &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;mostCommonDigitInPosition&lt;/span&gt;(data, position):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num[position]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;


oxyData &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [d &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; inputdata]
co2Data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [d &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; inputdata]

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#find Oxygen Rating&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(inputdata[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(oxyData) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
    MCD_o2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mostCommonDigitInPosition(oxyData, i)
    oxyData &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [t &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; oxyData &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; t[i] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; MCD_o2]

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#find CO2 Rating&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(inputdata[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(co2Data) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
    MCD_co2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mostCommonDigitInPosition(co2Data, i)
    co2Data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [t &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; co2Data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; t[i] &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; MCD_co2]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(oxyData) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: oxygenRating &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(oxyData[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Oxygen Data should only have one element, instead was &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;oxyData&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(co2Data) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: co2Rating &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(co2Data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;CO2 Data should only have one element, instead was &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;co2Data&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Product: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;oxygenRating&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; * &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;co2Rating&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;oxygenRating &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; co2Rating&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;We can refactor this a bit, so that the logic of reducing the list of input values is done in a function called &lt;code class=&#34;code&#34;&gt;calculateRating&lt;/code&gt;, which takes a list of data as well as a function. The function tells us, for a given digit position, what value at that position should be used to keep values in our data for our next round of culling.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While we could also get a little fancy and combine &lt;code class=&#34;code&#34;&gt;mostCommonDigitInPosition&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;leastCommonDigitInPosition&lt;/code&gt;, I think we&#39;d actually be in danger of making things &lt;span class=&#34;italic&#34;&gt;too&lt;/span&gt; concise. The difference between &lt;code class=&#34;code&#34;&gt;&gt;=&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;&gt;&lt;/code&gt; in each case is critical, and I think factoring that out might be too reductive.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day3/Part2.py (Version 2)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    inputdata &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;mostCommonDigitInPosition&lt;/span&gt;(data, position):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num[position]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;leastCommonDigitInPosition&lt;/span&gt;(data, position):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num[position]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;calculateRating&lt;/span&gt;(data, digitFunc):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        digitToMatch &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; digitFunc(data, i)
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [t &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; t[i] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; digitToMatch]

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Function calculateRating should termiante with one element, instead was &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

oxygenRating &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; calculateRating(inputdata, mostCommonDigitInPosition)
co2Rating &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; calculateRating(inputdata, leastCommonDigitInPosition)

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Product: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;oxygenRating&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; * &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;co2Rating&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;oxygenRating &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; co2Rating&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day4&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 4 - Giant Squid&lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Today my biggest obstacle was, as is often the case, myself trying to be too clever and concise. &lt;a href=&#34;https://adventofcode.com/2021/day/4&#34;&gt;Today&#39;s challenge&lt;/a&gt; invovled parsing a somewhat more involved text file of inputs, and then further processing that input to make it into a useful data structure. Rather than load each bingo card as a 2D array, I used the input data to create two separate arrays, one indexed by rows, the other by columns, with boards at the same position representing the same board. Determining whether a board is winning (given a list of called numbers) is a simple as asking whether any of the lines (rows or columns) in that board have all their members in the called numbers.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Had I simply constructed each type of input using &lt;code class=&#34;code&#34;&gt;for&lt;/code&gt; loops, this would have been fairly simply, but I wanted everything packaged up nice in a list comprehension... which took me a spell to troubleshoot and get right. Ah well.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day4/part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
        inputChunks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#---Parse the Input to make it useful----&lt;/span&gt;
    
    allCalledNumbers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; inputChunks[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]
    boards &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(chunk&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; chunk &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; inputChunks[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#get boards&lt;/span&gt;
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Make board list of ints instead of long string by splitting every 3 characters&lt;/span&gt;
    intBoards &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(b[n:n&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(b), &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; boards]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#boardrows is a list of boards, each of which are a list of rows in each board,&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#each of which is a list of ints&lt;/span&gt;
    boardRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[b[index:index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; intBoards]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#boardcols is a list of boards, each of of which is a list of columns in each board,&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#each of which is a list of ints&lt;/span&gt;
    boardCols &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[[b[row][index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; boardRows]
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#---Define some functions to help us solve the problem as written---&lt;/span&gt;
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#For a given board (by row or column), are any of its lines made up only of numbers in &amp;#39;calledNums&amp;#39;?&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isBoardAWin&lt;/span&gt;(board, calledNums):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;([&lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;([num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; calledNums &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; board])
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Score is (sum of uncalled numbers on board) * (last number called)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;calcScore&lt;/span&gt;(board, calledNumbers):
        unusedNumbers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [num &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; board &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; calledNumbers]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(unusedNumbers) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; calledNumbers[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doWin&lt;/span&gt;(board, calledNumbers):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Score is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;calcScore(b, calledSoFar)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        exit()
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#---Find solution---&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(allCalledNumbers)):
        calledSoFar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; allCalledNumbers[:i]
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Searching for wins with numbers &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;calledSoFar&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        winner &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; boardRows:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isBoardAWin(b, calledSoFar):
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Winner board by row! &lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;b&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
                doWin(b, calledSoFar)
    
    
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; boardCols:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isBoardAWin(b, calledSoFar):
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Winner board by column! &lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;b&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
                doWin(b, calledSoFar)
    
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No winners after &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; numbers, calling next number&amp;#34;&lt;/span&gt;)
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, the infrastructure I built for part 1 of this puzzle was very useful for part to. Basically, instead of iterating through increasingly long lists of called numbers until the &lt;span class=&#34;italic&#34;&gt;first&lt;/span&gt; winning is found, keep going until only 1 board has not won, recall that it&#39;s the winner, then keep adding called numbers until it does win.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since all of the setup and parsing steps are the same, I&#39;ll only include the solution finding part of the code, for brevity:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day2/Part2.py &lt;span class=&#34;italic&#34;&gt;(Partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#---Find solution---&lt;/span&gt;

hasWon &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; boards]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(allCalledNumbers)):
    calledSoFar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; allCalledNumbers[:i]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x, b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(boardRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isBoardAWin(b, calledSoFar):
            hasWon[x] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
            
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x, b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(boardCols):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isBoardAWin(b, calledSoFar):
            hasWon[x] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;After calling &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; numbers,&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; hasWon&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
        winningIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; hasWon&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;found last board to win at index: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;winningIndex&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; hasWon&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;This board wins after &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; numbers called,&amp;#34;&lt;/span&gt;,)
        doWin(boardCols[winningIndex], calledSoFar)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;hasWon&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; boards have not won&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day5&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 5 - Hydrothermal Venture &lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;One of the gotchas on this day is making incorrect assumptions about the ordering of points in a given line. For eaxmple, for a line with endpoints (3,5) and (3,0), doing something like: &lt;code class=&#34;code&#34;&gt;for y in range(point1.y, point2.y)&lt;/code&gt; will generate exactly one point &lt;code class=&#34;code&#34;&gt;(3.5)&lt;/code&gt;, because the ending y coordinate is less than the starting one. This can be fixed by either ranging over the values in a consistent direction (always from lesser to great, say) or by pre-sorting the line coordinates so that the first coordinate is always less than the second for the given axis. I chose to do the former.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Unrelatedly, I&#39;m personally a fan of &lt;a href=&#34;https://regex101.com/&#34;&gt;Regex101&lt;/a&gt; for working out regexes. It makes the process of fleshing out a given pattern visual and intuitive, and the built-in reference guides and regex tips are invaluable.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day5/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; namedtuple

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

Line &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Line&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;p1x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;p1y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;p2x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;p2y&amp;#39;&lt;/span&gt;])
parsedData &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
    reg &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;(.+),(.+) -&amp;gt; (.+),(.+)&amp;#39;&lt;/span&gt;, d)
    parsedData&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Line(p1x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)), p1y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)), p2x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)), p2y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;))))

horizontalLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [l &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; parsedData &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2y]
verticalLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [l &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; parsedData &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2x]

coveredOnce, coveredMany &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(), &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; horizontalLines:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; xCoord &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2x), &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2x)&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        point &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (xCoord, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If the point is already covered by multiple lines, we don&amp;#39;t need to do anything more with it, but&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; coveredMany:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If we haven&amp;#39;t see it at all, we should mark that we&amp;#39;ve now seen it once.&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; coveredOnce:
                coveredOnce&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(point)
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Otherwise, we should mark that we&amp;#39;ve now seen it in multiple lines&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                coveredOnce&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(point)
                coveredMany&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(point)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; verticalLines:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; yCoord &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2y), &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2y)&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        point &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x, yCoord)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If the point is already covered by multiple lines, we don&amp;#39;t need to do anything more with it, but&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; coveredMany:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If we haven&amp;#39;t see it at all, we should mark that we&amp;#39;ve now seen it once.&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; coveredOnce:
                coveredOnce&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(point)
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Otherwise, we should mark that we&amp;#39;ve now seen it in multiple lines&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                coveredOnce&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(point)
                coveredMany&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(point)
                
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Solution is: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(coveredMany)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;italic post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Having selected to iterate over the points in a line in a consistent way in the first half, I felt it might be easier to pre-process the diagonal lines in the second half. That is, I swapped the endpoints of each diagonal line as necessary to ensure the point with the lower X coordinate was first. Then, if the second y coordinate is great  than the first, each time we increase the x coordinate by 1, we will by definition incrase the y coordinate by 1. If the second y coordinate is less than the first, y decreased by 1 for each increase of the x coordinate. Other than that, the processing of each point to see if it&#39;s been covered already is the same as in part one.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For brevity, I&#39;ve only included the addititional processing necessary for part 2 of today&#39;s challenge.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day5/Part2.py &lt;span class=&#34;italic&#34;&gt;(Partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;diagonalLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [l &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; parsedData &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; verticalLines &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; horizontalLines]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; diagonalLines:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Make sure the first coordinate of each line is left of the second coordinte&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2x &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x: l &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Line(p1x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2x, p1y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2y, p2x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x, p2y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y)
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Determine if y increases or descreases with increasing X&lt;/span&gt;
    yDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2y &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; yDelta, xCoord &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1x, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p2x&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)):
        point &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (xCoord, l&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;p1y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (yDelta&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;yDir))

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; coveredMany:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If we haven&amp;#39;t see it at all, we should mark that we&amp;#39;ve now seen it once.&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; coveredOnce: 
                coveredOnce&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(point)
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Otherwise, we should mark that we&amp;#39;ve now seen it in multiple lines&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                coveredOnce&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(point)
                coveredMany&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(point)

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Solution is: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(coveredMany)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;relative-anchor&#34; id=&#34;day6&#34;&gt;
    &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2&#34;&gt;Day 6 - Lanternfish&lt;/h2&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Part one of &lt;a href=&#34;https://adventofcode.com/2021/day/6&#34;&gt;today&#39;s puzzle&lt;/a&gt; was deceptively simple. It asks the challenger to calculate the number of lanternfish present after a given number of steps of an iterative process. The way the puzzle&#39;s data is displayed in the examples presented, one might be tempted to keep the data as a long list of individual fish listed by the number of days till they next reproduce; then, for each step, iterate over the list and take the appropriate action. While this shold generate a solution, the list would quickly balloon out of the control. The key insight is that each fish that will, say, generate a new fish in 4 days, is identical to every other fish that will spawn a new fish in four days. So really, we don&#39;t need to track individual fish, just the total count of fish that will reproduce in a given number of days. For every day that passes, each of those counts of fish reduce their count by one, and we do some special accounting to the fish that are reproducing today, and iterate.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This quick and simple approach does make one worry that part 2 will require more convoluted reasoning though.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day6/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    inputdata &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]

fishcounts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [inputdata&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;count(num) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)]
daysToRun &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;80&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(daysToRun):
    newfishcounts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fishcounts[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [fishcounts[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]]
    newfishcounts[&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; fishcounts[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    fishcounts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newfishcounts

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;After &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;daysToRun&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; days there are &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(fishcounts)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; lanternfish&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah! We&#39;ve gotten lucky here and avoided the &#39;gotcha&#39; that the puzzle writer was thinking of. The second step asks to calculate the number of fish present after 256 steps; if one had taken the &#34;process the whole list&#34; technique in part one, one would be screwed in part two as the exponential growth of the fish population really takes off. But with a condensed, iterative process like we used in part 1, one only has to change the &lt;code class=&#34;code&#34;&gt;daysToRun&lt;/code&gt; value to 256, and our answer pops out in less than a quarter of a second! Excellent. I&#39;m not even going to include the code a second time, since it is &lt;span class=&#34;italic&#34;&gt;identical to part 1 except for the value of &lt;code class=&#34;code&#34;&gt;daysToRun&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day6/Part2.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#See Day6/Part1.py, above&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day7&#34;&gt;Day 7 - The Treachery of Whales &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Just to humblebrag a bit (well, really, to brag; but hey, it&#39;s my website), I solved part 1 of day&#39;s challenge in the shower. My reasoing went something like the following:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;We&#39;re looking to select a point &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; that minimizes the function &lt;img src=&#34;day7/p1mineq.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;, as presented in problem setup.&lt;/li&gt;
    &lt;li&gt;Taking the derivative of this sum is somewhat complicated, but there&#39;s actually a better way to reason about it.&lt;/li&gt;
    &lt;li&gt;Looked at another way, we&#39;re looking to find a point &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; such that moving that point will only cause the total crab-distance traveled to increase; a local minimum.&lt;/li&gt;
    &lt;li&gt;Picture our point where our crabs our converging at a point &lt;img src=&#34;day7/x.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; on the number line, with &lt;img src=&#34;day7/n.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; crabs less than x and &lt;img src=&#34;day7/totalcrabsminusn.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; crabs great than &lt;img src=&#34;x.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; &lt;/li&gt;
    &lt;li&gt;As we slide our alignment point along the number line in a continuous fashion, if it moves a small distance &lt;img src=&#34;day7/deltax.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; in, say the positive direction:
        &lt;li class=&#34;pl-8&#34;&gt;We add &lt;img src=&#34;day7/ndeltax.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; units of additional crab travel, as we move further from the crabs at positions less than our alignment point, but&lt;/li&gt;
        &lt;li class=&#34;pl-8&#34;&gt;We subtract &lt;img src=&#34;day7/totalcrabsub.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; as we move closer to the crabs greater than our alignment point&lt;/li&gt;
    &lt;/li&gt;
    &lt;li&gt;And similarly, if &lt;img src=&#34;day7/deltax.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; is negative, we get closer to &lt;img src=&#34;day7/n.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; crabs and futher from &lt;img src=&#34;day7/totalcrabsminusn.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; crabs.&lt;/li&gt;
    &lt;li&gt;So, if &lt;img src=&#34;day7/ngreater.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;, increasing &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; will cause the total crab distance to descrease. And if &lt;img src=&#34;day7/nless.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;, decreasing &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; with cause thte total crab distance to increase.&lt;/li&gt;
    &lt;li&gt;But recall, what we want is to find a point where neither of those things is true; where &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; is at a mimumum, so any movement of it causes the total crab distance to incerase. This is only true where neither of the above inequalities is statisfied, i.e. when &lt;img src=&#34;day7/nequal.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;.&lt;/li&gt;
    &lt;li&gt;Moving some terms around, we find that the total crab distance travelled is at a mimimum when &lt;img src=&#34;day7/div2.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt;, in other words, when the number of crabs greater than and less than the alignment point are equal. This is true when &lt;img src=&#34;day7/xalign.gif&#34; alt=&#34;&#34; class=&#34;inline-block px-1 py-0.5 bg-gray-300&#34;&gt; is the median of the crab points.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;All that thinking in a warm shower yeilded a very short (and working) bit of code.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day7/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;statistics&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; median

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]

median &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; median(data)
minFuel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([&lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(d&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;median) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data])

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;minFuel&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Sadly, my brain failed me when trying to come up with a similarly clever solution for part 2, so I ended up implementing the crab-fuel-expenditure function as described in the problem statement and iteratively increasing and decreasing the alignment point value until a minimum was found. I had the code start at the median value of the list, somewhat arbitrarily, but the code still finishes in under a quarter of a second and yields the correct answer.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I skipped a couple of obvious optimizations. 
    &lt;ul class=&#34;pb-6 post-ul&#34;&gt;
        &lt;li&gt;Incrementing the position that we&#39;re currently testing the crab-distance of by only 1 unit each time probably isn&#39;t optimal (for my inputs, I had to evaluate 140 positions before finding a minimum). Perhaps some variation on Newton&#39;s method could have been used to estimate a better delta for &lt;code class=&#34;code&#34;&gt;testVal&lt;/code&gt;?&lt;/li&gt;
        &lt;li&gt;There might be a more ideal value to start the search at (the mean perhaps?).&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day7/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;statistics&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; median
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(num) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;fuelUsed&lt;/span&gt;(crabPositions, position):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([(&lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(d &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; position)&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(d&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;position)&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crabPositions])
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;lazyDict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__ (self, factory):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;factory &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; factory
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __missing__ (self, key):
            self[key] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;factory(key)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self[key]
    
    fuelToReach &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lazyDict(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x: fuelUsed(data, x))
    
    med &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; median(data)
    fuelToReach[med] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fuelUsed(data, med)
    testVal &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; med
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; ((fuelToReach[testVal] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; fuelToReach[testVal&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; (fuelToReach[testVal] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; fuelToReach[testVal&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; fuelToReach[testVal&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; fuelToReach[testVal]: testVal &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; fuelToReach[testVal&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; fuelToReach[testVal]: testVal &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Something has gone wrong&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;fuelToReach&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Minimum required fuel is reached at position &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;testVal&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; with &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;fuelToReach[testVal]&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; fuel used&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Calculated &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(fuelToReach)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; potential positions&amp;#34;&lt;/span&gt;)
    
    
    
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day8&#34;&gt;Day 8 - Seven Segment Search &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Whenever the first part of an AoC challenge says &lt;code class=&#34;code&#34;&gt;For now...&lt;/code&gt; you know you&#39;re in for an expansion of that area of the challenge in part 2. Today&#39;s part one specifcally says to &lt;code class=&#34;code&#34;&gt;For now, focus on the easy digits&lt;/code&gt;, meaning the hard digits are coming right down the pipe.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Part 1 is indeed pretty easy - it breaks down to parsing the input, throwing away half of it, then counting the members of a list that have a length of 2, 3, 4, or 7 letters. I had a feeling we&#39;d be parsing the actual digit information in part 2, so I fleshed out a bit of a dataclass to hold the input values, assuming I&#39;d expand this in part 2.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day8/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;displayRun&lt;/span&gt;:
    hookups: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]
    outputs: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    runs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [displayRun(hookups &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;), outputs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

totalUnique &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(segments) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; segments &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;outputs]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; runs])
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;totalUnique&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah, here we go, let&#39;s parse some digits. We&#39;ll need to figure out which actual segments (from &lt;code class=&#34;code&#34;&gt;&#39;abcdefg&#39;&lt;/code&gt;) are represented by which letters in the input rows.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll start by organizing the &#34;hookups&#34; (sequences of letters describing the segments lit up for a given digit) ina dictionary by the number of letters in each. This will help us tease apart which segment is which by looking at which segments are in how members members of each of thes lists.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For example, as part 1 illustrates, there is only 1 hookup with 2 segments (&#34;1&#34;) and 1 hookup with 2 segments (&#34;7&#34;). The segment connected to the &lt;code class=&#34;code&#34;&gt;a&lt;/code&gt; illuminator is present in the &#34;7&#34; hookup, but not in the &#34;1&#34; hookup, and that&#39;s their only difference, so it&#39;s easy to find what&#39;s wired to the &#34;a&#34; segment.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The remainder of the deductions are slightly more complicated. For example:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;In the 3 digits with 5 segments illuminated (2, 3, 5), there are three segments common to all three (segments, &lt;code class=&#34;code&#34;&gt;a&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;d&lt;/code&gt;, and &lt;code class=&#34;code&#34;&gt;g&lt;/code&gt;).&lt;/li&gt;
        &lt;li&gt;We&#39;ve already found what&#39;s hooked up to segment &lt;code class=&#34;code&#34;&gt;a&lt;/code&gt;, as above. So the remaining two common segments correspond to illuminators &lt;code class=&#34;code&#34;&gt;d&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;g&lt;/code&gt;, in some order.&lt;/li&gt;
        &lt;li&gt;The segment corresponding to &lt;code class=&#34;code&#34;&gt;d&lt;/code&gt; will be present in the single hookup with 4 illuminated sigments (which corresponds to the digit &#34;4&#34;); the segment corresponding to &lt;code class=&#34;code&#34;&gt;g&lt;/code&gt; will not. So we have established which segments should be wired now to &lt;code class=&#34;code&#34;&gt;d&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;g&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Similar logic allows us to work out:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;Segments &lt;code class=&#34;code&#34;&gt;e&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;b&lt;/code&gt; (both are in a single digit with 5 illuminated segments, with &lt;code class=&#34;codce&#34;&gt;e&lt;/code&gt; present in 2 hookups with 6 illuminated segments and &lt;code class=&#34;codce&#34;&gt;b&lt;/code&gt; present in 3).&lt;/li&gt;
        &lt;li&gt;Segments &lt;code class=&#34;code&#34;&gt;c&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;f&lt;/code&gt; (both are present in two digits with 5 illuminated segments, with &lt;code class=&#34;codce&#34;&gt;c&lt;/code&gt; present in 2 hookups with 6 illuminated segments and &lt;code class=&#34;codce&#34;&gt;f&lt;/code&gt; present in 3).&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There may be a more concise way of working this out, but this method worked out for me.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Once we know the mappings from poorly-wired-segments to true segments, we can iterate over all our input rows, transform the messed-up wirings to true wirings using this mapping, map the true mappings to digits, then sum them up.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day8/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;(kw_only&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;displayRun&lt;/span&gt;:
    hookups: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]
    outputs: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]
    segmentAssigns : &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;](default_factory&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    runs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [displayRun(hookups &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;), outputs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;), segmentAssigns &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;numFromSegmentsOn&lt;/span&gt;(segmentsOn):
    sortedLetters &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;([letter &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; letter &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; segmentsOn]))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcefg&amp;#39;&lt;/span&gt;   : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;cf&amp;#39;&lt;/span&gt;       : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;acdeg&amp;#39;&lt;/span&gt;    : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;acdfg&amp;#39;&lt;/span&gt;    : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;bcdf&amp;#39;&lt;/span&gt;     : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abdfg&amp;#39;&lt;/span&gt;    : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abdefg&amp;#39;&lt;/span&gt;   : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;acf&amp;#39;&lt;/span&gt;      : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;  : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;  sortedLetters &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdfg&amp;#39;&lt;/span&gt;   : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Sorted letters &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;sortedLetters&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; do not match any digit pattern&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; runs:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Determine display: control wire mapping&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#{&amp;#34;actual illuminated output: wire that currently controls it&amp;#34;}&lt;/span&gt;
    hookupsWithLen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        hookupsWithLen[i] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [h &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;hookups &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(h) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; i]

    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#know wiring of segment a]&lt;/span&gt;

    d_or_g &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([h &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;])] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#based on hookups with 5 segments&lt;/span&gt;
    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; d_or_g &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#based on single length-4 hookup&lt;/span&gt;
    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; d_or_g &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;]][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]


    b_or_e &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([h &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#based on hookups with 5 segments on&lt;/span&gt;
    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b_or_e &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([h &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#based on hookups with 5 segments and knowing &amp;#39;b&amp;#39; already&lt;/span&gt;
    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b_or_e &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;]][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]


    c_or_f &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([h &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#based on hookups with 5 segments on&lt;/span&gt;
    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; c_or_f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;([h &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; hookupsWithLen[&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; h]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; c_or_f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; seg &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;]][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#convert miswired digits to real digits, then to numbers, and sum up&lt;/span&gt;
    rowSum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, digit &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;outputs):
        rewiredDigit &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([seg &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;segmentAssigns[seg] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; digit])
        rewiredNum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; numFromSegmentsOn(rewiredDigit)
        rowSum &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; rewiredNum &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;i)
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; rowSum

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Total of all rewired numbers: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;

&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day9&#34;&gt;Day 9 - Smoke Basin &lt;/h2&gt;&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Another classic evolution of the Advent of Code is working with adjacent items in a grid, with the biggest connundrum/gotcha being how to deal with the edges/corners. While the list comprehension I&#39;ve put together here isn&#39;t necessarily the most readable at first glance, nor the most efficient (it generates 9 positions, of which 4 are usable), it gets the job done.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day9/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; defaultdict

data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    raw &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    numRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(raw)
    numCols &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(raw[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(raw):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c, col &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            data[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(col)

total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print([(r + deltar, c + deltac) for deltar in [-1, 0, 1] for deltac in [-1, 0, 1] if (deltar*deltac == 0 and deltar != deltac)])&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;([data[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; data[(r &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, c &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (deltar&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;deltac &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; deltar &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; deltac)]):
            total &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; data[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;total&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The second part of today&#39;s challenge is essentially a flood-fill algorithm starting from the points we identified in part 1, ending when we reach the edges of the input data or a &#39;9&#39; in the data itself. By appending new points of interest to the end of the list (and only adding them if we haven&#39;t included them in the basin points already), we don&#39;t run into the issue of constantly checking points from each other.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Again, the meat of this solution is contained in a really long list comprehension. Probably not the most readable, as its checking four separate conditions to see if it should add a new point. Two have to do with generating the neighboring points, one to check if the newly checked point is a &#39;9&#39;, and one to check if we&#39;ve already included this point in the basin we&#39;re looking at.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Once we&#39;ve found the sizes of all the basins, we take the three largest sizes, multiply them together, and we have our answer.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day9/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; defaultdict
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;math&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; prod

data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; defaultdict(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    raw &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    numRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(raw)
    numCols &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(raw[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(raw):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c, col &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            data[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(col)

basins &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Find the low point for each bsain (as in part 1)&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;([data[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; data[(r &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, c &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac)] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (deltar&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;deltac &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; deltar &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; deltac)]):
            basins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append([(r, c),])

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Flood fill each basin until it hits a wall&lt;/span&gt;
basinLengths &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; basins:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pos &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b:
        b&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;extend([(pos[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, pos[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (deltar&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;deltac &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; deltar &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; deltac &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; data[(pos[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, pos[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac)] &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; (pos[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, pos[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; b)])
    basinLengths&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(b))

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Solution: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;prod(&lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(basinLengths, reverse&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)[:&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;])&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day10&#34;&gt;Day 10 - Syntax Scoring&lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Today&#39;s part 1 is not too hard if you understand the concept of a stack - a list from which things are only added or removed from the end. Our latest character can always be an opening bracket of some kind (starting a new chunk) or a closing bracket. For a closing bracket, if it matches the last opening bracket in our stack, pop the last opening bracket off the stack and throw both of them away. If it doesn&#39;t match, we&#39;ve found our first illegal character and can stop and score.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day10/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-96&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

lefts  &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; ]
rights &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; ]
points &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,       &lt;span style=&#34;color:#f60&#34;&gt;57&lt;/span&gt;,     &lt;span style=&#34;color:#f60&#34;&gt;1197&lt;/span&gt;,   &lt;span style=&#34;color:#f60&#34;&gt;25137&lt;/span&gt;]

totalScore &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
    stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; lefts:
            stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(char)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; rights:
            lastLeft &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; lefts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(lastLeft) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; rights&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(char):
                totalScore &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; points[rights&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(char)]
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unkown character &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;totalScore&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For part 2, we&#39;ll score our incomplete lines if and only if there are no corrupt characters in the line; that is, if we reach the end of iterating through the line without hitting a corrupt character. This is what the &lt;code class=&#34;code&#34;&gt;for...else&lt;/code&gt; syntax achieves. We hand off these incomplete lines to the &lt;code class=&#34;code&#34;&gt;autocompleteScore&lt;/code&gt; method for scoring, append those scores to the list, and find the middle (median) element at the end.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day10/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;statistics&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; median

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

lefts  &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; ]
rights &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; ]
points &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,       &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,      &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,      &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;   ]

scores &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;autocompleteScore&lt;/span&gt;(stack):
    score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; stack[::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
        score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (score &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; points[lefts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(item)]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; score

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
    stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; line:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; lefts:
            stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(char)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; rights:
            lastLeft &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; lefts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(lastLeft) &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; rights&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(char):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unkown character &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        scores&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(autocompleteScore(stack))

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;median(scores)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day11&#34;&gt;Day 11 - Dumbo Octopus &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;We&#39;re getting deeper and deeper into coding ideas now; today&#39;s part 1 introduces a challenge which requires is to iterate over a data set, performing a unique operation as many times as we&#39;re able until we&#39;re unable to any longer.&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;Once again I&#39;m making sure of a dataclass to hold the state of each octopus, as well as lazy dictionary which allows us to treat the grid points outside of our area of interest as infinite sinks of energy.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day11/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt; 
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;OctoData&lt;/span&gt;:
    intensity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    flashedThisStep: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;lazyDict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __missing__ (self, key):
        self[key] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; OctoData(intensity&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self[key]

grid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lazyDict()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

numRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)
numCols &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Load data into dict&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt; (numCols):
        grid[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; OctoData(intensity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(data[r][c]), flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printGrid&lt;/span&gt;(printFlashes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt; ):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
            val &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; val &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(val, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

numSteps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;
numFlashes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; step &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numSteps):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Increment by 1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
            grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        anyFlashesThisRound &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
        
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Flash as necesasry&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;:
                    grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
                    numFlashes &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
                    anyFlashesThisRound &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
                        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
                            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt;(deltar &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; deltac &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;): grid[(r &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, c &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

        fts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols)]

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; anyFlashesThisRound: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep: grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
            grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;--&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;final:&amp;#34;&lt;/span&gt;)
printGrid()
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Number of Flashes: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;numFlashes&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Part 2 is very similar to part 1, except instead of tracking the total number of octopus flashes, we want to know on what step all the octopuses flash at once. The code is quite similar; I&#39;ve highlighted the key changes in the following code&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day11/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;OctoData&lt;/span&gt;:
    intensity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    flashedThisStep: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;lazyDict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __missing__ (self, key):
        self[key] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; OctoData(intensity&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self[key]

grid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lazyDict()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

numRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)
numCols &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Load data into dict&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt; (numCols):
        grid[(r, c)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; OctoData(intensity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(data[r][c]), flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printGrid&lt;/span&gt;(printFlashes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt; ):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
            val &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; val &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(val, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;stepNumber &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;
printGrid()
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;--&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    stepNumber &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Increment by 1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
            grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        anyFlashesThisRound &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Flash as necesasry&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;:
                    grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
                    anyFlashesThisRound &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltar &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
                        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; deltac &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]:
                            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt;(deltar &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; deltac &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;): grid[(r &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltar, c &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; deltac)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

        fts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols)]

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; anyFlashesThisRound: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep: grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
            grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flashedThisStep &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;([grid[(r,c)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;intensity &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numRows) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(numCols)]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;--&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;final:&amp;#34;&lt;/span&gt;)
printGrid()
&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;All flashed on step &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;stepNumber&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day12&#34;&gt;Day 12 - Passage Pathing &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m not 100% proud of my solution to today&#39;s problems, though it definitely works. Mostly, the way I&#39;m generating the possible-next routes from the currently-arrived-at-room for any given path is just a little hacky. I&#39;m getting a list of all paths (pairs of connected caves) that include the current cave, then finding the element in that path that isn&#39;t the current cave. I have to loop through the full list of cave connections every time I want to do this, rather than generating a list of possible connections for each cave out the outset. The efficiency hit here is significant, but for the data size in the problem, it turns out to be fine. &lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day12/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Route&lt;/span&gt;():
    pathSoFar: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;
    currentCave: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    smallCavesVisited: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;

startingPaths &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [path &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; path]
routesInProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [Route(pathSoFar&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[s], smallCavesVisited&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;all&lt;/span&gt;([item &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; item&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lower() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; s])) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; s, currentCave &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(s) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;})[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; startingPaths]
completeRoutes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(routesInProgress) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;):
    nextRoutes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; routesInProgress:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;currentCave &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;:
            completeRoutes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(r)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Get all path segments including hte current room&lt;/span&gt;
            nextPaths &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [path &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;currentCave &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; path]
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; nextPaths:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Get the room this path segment would lead to (it&amp;#39;s the room that&amp;#39;s not our current room)&lt;/span&gt;
                nextCave &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [item &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; p &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; item &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;currentCave][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Can&amp;#39;t go to a little room twice&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited:
                    newPath &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathSoFar &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [p]
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; nextCave&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lower():
                        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If we&amp;#39;re now going to be in a little room, add it to the list of little rooms we&amp;#39;ve visited&lt;/span&gt;
                        newSmallCaves &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [nextCave]
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Otherwise, the list of little rooms visited doens&amp;#39;t change&lt;/span&gt;
                        newSmallCaves &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited
                    nextRoutes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Route(pathSoFar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newPath, smallCavesVisited &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newSmallCaves, currentCave &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; nextCave))
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    routesInProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; nextRoutes

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Total routes: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(completeRoutes)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For part 2, we&#39;ll need to track not only which small caves we&#39;ve visited, but how many times we&#39;ve visited them. So we&#39;ll need the Route object to have, not just a list of small caves, but a &lt;code class=&#34;code&#34;&gt;dict&lt;/code&gt; with keys as small caves and values of how many times we&#39;ve been there. Then, we&#39;ll change the criteria for whether we can visit a small cave next to include the possibility of visited a small cave twice if we&#39;ve yet to visit any small cave twice.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day12/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Route&lt;/span&gt;():
    pathSoFar: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;
    currentCave: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    smallCavesVisited: &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#[&amp;#39;a&amp;#39;, numberOfTimesVisited]. This is the key change&lt;/span&gt;

startingPaths &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [path &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; path] 
routesInProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; startingPaths:
    route &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;copy()
    s &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;copy()
    s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;)
    current &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; s[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; s[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; s[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lower(): smalls &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(s[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]):&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;}
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: smalls &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;}
    routesInProgress&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Route(pathSoFar&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(route), smallCavesVisited &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; smalls, currentCave &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; current))

completeRoutes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(routesInProgress) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;):
    nextRoutes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; routesInProgress:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;currentCave &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;:
            completeRoutes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(r)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            nextPaths &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [path &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;currentCave &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; path &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; path]
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; nextPaths:
                nextCave &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [item &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; p &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; item &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;currentCave][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]

                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited[nextCave] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;([(v &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;values()])):
                    newPath &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathSoFar &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; nextCave 
                    newSmallCaves &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;copy()
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; nextCave&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lower():
                        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextCave &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;smallCavesVisited:
                            newSmallCaves[nextCave] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
                        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                            newSmallCaves[nextCave] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
                    nextRoutes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Route(pathSoFar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newPath, smallCavesVisited &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newSmallCaves, currentCave &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; nextCave))

    routesInProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; nextRoutes

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Total routes: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(completeRoutes)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day13&#34;&gt;Day 13 - Transparent Origami &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A surprisingly easy challenge for day 13, I thought. Basically, for a list of points, which have (x or y as appropriate) coodinates greater than a given number, then reflect that point over a given line. So we do a little data parsing, and we use Python &lt;code class=&#34;code&#34;&gt;sets&lt;/code&gt; to eliminate duplicates.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day13/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

points &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)])

foldPattern &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;fold along (.)=(\d+)&amp;#39;&lt;/span&gt;
folds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(foldPattern, line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(foldPattern, line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;))) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;executeFold&lt;/span&gt;(points, f):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; f[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; doXFold(points, f)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; f[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; doYFold(points, f)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Expected fold in x or y, got fold &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;f&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doXFold&lt;/span&gt;(points, f):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;([p &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; f[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; (f[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; (p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]), p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; points])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doYFold&lt;/span&gt;(points, f):
    retSet &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; points:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; f[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]: retSet&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(p)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: retSet&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add((p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], f[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; (p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; retSet

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printPoints&lt;/span&gt;(points):
    maxX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;([p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; points])
    maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;([p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; points])
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(maxY&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(maxX&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (x, y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; points: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(executeFold(points, folds[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]))&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;And, since the first part sets up the general mechanics of the problem, all we need to do for part 2 is execute all the folds, then print out the formatted output.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For brevity, here&#39;s the only change required for part 2:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day13/Part2.py &lt;span class=&#34;italic&#34;&gt;(Partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; folds:
        points &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; executeFold(points, f)
    printPoints(points)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day14&#34;&gt;Day 14 - Extended Polymerization &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There were lots of jokes on  &lt;a href=&#34;https://www.reddit.com/r/adventofcode/&#34;&gt;/r/adventofcode&lt;/a&gt; today about this being a return to the lanternfish we saw on &lt;a href=&#34;#day6&#34;&gt;day 6&lt;/a&gt;. Indeed, it has a similar flavor, with an expotentially-increasing processing space that you can brute-force your way through in part 1, if you want, but that will hose you for part 2.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The brute-forcing is easy though! For each pair of letters in the current step, we add a new letter in between them based on the rules given in our input. This means our list of letters doubles in length every step, but at only 10 steps, we should be fine, right?&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Counter

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

template &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
rules &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;):
    r &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;(..) -&amp;gt; (.)&amp;#39;&lt;/span&gt;, line)
    rules[r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doStep&lt;/span&gt;(template):
    additions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(template)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(template[:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])):
        letterPair &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; template[i:i&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; letterPair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; rules: additions[i] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rules[letterPair]
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([val &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;zip&lt;/span&gt;(template, additions) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; val &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pair] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [template[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;):
    template &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; doStep(template)

counts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Counter(template)
lCount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(counts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;items(), key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x: x[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])

minimum, maximum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lCount[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], lCount[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Result is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;maximum &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; minimum&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;...oh, now it&#39;s 40 steps. Dang.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, just like with those dang lanternfish, we don&#39;t actually have the store the whole list of letters between each round. The key observation is that each pair of letters geneates a unique pair of pairs of letters for the next step. E.g., for the example input, the pair &lt;code class=&#34;code&#34;&gt;NN&lt;/code&gt; combined with the rule  &lt;code class=&#34;code&#34;&gt;NN -&gt; C&lt;/code&gt; means that if there is a one pair NN at the beginning of a step, there will be one &lt;code class=&#34;code&#34;&gt;NC&lt;/code&gt; and one &lt;code class=&#34;code&#34;&gt;CN&lt;/code&gt; after that step. Or at least, one of each contributed by the &lt;code class=&#34;code&#34;&gt;NN&lt;/code&gt;, as there could be more &lt;code class=&#34;code&#34;&gt;CN&lt;/code&gt;&#39;s and &lt;code class=&#34;code&#34;&gt;NC&lt;/code&gt;&#39;s generated by other rules.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But, we can store the possible letter combinations in a dictionary which tracks their count, and then apply these rules at each step to get our answer. We do have to be a little clever about counting up letters at the end - if we total up the counts from each pair a given letter is in, we&#39;ll get double our answer... except for the first and last characters of our string, which will be counted exactly 1 less time. Thankfully, the first and laster letters never change under any rule, so we can note those right at the beginning of our code and account for them later.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

firstLetter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
lastLetter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]

template &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        letterPair &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][i:i&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]
        template[letterPair] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (template[letterPair] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; letterPair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; template &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

rules &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;):
    r &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;(..) -&amp;gt; (.)&amp;#39;&lt;/span&gt;, line)
    rules[r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;), r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; r&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doStep&lt;/span&gt;(template):
    newTemplate &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pairOfLetters &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; template:
        nextPairOne &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rules[pairOfLetters][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        newTemplate[nextPairOne] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (newTemplate[nextPairOne] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; template[pairOfLetters]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextPairOne &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; newTemplate &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; template[pairOfLetters]

        nextPairTwo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rules[pairOfLetters][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
        newTemplate[nextPairTwo] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (newTemplate[nextPairTwo] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; template[pairOfLetters]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; nextPairTwo &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; newTemplate &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; template[pairOfLetters]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; newTemplate

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getLetterCounts&lt;/span&gt;(template):
    letterCounts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; template:
        letterCounts[pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (template[pair] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; letterCounts[pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; letterCounts &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; template[pair]
        letterCounts[pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (template[pair] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; letterCounts[pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; letterCounts &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; template[pair]
    letterCounts[firstLetter] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    letterCounts[lastLetter] &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; {key: val&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; key, val &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; letterCounts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;items()}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;):
    template &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; doStep(template)

lCount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(getLetterCounts(template)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;items(), key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x: x[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])
minimum, maximum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lCount[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], lCount[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Result is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;maximum &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; minimum&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;

&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day15&#34;&gt;Day 15 - Chiton &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Dolor velit incididunt cillum incididunt sint amet reprehenderit commodo magna Lorem proident duis do.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#some code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Pariatur incididunt veniam tempor eiusmod sunt id labore occaecat nostrud fugiat.&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;At this point, I thought it might be useful to try to optimize my algorithm a little bit by tweaking my heuristic distance function.
&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#some code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;

&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day15&#34;&gt;Day 15 - Chiton &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A pathfinding day! We&#39;ll use a modified A* pathfinding algorithm to start this one, but where the H-value of each space (the heurtistic that&#39;s usually based on cartesian distance to the endpoint) is zero.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As part of the development and debugging process, I took the opportunity to explore some terminal-based display methods, using the curses library. (Well, on windows, the windows-curses port of the same). The map-utils file and the mapDisplay class allow for single-stepping the map pathfinding while exploring the value at each space.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day15/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;97
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Any
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;termcolor&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; colored, cprint
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;maputils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; mapDisplay
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;astarutils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; calc_h_cost

showMaps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

risk &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x, val &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        risk[(x, y)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(val)

maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)
maxX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;PointData&lt;/span&gt;():
    f_cost: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    parent: Any

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getNeighbors&lt;/span&gt;(point):
    nList &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; delta &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)]:
        testPoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (point[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;delta[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], point[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; delta[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; testPoint[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; maxX) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; testPoint[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; maxY): nList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(testPoint)
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nList

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printMap&lt;/span&gt;(openPoints, closedPoints, activePoint):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(maxY):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(maxX):
            val &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; risk[(x,y)]
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (x,y) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; activePoint: cprint(val, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;grey&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;on_green&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; closedPoints: cprint(val, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; openPoints: cprint(val, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:cprint(val, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;, end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;findPath&lt;/span&gt;(start, end):
    locationScores &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {start: PointData(f_cost &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)}
    openPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {start}
    closedPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    oldSelection &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; showMaps:
            m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mapDisplay(maxX, maxY, risk, locationScores&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;locationScores, openPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;openPoints, closedPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;closedPoints, oldSelection &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; oldSelection)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: exit()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: oldSelection &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;selection&amp;#39;&lt;/span&gt;]

        costList &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;([p &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; openPoints], key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; p:locationScores[p]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;f_cost)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(costList) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: lowestCostPoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; costList[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#???&lt;/span&gt;

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#printMap(openPoints, closedPoints, lowestCostPoint)&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Cheapest next point is {lowestCostPoint}:{locationScores[lowestCostPoint]}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; lowestCostPoint &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; end: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt; 

        closedPoints&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(lowestCostPoint)
        openPoints&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(lowestCostPoint)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; newPoint &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; getNeighbors(lowestCostPoint):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; newPoint &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; closedPoints:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Exploring neighbor {newPoint} of {lowestCostPoint}&amp;#34;)&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; newPoint &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; openPoints: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#  or (risk[newPoint] + cost(lowestCostPoint, closedPoints[lowestCostPoint])) &amp;lt; 100000000: #TODO or new path to neighbor is cheaper&lt;/span&gt;
                    newFCost &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; locationScores[lowestCostPoint]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;f_cost &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; calc_h_cost(newPoint, end) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; risk[newPoint]
                    locationScores[newPoint] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; PointData(f_cost&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;newFCost, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lowestCostPoint)
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; newPoint &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; openPoints:
                        openPoints&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(newPoint)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    scoringPoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; lowestCostPoint
    totalRisk &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    pathPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [scoringPoint]
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;Calculating Path Score:&amp;#34;)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; locationScores[scoringPoint]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; showMaps:
            m &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mapDisplay(maxX, maxY, risk, locationScores&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;locationScores, openPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;openPoints, closedPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;closedPoints, pathPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;pathPoints, oldSelection &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; oldSelection, pathLength&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;totalRisk)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: exit()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: oldSelection &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;selection&amp;#39;&lt;/span&gt;]

        totalRisk &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; risk[scoringPoint]
        scoringPoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; locationScores[scoringPoint]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
        pathPoints&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(scoringPoint)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#totalRisk -= risk[(0,0)]&lt;/span&gt;

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;totalRisk&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    findPath((&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;), (maxX&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, maxY&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;pt-8 code-title&#34;&gt;Day15/maputils.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;curses&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; sleep
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;astarutils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; calc_h_cost

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;mapDisplay&lt;/span&gt;():
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, maxX, maxY, risk, locationScores&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[], openPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[], closedPoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[], pathPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [], oldSelection&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], end&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, pathLength &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;):
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; maxX
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; maxY
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;risk &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; risk
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;locationScores &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; locationScores
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;openPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; openPoints
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;closedPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; closedPoints
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; oldSelection
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pathPoints
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathLength &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pathLength
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;selection&amp;#39;&lt;/span&gt;: self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection }
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; end &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (maxX&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, maxY&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; end

    screen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;initscr()
    screen&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;keypad(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)

    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start_color()
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#color pair 0 is white on black standard&lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_GREEN, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#1 - open points&lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_RED, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#2 - closed points&lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_YELLOW, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#3 - end point &lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_MAGENTA, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#4 -  final path&lt;/span&gt;

    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_WHITE) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#11 - open points highlighted&lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;11&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_GREEN) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#11 - open points highlighted&lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_RED) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#12 - closed points highlighted&lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;13&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_YELLOW) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#13 - end point &lt;/span&gt;
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;init_pair(&lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_BLACK, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;COLOR_MAGENTA) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#14 - final path&lt;/span&gt;


    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;map_pad &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;newpad(maxY&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,maxX&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;newpad(&lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Coords:&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;F_Cost:&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;G_Cost:&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;H_Cost:&amp;#34;&lt;/span&gt;)

    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instruction_pad &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;newpad(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instruction_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Arrow keys to move&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instruction_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Enter to advance&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instruction_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Esc to hard quit&amp;#34;&lt;/span&gt;)

    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;open_pad &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;newpad(&lt;span style=&#34;color:#f60&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;open_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Open Points&amp;#34;&lt;/span&gt;, curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;A_UNDERLINE)
        
    curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;noecho()
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;redraw()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; screen&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getch()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Enter to continue&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;27&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Escape to quit&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;retCode[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;exitcode&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#d&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;redraw()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;456&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#numpad down&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, maxY)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;redraw()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;450&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#numpad up&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;redraw()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;452&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#numpad left&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;redraw()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;454&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#numpad right&lt;/span&gt;
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, maxX)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;redraw()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;redraw&lt;/span&gt;(self): &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#pad, maxX, maxY, risk, locationScores=[], openPoints=[], closedPoints=[], selection=[0,0]):&lt;/span&gt;
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;updateMapPad()
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;update_info_pad()
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;update_instruction_pad()
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;update_open_pad()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;updateMapPad&lt;/span&gt;(self):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxX):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt; (self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxY):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; [x, y] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (x,y) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;13&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;openPoints: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;11&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;closedPoints: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (x,y) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints: color&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;openPoints: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (x,y) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;closedPoints: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: color &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;color_pair(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
            
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;map_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addch(y, x, &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;risk[(x,y)]), color)

    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;map_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,curses&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;LINES&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update_info_pad&lt;/span&gt;(self):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Coordinates&lt;/span&gt;
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;          &amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection))

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#F Cost&lt;/span&gt;
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;          &amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;locationScores:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;locationScores[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;f_cost) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;      &amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;locationScores[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection)]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;g_cost) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;      &amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unknown&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Unknown&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#H Cost&lt;/span&gt;
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;         &amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(calc_h_cost(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selection, self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end)))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; []:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Path Length:&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathLength))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Searching...&amp;#34;&lt;/span&gt;)

    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;info_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;80&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update_instruction_pad&lt;/span&gt;(self):
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instruction_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;60&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update_open_pad&lt;/span&gt;(self):
    pointList &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;openPoints[:&lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;openPoints), &lt;span style=&#34;color:#f60&#34;&gt;99&lt;/span&gt;)], key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x:self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;locationScores[x]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;f_cost)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(pointList):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;open_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addstr(i&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;p&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; - &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;locationScores[p]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;f_cost&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;open_pad&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;70&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, the algorithm from part 1 is efficient enough to be used in the larger data size in part 2. For brevity, here&#39;s just the input-generating lines of part 2; the algorithm is the same.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day15/Part2.py &lt;span class=&#34;italic&#34;&gt;(partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

originalRisk &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y, line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x, val &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        originalRisk[(x, y)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(val)

original_maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data)
original_maxX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])

risk &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x_copy &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y_copy &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(original_maxX):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(original_maxY):
                risk[(x_copy&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;original_maxX &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; i, y_copy&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;original_maxY &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; j)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (originalRisk[(i,j)] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; x_copy &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; y_copy &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; original_maxY &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;
maxX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; original_maxX &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;
totalPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; maxY &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; maxY&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;

&lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;day17&#34;&gt;Day 17 - Trick Shot&lt;/h2&gt; --&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Part one of today&#39;s challenge can be solved by logical deduction with a minimum of coding. With the movement described, a probe moving upward will always pass though y=0 on its way back down; the fastest speed it can reach at this point is when its next step &lt;span class=&#34;italic&#34;&gt;just&lt;/span&gt; clips the bottom of the target area, ie. when its downward speed is equal to the lower y coordinate of our input. Because the y speed increases downward by 1 unit per timestep, the highest point on its trajectory is the sum of all speeds up to and including this one. That is, our solution will be the sum of all numbers up to and including our lower-y bound.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I solved this one using the Python REPL as a calculator using &lt;code class=&#34;code&#34;&gt;sum(range(maxY))&lt;/code&gt;, but as an actual script it might look like:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day17/Part1.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()

maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;y=(-?\d+)&amp;#39;&lt;/span&gt;, data)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(maxY))))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There might be a similarly clever way to reason about part 2, but I elected to just find the solutions by iterating over the (fairly reasonable) possibilities for the starting velocity. I got a little fancy with a dataclass and NamedTuple for the current location and target area, but that&#39;s not strictly necessary.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day17/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; infile:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()

reg &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x=(\d+)\.\.(\d+), y=(-?\d+)\.\.(-?\d+)&amp;#39;&lt;/span&gt;, data)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;region&lt;/span&gt;(NamedTuple):
    minX: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    maxX: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    minY: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    maxY: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;pointIn&lt;/span&gt;(self, x, y):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minX &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxX) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; (self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minY &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; y &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxY)

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;point&lt;/span&gt;():
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; region(minX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)), maxX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)), minY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;)), maxY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(reg&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)))
&lt;span style=&#34;color:#366&#34;&gt;input&lt;/span&gt;(target)

validInitialVelocities &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Highest Y initial speed is abs(maxY) as in part 1&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Lowest Y initial speed is minY&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Highest X initial speed is abs(maxX) (or we&amp;#39;ll definitely overshoot)&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Lowest X initial speed is 1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; initialSpeed_X &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxX&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; initialSpeed_Y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minY, &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minY)):
        currentXSpeed &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; initialSpeed_X
        currentYSpeed &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; initialSpeed_Y
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Examining intial speed {(initialSpeed_X, initialSpeed_Y)}&amp;#34;)&lt;/span&gt;
        loc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; point(x&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; (loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minY &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maxX&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pointIn(loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y):
                validInitialVelocities&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add((initialSpeed_X, initialSpeed_Y))
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Found valid velocity {(initialSpeed_X, initialSpeed_Y)}&amp;#34;)&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
            loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; currentXSpeed
            loc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; currentYSpeed
            currentXSpeed &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(currentXSpeed &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
            currentYSpeed &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(validInitialVelocities)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt; --&gt;

&lt;!-- &lt;h2 class=&#34;table-cell w-auto h-20 pb-1 align-bottom border-b-4 border-gray-200 md:w-128 post-h2 relative-anchor&#34; id=&#34;dayxxx&#34;&gt;Day xxx - xxx &lt;/h2&gt;
&lt;h4 class=&#34;pt-4 pb-1 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 1&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Dolor velit incididunt cillum incididunt sint amet reprehenderit commodo magna Lorem proident duis do.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part1.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#some code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt;
&lt;h4 class=&#34;pb-1 mt-4 border-b-2 border-gray-200 post-h4 w-72&#34;&gt;Part 2&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Pariatur incididunt veniam tempor eiusmod sunt id labore occaecat nostrud fugiat.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Day14/Part2.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#some code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see fulll code&lt;/p&gt; --&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020: Day 2-9</title>
      <link>https://jeff.glass/backup-post/advent-of-code-2020-day-2-9/</link>
      <pubDate>Wed, 02 Dec 2020 16:17:42 -0500</pubDate>
      
      <guid>https://jeff.glass/backup-post/advent-of-code-2020-day-2-9/</guid>
      <description>
&lt;!--&lt;script src=&#34;&lt;script src=&#34;https://gist.github.com/JeffersGlass/c9e89c313081b88574ebb759d7e3e72e.js&#34;&gt;&lt;/script&gt;.js&#34;&gt;&lt;/script&gt;--&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;strong&gt;&lt;a data-type=&#34;URL&#34; href=&#39;.js&#34;&#39;&gt;Code for all days is on GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Day 2&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Nothing terribly fancy going on with the day 2 challenge - essentially, reading in a text file and doing operations on strings. After developing the ability to split the input lines and validate them in part one, part 2 throws a curveball by changing up how the lines should be validated. I refactored my &#34;isValidLine&#34; code to take a validation function as one of its arguments, since the parsing/splitting of the line is the same for both parts 1 and 2.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;(&lt;em&gt;The names of the validation functions come from the problem description - they validate the passwords for a sled company and a toboggan company, respectively&lt;/em&gt;.)&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/7e97c17b46a2779e50b9005c27c26c95.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 3&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;A slightly more involved bit of data and text processing today, as we help our would-be tobogganist make it down a snowy slope covered in trees. As a way of pushing my Python knowledge, I tried to complete both parts of today&#39;s challenge using list comprehensions and iterative functions like map, reduce, enumerate, etc. My impulse is to write things out more explicitly by iterating through the elements of input in a for loop, but practicing the list comprehensions and their related utility functions feels good.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Is the inline code better than the more verbose versions? I&#39;m not entirely sure - it&#39;s certainly less readable than the expanded-into-a-loop versions. It&#39;s also somewhat harder to debug, because there aren&#39;t logical places to, say, print intermediate results. So something like my getSlopeTrees() function, as written, is just silly-long and hard to read - the getSlopeTreesVerbose() function, which I wrote as part of troubleshooting a specific issue is definitely more readable.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;The punchline of my issue was: at least in Python 3.9, floats can&#39;t be used as list indices, even if they&#39;re integers. That is, even if a float for which is_integer() returns true, you must explicitly cast that float to an integer to use it index a list. In code form:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/e2ceed37a5b459304216389328854e87.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;So, another thing learned. Thanks Advent of Code!&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Here&#39;s the full code from Day 3:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/9dbd5c3977a9ddaa59308001d55dd48a.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 4&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;We can slowly feel the difficulty starting to ramp up here in day four. We&#39;re still walking on paved roads, as it were, but they&#39;re not as well maintained as they used to be in day one.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Today&#39;s problem concerns more text parsing - the first part just says to validate, essentially, that 7 unique strings are present between sets of blank lines in the input file. The code for this is pretty straightforward - I tried for a little while to do it all in one list comprehension, but ended up splitting it into two lines, which I think is clearer. To be sure, I don&#39;t think that doing it in one comprehension would be &lt;em&gt;better&lt;/em&gt;, just that I thought it would be fun practice.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/cf670f595c99db49b8564cc600ce26c6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Of course, with the problem statement framing these 7 strings as labels for values in a passport (eyc:blu, hgt:171cm, etc), it seemed like a straight guess that we&#39;d actually have to parse those values by field and do something with them in part two. And of course, we were right. For each of the 7 fields, validation criteria are listed, including ensuring certain fields are numerical and within certain bounds, prepended or postended by certain characters, and so on. &lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;This part turned out ok - it takes the text file, splits it into individual passport strings, then splits each of those into a list of strings of the form &#34;key:value&#34;. The part that feels most &#34;un-Pythonic&#34; to me is the part (commented below) that turns that list of lists of strings into a list of dictionaries. I figure there&#39;s got to be a way to do that with a comprehension, but I couldn&#39;t quite make it work, so I did it as a couple For loops. It works fun, just feels a little clunky.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;I also implemented my own prettyPrintPassword function (and its alias &#39;ppp&#39;) - it doesn&#39;t do any sorting of the fields, and it doesn&#39;t show you &lt;em&gt;why&lt;/em&gt; a passport is invalid if it fails, but it did what I needed it to do for troubleshooting purposes.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/de08f5f205eddaccbe56980f9b3d4d29.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 5&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Wow, a quickie today! The title of the day&#39;s challenge (&#39;Binary Boarding&#39;) gives you a pretty strong clue what it&#39;s going to be about. The challenge is essentially to parse text representing binary numbers in your language of choice and find the minimum, maximum, and missing values in between. &lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;This is my shortest solution so far, at only 5 lines of code (for both parts!):&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/a233c4ef04fc5eb9422bebf8b0106770.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;This is where Python&#39;s use of convenience generators (like range), built in math functions on general iterators (like min and max), and lots of string functionality (like replace) really shines - the code is easy to write and clean.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Looking back at &lt;a &#34;=&#34;&#34; 11=&#34;&#34; 2020=&#34;&#34; 25=&#34;&#34; advent-of-code-2020=&#34;&#34; data-id=&#34;3332&#34; data-type=&#34;post&#34; href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34; jeff.glass=&#34;&#34;&gt;my goals for Code.js&#34;&amp;gt; Advent 2020&lt;/a&gt;, I&#39;d say I&#39;m doing pretty well - I&#39;m already feeling more fluent/comfortable with list/dictionary comprehensions, the git workflow is becoming more natural, and I&#39;ve completed each project on the day it&#39;s issued. Not too much challenge in terms of the algorithms and data structures so far, but then it is only day 5....&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;em&gt;This post will be updated with code from a handful of future days, until it gets too long/unwieldy.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Day 6&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;As it turns out, talking out loud while generating algorithms while writing code is... hard. &lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;I coded up the solution to Day 6 &lt;a href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34; watch?v=&#39;s7UDMUALBxU&#34;&#39; www.youtube.com=&#34;&#34;&gt;live on stream on Sunday.js&#34;&amp;gt; night&lt;/a&gt;, which was both fun and challenging. Part one of the challenge wasn&#39;t too terribly hard - it basically asks whether each letter of the alphabet is contained between any pair of blank links (&#34;\n\n&#34;) in the input file. That&#39;s a solution that only takes a few lines to write.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;I ended up writing three solutions to part 2. I ended up ordering them in the code in order of their complexity/lines of code, but that&#39;s not the order I wrote them in. I first wrote a really over-complicated solution (3), then condensed it down to a single list comprehension (1), then expanded that back out just a little to make it more readable. Like I said on stream, if I were writing this code to go into some kind of actual codebase, I think solution (2) is the one I&#39;d use - it&#39;s concise enough to be comprehensible, but long enough to not be overwhelmingly dense.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/2801abec57bce67bad64d553974984b6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 7&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Oof, this day too far, far longer than it should have, all because I misunderstood Python&#39;s strip() function. strip, for those who are wondering, removes any of the set of characters given as its arguments from the beginning or end of a string. So, &#34;Hello World&#34;.strip(&#39;Hld&#39;) =&amp;gt; &#34;ello Wor&#34;. Unfortunately, I thought that the strip function removed the exact &lt;em&gt;string&lt;/em&gt; given it it as an argument, leading to it stripping additional characters off of the end of some inputs and causing my parsing to be wrong. Oof.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;In any case, the two halves of day 7 involve creating a tree of data in two different ways (one in which parents reference children, and one in which children reference parents). Then we sum up the total number of parents or children, unweighted or weighted, respectively.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/52440fef8db4118166b0cda14c6e7a65.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 8&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Day 8 is giving me flashbacks to the &lt;a 2&#34;=&#34;&#34; 2019=&#34;&#34; adventofcode.com=&#34;&#34; day=&#34;&#34; href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34;&gt;intcode challenges&lt;/a&gt; of 2019! .js&#34;&amp;gt;But it&#39;s a much softer start this time - we only have three pseudo-assembly instructions to parse, and simpler questions to answer. Once we&#39;ve built a simple function for processing a given list of these instructions, we&#39;ve solved part one. Part 2 requires iterating over our input data and manipulating it slightly, and testing to see whether the new version of the input fulfills the required condition, so our code will need to work over general lists of instructions.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;The only thing that hung me up today was forgetting to take into account how Python&#39;s lists handle objects. Specifically, this is the behavior that I was (rightly, but unwantedly) seeing:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code&gt;listA = [[1,2],[2,4],[3,6]]&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;listB = [a for a in listA]&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;listB[0] = [4, 8]&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;print(listA)&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&amp;gt;&amp;gt;&amp;gt;[[4,8],[2,4],[3,6]]&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Though it doesn&#39;t look like listA is ever being modified, the way we&#39;ve constructed listB, it actually &lt;em&gt;references&lt;/em&gt; the same objects as listA. So when we change the object [1,2] to be [4,8], it changes everywhere that object is referenced in both lists. A little thing I once knew, but had skipped my brain for about 8 minutes. Whoops!&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/89eae182516f48540976b532e08de65c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 9&lt;/h2&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Well that felt pretty good! The consensus across the interwebs (twitter, reddit) seems to be that today was relatively easy, and I&#39;d agree. The problem involved two different ways of comparing integers in an input list to the previous 25 numbers, and doing some math on them. There are probably slightly more efficient algorithms, especially for part 2 - currently when the running sum starting from a given position, I throw out the entire sum and start again from the next position, which is likely wasteful. But for only 1000 inputs, the code still runs in ~160 milliseconds, so I don&#39;t think it&#39;s worth the time to make it more efficient. If this problem comes back in future days, that may be worth revisiting.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/0936c84fffd5e6ce5c6044767e59282d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020: Day 2-9</title>
      <link>https://jeff.glass/post/advent-of-code-2020-day-2-9/</link>
      <pubDate>Wed, 02 Dec 2020 16:17:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2020-day-2-9/</guid>
      <description>
&lt;!--&lt;script src=&#34;&lt;script src=&#34;https://gist.github.com/JeffersGlass/c9e89c313081b88574ebb759d7e3e72e.js&#34;&gt;&lt;/script&gt;.js&#34;&gt;&lt;/script&gt;--&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;&lt;a data-type=&#34;URL&#34; href=&#39;.js&#34;&#39;&gt;Code for all days is on GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Day 2&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Nothing terribly fancy going on with the day 2 challenge - essentially, reading in a text file and doing operations on strings. After developing the ability to split the input lines and validate them in part one, part 2 throws a curveball by changing up how the lines should be validated. I refactored my &#34;isValidLine&#34; code to take a validation function as one of its arguments, since the parsing/splitting of the line is the same for both parts 1 and 2.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(&lt;em&gt;The names of the validation functions come from the problem description - they validate the passwords for a sled company and a toboggan company, respectively&lt;/em&gt;.)&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/7e97c17b46a2779e50b9005c27c26c95.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 3&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;A slightly more involved bit of data and text processing today, as we help our would-be tobogganist make it down a snowy slope covered in trees. As a way of pushing my Python knowledge, I tried to complete both parts of today&#39;s challenge using list comprehensions and iterative functions like map, reduce, enumerate, etc. My impulse is to write things out more explicitly by iterating through the elements of input in a for loop, but practicing the list comprehensions and their related utility functions feels good.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Is the inline code better than the more verbose versions? I&#39;m not entirely sure - it&#39;s certainly less readable than the expanded-into-a-loop versions. It&#39;s also somewhat harder to debug, because there aren&#39;t logical places to, say, print intermediate results. So something like my getSlopeTrees() function, as written, is just silly-long and hard to read - the getSlopeTreesVerbose() function, which I wrote as part of troubleshooting a specific issue is definitely more readable.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The punchline of my issue was: at least in Python 3.9, floats can&#39;t be used as list indices, even if they&#39;re integers. That is, even if a float for which is_integer() returns true, you must explicitly cast that float to an integer to use it index a list. In code form:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/e2ceed37a5b459304216389328854e87.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;So, another thing learned. Thanks Advent of Code!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s the full code from Day 3:&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/9dbd5c3977a9ddaa59308001d55dd48a.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 4&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can slowly feel the difficulty starting to ramp up here in day four. We&#39;re still walking on paved roads, as it were, but they&#39;re not as well maintained as they used to be in day one.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Today&#39;s problem concerns more text parsing - the first part just says to validate, essentially, that 7 unique strings are present between sets of blank lines in the input file. The code for this is pretty straightforward - I tried for a little while to do it all in one list comprehension, but ended up splitting it into two lines, which I think is clearer. To be sure, I don&#39;t think that doing it in one comprehension would be &lt;em&gt;better&lt;/em&gt;, just that I thought it would be fun practice.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/cf670f595c99db49b8564cc600ce26c6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, with the problem statement framing these 7 strings as labels for values in a passport (eyc:blu, hgt:171cm, etc), it seemed like a straight guess that we&#39;d actually have to parse those values by field and do something with them in part two. And of course, we were right. For each of the 7 fields, validation criteria are listed, including ensuring certain fields are numerical and within certain bounds, prepended or postended by certain characters, and so on. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This part turned out ok - it takes the text file, splits it into individual passport strings, then splits each of those into a list of strings of the form &#34;key:value&#34;. The part that feels most &#34;un-Pythonic&#34; to me is the part (commented below) that turns that list of lists of strings into a list of dictionaries. I figure there&#39;s got to be a way to do that with a comprehension, but I couldn&#39;t quite make it work, so I did it as a couple For loops. It works fun, just feels a little clunky.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also implemented my own prettyPrintPassword function (and its alias &#39;ppp&#39;) - it doesn&#39;t do any sorting of the fields, and it doesn&#39;t show you &lt;em&gt;why&lt;/em&gt; a passport is invalid if it fails, but it did what I needed it to do for troubleshooting purposes.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/de08f5f205eddaccbe56980f9b3d4d29.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 5&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Wow, a quickie today! The title of the day&#39;s challenge (&#39;Binary Boarding&#39;) gives you a pretty strong clue what it&#39;s going to be about. The challenge is essentially to parse text representing binary numbers in your language of choice and find the minimum, maximum, and missing values in between. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is my shortest solution so far, at only 5 lines of code (for both parts!):&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/a233c4ef04fc5eb9422bebf8b0106770.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;This is where Python&#39;s use of convenience generators (like range), built in math functions on general iterators (like min and max), and lots of string functionality (like replace) really shines - the code is easy to write and clean.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Looking back at &lt;a &#34;=&#34;&#34; 11=&#34;&#34; 2020=&#34;&#34; 25=&#34;&#34; advent-of-code-2020=&#34;&#34; data-id=&#34;3332&#34; data-type=&#34;post&#34; href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34; jeff.glass=&#34;&#34;&gt;my goals for Code.js&#34;&amp;gt; Advent 2020&lt;/a&gt;, I&#39;d say I&#39;m doing pretty well - I&#39;m already feeling more fluent/comfortable with list/dictionary comprehensions, the git workflow is becoming more natural, and I&#39;ve completed each project on the day it&#39;s issued. Not too much challenge in terms of the algorithms and data structures so far, but then it is only day 5....&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;This post will be updated with code from a handful of future days, until it gets too long/unwieldy.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Day 6&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;As it turns out, talking out loud while generating algorithms while writing code is... hard. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I coded up the solution to Day 6 &lt;a href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34; watch?v=&#39;s7UDMUALBxU&#34;&#39; www.youtube.com=&#34;&#34;&gt;live on stream on Sunday.js&#34;&amp;gt; night&lt;/a&gt;, which was both fun and challenging. Part one of the challenge wasn&#39;t too terribly hard - it basically asks whether each letter of the alphabet is contained between any pair of blank links (&#34;\n\n&#34;) in the input file. That&#39;s a solution that only takes a few lines to write.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I ended up writing three solutions to part 2. I ended up ordering them in the code in order of their complexity/lines of code, but that&#39;s not the order I wrote them in. I first wrote a really over-complicated solution (3), then condensed it down to a single list comprehension (1), then expanded that back out just a little to make it more readable. Like I said on stream, if I were writing this code to go into some kind of actual codebase, I think solution (2) is the one I&#39;d use - it&#39;s concise enough to be comprehensible, but long enough to not be overwhelmingly dense.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/2801abec57bce67bad64d553974984b6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 7&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Oof, this day too far, far longer than it should have, all because I misunderstood Python&#39;s strip() function. strip, for those who are wondering, removes any of the set of characters given as its arguments from the beginning or end of a string. So, &#34;Hello World&#34;.strip(&#39;Hld&#39;) =&amp;gt; &#34;ello Wor&#34;. Unfortunately, I thought that the strip function removed the exact &lt;em&gt;string&lt;/em&gt; given it it as an argument, leading to it stripping additional characters off of the end of some inputs and causing my parsing to be wrong. Oof.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In any case, the two halves of day 7 involve creating a tree of data in two different ways (one in which parents reference children, and one in which children reference parents). Then we sum up the total number of parents or children, unweighted or weighted, respectively.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/52440fef8db4118166b0cda14c6e7a65.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 8&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Day 8 is giving me flashbacks to the &lt;a 2&#34;=&#34;&#34; 2019=&#34;&#34; adventofcode.com=&#34;&#34; day=&#34;&#34; href=&#34;&amp;lt;script src=&#34; https:=&#34;&#34;&gt;intcode challenges&lt;/a&gt; of 2019! .js&#34;&amp;gt;But it&#39;s a much softer start this time - we only have three pseudo-assembly instructions to parse, and simpler questions to answer. Once we&#39;ve built a simple function for processing a given list of these instructions, we&#39;ve solved part one. Part 2 requires iterating over our input data and manipulating it slightly, and testing to see whether the new version of the input fulfills the required condition, so our code will need to work over general lists of instructions.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The only thing that hung me up today was forgetting to take into account how Python&#39;s lists handle objects. Specifically, this is the behavior that I was (rightly, but unwantedly) seeing:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code&gt;listA = [[1,2],[2,4],[3,6]]&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;listB = [a for a in listA]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;listB[0] = [4, 8]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;print(listA)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&amp;gt;&amp;gt;&amp;gt;[[4,8],[2,4],[3,6]]&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Though it doesn&#39;t look like listA is ever being modified, the way we&#39;ve constructed listB, it actually &lt;em&gt;references&lt;/em&gt; the same objects as listA. So when we change the object [1,2] to be [4,8], it changes everywhere that object is referenced in both lists. A little thing I once knew, but had skipped my brain for about 8 minutes. Whoops!&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/89eae182516f48540976b532e08de65c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h2&gt;Day 9&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that felt pretty good! The consensus across the interwebs (twitter, reddit) seems to be that today was relatively easy, and I&#39;d agree. The problem involved two different ways of comparing integers in an input list to the previous 25 numbers, and doing some math on them. There are probably slightly more efficient algorithms, especially for part 2 - currently when the running sum starting from a given position, I throw out the entire sum and start again from the next position, which is likely wasteful. But for only 1000 inputs, the code still runs in ~160 milliseconds, so I don&#39;t think it&#39;s worth the time to make it more efficient. If this problem comes back in future days, that may be worth revisiting.&lt;/p&gt;
&lt;figure class=&#34;wp-block-embed is-type-rich is-provider-embed-handler&#34;&gt;&lt;div class=&#34;wp-block-embed__wrapper&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/0936c84fffd5e6ce5c6044767e59282d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020: Day 1</title>
      <link>https://jeff.glass/backup-post/advent-of-code-2020-day-1/</link>
      <pubDate>Tue, 01 Dec 2020 16:58:57 -0500</pubDate>
      
      <guid>https://jeff.glass/backup-post/advent-of-code-2020-day-1/</guid>
      <description>&lt;p class=&#34;post-paragraph&#34;&gt;&lt;em&gt;I know in &lt;a href=&#34;https://jeff.glass/2020/11/25/advent-of-code-2020/&#34;&gt;my introductory post&lt;/a&gt; I said I wasn&#39;t going to post something every day, and I meant it! But I ended up with a little extra time on my hands today and this casual summary has turned into an actual post... I&#39;m going to have to think about how I categorize these posts so anyone who stumbled across my blog isn&#39;t wading through five pages of Advent of Code writeups before getting to tiny moving lights. But for now, here&#39;s day 1.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;a href=&#34;https://github.com/JeffersGlass/codeadvent2020/tree/main/Day1&#34;&gt;&lt;em&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;&lt;strong&gt;Full code is available on GitHub.&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Much like last year, this year&#39;s Day 1 challenge starts by essentially making sure we can read in a text file and do basic math on it. The first problem asks us to find which two integers in a text file that sum to 2020 and retrieve their product; the second asks the same question, but for a set of 3 integers.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Just for gits and shiggles, I implemented the solution to part one in two different ways. The first, in a function I title &#34;naiveFind&#34;, just loads all of the numbers from the file into a list, then loops over every pair of numbers until it finds a pair that sums to 2020 (the success() function is detailed below). This is a fine way to approach this problem, but not terribly efficient for long lists:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/d481ae8dbac18127dafa9746d5e142fe.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;The speedier way to solve this problem is to use a hashmap, which we get for free in the form of Python dictionary lookups (&lt;em&gt;in most implementations of Python&lt;/em&gt;.) Rather than looping over all pairs of numbers, we can just proceed through the the list once, storing each member in a dictionary, and as we load each new number, we check to see if it&#39;s &#34;2020&#39;s complement&#34; is already in our dictionary&#39;s keys. This is faster than a raw comparison because looking via hashing is cheaper than doing a &#39;by-hand&#39; comparison of all of the numbers ourselves.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/a33279fd7dabe5869cb7923b86e5f938.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;For the second part of the problem, I only implemented a &#34;naive&#34; solution, running in O(n³) time:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/31e836eecc0434f4838598d0858b1d8b.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;With the need to now communicate a set of three numbers (and their product) that form a solution, I rewrote my success() function to accommodate any number of inputs as arguments. (The original, two-input function is commented-out at the bottom.)&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/f5d52dc0a2d5b5b8af53c9edb27e5337.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;To see how efficient these various functions were, I wrote a quick decorator function that allows me to see the (rough) execution time of each solution:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/bb312d167985d9db8c7ea0c0ca01d2f4.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Running all three of our search functions in turn:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;a href=&#34;https://jeff.glass/wp-content/uploads/2020/12/function-timing.jpg&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3340 size-full post-img&#34; height=&#34;106&#34; src=&#34;function-timing.jpg&#34; width=&#34;514&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;We can see that:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;The naïve way of looping over all the pairs of products takes about 1.5 ms to complete&lt;/li&gt;
&lt;li&gt;The hashset (dictionary) method of finding one pair of numbers takes about 0.6 ms to complete&lt;/li&gt;
&lt;li&gt;The naïve way of finding a triple of numbers takes about 65 ms to complete&lt;/li&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Some stray thoughts from today&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;When I originally tried to run my basic test code to ensure I was reading the input text file correctly, I got the error: &#34;No such file or directory.&#34; Which is odd, because the text file was just sitting in the same folder as my Python script, like always. It turns out that by default, VSCode uses the open &lt;em&gt;folder&lt;/em&gt; as its source, not where the script is actually being executed. You can change this in the Python terminal settings:&lt;img alt=&#34;image&#34; class=&#34;post-img&#34; src=&#34;https://user-images.githubusercontent.com/3840081/84087466-ff37df00-a99e-11ea-8fea-3f21dcd80e23.png&#34;/&gt;&lt;/li&gt;
&lt;li&gt;I&#39;ve made use of the functools.wraps wrapper to assist me in writing my own decorator functions before, but using it again today to write the timer function makes me want to look a little deeper under the hood to see what it&#39;s doing.&lt;/li&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;strong&gt;Postscript:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;I was just kicking around the #AdventOfCode hashtag on Twitter after completing my solutions, and ran across these super-nifty &#34;Pythonic&#34; solutions by @Brotherluii:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;https://twitter.com/Brotherluii/status/1333756750579830784&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;For those for whom the embedded tweet doesn&#39;t work:&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code&gt;with open(&#39;input.txt&#39;, &#39;r&#39;) as file:&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;    data = {int(number) for number in file}&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;#Part 1&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;print({entry * (2020-entry) for entry in data if (2020-entry) in data})&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;#Part 2&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;print({entry1 * entry2 * (2020 - entry1 - entry2)&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;    for entry1 in data for entry2 in data&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;    if (2020 - entry1 - entry2) in data})&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Though I understand list comprehensions, I feel like they&#39;re never my go-to tool, but seeing them composed like this, I can see how they can be pretty beautiful in the right hands.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020: Day 1</title>
      <link>https://jeff.glass/post/advent-of-code-2020-day-1/</link>
      <pubDate>Tue, 01 Dec 2020 16:58:57 -0500</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2020-day-1/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;I know in &lt;a href=&#34;https://jeff.glass/2020/11/25/advent-of-code-2020/&#34;&gt;my introductory post&lt;/a&gt; I said I wasn&#39;t going to post something every day, and I meant it! But I ended up with a little extra time on my hands today and this casual summary has turned into an actual post... I&#39;m going to have to think about how I categorize these posts so anyone who stumbled across my blog isn&#39;t wading through five pages of Advent of Code writeups before getting to tiny moving lights. But for now, here&#39;s day 1.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://github.com/JeffersGlass/codeadvent2020/tree/main/Day1&#34;&gt;&lt;em&gt;&lt;span style=&#34;text-decoration: underline;&#34;&gt;&lt;strong&gt;Full code is available on GitHub.&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Much like last year, this year&#39;s Day 1 challenge starts by essentially making sure we can read in a text file and do basic math on it. The first problem asks us to find which two integers in a text file that sum to 2020 and retrieve their product; the second asks the same question, but for a set of 3 integers.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Just for gits and shiggles, I implemented the solution to part one in two different ways. The first, in a function I title &#34;naiveFind&#34;, just loads all of the numbers from the file into a list, then loops over every pair of numbers until it finds a pair that sums to 2020 (the success() function is detailed below). This is a fine way to approach this problem, but not terribly efficient for long lists:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/d481ae8dbac18127dafa9746d5e142fe.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The speedier way to solve this problem is to use a hashmap, which we get for free in the form of Python dictionary lookups (&lt;em&gt;in most implementations of Python&lt;/em&gt;.) Rather than looping over all pairs of numbers, we can just proceed through the the list once, storing each member in a dictionary, and as we load each new number, we check to see if it&#39;s &#34;2020&#39;s complement&#34; is already in our dictionary&#39;s keys. This is faster than a raw comparison because looking via hashing is cheaper than doing a &#39;by-hand&#39; comparison of all of the numbers ourselves.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/a33279fd7dabe5869cb7923b86e5f938.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For the second part of the problem, I only implemented a &#34;naive&#34; solution, running in O(n³) time:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/31e836eecc0434f4838598d0858b1d8b.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With the need to now communicate a set of three numbers (and their product) that form a solution, I rewrote my success() function to accommodate any number of inputs as arguments. (The original, two-input function is commented-out at the bottom.)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/f5d52dc0a2d5b5b8af53c9edb27e5337.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To see how efficient these various functions were, I wrote a quick decorator function that allows me to see the (rough) execution time of each solution:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/bb312d167985d9db8c7ea0c0ca01d2f4.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Running all three of our search functions in turn:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3340 size-full post-img&#34; height=&#34;106&#34; src=&#34;function-timing.jpg&#34; width=&#34;514&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We can see that:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;The naïve way of looping over all the pairs of products takes about 1.5 ms to complete&lt;/li&gt;
&lt;li&gt;The hashset (dictionary) method of finding one pair of numbers takes about 0.6 ms to complete&lt;/li&gt;
&lt;li&gt;The naïve way of finding a triple of numbers takes about 65 ms to complete&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Some stray thoughts from today&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;When I originally tried to run my basic test code to ensure I was reading the input text file correctly, I got the error: &#34;No such file or directory.&#34; Which is odd, because the text file was just sitting in the same folder as my Python script, like always. It turns out that by default, VSCode uses the open &lt;em&gt;folder&lt;/em&gt; as its source, not where the script is actually being executed. You can change this in the Python terminal settings:&lt;img alt=&#34;image&#34; class=&#34;post-img&#34; src=&#34;https://user-images.githubusercontent.com/3840081/84087466-ff37df00-a99e-11ea-8fea-3f21dcd80e23.png&#34;/&gt;&lt;/li&gt;
&lt;li&gt;I&#39;ve made use of the functools.wraps wrapper to assist me in writing my own decorator functions before, but using it again today to write the timer function makes me want to look a little deeper under the hood to see what it&#39;s doing.&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;strong&gt;Postscript:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I was just kicking around the #AdventOfCode hashtag on Twitter after completing my solutions, and ran across these super-nifty &#34;Pythonic&#34; solutions by @Brotherluii:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;https://twitter.com/Brotherluii/status/1333756750579830784&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For those for whom the embedded tweet doesn&#39;t work:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre class=&#34;wp-block-code&#34;&gt;&lt;code&gt;with open(&#39;input.txt&#39;, &#39;r&#39;) as file:&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    data = {int(number) for number in file}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;#Part 1&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;print({entry * (2020-entry) for entry in data if (2020-entry) in data})&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;#Part 2&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;print({entry1 * entry2 * (2020 - entry1 - entry2)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    for entry1 in data for entry2 in data&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    if (2020 - entry1 - entry2) in data})&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Though I understand list comprehensions, I feel like they&#39;re never my go-to tool, but seeing them composed like this, I can see how they can be pretty beautiful in the right hands.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020</title>
      <link>https://jeff.glass/backup-post/advent-of-code-2020/</link>
      <pubDate>Wed, 25 Nov 2020 19:31:37 -0500</pubDate>
      
      <guid>https://jeff.glass/backup-post/advent-of-code-2020/</guid>
      <description>&lt;p class=&#34;post-paragraph&#34;&gt;Last winter, I participated in the annual &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code Challenge&lt;/a&gt;, a website which offers small (&lt;em&gt;but not necessarily easy&lt;/em&gt;) programming challenges every day from December 1 through 25. It turned out to be a great way to get exposed to different corners of development in my language of choice (Python), and with a little more time on my hands this Winter, I&#39;m excited to dive into it again.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;The challenges are all written in a non-programming-language-specific way. For example, the &lt;a href=&#34;https://adventofcode.com/2019/day/1&#34;&gt;first part of the problem from December 1, 2019&lt;/a&gt; boils down to:&lt;/p&gt;
&lt;div class=&#34;pl-8 font-mono&#34;&gt;
&lt;p&gt;* Ingest a list of numbers from a text file, with one line per number&lt;/p&gt;
&lt;p&gt;* For each number, divide it by 3, round down, and subtract 2&lt;/p&gt;
&lt;p&gt;* Sum all these results together&lt;/p&gt;
&lt;p&gt;* Print/return/somehow give the user back the sum&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;While I was doing this in Python, there&#39;s no reason you couldn&#39;t do it in C, or Java, or Haskell, or ALGOL, or any language of your choice (&lt;em&gt;though of course, some of the problems will be more tractable using structures built into some langauges and not othe&lt;/em&gt;rs&lt;em&gt;)&lt;/em&gt;. The actual prompts are a bit more flavorful that that example - a narrative about needed to rescue Santa from outer-space was woven through all 25 problem last year.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;I&#39;m confident in saying that my Python has gotten significantly stronger over the past year, but I&#39;m feeling like I could be stronger in some algorithmic thinking (the &lt;em&gt;mazes&lt;/em&gt; last year slayed me) and in some process crevices around my workflow. To that end, my goals for this year are:&lt;/p&gt;
&lt;ul class=&#34;pl-8 post-ul&#34;&gt;&lt;li&gt;To strengthen my intuition for solving data-based problems with time-efficient algorithms&lt;/li&gt;&lt;li&gt;To cement the core concepts around Pythonic data structures in my knowledgebase&lt;/li&gt;&lt;li&gt;To become more comfortable with Git/GitHub, in particular its command line interface and the branch/merge/HEAD flow&lt;/li&gt;&lt;li&gt;To complete each challenge on the day it&#39;s issued&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;Because nobody needs their RSS feed flooded by me every day for a month, I think I&#39;ve found a way to start a blog post on, say, December 1st, update it every day for a week, then only push to the RSS feed on the 7th - so if you want to check on them daily, you can go to the actual factual blog, or just wait for the summary posts to come out.&lt;/p&gt;
&lt;p class=&#34;post-paragraph&#34;&gt;If you&#39;re just interested in the code (or are reading this from the future) and want to see my solutions, I&#39;ll be posting the code &lt;a href=&#34;https://github.com/JeffersGlass/codeadvent2020&#34;&gt;over on GitHub&lt;/a&gt;. I&#39;m not going to be striving to be one of the first 100 people posting successes to each problem (&lt;a href=&#34;https://adventofcode.com/2020/leaderboard&#34;&gt;for which there is a leaderboard&lt;/a&gt;), I&#39;m just solving these for me. And I encourage anyone out there looking to build their programming confidence to do the same!&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2020</title>
      <link>https://jeff.glass/post/advent-of-code-2020/</link>
      <pubDate>Wed, 25 Nov 2020 19:31:37 -0500</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2020/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Last winter, I participated in the annual &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code Challenge&lt;/a&gt;, a website which offers small (&lt;em&gt;but not necessarily easy&lt;/em&gt;) programming challenges every day from December 1 through 25. It turned out to be a great way to get exposed to different corners of development in my language of choice (Python), and with a little more time on my hands this Winter, I&#39;m excited to dive into it again.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The challenges are all written in a non-programming-language-specific way. For example, the &lt;a href=&#34;https://adventofcode.com/2019/day/1&#34;&gt;first part of the problem from December 1, 2019&lt;/a&gt; boils down to:&lt;/p&gt;
&lt;div class=&#34;pl-8 font-mono&#34;&gt;
&lt;p&gt;* Ingest a list of numbers from a text file, with one line per number&lt;/p&gt;
&lt;p&gt;* For each number, divide it by 3, round down, and subtract 2&lt;/p&gt;
&lt;p&gt;* Sum all these results together&lt;/p&gt;
&lt;p&gt;* Print/return/somehow give the user back the sum&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;While I was doing this in Python, there&#39;s no reason you couldn&#39;t do it in C, or Java, or Haskell, or ALGOL, or any language of your choice (&lt;em&gt;though of course, some of the problems will be more tractable using structures built into some languages and not othe&lt;/em&gt;rs&lt;em&gt;)&lt;/em&gt;. The actual prompts are a bit more flavorful that that example - a narrative about needed to rescue Santa from outer-space was woven through all 25 problem last year.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m confident in saying that my Python has gotten significantly stronger over the past year, but I&#39;m feeling like I could be stronger in some algorithmic thinking (the &lt;em&gt;mazes&lt;/em&gt; last year slayed me) and in some process crevices around my workflow. To that end, my goals for this year are:&lt;/p&gt;
&lt;ul class=&#34;pl-8 post-ul&#34;&gt;&lt;li&gt;To strengthen my intuition for solving data-based problems with time-efficient algorithms&lt;/li&gt;&lt;li&gt;To cement the core concepts around Pythonic data structures in my knowledgebase&lt;/li&gt;&lt;li&gt;To become more comfortable with Git/GitHub, in particular its command line interface and the branch/merge/HEAD flow&lt;/li&gt;&lt;li&gt;To complete each challenge on the day it&#39;s issued&lt;/li&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Because nobody needs their RSS feed flooded by me every day for a month, I think I&#39;ve found a way to start a blog post on, say, December 1st, update it every day for a week, then only push to the RSS feed on the 7th - so if you want to check on them daily, you can go to the actual factual blog, or just wait for the summary posts to come out.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;re just interested in the code (or are reading this from the future) and want to see my solutions, I&#39;ll be posting the code &lt;a href=&#34;https://github.com/JeffersGlass/codeadvent2020&#34;&gt;over on GitHub&lt;/a&gt;. I&#39;m not going to be striving to be one of the first 100 people posting successes to each problem (&lt;a href=&#34;https://adventofcode.com/2020/leaderboard&#34;&gt;for which there is a leaderboard&lt;/a&gt;), I&#39;m just solving these for me. And I encourage anyone out there looking to build their programming confidence to do the same!&lt;/p&gt;
</description>
      &lt;
    </item>
    
  </channel>
</rss>