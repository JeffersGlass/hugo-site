<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PyScript on Jeff Glass</title>
    <link>https://jeff.glass/tags/pyscript/</link>
    <description>Recent content in PyScript on Jeff Glass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Feb 2023 11:22:02 -0600</lastBuildDate><atom:link href="https://jeff.glass/tags/pyscript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pyscript Chipy Feb 2023</title>
      <link>https://jeff.glass/post/pyscript-chipy-feb-2023/</link>
      <pubDate>Wed, 01 Feb 2023 11:22:02 -0600</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-chipy-feb-2023/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;span id=&#34;before&#34;&gt;In February 2023, I gave&lt;/span&gt; a talk on PyScript at the &lt;a href=&#34;https://www.chipy.org/&#34;&gt;Chicago Python Users Group (Chipy)&lt;/a&gt;. The location of the in-person meeting is still TBD at the time of writing; if you&#39;re like to attend digitally, the link to the stream is available on &lt;a href=&#34;https://www.meetup.com/_chipy_/events/290865239/&#34;&gt;the Meetup page for the event&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;More details may be added to this page as the talk comes closer and passes.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Below are the slides for the talk, which you can also &lt;a href=&#34;https://docs.google.com/presentation/d/e/2PACX-1vQuK-NSFcriHhyUaVwIcvUvhO9UyVaU_SjGRq2h4YSNMri9J9sJGTgbjImtGDW_kNCJmE95K8RRcDqH/pub?start=true&amp;loop=true&amp;delayms=60000&#34;&gt;view at this link&lt;/a&gt;&lt;/p&gt;
&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vQuK-NSFcriHhyUaVwIcvUvhO9UyVaU_SjGRq2h4YSNMri9J9sJGTgbjImtGDW_kNCJmE95K8RRcDqH/embed?start=true&amp;loop=true&amp;delayms=60000&#34; frameborder=&#34;0&#34; width=&#34;960&#34; height=&#34;569&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34; style=&#34;display: block; margin: 0 auto&#34;&gt;&lt;/iframe&gt;
&lt;script&gt;
    const currentDate = new Date()
    const transitionDate = new Date(2023, 2, 10)
    if (currentDate &lt;= transitionDate){
        document.getElementById(&#34;before&#34;).innerText = &#34;On February 9, 2023, I will be giving&#34;
    }
&lt;/script&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Emscripten-Shell / Py-Xterm</title>
      <link>https://jeff.glass/post/xterm/</link>
      <pubDate>Thu, 19 Jan 2023 09:11:02 -0600</pubDate>
      
      <guid>https://jeff.glass/post/xterm/</guid>
      <description>&lt;script defer src = &#34;./build/pyscript.min.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;./build/pyscript.css&#34;&gt;
&lt;style&gt;
    code:not(.nocode):not(.language-python):not(.language-python3):not(.language-html):not(.language-js){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;py-config&gt;
    plugins = [&#39;build/pyxterm.min.js&#39;]
&lt;/py-config&gt;
&lt;div class=&#34;py-2 md:px-4&#34; &gt;
    &lt;py-xterm&gt;&lt;/py-xterm&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a (very rough) demo of a multilayered project called &lt;a href=&#34;https://github.com/JeffersGlass/emscripten-shell&#34;&gt;Emscripten Shell&lt;/a&gt; (&lt;span class=&#34;font-semibold&#34;&gt;EmShell&lt;/span&gt; for short)&lt;/p&gt;
&lt;img src=&#34;./logo_full.png&#34; alt=&#34;The EmShell Logo&#34; class=&#34;w-full mx-auto md:w-1/2&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Currently, the project encompasses three different levels of usage (which really should be three separate projects):
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;The &lt;span class=&#34;font-semibold&#34;&gt;Emscripten-Shell&lt;/span&gt; itself, which is written in TypeScript/JavaScript and can be used with any program that uses the &lt;a href=&#34;https://emscripten.org/docs/porting/files/file_systems_overview.html&#34;&gt;Emscripten Filesystem&lt;/a&gt; using the custom &lt;code&gt;&amp;lt;x-term&amp;gt;&lt;/code&gt; element. &lt;/li&gt;
        &lt;li&gt;&lt;span class=&#34;font-semibold&#34;&gt;py-xterm&lt;/span&gt;, an enhancement of the Emscripten Shell for &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide&lt;/a&gt; that adds additional Python-specific functionality, including the &lt;code&gt;python&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; commands, using the &lt;code&gt;&amp;lt;py-xterm&amp;gt;&lt;/code&gt; element&lt;/li&gt;
        &lt;li&gt;A &lt;span class=&#34;font-semibold&#34;&gt;plugin&lt;/span&gt; for &lt;a href=&#34;https://pyscript.net/&#34;&gt;PyScript&lt;/a&gt; that adds the &lt;code&gt;&amp;lt;py-xterm&amp;gt;&lt;/code&gt; element to a page using PyScript.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;div id=&#34;target&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;As my primary pursuit is PyScript, this has full pyscript integration. Trying typing &lt;code&gt;python&lt;/code&gt; and using &lt;code&gt;display(&#34;Hello world&#34;, target=&#34;target&#34;)&lt;/code&gt; in the included REPL - you&#39;ll see that the in-terminal REPL has full PyScript functionality.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This project is in such early days, I hesitate to even call it an Alpha version. The shell is really more a series of hard-coded commands - things like line history, piping and redirect, variable expansion, arrow keys... none of that&#39;s here. There&#39;s also some slight weirdness going on with the REPL and imports... not sure what&#39;s happening there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In the long term, I think it would be interesting to try compiling an existing POSIX shell like &lt;a href=&#34;https://github.com/emersion/mrsh&#34;&gt;mrsh&lt;/a&gt; with Emscripten and figuring out how to integrate that with other Emscripten-built programs.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;See the &lt;a href=&#34;https://github.com/JeffersGlass/emscripten-shell#usage-pyscript&#34;&gt;usage section on GitHub&lt;/a&gt; if you want to try out this early version.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Updates&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;span class=&#34;mr-2 font-semibold&#34;&gt;Jan 19, 2023&lt;/span&gt; Initial post, with &lt;code class=&#34;code&#34;&gt;cd&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;clear&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;help&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;ls&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;pip&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;pwd&lt;/code&gt;, and &lt;code class=&#34;code&#34;&gt;python&lt;/code&gt; commands&lt;/li&gt;
        &lt;li&gt;&lt;span class=&#34;mr-2 font-semibold&#34;&gt;Jan 19, 2023&lt;/span&gt; Added rudimentary &lt;code class=&#34;code&#34;&gt;touch&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;cat&lt;/code&gt; commands&lt;/li&gt;
        &lt;li&gt;&lt;span class=&#34;mr-2 font-semibold&#34;&gt;Jan 19, 2023&lt;/span&gt; Added &lt;code class=&#34;code&#34;&gt;-m&lt;/code&gt; option for &lt;code class=&#34;code&#34;&gt;python&lt;/code&gt; command&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>What&#39;s New in Pyscript 2022.12.1</title>
      <link>https://jeff.glass/post/whats-new-pyscript-2022-12-1/</link>
      <pubDate>Mon, 12 Dec 2022 10:12:48 -0500</pubDate>
      
      <guid>https://jeff.glass/post/whats-new-pyscript-2022-12-1/</guid>
      <description>&lt;style&gt;
    code:not(.nocode):not(.language-python):not(.language-python3):not(.language-html):not(.language-js){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
    .py-terminal{
        min-height: 10em;
        background-color: black;
        color: white;
    }
    .py-pop-up {
    text-align: center;
    width: 600px;
    }

    .py-pop-up p {
        margin: 5px;
    }

    .py-pop-up a {
        position: absolute;
        color: white;
        text-decoration: none;
        font-size: 200%;
        top: 3.5%;
        right: 5%;
    }

    /* Pop-up second layer end */
    .alert-banner {
        position: relative;
        padding: .5rem 1.5rem .5rem .5rem;
        margin: 0.5rem 2rem;
    }

    .alert-banner p {
        margin: 0;
    }

    .py-error{
        background-color: #FFE9E8;
        border: solid;
        border-color: #f0625f;
        color: #9d041c;
    }

    .py-warning {
        background-color: rgb(255, 244, 229);
        border: solid;
        border-color: #ffa016;
        color: #794700;
    }

    .alert-banner.py-error&gt;#alert-close-button {
        color: #9d041c;
    }

    .alert-banner.py-warning&gt;#alert-close-button {
        color: #794700
    }

    #alert-close-button {
    position: absolute;
    right: .5rem;
    top: .5rem;
    cursor: pointer;
    background: transparent;
    border: none;
}
&lt;/style&gt;


&lt;script&gt;    
    //Create Load PyScript buttons:
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        btn_locations = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(btn_locations).forEach(div =&gt; {
            div.classList.add(&#39;my-2&#39;, &#39;mx-8&#39;, &#39;border-blue-200&#39;, &#39;rounded-xl&#39;, &#39;flex&#39;, &#39;flex-row&#39;, &#39;justify-center&#39;, &#39;w-auto&#39;, &#34;py-1&#34;)
            let p = document.createElement(&#39;p&#39;)
            p.classList.add(&#39;my-auto&#39;, &#39;mr-4&#39;, &#39;italic&#39;)
            p.innerText = &#34;Want to run these examples live in your browser?&#34;
            div.appendChild(p)
            //button
            let btn = document.createElement(&#39;button&#39;)
            btn.innerText = &#34;Load PyScript&#34;
            btn.classList.add(&#39;load-pyscript-button&#39;)
            btn.onclick = loadPyScript
            div.appendChild(btn)
        });
    })
    function setupLoadButtons(){

    }
    function loadPyScript() {
        //load css
        css_link = document.createElement(&#34;link&#34;)
        css_link.rel = &#34;stylesheet&#34;
        css_link.type = &#34;text/css&#34;
        css_link.href = &#34;https://pyscript.net/releases/2022.12.1/pyscript.css&#34;
        //css_link.href = &#34;https://pyscript.net/unstable/pyscript.css&#34;
        //css_link.href = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.css&#34;
        //css_link.href = &#34;./pyscript.css&#34;
        document.getElementsByTagName(&#39;head&#39;)[0].appendChild(css_link)

        //load cs
        script_tag = document.createElement(&#39;script&#39;)
        script_tag.src = &#34;https://pyscript.net/releases/2022.12.1/pyscript.js&#34;
        //script_tag.src = &#34;https://pyscript.net/unstable/pyscript.js&#34;
        //script_tag.src = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.js&#34;
        //script_tag.src = &#34;./pyscript.js&#34;
        document.body.append(script_tag)        
    }
    document.addEventListener(&#39;pyscript_ready&#39;, () =&gt; {
        static = document.getElementsByClassName(&#39;static-example&#39;)
        live = document.getElementsByClassName(&#39;live-example&#39;)
        Array.from(static).forEach(div =&gt; {
            div.classList.add(&#39;hidden&#39;)
        })
        Array.from(live).forEach(div =&gt; {
            div.classList.remove(&#39;hidden&#39;)
        })
        load_buttons = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(load_buttons).forEach(elem =&gt; {
            elem.classList.add(&#39;hidden&#39;)
        })
    })
&lt;/script&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    loaded_event = js.Event.new(&#39;pyscript_ready&#39;)
    js.document.dispatchEvent(loaded_event)
&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;Another couple months have flown by, and PyScript has a shiny new release: &lt;a href=&#34;https://github.com/pyscript/pyscript/releases/tag/2022.12.1&#34; class=&#34;&#34;&gt;PyScript Version 2022.12.1 is now live!&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What follows is a walkthrough of the changes since 2022.09.1, as well as notes on what&#39;s changed in the development process, the community, and what&#39;s coming next.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What&#39;s &lt;span class=&#34;italic&#34;&gt;not&lt;/span&gt; covered here in depth are some of the amazing things built with or adjacent to PyScript. In particular, if you haven&#39;t seen the &lt;a href=&#34;https://pyscript.net/tech-preview/micropython/&#34; target=&#34;_blank&#34;&gt;technical preview of MicroPython running in the Browser&lt;/a&gt; or &lt;a href=&#34;https://panel.holoviz.org/user_guide/Running_in_Webassembly.html&#34; target=&#34;_blank&#34;&gt;running Panel apps in the browser&lt;/a&gt; with &lt;code&gt;panel convert&lt;/code&gt;, you absolutely must. But those deserve their own writeups, and this post will focus on the PyScript release itself.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now is a great time to remind users that, for consistent long term bevahior, I recommend projects link to pinned releases like &lt;code class=&#34;code&#34;&gt;https://pyscript.net/releases/2022.12.1/pyscript.js&lt;/code&gt;, and not to &lt;code class=&#34;code&#34;&gt;/latest/pyscript.js&lt;/code&gt;. If your project links to &lt;code class=&#34;code&#34;&gt;/latest&lt;/code&gt;, all the improvements in the new release have almost certainly broke it. Pinned releases are the way to go, and there&#39;s talk of deprecating/removing &lt;code class=&#34;code&#34;&gt;/latest&lt;/code&gt; in the near future.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And for those who want to get &lt;span class=&#34;italic&#34;&gt;really&lt;/span&gt; in the weeds, I&#39;ve prepared &lt;a href=&#34;since2022091.html&#34; target=&#34;_blank&#34;&gt;a granular Change and Issue Log of every Issue and Pull Request since the last release&lt;/a&gt;. It was made possibly by a (slightly tweaked) version of Ned Batchelder&#39;s &lt;a href=&#34;https://github.com/nedbat/dinghy&#34; target=&#34;_blank&#34;&gt;Dinghy GitHub digest tool&lt;/a&gt; &lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;grid justify-center p-1 m-auto bg-gray-200&#34;&gt;
    &lt;span&gt;Jump To: &lt;span&gt;
    &lt;a href=&#34;#Display&#34;&gt;display()&lt;/a&gt; • 
    &lt;a href=&#34;#paths&#34;&gt;[[fetch]]&lt;/a&gt; • 
    &lt;a href=&#34;#PyScript&#34;&gt;PyScript&lt;/a&gt; • 
    &lt;a href=&#34;#infrastructure&#34;&gt;Infrastructure&lt;/a&gt; • 
    &lt;a href=&#34;#pyodide&#34;&gt;Pyodide&lt;/a&gt; • 
    &lt;a href=&#34;#Community&#34;&gt;Community&lt;/a&gt; • 
    &lt;a href=&#34;#Team&#34;&gt;The PyScript Team&lt;/a&gt; • 
    &lt;a href=&#34;#Next&#34;&gt;What&#39;s Next?&lt;/a&gt;
&lt;/div&gt;
&lt;div id=&#34;toc-auto&#34;&gt;&lt;/div&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;Display&#34;&gt;&lt;code class=&#34;text-green-600&#34;&gt;display()&lt;/code&gt;, &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;, and &lt;code&gt;stdout&lt;/code&gt;&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;display-section&#34;&gt;&lt;code&gt;display()&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s one change to the PyScript API that&#39;s so big, it&#39;s getting its own whole section! And it has to do with how PyScript outputs to the browser window. &lt;span class=&#34;font-bold&#34;&gt;&lt;code&gt;print()&lt;/code&gt; no longer outputs to arbitrary places in the browser window!&lt;/span&gt; The new function to use is called &lt;span class=&#34;font-bold&#34;&gt;&lt;code&gt;display()&lt;/code&gt;&lt;/span&gt;. And using &lt;code&gt;print()&lt;/code&gt; has some new and interesting behaviors as well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In &#34;desktop flavored&#34; Python, &lt;code&gt;print()&lt;/code&gt; takes the &lt;code&gt;*objects&lt;/code&gt; it&#39;s given, converts them to strings &lt;a href=&#34;https://docs.python.org/3/library/functions.html#print&#34; target=&#34;_blank&#34;&gt;&#34;like &lt;code&gt;str()&lt;/code&gt; does&#34;&lt;/a&gt;, and sends the results to &lt;code class=&#34;code&#34;&gt;sys.stdout&lt;/code&gt;. &lt;code&gt;sys.stdout&lt;/code&gt; is a File-like object with methods like &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;readline()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, and so on. It represents a continuous stream of text, plus the idea that various characters break up the stream into &#34;lines.&#34; And that&#39;s about it. The simplicity of this default output stream is its power - a very similar structure can be used to represent a stream of text into a file, over a network, a buffer, etc.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Prior to 2022.12.1, Python&#39;s &lt;code&gt;sys.stdout&lt;/code&gt; was routed &lt;span class=&#34;italic&#34;&gt;to the DOM&lt;/span&gt; via fairly complicated &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/beb3aa157419ecb53863c76674069c78cb48dfe1/pyscriptjs/src/python/pyscript.py#L368-L419&#34; target=&#34;_blank&#34;&gt;wrapper setup&lt;/a&gt;. However, a browser window has so many more dimensions of possibility for where we might want to place content compared to a terminal. Thus, the metaphor of &#34;use &lt;code&gt;print()&lt;/code&gt; and we&#39;ll just send some version of that stream to a location on the page&#34; wasn&#39;t as useful as it could be.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As of 2022.12.1, &lt;span class=&#34;font-bold&#34;&gt;&lt;code&gt;print()&lt;/code&gt; (i.e. stdout) goes to the developer console; &lt;code&gt;display()&lt;/code&gt; is for outputting to the browser window&lt;/span&gt; (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/749&#34;&gt;#749&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;py-2 pl-2 m-0 ml-4 bg-green-100&#34;&gt;
    &lt;h4 class=&#34;text-xl&#34;&gt;&lt;code class=&#34;nocode&#34; &gt;display(*values, target=None, append=True)&lt;/code&gt;&lt;/h4&gt;
    &lt;div class=&#34;ml-4&#34;&gt;
        &lt;p class=&#34;pt-1 text-justify&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;*values&lt;/span&gt; (&lt;code&gt;list&lt;/code&gt;) - the list of objects to be displayed. Can be any of the following MIME types:: &#34;text/plain&#34;, &#34;text/html&#34;, &#34;image/png&#34;, &#34;image/jpeg&#34;, &#34;image/svg+xml&#34;, &#34;application/json&#34; or &#34;application/javascript&#34;&lt;/p&gt;
        &lt;p class=&#34;pt-1 mt-2 text-justify&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;target&lt;/span&gt; (&lt;code&gt;str&lt;/code&gt;)- the ID of the html tag to output to. If &lt;code&gt;none&lt;/code&gt;, output to the current &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
        &lt;p class=&#34;pt-1 mt-2 text-justify&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;append&lt;/span&gt; (&lt;code&gt;boolean&lt;/code&gt;) if the output is going to be appended or not to the `target`ed element. It creates a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag if &lt;code&gt;True&lt;/code&gt; and a &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag with a random ID if &lt;code&gt;False&lt;/code&gt;&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;If &lt;code&gt;display()&lt;/code&gt; is given a &lt;code&gt;target&lt;/code&gt; argument, it will attempt to send its *values to the HTML element on the page with that ID. If not, it will use the currently executing tag (&amp;lt;py-script&amp;gt; or &amp;lt;py-repl&amp;gt;) as that destination. Either way, the content is placed either in a new &amp;lt;div&amp;gt; as a sibling of the currently executing tag, or replace the content at the tag location, depending on whether `append` is true or false.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So for example, in place of the usual &lt;code&gt;print(&#34;Hello, world&#34;)&lt;/code&gt;, one could do one of these (they have slightly different behaviors - try them out!):&lt;/p&gt;
&lt;div class=&#34;p-2 mx-4 my-2&#34; style=&#34;background-color: #f0f3f3&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;)

display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;)

display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello world&amp;#34;&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;target-div&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;hidden live-example&#34;&gt;
    &lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-2&#34;&gt;
        &lt;div&gt;
            &lt;py-repl&gt;display(&#34;Hello World&#34;)&lt;/py-repl&gt;
            &lt;py-repl&gt;
                display(&#34;Hello&#34;)
                display(&#34;World&#34;)
            &lt;/py-repl&gt;
            &lt;py-repl&gt;display(&#34;Hello&#34;, &#34;World&#34;, append=False)&lt;/py-repl&gt;
            &lt;py-repl&gt;display(&#34;Hello world&#34;, target=&#34;target-div&#34;)&lt;/py-repl&gt;
        &lt;/div&gt;
        &lt;div class=&#34;pt-1 pl-2 bg-gray-200&#34;&gt;
            &lt;p class=&#34;text-sm text-gray-700&#34;&gt;#target-div&lt;/p&gt;
            &lt;div id=&#34;target-div&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;display()&lt;/code&gt; escapes any HTML given to it as an input string, so &lt;code&gt;display(&#34;&amp;lt;br&amp;gt;&#34;)&lt;/code&gt; prints the literal characters &lt;code class=&#34;code&#34;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; to the screen, instead of creating a newline. For non-string inputs, &lt;code&gt;display(some_obj)&lt;/code&gt; calls &lt;code&gt;repr(some_obj)&lt;/code&gt; and escapes that. If you &lt;span class=&#34;italic&#34;&gt;do&lt;/span&gt; want to inject HTML into your page, a new object is to use the new &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/515858f3134bf031497f0420e8a0e7fbc4c32be0/pyscriptjs/src/python/pyscript.py#L49&#34;&gt;HTML class&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/915&#34;&gt;#915&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;&#34;&gt;
&lt;p class=&#34;code-title&#34;&gt;HTML Class&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;display(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;You&amp;#39;ll see the angle brackets and everything here&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;)
display(HTML(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;But this is an honest-to-goodness bold paragraph!&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;hidden my-3 live-example&#34;&gt;
    &lt;py-repl&gt;
        display(&#34;&lt;p&gt;&lt;b&gt;You&#39;ll see the angle brackets and everything here&lt;/b&gt;&lt;/p&gt;&#34;)
        display(HTML(&#34;&lt;p&gt;&lt;b&gt;But this is an honest-to-goodness bold paragraph!&lt;/b&gt;&lt;/p&gt;&#34;))
    &lt;/py-repl&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;As part of this reshaping of output, the &lt;span class=&#34;font-semibold&#34;&gt;&lt;code&gt;&amp;lt;py-script output=&#34;...&#34;&amp;gt;&lt;/code&gt; attribute has been deprecated...&lt;/span&gt; at least for now. This means that if you want the stdout of your code to go to a specific place in the browser window, you&#39;ll need to handle that on the Python side. One possible way would be to use &lt;code&gt;&lt;a href=&#34;https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout&#34; target=&#34;_blank&#34;&gt;contextlib.redirect_stdout&lt;/a&gt;&lt;/code&gt;, but there are many ways to handle that behavior. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/981&#34;&gt;#981&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, it&#39;s worth nothing that the behavior of placing content based on the currently executing tag doesn&#39;t necessarily work for coroutines in async contexts. In most situations, you&#39;ll see a helpful warning banner will let you know:&lt;/p&gt;
&lt;p class=&#34;flex justify-center post-p&#34;&gt;&lt;code class=&#34;px-2 text-red-800 border-2 border-red-800 nocode&#34;&gt;Implicit target not allowed here. Please use display(..., target=...)&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But due to some tricky edge cases with how warnings percolate up from coroutines, things currently may just fail silently.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;pyterminal&#34;&gt;&lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;So if &lt;code&gt;display()&lt;/code&gt; is for writing to the screen, what does &lt;code&gt;print()&lt;/code&gt; do? Well, a couple of things, but most visibly, it writes to the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;mx-0 static-example md:mx-4&#34;&gt;
&lt;p class=&#34;code-title&#34;&gt;hello_world_terminal.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;I can count to &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;px-4 py-2 mt-2 py-terminal&#34; &gt;Hello, world!&lt;br&gt;I can count to 0&lt;br&gt;I can count to 1&lt;br&gt;I can count to 2&lt;br&gt;I can count to 3&lt;br&gt;I can count to 4&lt;br&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;div class=&#34;hidden live-example&#34;&gt;
    &lt;py-script&gt;
        print(&#34;Hello, world!&#34;)
        for i in range(3):
            print(f&#34;I can count to {i}&#34;)
    &lt;/py-script&gt;
    &lt;div class=&#34;w-full md:w-5/6 md:m-auto gap-y-4&#34;&gt;
        &lt;py-repl&gt;
        print(&#34;Hello, world!&#34;)
        for i in range(3):
            print(f&#34;I can count to {i}&#34;)
        &lt;/py-repl&gt;
        &lt;div class=&#34;px-4 py-2 bg-black&#34;&gt;
            &lt;py-terminal&gt;&lt;/py-terminal&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; achieves a couple things:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;It makes sure that output to stdout goes &lt;span class=&#34;italic&#34;&gt;somewhere&lt;/span&gt; visible; if you copy and paste Python code from your desktop environment to the browser, you can see at least something happening&lt;/li&gt;
    &lt;li&gt;If you want to use a terminal-like output for your code, this is a pre-made solution&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;The behavior and placement of the &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; is configurable via a new &lt;a href=&#34;https://docs.pyscript.net/latest/reference/plugins/py-terminal.html&#34;&gt;terminal setting&lt;/a&gt; in &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;. The options are:&lt;/p&gt;
&lt;table class=&#34;w-full md:w-3/4 md:m-auto&#34;&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;value&lt;/th&gt;
            &lt;th&gt;description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr class=&#34;divide-x-2 divide-gray-400&#34;&gt;
            &lt;td class=&#34;pl-2 pr-4&#34;&gt;&lt;code&gt;&amp;quot;auto&amp;quot;&lt;/code&gt;&lt;/td&gt;
            &lt;td class=&#34;pl-4 pr-2&#34;&gt;(default) Automatically add a &lt;code&gt;&amp;lt;py-terminal auto&amp;gt;&lt;/code&gt;, to the page. The terminal is initially hidden and automatically shown as soon as something writes to &lt;code&gt;stdout&lt;/code&gt; and/or &lt;code&gt;stderr&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&#34;divide-x-2 divide-gray-400&#34;&gt;
            &lt;td class=&#34;pl-2 pr-4&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
            &lt;td class=&#34;pl-4 pr-2&#34;&gt;Automatically add a visible &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; to the page when PyScript loads. It will be added to the end of the &amp;lt;body&amp;lt; unless there is a &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; tag on the page.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&#34;divide-x-2 divide-gray-400&#34;&gt;
            &lt;td class=&#34;pl-2 pr-4&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
            &lt;td class=&#34;pl-4 pr-2&#34;&gt;Don&amp;#39;t add &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; to the page&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&#34;post-p&#34;&gt;So, if you want to stick the terminal somewhere specific, simply include &lt;code&gt;&amp;lt;py-terminal&amp;gt;&amp;lt;/py-terminal&amp;gt;&lt;/code&gt; on your page. You can even include several py-terminals - output to &lt;code&gt;stdout&lt;/code&gt; will be sent to all of them.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;stdoutconsole&#34;&gt;stdout in the Developer Console&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;In addition to going to &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt;, writes to &lt;code&gt;stdout&lt;/code&gt; also go to the &lt;a href=&#34;https://support.monday.com/hc/en-us/articles/360002197259-How-to-open-the-developer-console&#34;&gt;Developer Console&lt;/a&gt;. This is the closest analog in the browser to a &#34;dumb terminal&#34;, and so it makes a certain amount of sense for &lt;code&gt;stdout&lt;/code&gt; to be routed there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are certain small differences, since of course the dev console &lt;span class=&#34;italic&#34;&gt;isn&#39;t&lt;/span&gt; a terminal. For instance, we discovered just the other day that &lt;code&gt;console.log()&lt;/code&gt; (which is used to write to the dev console) &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/472#issuecomment-1281228942&#34;&gt;doesn&#39;t output unless it receives a newline&lt;/a&gt;. So something like &lt;code class=&#34;code&#34;&gt;print(&#34;Hello world&#34;, end = &#34;&#34;)&lt;/code&gt; won&#39;t show up until you log something else with a newline in it! But for simple debugging purposes, or for output where (even temporarily) including a &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; on the page would be untenable, this is a great addition.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;remarks&#34;&gt;Remarks&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;If I were a betting man, I&#39;d hedge that the API for &lt;code&gt;display()&lt;/code&gt; is likely to continue to change and evolve. It&#39;s a brand-new and breaking feature, and I suspect its semantics are going to continue to get tweaked. If you find more issues or inconsistencies, be sure to &lt;a href=&#34;https://github.com/pyscript/pyscript/issues&#34;&gt;raise an issue on GitHub&lt;/a&gt; or come tell us about it &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;on the PyScript Discord&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;paths&#34;&gt;Fetching Files with &lt;code&gt;&amp;lt;py-config&amp;gt; [[fetch]]&lt;/code&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, all files listed in &lt;code&gt;&amp;lt;py-config&amp;gt; paths:&lt;/code&gt; were &lt;code&gt;fetch()&lt;/code&gt;&#39;d from the listed URLs and dropped into the embedded filesystem in the same folder as the running Python Script. Which is to say, pointing a path to the relative URL &lt;code class=&#34;code&#34;&gt;&#39;data/files/Feb-24/info.txt&#39;&lt;/code&gt; would make that file available via &lt;code class=&#34;code&#34;&gt;with open(&#39;info.txt&#39;)... &lt;/code&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;From PyScript 2022.12.1, &lt;code&gt;&amp;lt;py-config&amp;gt; paths:...&lt;/code&gt; has been replaced by &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; [[fetch]] ...&lt;/span&gt;, and it&#39;s much more powerful that its predecessor.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The new options allow the user to fetch multiple files ina  way that preserves their URL/directory structure. The parameters are all bundled in a &#34;fetch configuration&#34; table under the &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag; you can have multiple fetch configurations in a single py-config.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The options for a fetch config are:&lt;/p&gt;
&lt;table class=&#34;w-full m-2 md:w-3/4 md:m-auto&#34;&gt;
    &lt;tr class=&#34;font-bold&#34;&gt;
        &lt;td&gt;Value&lt;/td&gt;
        &lt;td&gt;Type&lt;/td&gt;
        &lt;td&gt;Description&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;`from`&lt;/td&gt;
        &lt;td&gt;string&lt;/td&gt;
        &lt;td&gt;Base URL for the resource to be fetched.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;`to_folder`&lt;/td&gt;
        &lt;td&gt;string&lt;/td&gt;
        &lt;td&gt;Name of the folder to create in the filesystem.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;`files`&lt;/td&gt;
        &lt;td&gt;List of string&lt;/td&gt;
        &lt;td&gt;List of files to be downloaded. Cannot be combined with &#34;to_file&#34;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;`to_file`&lt;/td&gt;
        &lt;td&gt;string&lt;/td&gt;
        &lt;td&gt;Name of the target to create in the filesystem. Cannot be combined with &#34;files&#34;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p class=&#34;post-p&#34;&gt;Breaking that down a bit, here&#39;s how I personally think through which parameters to use:&lt;/p&gt;
&lt;ul class=&#34;py-4 pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;&lt;code&gt;files&lt;/code&gt; vs &lt;code&gt;to_file&lt;/code&gt;:&lt;/li&gt;
    &lt;ul class=&#34;py-2 pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li&gt;If you want the files in the Emscripten file system to have the same name as on the server, use &lt;code&gt;files&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;If you want the files in the Emscripten file system to have a &lt;span class=&#34;italic&#34;&gt;different&lt;/span&gt; name than on the server, or if the URL has no file name (e.g. an API endpoint), use &lt;code&gt;to_file&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;If &lt;code&gt;from&lt;/code&gt; is specified, it will be used as the prefix for URL&#39;s to down files from (can be absolute or relative). Leave unspecified to reference the same relative URL path as the current document.
    &lt;li&gt;If &lt;code&gt;to_folder&lt;/code&gt; is specified, files will be placed in that folder in the Emscripten file system; otherwise, they&#39;ll be placed in the same folder Python scripts are executed from&lt;/li&gt;
    &lt;/li&gt;

&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;The pseudo-code for what PyScript will fetch is something like this:&lt;/p&gt;
&lt;div class=&#34;px-8 overflow-x-scroll bg-codeblock&#34;&gt;
&lt;pre&gt;
&lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; both &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;files&lt;/span&gt; and &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;to_file&lt;/span&gt; are specified: Error

&lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; is not specified, &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; = &#34;&#34;&lt;span class=&#34;text-green-700&#34;&gt; #defaults to relative URLs&lt;/span&gt;
&lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;to_folder&lt;/span&gt; is not specified, &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;to_folder&lt;/span&gt; = &#34;.&#34; &lt;span class=&#34;text-green-700&#34;&gt;#defaults to the working current directory, where Python Scripts are run&lt;/span&gt;

&lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;files&lt;/span&gt; is specified:
    for each &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;file&lt;/span&gt; in &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;files&lt;/span&gt;:
        &lt;span class=&#34;text-green-700&#34;&gt;#These concatenations are done in a smart way to try to avoid dangling/missing &#34;/&#34;s&lt;/span&gt;
        &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;source_URL&lt;/span&gt; = &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; + &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;file&lt;/span&gt;
        &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;destination&lt;/span&gt; = &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;to_folder&lt;/span&gt; + &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;file&lt;/span&gt;
        download object from the source_url to destination in the local file system

&lt;span class=&#34;font-semibold text-red-700&#34;&gt;else:&lt;/span&gt; &lt;span class=&#34;text-green-700&#34;&gt;#&#34;files&#34; not specified:&lt;/span&gt;
    &lt;span class=&#34;font-semibold text-red-700&#34;&gt;if&lt;/span&gt; to_file is specified:
        download object from url &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; to &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;(to_folder + to_file)&lt;/span&gt;
    &lt;span class=&#34;font-semibold text-red-700&#34;&gt;else if&lt;/span&gt; &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; ends in a file-name: &lt;span class=&#34;text-green-700&#34;&gt;#i.e. the part after the last &#34;/&#34;&lt;/span&gt;
        download object from url &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;from&lt;/span&gt; to &lt;span class=&#34;font-semibold text-blue-500&#34;&gt;(to_folder + (&#39;filename&#39; at end of from))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s look at some recipes for using these new attributes to fetch resources from the web and download them to the Emscripten local file system to Python can use them.&lt;/p&gt;
&lt;div class=&#34;p-2 border-2 border-blue-200 rounded-xl&#34; id=&#34;fetch-container&#34;&gt;
    &lt;div class=&#34;overflow-y-scroll&#34; style=&#34;height: 37rem;&#34; id=&#34;fetch-examples&#34;&gt;
        &lt;p&gt;For the examples where we&#39;re fetching our own files and modules, we&#39;ll assume our site has the following simple structure.&lt;/p&gt;
        &lt;pre class=&#34;p-4 bg-gray-200&#34;&gt;
        content/
        ├─ &lt;span class=&#34;font-bold&#34;&gt;index.html &lt;&lt;&lt; File with &amp;lt;py-config&amp;gt;&lt;/span&gt;
        ├─ info.txt
        ├─ data/
        │  ├─ sensordata.csv
        ├─ packages/
        │  ├─ my_package/
        │  │  ├─ __init__.py
        │  │  ├─ helloworld/
        │  │  │  ├─ __init__.py/
        │  │  │  ├─ greetings.py/
        &lt;/pre&gt;
        &lt;div class=&#34;grid grid-cols-1 mt-4 xl:grid-cols-2 gap-x-3 gap-y-4&#34;&gt;
        
        &lt;div class=&#34;w-full&#34;&gt;
        &lt;p class=&#34;code-title&#34;&gt;Single File&lt;/p&gt;
        &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;info.txt&amp;#39;]
    # URL defaults to &amp;#39;relative to this folder&amp;#39;
    # Destination defaults to &amp;#39;adjacent to the Python files we run&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    with open(&amp;#39;info.txt&amp;#39;, &amp;#39;r&amp;#39;) as fp:
        display(fp.read())
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    import os
    import asyncio
    from pyodide.ffi import to_js
    
    async def load_to_local(filepath, fetchpath):
        await js.pyscript.runtime.loadFromFile(filepath, fetchpath)

    asyncio.ensure_future(load_to_local(&#39;info.txt&#39;, &#39;info.txt&#39;))
&lt;/py-script&gt;
        &lt;/div&gt;
        &lt;div class=&#34;hidden mt-2 mb-6 live-example&#34;&gt;
            &lt;py-repl&gt;
            with open(&#39;info.txt&#39;, &#39;r&#39;) as fp:
                text = fp.read()
            
            text
            &lt;/py-repl&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;w-full&#34;&gt;
            &lt;p class=&#34;code-title&#34;&gt;Single File w/ Renaming&lt;/p&gt;
            &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    from = &amp;#39;info.txt&amp;#39;
    to_file = &amp;#39;info_loaded_from_web.txt&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    with open(&amp;#39;info_loaded_from_web.txt&amp;#39;, &amp;#39;r&amp;#39;) as fp:
        print(fp.read())
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;info_loaded_from_web.txt&#39;, &#39;info.txt&#39;))
&lt;/py-script&gt;
            &lt;/div&gt;
            &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                &lt;py-repl&gt;
                with open(&#39;info_loaded_from_web.txt&#39;, &#39;r&#39;) as fp:
                    text = fp.read()
                
                text
                &lt;/py-repl&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        
        &lt;div class=&#34;w-full&#34;&gt;
        &lt;p class=&#34;code-title&#34;&gt;To Another Local Folder&lt;/p&gt;
        &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;info.txt&amp;#39;]
    to_folder = &amp;#39;infofiles/loaded_info&amp;#39;
    # trailing slash would also be acceptable: &amp;#39;infofiles/loaded_info/&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    with open(&amp;#34;infofiles/loaded_info/info.txt&amp;#34;, &amp;#34;r&amp;#34;) as fp:
        print(fp.read())
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;infofiles/loaded_info/info.txt&#39;, &#39;info.txt&#39;))
&lt;/py-script&gt;
        &lt;/div&gt;
        &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
            &lt;py-repl&gt;
            with open(&#39;infofiles/loaded_info/info.txt&#39;, &#39;r&#39;) as fp:
                text = fp.read()
            
            text
            &lt;/py-repl&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;w-full&#34;&gt;
            &lt;p class=&#34;code-title&#34;&gt;From Another Folder to Current Working Directory&lt;/p&gt;
            &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;sensordata.csv&amp;#39;]
    from = &amp;#39;data/&amp;#39;
    # fetch file from URL &amp;#39;data/sensordata.csv&amp;#39; to local file &amp;#39;./sensordata.csv&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    import csv
    with open(&amp;#34;./sensordata.csv&amp;#34;, &amp;#34;r&amp;#34;) as csvfile:
        datareader = csv.reader(csvfile)
        for row in datareader:
            display(row)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;sensordata.csv&#39;, &#39;data/sensordata.csv&#39;))
&lt;/py-script&gt;
            &lt;/div&gt;
            &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                &lt;py-repl&gt;
                    import csv
                    with open(&#34;./sensordata.csv&#34;, &#34;r&#34;) as csvfile:
                        datareader = csv.reader(csvfile)
                        for row in datareader:
                            display(row)
                &lt;/py-repl&gt;
                &lt;/div&gt;
            &lt;/div&gt;

            &lt;div class=&#34;w-full&#34;&gt;
                &lt;p class=&#34;code-title&#34;&gt;From a Folder, to A Folder&lt;/p&gt;
                &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    # With no &amp;#39;files&amp;#39; or &amp;#39;to_file&amp;#39; specified, use the &amp;#34;file&amp;#34; at the end of &amp;#34;from&amp;#34;
    # This ends up at &amp;#39;./local_data/sensordata.csv&amp;#39;
    from = &amp;#39;./data/sensordata.csv&amp;#39;
    to_folder = &amp;#39;./local_data&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
import csv
with open(&amp;#34;./local_data/sensordata.csv&amp;#34;, &amp;#34;r&amp;#34;) as csvfile:
    datareader = csv.reader(csvfile)
    for row in datareader:
        display(row)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;./local_data/sensordata.csv&#39;, &#39;data/sensordata.csv&#39;))
&lt;/py-script&gt;
                &lt;/div&gt;
                &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                    &lt;py-repl&gt;
                        import csv
                        with open(&#34;./local_data/sensordata.csv&#34;, &#34;r&#34;) as csvfile:
                            datareader = csv.reader(csvfile)
                            for row in datareader:
                                display(row)
                    &lt;/py-repl&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
        
            &lt;div class=&#34;w-full&#34;&gt;
                &lt;p class=&#34;code-title&#34;&gt;Multiple Files, Preserving Folder Structure&lt;/p&gt;
                &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;__init__.py&amp;#39;, &amp;#39;helloworld/greetings.py&amp;#39;, &amp;#39;helloworld/__init__.py&amp;#39;]
    from = &amp;#39;../packages/my_package/&amp;#39;
    to_folder = &amp;#39;./my_package&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
from my_package.helloworld.greetings import say_hi
print(say_hi())
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.gather(*[
        load_to_local(&#39;./my_package/__init__.py&#39;, &#34;packages/my_package/__init__.py&#34;),
        load_to_local(&#39;./my_package/helloworld/__init__.py&#39;, &#39;packages/my_package/helloworld/__init__.py&#39;),
        load_to_local(&#39;./my_package/helloworld/greetings.py&#39;, &#39;packages/my_package/helloworld/greetings.py&#39;)
    ])
&lt;/py-script&gt;
                &lt;/div&gt;
                &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                    &lt;py-repl&gt;
                        from my_package.helloworld.greetings import say_hi
                        display(say_hi())
                    &lt;/py-repl&gt;
                    &lt;/div&gt;
                &lt;/div&gt;

                &lt;div class=&#34;w-full&#34;&gt;
                    &lt;p class=&#34;code-title&#34;&gt;Multiple Fetch Configs&lt;/p&gt;
                    &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    files = [&amp;#39;info.txt&amp;#39;]
    
    [[fetch]]
    from = &amp;#39;data/&amp;#39;
    files = [&amp;#39;sensordata.csv&amp;#39;]
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
with open(&amp;#39;info.txt&amp;#39;, &amp;#39;rb&amp;#39;) as fp:
    info_length = len(fp.read())

with open(&amp;#39;sensordata.csv&amp;#39;, &amp;#39;rb&amp;#39;) as fp:
    data_length = len(fp.read())

display(f&amp;#34;info.txt is {info_length} bytes and data.csv is {data_length} bytes&amp;#34;)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;py-script class=&#34;hidden&#34;&gt;
        import asyncio
        asyncio.ensure_future(load_to_local(&#39;./info.txt&#39;, &#39;./info.txt&#39;))
        asyncio.ensure_future(load_to_local(&#39;./sensordata.csv&#39;, &#39;./data/sensordata.csv&#39;))
    &lt;/py-script&gt;
                    &lt;/div&gt;
                    &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                        &lt;py-repl&gt;
                            with open(&#39;info.txt&#39;, &#39;rb&#39;) as fp:
                                info_length = len(fp.read())
                            
                            with open(&#39;sensordata.csv&#39;, &#39;rb&#39;) as fp:
                                data_length = len(fp.read())

                            display(f&#34;info.txt is {info_length} bytes and data.csv is {data_length} bytes&#34;)
                        &lt;/py-repl&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
        
            &lt;div class=&#34;w-full&#34;&gt;
                &lt;p class=&#34;code-title&#34;&gt;From an API Endpoint&lt;/p&gt;
                &lt;div class=&#34;pr-4 bg-codeblock&#34;&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
    [[fetch]]
    from = &amp;#39;https://catfact.ninja/fact&amp;#39;
    to_file = &amp;#39;./cat_fact.json&amp;#39;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
import json
with open(&amp;#34;cat_fact.json&amp;#34;, &amp;#34;r&amp;#34;) as fp:
    data = json.load(fp)
display(data[&amp;#39;fact&amp;#39;])
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;py-script class=&#34;hidden&#34;&gt;
    import asyncio
    asyncio.ensure_future(load_to_local(&#39;./cat_fact.json&#39;, &#39;https://catfact.ninja/fact&#39;))
&lt;/py-script&gt;
                &lt;/div&gt;
                &lt;div class=&#34;hidden my-2 mb-6 live-example&#34;&gt;
                    &lt;py-repl&gt;
                        import json
                        with open(&#34;cat_fact.json&#34;, &#34;r&#34;) as fp:
                            data = json.load(fp)
                        display(data[&#39;fact&#39;])
                    &lt;/py-repl&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
        
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&#34;expand-fetch-examples&#34; class=&#34;flex justify-center my-1&#34;&gt;
        &lt;p class=&#34;p-1 m-1 text-lg text-center text-gray-500 border-2 border-gray-200 rounded-lg&#34; id=&#34;show-fetch-examples&#34; onclick=&#34;expandFetchExamples()&#34; style=&#34;cursor: pointer&#34;&gt;--- Expand Examples ---&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;script&gt;
    function expandFetchExamples() {
        //expand examples
        let examples_container = document.getElementById(&#34;fetch-examples&#34;)
        examples_container.style.removeProperty(&#39;height&#39;)
        examples_container.classList.remove(&#39;overflow-y-scroll&#39;)

        //remove border
        document.getElementById(&#39;fetch-container&#39;).classList.remove(&#39;border-2&#39;)

        //Hide button
        document.getElementById(&#34;expand-fetch-examples&#34;).classList.add(&#39;hidden&#39;)
    }
&lt;/script&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;PyScript&#34;&gt;PyScript&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34; id=&#34;reshaping-api&#34;&gt;Reshaping the Python API&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, it wasn&#39;t possible to use any of PyScript&#39;s python API in resources outside of &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tags. Now, &lt;code&gt;import pyscript&lt;/code&gt; just works! But there&#39;s so much more going on than that.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(Almost) all of the global variables which PyScript previously made available by default have been moved into the &lt;code&gt;pyscript&lt;/code&gt; module, and should now be imported to be used. The remaining global objects are: the &lt;code class=&#34;font-semibold&#34;&gt;js&lt;/code&gt; module, the &lt;code class=&#34;font-semibold&#34;&gt;pyscript&lt;/code&gt; module, the &lt;code class=&#34;font-semibold&#34;&gt;Element&lt;/code&gt; class (&lt;code&gt;pyscript.Element&lt;/code&gt;), the &lt;code class=&#34;font-semibold&#34;&gt;display()&lt;/code&gt; function (&lt;code&gt;pyscript.display()&lt;/code&gt;), and the &lt;code class=&#34;font-semibold&#34;&gt;HTML&lt;/code&gt; class (&lt;code&gt;pyscript.HTML&lt;/code&gt;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The following global objects in PyScript 2022.09.1 should no longer be accessed as global objects, but can be imported as normal&lt;/p&gt;
&lt;ul class=&#34;py-2 pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;stdlib modules: &lt;code&gt;asyncio&lt;/code&gt;, &lt;code&gt;base64&lt;/code&gt;, &lt;code&gt;io&lt;/code&gt;, &lt;code&gt;sys&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;pyodide&lt;/code&gt;, &lt;code&gt;micropip&lt;/code&gt;. Also &lt;code&gt;textwrap.dedent&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;PyScript Objects: &lt;code&gt;PyScript&lt;/code&gt; (the class), &lt;code&gt;PyItemTemplate&lt;/code&gt;, &lt;code&gt;PyListTemplate&lt;/code&gt;, &lt;code&gt;PyWidgetTheme&lt;/code&gt;, &lt;code&gt;add_classes&lt;/code&gt;, &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Private PyScript Names (&lt;span class=&#34;italic&#34;&gt;members of the pyscript module, were global, but should be treated as private&lt;/span&gt;): &lt;code&gt;eval_formatter&lt;/code&gt;, &lt;code&gt;format_mime&lt;/code&gt;, &lt;code&gt;identity&lt;/code&gt;, &lt;code&gt;render_image&lt;/code&gt;, &lt;code&gt;MIME_RENDERERS&lt;/code&gt;, &lt;code&gt;MIME_METHODS&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;From js module: &lt;code&gt;document&lt;/code&gt;, &lt;code&gt;console&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;For example, check out the difference between the following two pieces of code from the previous and current versions:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 my-4 lg:grid-cols-2 gap-y-4 lg:gap-x-4&#34;&gt;
    &lt;div&gt;
        &lt;p class=&#34;code-title&#34;&gt;2022.09.1 Example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;my_coro&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(my_coro())

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;foo&lt;/span&gt;():
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(dedent(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;     FOO!&amp;#34;&lt;/span&gt;))

    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mydiv&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListner(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy(foo))
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;p class=&#34;code-title&#34;&gt;2022.12.1 Equivalent&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; loop
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#d8dada&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console, document
&lt;/span&gt;
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;my_coro&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(my_coro())

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;foo&lt;/span&gt;():
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(dedent(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;     FOO!&amp;#34;&lt;/span&gt;))

    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mydiv&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListner(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy(foo))
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Users who want to make use of PyScript-specific functions in their own modules can now use &lt;code&gt;import pyscript&lt;/code&gt; to access the objects in &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/pyscriptjs/src/python/pyscript.py&#34;&gt;the pyscript module&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Not to leave users in a lunch with this large API change, all of the global objects where were previosusly prevent are &lt;span class=&#34;italic&#34;&gt;still accessible but deprecated&lt;/span&gt;. Accessing them directly will pop up a handy error message like:&lt;/p&gt;
&lt;div class=&#34;alert-banner py-warning md:mx-4&#34;&gt;Direct usage of &lt;code class=&#34;nocode&#34;&gt;console&lt;/code&gt; is deprecated. Please use &lt;code class=&#34;nocode&#34;&gt;js.console&lt;/code&gt; instead.&lt;button id=&#34;alert-close-button&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 16 16&#34; fill=&#34;currentColor&#34; width=&#34;12px&#34;&gt;&lt;path d=&#34;M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;For context: prior to this version, all of the Python side of PyScript - the hooks which made stdout work, &lt;code&gt;Element.write()&lt;/code&gt;, the PyScript class - was included into user code in a clever but inintuitive way. The methodology equivalent to loading the contents &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/pyscriptjs/src/python/pyscript.py&#34;&gt;pyscript.py&lt;/a&gt; as a string and calling &lt;code&gt;exec(contents)&lt;/code&gt; on that string. This worked, but made it difficult for users to use these PyScript functions in their own modules, and limited how the module could be used for type-checking. Things are better now!&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;plugins&#34;&gt;Plugins!&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As was so nicely phrased on the &lt;a href=&#34;#community&#34;&gt;October Community Call&lt;/a&gt;, PyScript is aiming to be a &#34;platform&#34;, not a &#34;framework&#34;. That is, it should provide lots of hooks, triggers, and signals to allow users to &lt;span class=&#34;italic&#34;&gt;expand&lt;/span&gt; the usability of PyScript, rather than forcing users to do things &#34;The PyScript Way.&#34;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The idea of using &#34;plugins&#34; to do this has been floating around for awhile now - some straightforward way of allowing users to cause their own code to be run at certain points in the PyScript lifecycle. But within that &#34;simple&#34; idea are many questions - should this be JavaScript or Python Code (or both/either)? Should the triggering mechanism be callback-based, event-based, or some other way? How much of the core functionality of PyScript should happen every time, or should we simply define a lifecycle and move &lt;span class=&#34;italic&#34;&gt;everything&lt;/span&gt; to a Plugin?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript 2022.12.1 gets the ball rolling on this by &lt;span class=&#34;font-semibold&#34;&gt;allowing users to author plugins in Python and use them to extend PyScript&lt;/span&gt;. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/961&#34;&gt;#961&lt;/a&gt;) This behavior has only be recently merged, and deserves it&#39;s own full writeup anyway, but here&#39;s a brief description of the process of authoring a Python plugin:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;In a separate &lt;code&gt;.py&lt;/code&gt; file (module), write a class that extends the &lt;code&gt;pyscript.Plugin&lt;/code&gt; class.&lt;/li&gt;
    &lt;ul class=&#34;py-1 pl-8 text-justify list-disc list-outside;&#34;&gt;
        &lt;li&gt;This class can implement any of the valid Python &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/8b7fb89c6862f9e7d3388248a4b5f5d411da06db/pyscriptjs/src/plugin.ts#L70-L96&#34;&gt;named lifecycle callbacks&lt;/a&gt;, which will be called at determined points in the PyScript loading lifecycle.&lt;/li&gt;
        &lt;li class=&#34;italic&#34;&gt;We could use some more documentation on these methods, to be honest, but the development on this is flying fast and furious. Keep your eyes peeled!&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;In this module, create an instance of this class named &lt;code&gt;plugin&lt;/code&gt;, and pass the constructor the name of the plugin. I.e. &lt;code&gt;plugin = Plugin(&#34;myNewPlugin&#34;)&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;In &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;, add the URL (relative or absolute) of this file to the &#34;plugins&#34; attribute. I.e. &lt;code&gt;plugins = [&#39;../my_folder/plugins/myNewPlugin.py&#34;]&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;When PyScript reaches any of the defined lifecycle points, the corresponding methods of the Plugin will be called.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;Additionally, there&#39;s provision on the Python side for creating custom HTML elements via a Python plugin. See &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/8b7fb89c6862f9e7d3388248a4b5f5d411da06db/pyscriptjs/src/plugins/python/py_markdown.py#L23-L31&#34;&gt;the Markdown Plugin example&lt;/a&gt; for a demo of how this works.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, PyScript is using a plugin system internally to implement some of its core behaviors. The &lt;code&gt;&amp;lt;py-terminal&amp;gt;&lt;/code&gt; page element (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/917&#34;&gt;#917&lt;/a&gt;), the splashscreen which appears when PyScript is loading, and the &lt;code&gt;importmap&lt;/code&gt; functionality which allows loading importmap ES modules into Python (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/938&#34;&gt;#938&lt;/a&gt;), are all implemented in TypeScript as plugins. Currently, there&#39;s no ability for the user to write their own JavaScript plugins, but that&#39;s a potential (and powerful) behavior for the future.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;implicit&#34;&gt;No More Implicit Coroutines&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Prior to version 2022.12.1, PyScript allowed the use of Top-Level-Await statements. That is, &lt;code&gt;await&lt;/code&gt;, &lt;code&gt;async for&lt;/code&gt;, and &lt;code&gt;async with&lt;/code&gt; outside of coroutines (&lt;code&gt;async def&lt;/code&gt; functions). When it encountered such a block of Python, it automatically wrapped the block up into a coroutine and scheduled it to run in the event loop.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;As of PyScript 2022.12.1, this is no longer allowed.&lt;/span&gt; Users should write their async functions as coroutines using &lt;code&gt;async def&lt;/code&gt;, and schedule them using &lt;a href=&#34;https://jeff.glass/post/pyscript-asyncio#webloop&#34;&gt;the allowed webloop methods&lt;/a&gt; like &lt;code&gt;asyncio.create_task()&lt;/code&gt; or &lt;code&gt;asyncio.ensure_future()&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The doesn&#39;t actually remove anything that was previously possible with PyScript - it only requires that users be more explicit about scheduling their coroutines. Compare the two following, equivalent examples from PyScript 2022.09.1 and 2022.12.1:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 my-4 lg:grid-cols-2 gap-y-4 lg:gap-x-4&#34;&gt;
    &lt;div&gt;
        &lt;p class=&#34;code-title&#34;&gt;2022.09.1 Example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
        js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(i)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;p class=&#34;code-title&#34;&gt;2022.12.1 Equivalent&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;my_coro&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;):
            js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(i)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(my_coro())
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;For more techniques and background, you can check out my &lt;a href=&#34;../../post/pyscript-asyncio/&#34;&gt;long writeup on Asyncio in PyScript&lt;/a&gt; from last month. Antonio and I also got &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/879#issuecomment-1289415317&#34;&gt;deep in the weeds of how Pyodide&#39;s &lt;code class=&#34;nocode&#34;&gt;runPythonAsync()&lt;/code&gt; works&lt;/a&gt; (which we previously used to implicitly schedule coroutines), and some of its limitations, if you want to dive even deep.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;jsmodule&#34;&gt;PyScript JS module&lt;/h4&gt;
&lt;h5 class=&#34;pt-3 text-lg&#34;&gt;Pyodide Runtime Access&lt;/h5&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;pyscript.js&lt;/code&gt; now exposes the instance of Pyodide it creates &lt;a href=&#34;https://docs.pyscript.net/latest/reference/pyscript-module.html&#34;&gt;as a JavaScript object&lt;/a&gt;. Users wishing to run code directly in Pyodide, or to use another JavaScript module that interacts directly with Pyodide, can use this exported reference to do so. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/868&#34;&gt;#868&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p warning-banner&#34;&gt;The current method of access makes no guarantees about the state of the runtime when accessed - users will need to implement their own method of checking whether the runtime is loaded/initialized before accessing it. This is &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/942&#34;&gt;likely to change in the future&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The Pyodide runtime is accessible as &lt;code class=&#34;code&#34;&gt;pyscript.runtime.interpreter&lt;/code&gt;, like so:&lt;/p&gt;
&lt;div class=&#34;mx-4 my-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://pyscript.net/releases/2022.12.1/pyscript.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;logFromPython()&amp;#34;&lt;/span&gt;&amp;gt;Click Me to Log&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; logFromPython() {
        pyscript.runtime.interpreter.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            from js import console
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            console.log(f&amp;#34;Hello from Python! {1 + 2 = }&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        `&lt;/span&gt;)
    }
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that the runtime will not be available until it has been loaded by PyScript and initialized. In the example above, we use a button to defer executing the desired code until sometime after PyScript has initialized; in the next example, we&#39;ll use an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Event&#34;&gt;Event&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;code class=&#34;code&#34;&gt;pyscript.runtime.globals&lt;/code&gt; attribute holds a reference to Python &lt;code&gt;globals()&lt;/code&gt; dictionary, making it easy to reference Python objects from JavaScript. By the wonder that is Pyodide, the objects are proxied back and forth pretty much seamlessly, but especially when logging to the console, using the &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/js-api.html#PyProxy.toJs&#34;&gt;toJs()&lt;/a&gt; function makes the conversion explicit:&lt;/p&gt;
&lt;div class=&#34;mx-4 my-2&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://pyscript.net/releases/2022.12.1/pyscript.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    from js import document, Event

    techs = [&amp;#34;PyScript&amp;#34;, &amp;#34;Pyodide&amp;#34;, &amp;#34;WASM&amp;#34;]
    number_of_techs = len(techs)

    # Use an Event to trigger JS after PyScript has initialized/run:
    pydone = Event.new(&amp;#34;py-done&amp;#34;)
    document.dispatchEvent(pydone)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;py-done&amp;#34;&lt;/span&gt;, () =&amp;gt; {
        console.log(pyscript.runtime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;number_of_techs&amp;#34;&lt;/span&gt;))
        console.log(pyscript.runtime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;techs&amp;#34;&lt;/span&gt;).toJs())
    })
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&#34;m-2&#34;&gt;
        &lt;p class=&#34;italic&#34;&gt;Dev Console Result:&lt;/p&gt;
        &lt;img class=&#34;border-2 border-gray-400&#34; src=&#34;consoledemo1.PNG&#34; alt=&#34;A pair of entries from the developer console reading &#39;3&#39; and &#39;PyScript&#39;, &#39;Pyodide&#39;, &#39;WASM&#39;&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h5 class=&#34;pt-3 text-lg&#34;&gt;PyScript Version Numbers (JavaScript)&lt;/h5&gt;
&lt;p class=&#34;post-p&#34;&gt;You can also access the current version of PyScript via the pyscript js module at &lt;code&gt;pyscript.version&lt;/code&gt;. This will appear as a &#34;dotted string&#34; like &lt;code class=&#34;code&#34;&gt;2022.12.1.dev&lt;/code&gt; But version numbers are even more powerful on the Python side.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;pyversionnumbers&#34;&gt;PyScript Version Numbers (Python)&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Up to this point, the current PyScript version is something a user would have to infer from what URL they sourced &lt;code class=&#34;code&#34;&gt;pyscript.js&lt;/code&gt; from. As of version 2022.12.1, though, you can access that information directly in Python via a couple of new attributes.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/reference/API/version_info.html&#34; class=&#34;font-semibold&#34;&gt;PyScript.version_info&lt;/a&gt; is a &lt;code&gt;nametuple&lt;/code&gt; representing the current version in a code-savvy way - it&#39;s intended for use when comparing version numbers, i.e. to establish feature compatibility. For example:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Using version_info&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;version_info &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;2022&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;):
          js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You should be using [[fetch]] configs&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
          js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You should be using &amp;amp;lt;py-config&amp;amp;gt; paths:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;hidden my-4 live-example&#34;&gt;
    &lt;py-repl&gt;
        import js
        if PyScript.version_info and PyScript.version_info &gt;= (2022,11,1,&#34;&#34;):
            display(&#34;This text was output using display()&#34;)
        else:
            print(&#34;This text was output using print()&#34;)
    &lt;/py-repl&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;On the other hand, &lt;a href=&#34;https://docs.pyscript.net/latest/reference/API/__version__.html&#34; class=&#34;font-semibold&#34;&gt;PyScript.__version__&lt;/a&gt; is a human-readable version of the current version, like &#34;2022.12.1.final&#34;&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Using __version__&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;The current version of PyScript running right now is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;__version__&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;hidden my-4 live-example&#34;&gt;
    &lt;py-repl&gt;
        display(f&#34;{PyScript.version_info= }&#34;)
        display(f&#34;{PyScript.__version__= }&#34;)
    &lt;/py-repl&gt;
&lt;/div&gt;
&lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;widgetdeprecation&#34;&gt;&lt;code&gt;&amp;lt;py-button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;py-inputbox&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;py-box&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;py-title&amp;gt;&lt;/code&gt; are Deprecated&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;All four of these custom HTML elements, which have been present in PyScript since its alpha release, have been deprecated. In the continuing vein of trying to make PyScript into a strong, versatile, and minimal core, it was decided that these elements weren&#39;t really key - they&#39;re easy enough to implement &lt;span class=&#34;italic&#34;&gt;with&lt;/span&gt; PyScript, enough so that they don&#39;t need to be included elements by default. &lt;code&gt;&amp;lt;py-button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;py-inputbox&amp;gt;&lt;/code&gt; are simple enough to replicate with existing HTML elements and event listeners, while &lt;code&gt;&amp;lt;py-box&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;py-title&amp;gt;&lt;/code&gt; were pre-formatted &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Those components haven&#39;t been fully removed from PyScript yet, just deprecated, and nicely, the deprecation warning banner that appears suggests altenate elements with new CSS classes that maintain the old elements&#39; styling. The suggested solutions are:&lt;/p&gt;
&lt;div class=&#34;flex justify-center my-2&#34;&gt;
    &lt;table class=&#34;w-full text-center md:w-2/3&#34;&gt;
        &lt;tr&gt;
            &lt;th&gt;Deprecated Tag&lt;/th&gt;
            &lt;th&gt;Replacement Solution&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;py-button&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;button py-click=&amp;quot;function()&amp;quot; class=&amp;quot;py-button&amp;quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;py-inputbox&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;input class=&amp;quot;py-input&amp;quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;py-box&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;py-box&amp;quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;py-title&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;betterwarnings&#34;&gt;Better Warnings and Errors&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Fabio Rosado (yes, there&#39;s &lt;a href=&#34;#maintainers&#34;&gt;two Fabios&lt;/a&gt; on the PyScript team now!) put together a series of great PRs that clean up the presentation of warnings and errors caused during PyScript&#39;s lifecycle.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you write invalid TOML for &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;, say, or use a deprecated function or feature. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/909&#34;&gt;#909&lt;/a&gt;). The banners can contain either plain text or HTML, which will allow us a lot of flexibility going forward in how we use them. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/947&#34;&gt;#947&lt;/a&gt;) &lt;/p&gt;
&lt;div class=&#34;alert-banner py-error&#34;&gt;(PY1001): Unable to install package(s) &#39;pyarrow&#39;. Reason: Can&#39;t find a pure Python 3 Wheel for package(s) &#39;pyarrow&#39;. See: https://pyodide.org/en/stable/usage/faq.html#micropip-can-t-find-a-pure-python-wheel for more information.&lt;/div&gt;
&lt;div class=&#34;alert-banner py-warning&#34;&gt;Multiple &amp;lt;py-config&amp;gt; tags detected. Only the first is going to be parsed, all the others will be ignored&lt;button id=&#34;alert-close-button&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 16 16&#34; fill=&#34;currentColor&#34; width=&#34;12px&#34;&gt;&lt;path d=&#34;M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;And you might notice, the PyScript errors errors now include error codes! As the PyScript codebase grows, and community involvement increases, having short-and-simple error codes helps users find solutions to exactly the issue they&#39;re having. It encourages users to report &#34;When I do X, I get a PY2401 error&#34; instead of just &#34;I got an error.&#34; This improves searchability the &lt;a href=&#34;https://docs.pyscript.net/unstable/reference/exceptions.html&#34;&gt;error code docs&lt;/a&gt;, in the forums, and on discord, and makes it simpler to guide users to solutions to specific issues they&#39;re encountering in the PyScript lifecycle. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/959&#34;&gt;#959&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The styling of errors that occur within Python has also been improved, and reformatted to be more legible on the page:&lt;/p&gt;
&lt;pre class=&#34;mx-8 py-error&#34;&gt;Traceback (most recent call last):&lt;br&gt;  File &#34;/lib/python3.10/site-packages/_pyodide/_base.py&#34;, line 435, in eval_code&lt;br&gt;    .run(globals, locals)&lt;br&gt;  File &#34;/lib/python3.10/site-packages/_pyodide/_base.py&#34;, line 304, in run&lt;br&gt;    coroutine = eval(self.code, globals, locals)&lt;br&gt;  File &#34;&amp;lt;exec&amp;gt;&#34;, line 1, in &amp;lt;module&amp;gt;&lt;br&gt;ZeroDivisionError: division by zero&lt;br&gt;&lt;/pre&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;pyconfigs&#34;&gt;Streamlined py-config&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The py-config system has been overhauled to simply its use internally - including simplifying how the default configuration options are merged with user-supplied options (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/806&#34;&gt;#806&lt;/a&gt;), dealing with multiple &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;s on a page (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/826&#34;&gt;#826&lt;/a&gt;), and finally killing &lt;code&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; altogether (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/775&#34;&gt;#775&lt;/a&gt;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The TOML parser handling has also been improved, in that it no longer hangs forever if given misshapen TOML. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/815&#34;&gt;#815&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;An important clarification has also been added to the docs - because of &lt;a href=&#34;https://toml.io/en/&#34;&gt;the way the TOML format works&lt;/a&gt;, if you&#39;re using TOML for your py-config, &lt;code&gt;[[runtimes]]&lt;/code&gt; must be the last element. If the &lt;code&gt;[[runtimes]]&lt;/code&gt; table precedes the other individual elements (like `paths` or `packages`), those elements end up &lt;span class=&#34;italic&#34;&gt;inside&lt;/span&gt; &lt;code&gt;[[runtimes]]&lt;/code&gt;, which will cause them to be missed. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/861&#34;&gt;#861&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This in addition to the &lt;a href=&#34;#paths&#34;&gt;changes to &lt;code&gt;[[fetch]]&lt;/code&gt; noted above&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;unidentified&#34;&gt;Undefined elements are no longer hidden&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previous, any unknown HTML elements were hidden by &lt;code&gt;pyscript.css&lt;/code&gt; in an attempt to suppress onscreen visibility of things like &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;. This had the unintended consequence of hiding elements with typos - for example, a user-typed &lt;code&gt;&amp;lt;py-scrip&amp;gt;&lt;/code&gt; element would be &#34;unknown&#34; and also hidden. Now, PyScript explicitly only hides the page-elements that need hiding. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/837&#34;&gt;#837&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;directory&#34;&gt;Directory Listings for Releases&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript releases now come with a directory-listing of files and a brief example. See, for example, &lt;a href=&#34;https://pyscript.net/unstable/&#34;&gt;https://pyscript.net/unstable&lt;/a&gt;. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/839&#34;&gt;#839&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;codemirror6&#34;c&gt;CodeMirror 6&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Just like &lt;a href=&#34;https://blog.jupyter.org/accelerating-jupyterlab-68942bb8d602#2404&#34;&gt;JupyterLab 6&lt;/a&gt;, PyScript now uses the latest version of CodeMirror to power the in-browser &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; component. This comes with a (far more stable) API and &lt;a href=&#34;https://codemirror.net/docs/migration/&#34;&gt;lots of other improvements.&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/814&#34;&gt;#814&lt;/a&gt;)&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;infrastructure&#34;&gt;Infrastructure&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;documentation&#34;&gt;Documentation&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Especially in the past couple weeks, there&#39;s been a flood of new additions to the documentation! As the changes and improvements for this release settled into their final form, the team focused on making sure as many of the changes were documented as possible. A small sample of the new pages:&lt;/p&gt;&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/reference/index.html&#34;&gt;API reference&lt;/a&gt; for &lt;code&gt;Element&lt;/code&gt;, &lt;code&gt;display()&lt;/code&gt;, &lt;code&gt;__version__&lt;/code&gt;, and &lt;code&gt;version_info&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/guides/asyncio.html&#34;&gt;Updating Implicit Async to Explicit&lt;/a&gt;, &lt;/li&gt;
    &lt;li&gt;The &lt;a href=&#34;https://docs.pyscript.net/latest/reference/modules/pyscript.html&#34;&gt;pyscript module&lt;/a&gt; in javascript&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/reference/exceptions.html&#34;&gt;Exceptions and Error Codes&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/unstable/tutorials/py-config-fetch.html&#34;&gt;Using [[fetch]] from py-config&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net/unstable/tutorials/writing-to-page.html&#34;&gt;Writing content to the Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;devdocs&#34;&gt;Dev Docs&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://docs.pyscript.net/latest/index.html&#34;&gt;The PyScript Documentation&lt;/a&gt; now has a &lt;a href=&#34;https://docs.pyscript.net/latest/development/&#34;&gt;Development Section&lt;/a&gt;, as a central place for notes about how the development and release process for PyScript works. In particular, there are documents on the &lt;a href=&#34;https://docs.pyscript.net/latest/development/deprecation-cycle&#34;&gt;deprecation cycle&lt;/a&gt;, &lt;a href=&#34;https://docs.pyscript.net/latest/development/setting-up-environment&#34;&gt;getting your development environment set up&lt;/a&gt;, and &lt;a href=&#34;https://docs.pyscript.net/latest/development/developing&#34;&gt;making and submitting a pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;refactoringeffots&#34;&gt;Refactoring PyScript&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Antonio, Mariana, Madhur, and many more besides have embarked on several of massive refactoring endevours of the TypeScript side of PyScript, to streamline and rationalize the process of how PyScript loads itself and Pyodide and how it then executes Python scripts. Hopefully the changes this imparts to the end-users of PyScript are minimal, but speaking from a maintenance and codebase standpoint, the amount that&#39;s been done to make sense of both of these processes makes it a significantly easier to reason about what-happens-when. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/806&#34;&gt;#806&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/850&#34;&gt;#850&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/881&#34;&gt;#881&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/884&#34;&gt;#884&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;testing&#34;&gt;Testing&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The pytest-driven test system used to re-download the Pyodide runtime and other resources for each test, significantly slowing it down. The test system now has the ability to cache resources between tests, and retry tests on network failures. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/829&#34;&gt;829&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We also now have a way for the test system to watch for and confirm that specific errors are being thrown, allowing for the writing of &lt;span class=&#34;italic&#34;&gt;negative&lt;/span&gt; integration tests (that should throw specific errors in PyScript). (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/874&#34;&gt;#874&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;sync-docs&#34;&gt;Re-Sync&#39;d Docs&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Prior to this release, documentation was being pushed to &lt;a href=&#34;https://docs.pyscript.net/latest&#34;&gt;https://docs.pyscript.net/latest&lt;/a&gt; &lt;span class=&#34;italic&#34;&gt;every time a change to the docs was merged into the main branch&lt;/span&gt;. This meant that the default (latest) version of the docs represented features which were present in the codebase, but had yet to be released!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, the /latest version of the docs corresponds to the most recent &lt;span class=&#34;italic&#34;&gt;released&lt;/span&gt; version of PyScript. Users looking for bleeding-edge docs can find them at &lt;a href=&#34;https://docs.pyscript.net/unstable/&#34;&gt;https://docs.pyscript.net/unstable/&lt;/a&gt;. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/977&#34;&gt;#977&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;goodbyesvelte&#34;&gt;Goodbye Svelte&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The original version of the &lt;a href=&#34;https://pyscript.net/examples/&#34;&gt;PyScript Demo Site&lt;/a&gt; and other parts of the build infrastructure and styling were built around &lt;a href=&#34;https://svelte.dev/&#34;&gt;Svelte&lt;/a&gt;. Thanks to several PRs and lots of refactoring, Svelte is now entirely gone (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/806&#34;&gt;#806&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/830&#34;&gt;#830&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/886&#34;&gt;#886&lt;/a&gt;) &lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;pyodide&#34;&gt;Pyodide&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide did have another minor release recently, &lt;span class=&#34;italic&#34;&gt;0.21.3&lt;/span&gt;. And while it wasn&#39;t anywhere near as big a change as the 0.20 to 0.21 release, a few critical fixes did make their way in. See &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#version-0-21-3&#34;&gt;the Pyodide Changelog&lt;/a&gt; for details.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34;&gt;Relative URLs for Index URLs&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;In Version 0.21.2, it was briefly impossible to use a relative URL as a the indexURL for the Pyodide package (where it looks to load the Python side of its runtime and other key support files). That&#39;s now fixed. (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3077&#34;&gt;Pyodide # 3077&lt;/a&gt;)&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;sourcemaps&#34;&gt;Source Maps Restored&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A couple PyScript users reported concerns about seeing a &#34;Source Map Unavailable&#34; error in their dev console, thinking they had done something wrong. Turns out that was due to a minor regression in Pyodide causing that source map file not to be distributed. That&#39;s since been rectified. (&lt;a href=&#34;https://github.com/pyodide/pyodide/pull/3088&#34;&gt;Pyodide #3088&lt;/a&gt;)&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;Community&#34;&gt;Community&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;discord&#34;&gt;Discord&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;PyScript Discord&lt;/a&gt; is now the official hub for realtime communication around PyScript - both internally for the maintainers and the for the community to gather, ask questions, and get help.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a really amazing shift by the staff PyScript team over at Anaconda - to bring the conversations about PyScript out to a place where the community can see them and be a part of them. Want to see the maintainers getting deep in the weeds about the Plugins API, how &lt;code&gt;[[fetch]]&lt;/code&gt; should work, or what qualifies as &#34;a Python&#34;? It&#39;s all out in the open on Discord.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Similarly, there&#39;s more an more Pyscripters hanging out in the Discord &lt;span class=&#34;font-semibold&#34;&gt;#chat&lt;/span&gt; and &lt;span class=&#34;font-semibold&#34;&gt;#pyscript-help&lt;/span&gt; channels, to help folks get unstuck or identify issues. And the &lt;span class=&#34;font-semibold&#34;&gt;#i-made-this&lt;/span&gt; and &lt;span class=&#34;font-semibold&#34;&gt;#i-found-this&lt;/span&gt; are great places to share neat things you&#39;ve made or discovered with PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Come join us!&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;community&#34;&gt;October Community Call&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The PyScript core team hosted its &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/836&#34;&gt;first Community Call&lt;/a&gt; on October 18th! (&lt;a href=&#34;https://github.com/pyscript/pyscript/issues/836&#34;&gt;#836&lt;/a&gt;) About a dozen people attended, mostly from the PyScript core team and related contributors. We unfortunately forgot to hit &#39;record&#39; on the call, but I did jot down a few notes. &lt;span class=&#34;italic&#34;&gt;(None of this should be taken as gospel or comprehesive; It&#39;s just what I, one dude, happened to scribble down.)&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;The team is going to be shooting for about 1 release per month - maybe more, maybe less, but that&#39;s a decent goal.&lt;/li&gt;
    &lt;li&gt;The lifecycle refactoring is well underway, with Antonio C leading the charge on removing global variables, streamining the loading, etc.&lt;/li&gt;
    &lt;li&gt;Similarly, the refactoring away from print() to display() being lead by Mariana was just merged yesterday!&lt;/li&gt;
    &lt;li&gt;Plugins!
        &lt;ul class=&#34;py-1 pl-8 text-justify list-disc list-outside ul-circle&#34;&gt;
            &lt;li&gt;The team is excited about streamlining and &lt;span class=&#34;italic&#34;&gt;minimizing&lt;/span&gt; the core details of what PyScript does. There&#39;s a feeling that when PyScript initializes, it should do a &#39;bare minimum&#39; to get itself running, and delegate lots of core behaviors to plugins, to allow for customizability, extensibility, and futureproofing. An emphasis on PyScript being a &#39;platform&#39; not a &#39;framework&#39;&lt;/li&gt;
            &lt;li&gt;It is very early days for this idea, but there&#39;s lots of excitement around it.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Web Workers are an awesome way to delegrate work, but there&#39;s going to be a significant amount of work integrating the message passing/isolation process with PyScript.&lt;/li&gt;
    &lt;li&gt;Cleaning up the PyScript API would be nice, in the sense of the Python objects in &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/pyscriptjs/src/python/pyscript.py#L1-L394&#34;&gt;PyScript.py&lt;/a&gt; are currently available by default when executing PyScript. Generally, there&#39;s agreement around this wanting to all be contained in a module, though there&#39;s some questions around what of that would want be &lt;code&gt;import&lt;/code&gt;ed by default into a PyScript environment.&lt;/li&gt;
        &lt;ul class=&#34;py-1 pl-8 text-justify list-disc list-outside ul-circle&#34;&gt;
            &lt;li&gt;This would allow IDE&#39;s and intellisense to have a chance at working with PyScript.&lt;/li&gt;
        &lt;/ul&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;novembercommuniyu&#34;&gt;November Community Call&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The second-even community call was held November 16th, also on Zoom, and also with a ton of great discussion and conversation. I personally missed the first three-quarters of it (&lt;span class=&#34;italic&#34;&gt;I had a 45-foot tall Christmas tree to get lit&lt;/span&gt;), but Nicholas very kindly took notes in addition to his hosting duties, which are reproduced below:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;We need to ensure we have an agenda. We&#39;ve agreed to think about this and suggest proposals here so we have a process to try by our next community call.&lt;/li&gt;
    &lt;li&gt;Given Discord does video calls, and/or there&#39;s Twitch and other services for streaming meetings that are more in or of the platform we&#39;re using for our community, we should perhaps look at those as an alternative to Zoom.&lt;/li&gt;
    &lt;li&gt;Perhaps we should record our meetings..?&lt;/li&gt;
    &lt;li&gt;PyCon US next year, what&#39;s going on. We should coordinate, compliment and amplify each others&#39; work / efforts in this area. Can tell all here please..?&lt;/li&gt;
    &lt;li&gt;Antonio - can you let Jeff know what&#39;s coming in the plugin work? (This might be helpful context: https://github.com/pyscript/pyscript/pull/938)&lt;/li&gt;
    &lt;li&gt;We had some really great in-depth technical discussion about web-assembly, DOM and JS access, GCs, blocking calls, dynamic linking and all sorts of other good stuff... oh my..!&lt;/li&gt;
    &lt;li&gt;A very positive vibe. Let&#39;s keep this up. 🎉&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;And indeed, the vibes were incredibly positive. Every maintainer on the PyScript project has gotten their hands on (in my opinion) some very neat part of PyScript in the past two months. I&#39;m very much looking forward to what this enthusiastic, generous, and considerate team does next.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;aweseompyscript&#34;&gt;Awesome PyScript&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;#maintainers&#34;&gt;Maintainer Paul Everitt&lt;/a&gt; has been hard at work assembling &lt;a href=&#34;https://github.com/pyscript/pyscript-collective/blob/main/awesome-pyscript.md&#34;&gt;Awesome PyScript&lt;/a&gt;, a curated list of awesome things relative to PyScript. If you want inspiration on what PyScript can do, this is the place to go - there&#39;s collections of videos, demos, conference talks, and more.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Have you done something awesome with PyScript? Drop the Awesome PyScript repo a comment or a Pull Request to have it included!&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;research&#34;&gt;PyScript/Research&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A new GitHub repository at &lt;a href=&#34;https://github.com/pyscript/research&#34;&gt;PyScript/Research&lt;/a&gt; has been started, as a home for overarching research, development, and proposals for PyScript. New and great ideas were popping up in issues in the main repo and being lost somewhat, so the new repo is a home for larger proposals that need need multiple files to explain, or that generate longer discussions than fit in a single issue.&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;Team&#34;&gt;The PyScript Team&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;maintainers&#34;&gt;New Maintainers&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://github.com/pauleveritt&#34;&gt;Paul Everitt&lt;/a&gt;, &lt;a href=&#34;https://github.com/FabioRosado&#34;&gt;Fabio Rosado&lt;/a&gt; and I are now community maintainers on the PyScript project. It&#39;s been tremendously exciting and satisfying working on and with PyScript the past few months - the core team over at Annaconda has been swell all around, and I&#39;m very grateful to be a part of the team in my own way. (&lt;a href=&#34;https://github.com/pyscript/pyscript/pull/824&#34;&gt;#824&lt;/a&gt; &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/825&#34;&gt;#825&lt;/a&gt; &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/898&#34;&gt;#898&lt;/a&gt;)&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-500 post-h2 anchor&#34; id=&#34;Next&#34;&gt;What&#39;s Next?&lt;/h2&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;webworkers&#34;&gt;Web Workers&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Running everything in the browser window&#39;s main thread is a bit of a bummer - anything running in Python blocks the main thread, no UI updates can happen, everything must either be async or really quick to avoid degrading the user experience.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To counteract this, there&#39;s work afoot to enable the option of running PyScript inside &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers&#34;&gt;Web Workers&lt;/a&gt;, which are designed for running scripts in the background of the page asynchronously, and passing messages to and from the main browser thread. But because they operate in a scope that doesn&#39;t have the &lt;code&gt;window&lt;/code&gt; object, DOM events and methods are not necessarily available to them. Given that DOM interaction is one of the neat possilities that running Python in the browser enables, there&#39;s lots to chew over in terms of allowing Python to run in a Web Working without degrading the DOM-access experience.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;scoped&#34;&gt;Scoped Tags&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Right now, every &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt; tag executes in the same global scope. This is convenient for all the reasons that having global scope is convenient, and awful for all the reasons it&#39;s awful. There&#39;s much discussion afoot of turning each &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tag into its own local namespace, probably with the ability to allow tags to share namespaces if desired.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is one I&#39;m personally very-much looking forward to. As I&#39;m currently working through this year&#39;s Advent of Code &lt;a href=&#34;post/advent-of-code-2022/&#34;&gt;entirely in PyScript&lt;/a&gt;, the challenge of not duplicating variable/function names across 50 different Python modules is a huge headache. That said, there are many good reasons to allow tags to share namespaces, so that code can be located close to its context. More to come here, I&#39;m sure.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;eventsproposals&#34;&gt;Events&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s a proposal (a couple proposals) swirling around over in &lt;a href=&#34;https://github.com/pyscript/research&#34;&gt;PyScript/Research&lt;/a&gt; about the syntax for events (&#34;py-[event]&#34; or &#34;onclick&#34; or otherwise). What&#39;s exciting is that there&#39;s tons of possibilities! Now the hard part will be to sort together the possibilities and potentiatials, weight up the pros and cons (run functions in Python vs. JavaScript, access to JS and/or Python objects as arguments, do we pass literal code or references to Callables, etc) and make the call.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;...At least for now. This is another area that might see two or three more rounds of evolution before it stabilizes. Or even potentially splits into more than one thing - there may be multiple independent systems being developed that can coexist. Time will tell.&lt;/p&gt;
&lt;h4 class=&#34;post-h4 md:border-b-2 md:border-gray-200&#34; id=&#34;morepythonapi&#34;&gt;PyScript&#39;s Python API&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;With the &lt;a href=&#34;#reshaping-api&#34;&gt;modularization of the Python API&lt;/a&gt;, things have gotten quite a bit more rational in the way PyScript handles importing its &#34;built-in&#34; functions and classes. But as the possibilities around functionality, plugins, web-workers, and scope grow, I wouldn&#39;t be surprised if we continue to see the PyScript Python API continue to morph and change.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So watch this space, follow the &lt;a href=&#34;https://twitter.com/pyscript_dev&#34;&gt;PyScript Twitter&lt;/a&gt; (or &lt;a href=&#34;https://twitter.com/JeffersGlass&#34;&gt;mine&lt;/a&gt;!), join the &lt;a href=&#34;https://discord.gg/Y5MFvW5hbs&#34;&gt;Discord&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;send the GitHub issues and pull requests&lt;/a&gt;, and show off the neat things you&#39;ve built with PyScript!&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Advent of Code 2022</title>
      <link>https://jeff.glass/post/advent-of-code-2022/</link>
      <pubDate>Sat, 26 Nov 2022 14:23:16 -0600</pubDate>
      
      <guid>https://jeff.glass/post/advent-of-code-2022/</guid>
      <description>&lt;style&gt;
    /* Code tags not in highlight blocks */
    code:not(.nocode):not(.language-python){
        --tw-text-opacity: 1; 
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;p class=&#34;post-p&#34;&gt;Another year, another 25 curious code challenges from &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code!&lt;/a&gt; This year, I&#39;ll be attempting to make as many solutions as possible something you can run right here in your browser window via &lt;a href=&#34;https://pyscript.net&#34;&gt;PyScript&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;w-auto pt-2 pb-4 pl-2 mr-2 -ml-2 align-top bg-gray-200&#34;&gt;
    &lt;p class=&#34;text-2xl relative-anchor&#34; id=&#34;toc&#34;&gt;Table of Contents&lt;/p&gt;
    &lt;div class=&#34;ml-8 font-semibold&#34; id=&#34;toc-contents&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;py-config class=&#34;hidden&#34;&gt;
    packages = [&#39;anytree&#39;, &#39;rich&#39;]
    terminal = false
    [[fetch]]
    files = [&#39;utils.py&#39;]
    [[fetch]]
    from = &#39;./day10&#39;
    files = [&#39;addition.py&#39;, &#39;computer.py&#39;, &#39;instruction.py&#39;, &#39;instructionparser.py&#39;, &#39;noop.py&#39;, &#39;parser_10_1.py&#39;, &#39;register.py&#39;, &#39;screen.py&#39;]
    #to_folder = &#39;day10&#39;
&lt;/py-config&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day0&#39;&gt;Day 0 - Testing the Machinery&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;In preparation for this year&#39;s AoC, I&#39;ve set up a Hugo templating system to allow me to quickly write and share each day&#39;s code. The setup will look much like this, with a brief explanation here, the code below, and an option to run live demos. The &lt;code&gt;get_input&lt;/code&gt; function handles getting input from the textarea or file upload.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day0-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day0-upload-input&#34; name=&#34;day0-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day0-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day0-run-btn&#34; py-click=&#34;main_day0()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day0-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day0/main.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day0-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day0=&#34;#day0-code&#34; class=&#34;active tab code-title&#34;&gt;day0.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day0-code&#34; data-tab-content-day0 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_input

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day0&lt;/span&gt;():
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Input given: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day0&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
         target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day0-output&amp;#34;&lt;/span&gt;,
         append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday0 = document.querySelectorAll(&#39;[data-tab-target-day0]&#39;)
    const tabContentsday0 = document.querySelectorAll(&#39;[data-tab-content-day0]&#39;)

    tabsday0.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay0
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday0.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday0.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day1_1&#39;&gt;Day 1: Calorie Counting (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;And we&#39;re off! As common for day 1 of AoC, this puzzle is is about making sure you can read input and identify line breaks, and do some very simple parsing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One way to solve this problem would be to calculate the sum of calories in every elf&#39;s pack, then find the max of those. Astute coders will notice that you don&#39;t need to actually hold all the packs in memory at once; you can calculate them one at a time and retain the highest value seen so far, which avoids undue memory usage. Python more-or-less does this for us if we use generator expressions for everything.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day1_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day1_1-upload-input&#34; name=&#34;day1_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day1_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day1_1-run-btn&#34; py-click=&#34;main_day1_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day1/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day1_1-viz-btn&#34; py-click=&#34;viz_day1_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day1_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day1/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day1_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day1_1=&#34;#day1_1-code&#34; class=&#34;active tab code-title&#34;&gt;day1_1.py&lt;/li&gt;
        &lt;li data-tab-target-day1_1=&#34;#day1_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day1_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day1_1-code&#34; data-tab-content-day1_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day1_1&lt;/span&gt;():
    elf_packs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day1_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    elf_calories &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; elf_packs)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(elf_calories)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
         target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-output&amp;#34;&lt;/span&gt;,
         append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day1_1-viz-code&#34; data-tab-content-day1_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Chart, document, Object
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;j&lt;/span&gt;(obj):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; to_js(obj, dict_converter&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Object&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fromEntries)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day1_1&lt;/span&gt;():
    asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ensure_future(viz_day1_1_coro())

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day1_1_coro&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; ctx&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-viz-canvas&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        ctx &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;canvas&amp;#34;&lt;/span&gt;)
        ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-viz-canvas&amp;#34;&lt;/span&gt;
        parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-viz&amp;#34;&lt;/span&gt;)
        parent&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(ctx)
        parent&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;48rem&amp;#34;&lt;/span&gt;
        parent&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;24rem&amp;#34;&lt;/span&gt;
        parent&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;relative&amp;#39;&lt;/span&gt;

    elf_packs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day1_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    elf_calories &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; elf_packs]
    most &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(elf_calories)
    most_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; elf_calories&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(most)

    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;max&lt;/span&gt;(elf_calories)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
         target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_1-output&amp;#34;&lt;/span&gt;,
         append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

    my_chart &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Chart&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(ctx, j({
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: j({
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Elf &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(elf_packs))],
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;datasets&amp;#34;&lt;/span&gt;: [j({
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: elf_calories,
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;stack&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;backgroundColor&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rgba(75,192,192,0.4)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; cal &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; most &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; cal &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; elf_calories ] 
            })]
        }),
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;options&amp;#34;&lt;/span&gt;: j({
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;animation&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;responsive&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;, 
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;: j({
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;legend&amp;#34;&lt;/span&gt;: j({
                    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
                }),
            }),
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;scales&amp;#34;&lt;/span&gt;: j({
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;: j({
                    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;stacked&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
                }),
                &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;: j({
                    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;beginAtZero&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
                })
            })
        })
    }))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday1_1 = document.querySelectorAll(&#39;[data-tab-target-day1_1]&#39;)
    const tabContentsday1_1 = document.querySelectorAll(&#39;[data-tab-content-day1_1]&#39;)

    tabsday1_1.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay1_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday1_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday1_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day1_2&#39;&gt;Day 1: Calorie Counting (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Another common theme with Advent of Code - part 2 on a given day will try to subvert the optimizations you may have made in part 1!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For a quick-and-dirty solution here, I&#39;ll use the &lt;code&gt;sorted&lt;/code&gt; function to convert our generator into a sorted list, then sum the last (largest) three elements. If this were a larger list of elements, we could come up with our own generator that injested elements from an Iterable one by one, and retained the largest three.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day1_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day1_2-upload-input&#34; name=&#34;day1_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day1_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day1_2-run-btn&#34; py-click=&#34;main_day1_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day1_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day1/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day1_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day1_2=&#34;#day1_2-code&#34; class=&#34;active tab code-title&#34;&gt;day1_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day1_2-code&#34; data-tab-content-day1_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day1_2&lt;/span&gt;():
    elf_packs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day1_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    elf_calories &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; elf_packs)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(elf_calories[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;:])&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
         target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day1_2-output&amp;#34;&lt;/span&gt;,
         append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday1_2 = document.querySelectorAll(&#39;[data-tab-target-day1_2]&#39;)
    const tabContentsday1_2 = document.querySelectorAll(&#39;[data-tab-content-day1_2]&#39;)

    tabsday1_2.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay1_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday1_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday1_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day2_1&#39;&gt;Day 2: Rock Paper Scissors (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Some slightly more complicated input handling today, with some slightly more involved conditional logic to accumulate a score&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s also quite useful to me to be able to run these examples from the terminal, as well as in PyScript. If you look at the end of today&#39;s code, you&#39;ll see a use of checking whether we&#39;re running in pyodide (&lt;code&gt;if &#39;pyodide&#39; in sys.modules&lt;/code&gt;), and chosing where to snag the input from based on that determination.&lt;/code&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day2_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day2_1-upload-input&#34; name=&#34;day2_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day2_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day2_1-run-btn&#34; py-click=&#34;main_day2_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day2_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day2/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day2_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day2_1=&#34;#day2_1-code&#34; class=&#34;active tab code-title&#34;&gt;day2_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day2_1-code&#34; data-tab-content-day2_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;translateLine&lt;/span&gt;(s):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;translate(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maketrans({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;}))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreFromStrategy&lt;/span&gt;(theirs, mine):
    selectedShapePoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;}
    points &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; selectedShapePoints[mine]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; theirs &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; mine: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#draw&lt;/span&gt;
        points &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt;  ((theirs, mine) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt;
        (theirs, mine) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt;
        (theirs, mine) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;)): &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#win&lt;/span&gt;
        points &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; points

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreFromInput&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(scoreFromStrategy(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;translateLine(line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day2_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day2_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day2_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday2_1 = document.querySelectorAll(&#39;[data-tab-target-day2_1]&#39;)
    const tabContentsday2_1 = document.querySelectorAll(&#39;[data-tab-content-day2_1]&#39;)

    tabsday2_1.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay2_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday2_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday2_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day2_2&#39;&gt;Day 2: Rock Paper Scissors (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I fully admit to my solution here trying to be way too clever. The speediest way to solve this problem (both in execution time and in writing) would almost certainly be to create a looking table of the 9 possible input lines with their resultant scores, and just loop over the input and sum according to those scores.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That said, this is a good chance to start stirring the brain cells on another common theme in Advnent of Code challenges - using one part of the input to determine how to interpret another part of the input.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day2_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day2_2-upload-input&#34; name=&#34;day2_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day2_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day2_2-run-btn&#34; py-click=&#34;main_day2_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day2_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day2/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day2_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day2_2=&#34;#day2_2-code&#34; class=&#34;active tab code-title&#34;&gt;day2_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day2_2-code&#34; data-tab-content-day2_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; cycle
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;translateLine&lt;/span&gt;(s):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;translate(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;maketrans({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;}))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreFromStrategy&lt;/span&gt;(theirs, result):
    theirsIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(theirs) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# X,Y,Z =&amp;gt; 0,1,2&lt;/span&gt;
    relativeIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Offset by whether we lose, win, or draw&lt;/span&gt;
    selectedShape &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;][(theirsIndex &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; relativeIndex[result]) &lt;span style=&#34;color:#555&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Find our choice&lt;/span&gt;
    selectedShapePoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Points for our choice&lt;/span&gt;

    resultPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;}
    score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; selectedShapePoints[selectedShape] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; resultPoints[result]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; score 

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreFromInput&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(scoreFromStrategy(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;translateLine(line)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day2_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day2_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day2_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday2_2 = document.querySelectorAll(&#39;[data-tab-target-day2_2]&#39;)
    const tabContentsday2_2 = document.querySelectorAll(&#39;[data-tab-content-day2_2]&#39;)

    tabsday2_2.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay2_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday2_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday2_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day3_1&#39;&gt;Day 3: Rucksack Reorganization (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;This is one of those neat days where one can use a neat feature of Python - set operations - to make finding common elements between two iterables fast and easy.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;On a whim, I &lt;a href=&#34;https://youtu.be/VELprb8t9zg&#34;&gt;hopped on a livestream&lt;/a&gt; and whipped up a visualization of this part of the solution, which you can check out if you run the live examples on this page.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day3_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day3_1-upload-input&#34; name=&#34;day3_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day3_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day3_1-run-btn&#34; py-click=&#34;main_day3_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day3/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day3_1-viz-btn&#34; py-click=&#34;viz_day3_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day3_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day3/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day3_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day3_1=&#34;#day3_1-code&#34; class=&#34;active tab code-title&#34;&gt;day3_1.py&lt;/li&gt;
        &lt;li data-tab-target-day3_1=&#34;#day3_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day3_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day3_1-code&#34; data-tab-content-day3_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

charValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase)} &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;\
            {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_uppercase)}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prioritySum&lt;/span&gt;(data):
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        midpoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(line[:midpoint])
        second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(line[midpoint:])
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; charValue[(first &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; second)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day3_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day3_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;prioritySum(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; prioritySum(data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;result&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day3_1-viz-code&#34; data-tab-content-day3_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

charValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase)} &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;\
            {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_uppercase)}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prioritySum&lt;/span&gt;(data):
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        midpoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(line[:midpoint])
        second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(line[midpoint:])
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; charValue[(first &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; second)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;visualizeProcessing&lt;/span&gt;(data, tbody):    
    tbody&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fontFamily &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;monospace&amp;#39;&lt;/span&gt;
    tbody&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;unformatted-table&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;tr&amp;#39;&lt;/span&gt;)
        scoreElement &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;)
        firstElement &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;)
        secondElement &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#styling&lt;/span&gt;
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bg-gray-900&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-gray-300&amp;#34;&lt;/span&gt;)
        scoreElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;paddingRight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2rem&amp;#34;&lt;/span&gt;
        firstElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;textAlign &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;
        firstElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;paddingRight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0.5rem&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Actually add the content&lt;/span&gt;
        midpoint &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line[:midpoint]
        second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line[midpoint:]
        commonChar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(first) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(second))&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
        score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; charValue[commonChar]

        first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; first&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;replace(commonChar, &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span style=&amp;#34;text-shadow: 0 0 5px #ffffff; color: rgb(255, 255, 255)&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;commonChar&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;)
        second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; second&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;replace(commonChar, &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span style=&amp;#34;text-shadow: 0 0 5px #ffffff; color: rgb(255, 255, 255)&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;commonChar&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Format and insert text&lt;/span&gt;
        firstElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;span&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; first &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;/span&amp;gt;&amp;#34;&lt;/span&gt;
        secondElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;span&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; second &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;/span&amp;gt;&amp;#34;&lt;/span&gt;
        scoreElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;commonChar&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;score&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#34;&lt;/span&gt;

        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(scoreElement)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(firstElement)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(secondElement)
        tbody&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(row)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#grayRows = js.document.querySelectorAll(&amp;#34;tbody tr:nth-child(2n-1)&amp;#34;)&lt;/span&gt;
    grayRows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;querySelectorAll(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;tr&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; grayRows:
        js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;removeProperty(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;background-color&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;setupTable&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    table &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;table&amp;#39;&lt;/span&gt;)
    table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;)
    tbody &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;tbody&amp;#39;&lt;/span&gt;)
    table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(tbody)
    vizelem &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_1-viz&amp;#34;&lt;/span&gt;)
    vizelem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;)
    vizelem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;h-76&amp;#34;&lt;/span&gt;)
    vizelem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-scroll&amp;#34;&lt;/span&gt;)
    vizelem&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(table)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; tbody

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day3_1&lt;/span&gt;():
        tbody &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; setupTable()
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day3_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        visualizeProcessing(data, tbody)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;prioritySum(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; prioritySum(data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;result&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday3_1 = document.querySelectorAll(&#39;[data-tab-target-day3_1]&#39;)
    const tabContentsday3_1 = document.querySelectorAll(&#39;[data-tab-content-day3_1]&#39;)

    tabsday3_1.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay3_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday3_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday3_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day3_2&#39;&gt;Day 3: Rucksack Reorganization (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Similar to part 1, part 2 is much easier if you use your chosen language&#39;s set operations to quickly narrow down the given elements to only the ones common between each trio of elves. I suppose the &#34;gotcha&#34; in this part is meant to catch out anyone who implemented a nested-for-loop, check-each-element-one-by-one solution to part 1.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day3_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day3_2-upload-input&#34; name=&#34;day3_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day3_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day3_2-run-btn&#34; py-click=&#34;main_day3_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day3_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day3/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day3_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day3_2=&#34;#day3_2-code&#34; class=&#34;active tab code-title&#34;&gt;day3_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day3_2-code&#34; data-tab-content-day3_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Collection

charValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase)} &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;\
            {s: index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_uppercase)}
        
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;scoreBy3&lt;/span&gt;(data):
    &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, a &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data[::&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;]):
        b &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
        c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]
        common &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(a) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(b) &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(c))
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(common) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        common &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; common&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()

        score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; charValue[common]
        &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; score
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day3_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day3_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;scoreBy3(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day3_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; scoreBy3(data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;result&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday3_2 = document.querySelectorAll(&#39;[data-tab-target-day3_2]&#39;)
    const tabContentsday3_2 = document.querySelectorAll(&#39;[data-tab-content-day3_2]&#39;)

    tabsday3_2.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay3_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday3_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday3_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day4_1&#39;&gt;Day 4: Camp Cleanup (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Some year, somewhere, I shant be tricked by forgetting to convert input strings to integers.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is not that year apparently. The provided example input works if you only compair the inputs alphanumerically, since it only uses single-digit numbers, but the real input only yields the correct solution if you remember to convert the inputs to integers.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day4_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day4_1-upload-input&#34; name=&#34;day4_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day4_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day4_1-run-btn&#34; py-click=&#34;main_day4_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day4_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day4/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day4_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day4_1=&#34;#day4_1-code&#34; class=&#34;active tab code-title&#34;&gt;day4_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day4_1-code&#34; data-tab-content-day4_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;fullyContains&lt;/span&gt;(a: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;] , b: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solutionFromInput&lt;/span&gt;(data):
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ((p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;), p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (((&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])), (&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]))) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    matches &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (fullyContains(pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; fullyContains(pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;],pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; matches)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day4_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day4_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solutionFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day4_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solutionFromInput(data))
       &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday4_1 = document.querySelectorAll(&#39;[data-tab-target-day4_1]&#39;)
    const tabContentsday4_1 = document.querySelectorAll(&#39;[data-tab-content-day4_1]&#39;)

    tabsday4_1.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay4_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday4_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday4_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day4_2&#39;&gt;Day 4: Camp Cleanup (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I&#39;m certain there&#39;s a more clever way to determine whether two ranges overlap; I&#39;ve used the brute-force method to check if either of the endpoints of each pair lies within (or equals) the endpoints of the other pair. I have a feeling, from the symmetry of the boolean logic, that it could be simplified somehow, but this is functional.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day4_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day4_2-upload-input&#34; name=&#34;day4_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day4_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day4_2-run-btn&#34; py-click=&#34;main_day4_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day4_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day4/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day4_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day4_2=&#34;#day4_2-code&#34; class=&#34;active tab code-title&#34;&gt;day4_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day4_2-code&#34; data-tab-content-day4_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;overlaps&lt;/span&gt;(a: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;] , b: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; \
           (b[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (b[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; a[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; b[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solutionFromInput&lt;/span&gt;(data):
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data)
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ((p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;), p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    pairs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (((&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])), (&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]), &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(p[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]))) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    matches &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (overlaps(pair[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;], pair[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; pairs)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; m &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; matches)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day4_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day4_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(data)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solutionFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day4_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solutionFromInput(data))
       &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday4_2 = document.querySelectorAll(&#39;[data-tab-target-day4_2]&#39;)
    const tabContentsday4_2 = document.querySelectorAll(&#39;[data-tab-content-day4_2]&#39;)

    tabsday4_2.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay4_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday4_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday4_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day5_1&#39;&gt;Day 5: Supply Stacks (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;As I&#39;ve experienced in previous years, the process of identifying a strategy or algorithm to solve a problem, and the creating the data structure for that algorithm, go hand in hand.&lt;/p&gt;&lt;p class=&#34;post-p&#34;&gt;In today&#39;s case, the fact that the input is presented row-by-row, but the data is relevant column-by-column, means that a cerain amount of input processessing is necessary to make the data useful. But once it is, the solution is relatively straightfoward.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day5_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day5_1-upload-input&#34; name=&#34;day5_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day5_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day5_1-run-btn&#34; py-click=&#34;main_day5_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day5/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day5_1-viz-btn&#34; py-click=&#34;viz_day5_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day5_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day5/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day5_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day5_1=&#34;#day5_1-code&#34; class=&#34;active tab code-title&#34;&gt;day5_1.py&lt;/li&gt;
        &lt;li data-tab-target-day5_1=&#34;#day5_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day5_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day5_1-code&#34; data-tab-content-day5_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewType

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# The &amp;#39;yard&amp;#39; is the collection of all the stacks of crates&lt;/span&gt;
yardType &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; NewType(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;yardType&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(NamedTuple):
    quantity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    from_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    to_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#(&amp;#34;Instruction&amp;#34;, (&amp;#39;quantity&amp;#39;, &amp;#39;from_stack&amp;#39;, &amp;#39;to_stack&amp;#39;))&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solutionFromInput&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    stacks, instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parseInput(data)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructions:
        stacks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; operateOn(stacks, ins)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; topCrates(stacks)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parseInput&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[yardType, &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[Instruction]]:
    firstBlankLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
    cratePositions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[:firstBlankLine]
    cratePositions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reverse() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#ordered bottom to top&lt;/span&gt;
    instructionLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[firstBlankLine&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Create crate data struction&lt;/span&gt;
    crateNameLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#get crate labels from line&lt;/span&gt;
    crates &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {name: [] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; name &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crateNameLine&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#create dicts per line&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, crateName &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;::&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;]):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; crateName &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
                crates[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(crateNameLine[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crateName) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Add crate to list&lt;/span&gt;
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Parse instructions&lt;/span&gt;
    instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructionLines:
        match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;move (?P&amp;lt;num&amp;gt;\d+) from (?P&amp;lt;from_stack&amp;gt;\d+) to (?P&amp;lt;to_stack&amp;gt;\d+)&amp;#39;&lt;/span&gt;, ins)
        num, from_stack, to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)

        instructions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Instruction(
                quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;)),
                from_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;),
                to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)
            ))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (crates, instructions)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;operateOn&lt;/span&gt;(crates: yardType, ins: Instruction) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; yardType:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#printCrates(crates)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity):
        crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop())
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; crates

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;topCrates&lt;/span&gt;(crates: yardType):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;values()])
    

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day5_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day5_1&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solutionFromInput(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;inputtest.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solutionFromInput(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day5_1-viz-code&#34; data-tab-content-day5_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;153
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;154
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;155
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;156
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;157
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;158
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;159
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;160
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;161
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;162
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;163
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;164
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;165
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;166
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;167
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;168
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;169
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;170
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;171
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;172
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;173
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;174
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;175
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;176
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;177
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;178
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;179
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;180
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;181
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;182
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;183
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;184
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;185
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;186
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;187
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;188
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;189
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;190
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;191
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;192
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;193
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;194
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;195
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;196
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;197
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;198
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;199
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;200
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;201
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;202
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;203
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;204
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;205
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;206
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;207
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;208
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;209
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;210
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;211
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;212
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;213
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;214
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;215
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;216
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;217
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;218
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;219
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;220
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;221
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;222
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;223
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;224
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;225
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;226
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;227
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;228
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;229
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;230
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;231
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;232
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;233
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;234
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;235
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;236
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;237
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;238
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;239
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;240
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;241
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;242
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;243
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;244
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;245
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;246
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;247
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;248
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;249
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;250
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;251
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;252
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;253
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;254
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;255
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;256
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day5_1&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;functools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; partial
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; anime, Object
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js, create_proxy
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewType

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# The &amp;#39;yard&amp;#39; is the collection of all the stacks of crates&lt;/span&gt;
    yardType &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; NewType(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;yardType&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;])

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(NamedTuple):
        quantity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
        from_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
        to_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;j&lt;/span&gt;(obj):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; to_js(obj, dict_converter&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Object&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fromEntries)

    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day5_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)        

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parseInput&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[yardType, &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[Instruction]]:
        firstBlankLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        cratePositions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[:firstBlankLine]
        cratePositions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reverse() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#ordered bottorstBlankLine = data.index(&amp;#34;&amp;#34;)&lt;/span&gt;
        cratePositions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[:firstBlankLine]
        cratePositions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reverse() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#ordered bottom to top&lt;/span&gt;
        instructionLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[firstBlankLine&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Create crate data struction&lt;/span&gt;
        crateNameLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#get crate labels from line&lt;/span&gt;
        crates &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {name: [] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; name &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crateNameLine&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#create dicts per line&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, crateName &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;::&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;]):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; crateName &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
                    crates[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(crateNameLine[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crateName) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Add crate to list&lt;/span&gt;
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Parse instructions&lt;/span&gt;
        instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructionLines:
            match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;move (?P&amp;lt;num&amp;gt;\d+) from (?P&amp;lt;from_stack&amp;gt;\d+) to (?P&amp;lt;to_stack&amp;gt;\d+)&amp;#39;&lt;/span&gt;, ins)
            num, from_stack, to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)

            instructions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Instruction(
                    quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;)),
                    from_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;),
                    to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)
                ))
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (crates, instructions)

    yard, instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parseInput(data)

    &lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Crate&lt;/span&gt;():
        label:&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
        element:&lt;span style=&#34;color:#366&#34;&gt;object&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __str__(self):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;label

    &lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Stack&lt;/span&gt;():
        crates: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;
        x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

    overall &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1-viz&amp;#34;&lt;/span&gt;)
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;margin &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;50px 50px 50px 50px&amp;#34;&lt;/span&gt;
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;relative&amp;#34;&lt;/span&gt;
    div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(div)

    divHeight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;800&lt;/span&gt;
    divWidth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;600&lt;/span&gt;

    startColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Aquamarine&amp;#34;&lt;/span&gt;
    endColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;

    div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divHeight&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
    div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divWidth&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
    div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#eee&amp;#34;&lt;/span&gt;

    floorY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; divHeight &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;

    floor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;floor&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#777&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;10px&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divWidth&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divHeight&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;floorY&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
    floor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0px&amp;#34;&lt;/span&gt;
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(floor)

    textOutput &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;)
    textOutput&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1_text_output&amp;#34;&lt;/span&gt;
    overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;insertBefore(textOutput, overall&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;nextSibling)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#&amp;lt;button onclick=&amp;#34;startAnimation()&amp;#34;&amp;gt;Play&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#js.startAnimation = myTimeline.play&lt;/span&gt;
    playButton &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;)
    playButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Play&amp;#34;&lt;/span&gt;
    playButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;padding &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.5rem 1rem .5rem 1rem&amp;#34;&lt;/span&gt;
    playButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;border &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2px solid #2c2e34&amp;#34;&lt;/span&gt;
    playButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#bbf7d0&amp;#34;&lt;/span&gt;
    

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#&amp;lt;button onclick=&amp;#34;stopAnimation()&amp;#34;&amp;gt;Pause&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#js.stopAnimation = myTimeline.pause&lt;/span&gt;
    pauseButton &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;)
    pauseButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Pause&amp;#34;&lt;/span&gt;
    pauseButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;padding &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.5rem 1rem .5rem 1rem&amp;#34;&lt;/span&gt;
    pauseButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;border &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2px solid #2c2e34&amp;#34;&lt;/span&gt;
    pauseButton&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#fef08a&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#&amp;lt;input type=&amp;#34;range&amp;#34; id=&amp;#34;seekbar&amp;#34; min=&amp;#34;0&amp;#34; max=&amp;#34;100&amp;#34; value=&amp;#34;0&amp;#34; oninput=&amp;#34;myTimeline.pause();myTimeline.seek(myTimeline.duration * (this.value/100))&amp;#34; style=&amp;#34;width: 100%&amp;#34;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
    seekbar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;)
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;type &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;range&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;seekbar&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;min &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;max &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
    seekbar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;400px&amp;#34;&lt;/span&gt;

    controlHolder &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;)
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_2_controls&amp;#34;&lt;/span&gt;
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(playButton)
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(pauseButton)
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(seekbar)
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute&amp;#34;&lt;/span&gt;
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;10px&amp;#34;&lt;/span&gt;
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;20px&amp;#34;&lt;/span&gt;
    controlHolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;100%&amp;#34;&lt;/span&gt;
    div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(controlHolder)

    crateSize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;25&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;indexToBottom&lt;/span&gt;(index):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; divHeight &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; floorY &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (crateSize&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; index

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;makeDisplay&lt;/span&gt;(yard):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(yard):
            newStackList &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
            leftEdge &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (crateSize &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;25&lt;/span&gt;

            stackLabel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;crateSize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;crateSize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;leftEdge&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;top &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;floorY &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;textAlign &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;
            label &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;)
            label&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stack
            stackLabel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(label)
            div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(stackLabel)

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stackLevel, crate &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(yard[stack]):
                bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; indexToBottom(stackLevel)
                container &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;)
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; startColor
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;crateSize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;border &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2px solid #2c2e34&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;bottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;bottom&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;leftEdge&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;textAlign &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;

                label &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;)
                label&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(crate)
                container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(label)

                newStackList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Crate(crate, container))
                div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(container)
            yard[stack] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Stack(crates&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newStackList, x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; leftEdge)

    makeDisplay(yard)

    myTimeline &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; anime&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;timeline(j({
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;duration&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;500&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;easing&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;easeInOutSine&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;autoplay&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
    }))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;seekbar_input&lt;/span&gt;(evt):
        myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pause()
        myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;seek(myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;duration &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(evt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;srcElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;))

    add_event_listener(seekbar, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;, seekbar_input)
    add_event_listener(playButton, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; _: myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;play())
    add_event_listener(pauseButton, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; _: myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pause())

    progressElement &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;seekbar&amp;#34;&lt;/span&gt;)
    prevProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;updateSeekbar&lt;/span&gt;(yard, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nonlocal&lt;/span&gt; prevProgress
        progressElement&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;progress
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;progress &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; yard:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates):
                    topCrate &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
                    topCrate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; endColor
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; prevProgress &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; yard:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; crate &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates:
                    crate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; startColor

        prevProgress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; myTimeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;progress


    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;displayOnMove&lt;/span&gt;(from_stack, to_stack, quantity, instructionCount, instructionIndex, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Instruction &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;instructionIndex&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;: Move &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;quantity&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; crate&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; quantity &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; from stack &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;from_stack&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; to stack &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;to_stack&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;. &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;instructionCount&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; of &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;quantity&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; complete&amp;#34;&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1_text_output&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doFinalOutput&lt;/span&gt;(yard, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        solution &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; yard:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates):
                topCrate &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; yard[stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
                topCrate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;backgroundColor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;
                solution &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; topCrate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;label
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;SOLUTION: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_1_text_output&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;moveOneCrate&lt;/span&gt;(yard: yardType, from_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, to_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, quantity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, timeline, instructionCount, instructionIndex, final):
        js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;moveOneCrate&amp;#34;&lt;/span&gt;)
        crate &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; yard[from_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
        yard[to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crate)
        newBottom &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; indexToBottom(yard[to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(crate))
        timeline&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(j({
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;targets&amp;#34;&lt;/span&gt;: crate&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element,
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;keyframes&amp;#34;&lt;/span&gt;: [
                j({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bottom&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;divHeight &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; crateSize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;}),
                j({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;: yard[to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x}),
                j({&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bottom&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;newBottom&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;})
            ],
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;begin&amp;#34;&lt;/span&gt;: partial(displayOnMove, from_stack, to_stack, quantity, instructionCount, instructionIndex),
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt;: partial(updateSeekbar, yard),
            &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;complete&amp;#34;&lt;/span&gt;: partial(doFinalOutput, yard) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; final &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; _: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)
        }))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;operateOn&lt;/span&gt;(yard: yardType, ins: Instruction, instructionIndex: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, final:&lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; yard:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; instructionCount &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity):
            moveOneCrate(yard, ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack, ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;to_stack, ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity, myTimeline, instructionCount, instructionIndex, final &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; final &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; instructionCount &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doAllInstructions&lt;/span&gt;(instructions):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; instructionIndex, ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(instructions):
            operateOn(yard, ins, instructionIndex, final &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; instructionIndex &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(instructions) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

    doAllInstructions(instructions)

    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;window)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday5_1 = document.querySelectorAll(&#39;[data-tab-target-day5_1]&#39;)
    const tabContentsday5_1 = document.querySelectorAll(&#39;[data-tab-content-day5_1]&#39;)

    tabsday5_1.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay5_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday5_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday5_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day5_2&#39;&gt;Day 5: Supply Stacks (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I was wondering when I would get bit by one of PyScript&#39;s core limitations (currently) - all &lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt; tags are executed in the same global namespace. Meaning if you have two functions with the same name in two separate files/script tags, any objects whos names overlap previous tags &lt;span class=&#34;italic&#34;&gt;overwrite those objects&lt;/span&gt;. Hence names like &lt;code&gt;operateOn5_2()&lt;/code&gt; to ensure the functions are unique to this day/part.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day5_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day5_2-upload-input&#34; name=&#34;day5_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day5_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day5_2-run-btn&#34; py-click=&#34;main_day5_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day5_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day5/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day5_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day5_2=&#34;#day5_2-code&#34; class=&#34;active tab code-title&#34;&gt;day5_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day5_2-code&#34; data-tab-content-day5_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewType

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# The &amp;#39;yard&amp;#39; is the collection of all the stacks of crates&lt;/span&gt;
yardType &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; NewType(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;yardType&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;])

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(NamedTuple):
    quantity: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    from_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;
    to_stack: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solutionWithClumpedStacks&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    stacks, instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parseInput5_2(data)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructions:
        stacks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; operateOn5_2(stacks, ins)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; topCrates5_2(stacks)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parseInput5_2&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[yardType, &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[Instruction]]:
    firstBlankLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
    cratePositions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[:firstBlankLine]
    cratePositions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reverse() &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#ordered bottom to top&lt;/span&gt;
    instructionLines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[firstBlankLine&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Create crate data struction&lt;/span&gt;
    crateNameLine &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#get crate labels from line&lt;/span&gt;
    crates &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {name: [] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; name &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crateNameLine&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()} &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#create dicts per line&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; cratePositions[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, crateName &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;::&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;]):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; crateName &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:
                crates[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(crateNameLine[index&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(crateName) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Add crate to list&lt;/span&gt;
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Parse instructions&lt;/span&gt;
    instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; instructionLines:
        match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;move (?P&amp;lt;num&amp;gt;\d+) from (?P&amp;lt;from_stack&amp;gt;\d+) to (?P&amp;lt;to_stack&amp;gt;\d+)&amp;#39;&lt;/span&gt;, ins)
        num, from_stack, to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;), match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)

        instructions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Instruction(
                quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;num&amp;#39;&lt;/span&gt;)),
                from_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;from_stack&amp;#39;&lt;/span&gt;),
                to_stack &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;to_stack&amp;#39;&lt;/span&gt;)
            ))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (crates, instructions)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;operateOn5_2&lt;/span&gt;(crates: yardType, ins: Instruction) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; yardType:
    to_move &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack][&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity:]
    crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_stack][:&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;quantity]
    crates[ins&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;to_stack]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;extend(to_move)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; crates

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;topCrates5_2&lt;/span&gt;(crates: yardType):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([stack&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; stack &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; crates&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;values()])
    

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day5_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day5_2&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solutionWithClumpedStacks(data)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day5_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solutionWithClumpedStacks(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday5_2 = document.querySelectorAll(&#39;[data-tab-target-day5_2]&#39;)
    const tabContentsday5_2 = document.querySelectorAll(&#39;[data-tab-content-day5_2]&#39;)

    tabsday5_2.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay5_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday5_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday5_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day6_1&#39;&gt;Day 6: Tuning Trouble (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Part of the fun of Advent of Code is trying to guess what things in Part 1 of each day are going to get turned topsy-turvy in Part 2. Today&#39;s question, involving finding when elements in a sliding window are unique, lead me to a few guesses. Would there be some other criteria for determining success? Only one duplicated letter perhaps? Perhaps the window would need to ignore only its center element, or the window would jump by twos, or something.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day6_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day6_1-upload-input&#34; name=&#34;day6_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day6_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day6_1-run-btn&#34; py-click=&#34;main_day6_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day6_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day6/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day6_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day6_1=&#34;#day6_1-code&#34; class=&#34;active tab code-title&#34;&gt;day6_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day6_1-code&#34; data-tab-content-day6_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deque
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;findIndexAllDifferent&lt;/span&gt;(input_stream, n):
    window &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; deque(maxlen&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;n)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, token &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(input_stream):
        window&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(token)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(window)) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; n:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day6_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day6_1&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;findIndexAllDifferent(data, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day6_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(findIndexAllDifferent(data, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;))
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday6_1 = document.querySelectorAll(&#39;[data-tab-target-day6_1]&#39;)
    const tabContentsday6_1 = document.querySelectorAll(&#39;[data-tab-content-day6_1]&#39;)

    tabsday6_1.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay6_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday6_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday6_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day6_2&#39;&gt;Day 6: Tuning Trouble (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Thankfully, it turned out part 2 made the simplest possible adjustment - the length of the window. Hence, the code for the two parts looks almost identical. I suppose the objective was to catch out anyone who &#34;manually&#34; checked each element of the sliding window for uniqueness against the other three.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day6_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day6_2-upload-input&#34; name=&#34;day6_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day6_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day6_2-run-btn&#34; py-click=&#34;main_day6_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day6_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day6/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day6_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day6_2=&#34;#day6_2-code&#34; class=&#34;active tab code-title&#34;&gt;day6_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day6_2-code&#34; data-tab-content-day6_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deque
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;findIndexAllDifferent_6_2&lt;/span&gt;(input_stream, n):
    window &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; deque(maxlen&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;n)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, token &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(input_stream):
        window&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(token)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(window)) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; n:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day6_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day6_2&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;findIndexAllDifferent_6_2(data, &lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day6_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(findIndexAllDifferent_6_2(data, &lt;span style=&#34;color:#f60&#34;&gt;14&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday6_2 = document.querySelectorAll(&#39;[data-tab-target-day6_2]&#39;)
    const tabContentsday6_2 = document.querySelectorAll(&#39;[data-tab-content-day6_2]&#39;)

    tabsday6_2.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay6_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday6_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday6_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day7_1&#39;&gt;Day 7: No Space Left on Device (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;When running into a challenge like today&#39;s, the question is always: &#34;Should I implement my own data structure, or make use of a built-in/pre-existing module?&#34; Today I opted for the later, and discovered the &lt;a href=&#34;https://github.com/c0fec0de/anytree&#34;&gt;anytree package&lt;/a&gt; for the first time. It has all the functionality I could way - children/parent tracking, arbitrary attributes on Nodes, provision for walking/tranversing/searching the tree, importing/exporting dictionaries/JSON, symlinks... I suspect I&#39;m going to get a lot of use out of this.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day7_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day7_1-upload-input&#34; name=&#34;day7_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day7_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day7_1-run-btn&#34; py-click=&#34;main_day7_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day7/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day7_1-viz-btn&#34; py-click=&#34;viz_day7_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day7_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day7/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day7_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day7_1=&#34;#day7_1-code&#34; class=&#34;active tab code-title&#34;&gt;day7_1.py&lt;/li&gt;
        &lt;li data-tab-target-day7_1=&#34;#day7_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day7_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day7_1-code&#34; data-tab-content-day7_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Node, RenderTree, PreOrderIter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.search&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; findall

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_7_1&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (root_cmd &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$ cd /&amp;#34;&lt;/span&gt;:
        root &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;First command something other than cd / : &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;root_cmd&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; processLine_7_1(line, root, currentNode)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# After constructing tree, pre-calculate folder sizes.&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# A bit inefficient, but fine&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; PreOrderIter(root):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFolder_7_1(node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;):
            node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; containedFileSize_7_1(node)

    small_folders &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; findall(root, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(n, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100_000&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; small_folders)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processLine_7_1&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, rootNode: Node, currentNode: Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Processes one line of input; mutates the tree pointed to by rootNode,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    returns the new currentNode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode
    match line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split():
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out to root&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rootNode
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out one level&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move to directory {dir}&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [child &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#list files&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;, dirname]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New directory {dirname}&lt;/span&gt;
            newDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dirname, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode)
        case [size, filename]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New file {filename}&lt;/span&gt;
            newFile &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;filename, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;currentNode, size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(size))
        case _:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow unmatched??&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nextCurrentNode

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printTree_7_1&lt;/span&gt;(root:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFile_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFolder_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;containedFileSize_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_1(node):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(containedFileSize_7_1(n) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day7_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day7_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_7_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solution_7_1(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day7_1-viz-code&#34; data-tab-content-day7_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;contextlib&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; redirect_stdout
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;io&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; StringIO
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Node, RenderTree, PreOrderIter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.search&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; findall
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.render&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; ContStyle

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day7_1&lt;/span&gt;():    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;local_main&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; 

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (root_cmd &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$ cd /&amp;#34;&lt;/span&gt;:
            root &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;First command something other than cd / : &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;root_cmd&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
            currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; processLine_7_1(line, root, currentNode)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# After constructing tree, pre-calculate folder sizes.&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# A bit inefficient, but fine&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; PreOrderIter(root):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFolder_7_1(node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;):
                node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; containedFileSize_7_1(node)

        small_folders &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; findall(root, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(n, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100_000&lt;/span&gt;)
        display(&lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; small_folders),
                target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-output&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
        

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (pre&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-pre&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Make pre tag for output&lt;/span&gt;
            pre &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pre&amp;#34;&lt;/span&gt;)
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-pre&amp;#34;&lt;/span&gt;
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bg-gray-900&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-gray-300&amp;#34;&lt;/span&gt;)
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lineHeight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.1&amp;#39;&lt;/span&gt;
            container &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-viz&amp;#34;&lt;/span&gt;)
            container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;max-h-124&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;overflow-y-auto&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;my-4&amp;#39;&lt;/span&gt;)
            container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(pre)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#clear existing output&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root, style&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;ContStyle()):
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#if node in small_folders:&lt;/span&gt;
            nameSegment &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;): displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder size:&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder_size&amp;#39;&lt;/span&gt;): displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder size:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

            contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;nameSegment&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;60&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;displaySize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Highlight solution lines&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100_000&lt;/span&gt;:
                contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span style=&amp;#34;text-shadow: 0 0 8px #ffffff; color: rgb(255, 255, 255)&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
            
            display(HTML(contents),
                    target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_1-pre&amp;#34;&lt;/span&gt;)
      

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processLine_7_1&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, rootNode: Node, currentNode: Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Processes one line of input; mutates the tree pointed to by rootNode,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        returns the new currentNode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode
        match line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split():
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out to root&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rootNode
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out one level&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move to directory {dir}&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [child &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#list files&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;, dirname]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New directory {dirname}&lt;/span&gt;
                newDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dirname, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode)
            case [size, filename]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New file {filename}&lt;/span&gt;
                newFile &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;filename, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;currentNode, size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(size))
            case _:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow unmatched??&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nextCurrentNode

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printTree_7_1&lt;/span&gt;(root:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root):
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFile_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFolder_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;containedFileSize_7_1&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_1(node):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(containedFileSize_7_1(n) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children)

    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day7_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    local_main(data)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday7_1 = document.querySelectorAll(&#39;[data-tab-target-day7_1]&#39;)
    const tabContentsday7_1 = document.querySelectorAll(&#39;[data-tab-content-day7_1]&#39;)

    tabsday7_1.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay7_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday7_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday7_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day7_2&#39;&gt;Day 7: No Space Left on Device (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Another part-2 problem which requires taking the data discovered in part 1, sorting it (by some key), and finding the smallest (largest) value, possibly beyond some threshhold. Using &lt;code&gt;anytree.search.findall&lt;/code&gt; makes it easy to find the folders, and &lt;code&gt;sorted(key = lamabda node: node.folder_size)&lt;/code&gt; allows us to sort by the relevant key.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day7_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day7_2-upload-input&#34; name=&#34;day7_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day7_2-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day7_2-run-btn&#34; py-click=&#34;main_day7_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day7/viz_2.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day7_2-viz-btn&#34; py-click=&#34;viz_day7_2()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day7_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day7/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day7_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day7_2=&#34;#day7_2-code&#34; class=&#34;active tab code-title&#34;&gt;day7_2.py&lt;/li&gt;
        &lt;li data-tab-target-day7_2=&#34;#day7_2-viz-code&#34; class=&#34;tab code-title&#34;&gt;day7_2-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day7_2-code&#34; data-tab-content-day7_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;90
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Node, RenderTree, PreOrderIter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.search&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; findall

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_7_2&lt;/span&gt;(data):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (root_cmd &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$ cd /&amp;#34;&lt;/span&gt;:
        root &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;First command something other than cd / : &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;root_cmd&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; processLine_7_2(line, root, currentNode)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; PreOrderIter(root):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFolder_7_2(node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;):
            node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; containedFileSize_7_2(node)

    size_used &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size
    total_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;70_000_000&lt;/span&gt;
    size_available &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; total_size &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; size_used

    size_needed_for_update &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;30_000_000&lt;/span&gt;
    minimum_delete &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; size_needed_for_update &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; size_available

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Sort folders by size, find the smallest one larger than the needed size&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; folder &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(findall(root, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(n, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;)), key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; folder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; minimum_delete:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; folder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processLine_7_2&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, rootNode: Node, currentNode: Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Processes one line of input; mutates the tree pointed to by rootNode,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    returns the new currentNode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode
    match line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split():
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out to root&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rootNode
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out one level&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move to directory {dir}&lt;/span&gt;
            nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [child &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# List Files&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
        case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;, dirname]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New directory {dirname}&lt;/span&gt;
            newDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dirname, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode)
        case [size, filename]:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New file {filename}&lt;/span&gt;
            newFile &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;filename, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;currentNode, size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(size))
        case _:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow unmatched??&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Somehow unmatched??&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nextCurrentNode

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printTree_7_2&lt;/span&gt;(root:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFile_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFolder_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;containedFileSize_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_2(node):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(containedFileSize_7_2(n) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day7_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day7_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_7_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solution_7_2(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day7_2-viz-code&#34; data-tab-content-day7_2 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;contextlib&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; redirect_stdout
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;io&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; StringIO
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Node, RenderTree, PreOrderIter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.search&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; findall
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;anytree.render&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; ContStyle

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day7_2&lt;/span&gt;():    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;local_main&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; 

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (root_cmd &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$ cd /&amp;#34;&lt;/span&gt;:
            root &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;First command something other than cd / : &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;root_cmd&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
            currentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; processLine_7_2(line, root, currentNode)

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# After constructing tree, pre-calculate folder sizes.&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# A bit inefficient, but fine&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; PreOrderIter(root):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFolder_7_2(node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;):
                node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; containedFileSize_7_2(node)

        size_used &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size
        total_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;70_000_000&lt;/span&gt;
        size_available &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; total_size &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; size_used

        size_needed_for_update &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;30_000_000&lt;/span&gt;
        minimum_delete &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; size_needed_for_update &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; size_available

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Sort folders by size, find the smallest one larger than the needed size&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; folder &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(findall(root, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(n, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;folder_size&amp;#34;&lt;/span&gt;)), key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; n: n&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; folder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; minimum_delete:
                selectedFolder &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; folder
                display(folder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size, target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-output&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;        

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (pre&lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-pre&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Make pre tag for output&lt;/span&gt;
            pre &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pre&amp;#34;&lt;/span&gt;)
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-pre&amp;#34;&lt;/span&gt;
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bg-gray-900&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-gray-300&amp;#34;&lt;/span&gt;)
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lineHeight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.1&amp;#39;&lt;/span&gt;
            container &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-viz&amp;#34;&lt;/span&gt;)
            container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;max-h-124&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;overflow-y-auto&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;my-4&amp;#39;&lt;/span&gt;)
            container&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(pre)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#clear existing output&lt;/span&gt;

        runningTotal &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root, style&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;ContStyle()):
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#if node in small_folders:&lt;/span&gt;
            nameSegment &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;): displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder size:&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#a00&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder_size&amp;#39;&lt;/span&gt;): displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;folder size:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;folder_size)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: displaySize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

            contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;nameSegment&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;60&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;displaySize&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Highlight solution lines&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; selectedFolder &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; (node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; selectedFolder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;descendants &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; isFile_7_2(node)):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; selectedFolder: contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;85&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; SOLUTION&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_2(node):
                    runningTotal &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
                    contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &amp;lt;85&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; Running Total: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;runningTotal&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
                contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span style=&amp;#34;text-shadow: 0 0 8px #ffffff; color: rgb(255, 255, 255)&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                contents &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;contents&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
            
            display(HTML(contents),
                    target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day7_2-pre&amp;#34;&lt;/span&gt;)
      

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;processLine_7_2&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, rootNode: Node, currentNode: Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Processes one line of input; mutates the tree pointed to by rootNode,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        returns the new currentNode
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode
        match line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split():
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out to root&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rootNode
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move out one level&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parent
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Move to directory {dir}&lt;/span&gt;
                nextCurrentNode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [child &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; currentNode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dir&lt;/span&gt;][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#list files&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt;, dirname]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New directory {dirname}&lt;/span&gt;
                newDir &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dirname, parent &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; currentNode)
            case [size, filename]:
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# New file {filename}&lt;/span&gt;
                newFile &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;filename, parent&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;currentNode, size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(size))
            case _:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Somehow unmatched??&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; nextCurrentNode

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printTree_7_2&lt;/span&gt;(root:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pre, fill, node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; RenderTree(root):
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;pre&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;hasattr&lt;/span&gt;(node, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFile_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isFolder_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;containedFileSize_7_2&lt;/span&gt;(node:Node) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isFile_7_2(node):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;size
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sum&lt;/span&gt;(containedFileSize_7_2(n) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children)

    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day7_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    local_main(data)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday7_2 = document.querySelectorAll(&#39;[data-tab-target-day7_2]&#39;)
    const tabContentsday7_2 = document.querySelectorAll(&#39;[data-tab-content-day7_2]&#39;)

    tabsday7_2.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay7_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday7_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday7_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day8_1&#39;&gt;Day 8: Treetop Tree House (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;More parsing, more fun! I suspect there&#39;s some data structure that makes it simpler to iterate over both the rows and columns of a grid... or perhaps I should create my own, as that&#39;s the kind of thing that seems to come up often in Advent of Code.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day8_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day8_1-upload-input&#34; name=&#34;day8_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day8_1-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day8_1-run-btn&#34; py-click=&#34;main_day8_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day8/viz_1.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day8_1-viz-btn&#34; py-click=&#34;viz_day8_1()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day8_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day8/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day8_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day8_1=&#34;#day8_1-code&#34; class=&#34;active tab code-title&#34;&gt;day8_1.py&lt;/li&gt;
        &lt;li data-tab-target-day8_1=&#34;#day8_1-viz-code&#34; class=&#34;tab code-title&#34;&gt;day8_1-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day8_1-code&#34; data-tab-content-day8_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_8_1&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# (rowIndex, columnIndex)&lt;/span&gt;
    visible_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows left to right&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, line_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line(row)}
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows right to left&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;([row[::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]):
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(row) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line(row)}
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Top to Bottom:&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[column_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, column_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line(column)}

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Bottom to Top:&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[column_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data][::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(column) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; row_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, column_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line(column)}
        
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#printVisibleTrees(data, visible_trees)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visible_trees)&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printVisibleTrees&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], visbile_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]]):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_trees:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[green on dark_red]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_black]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_visible_in_line&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]:
    max_height_seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    visible_in_line &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, tree &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_height_seen:
            visible_in_line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(line_index)
            max_height_seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; max_height_seen &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; visible_in_line     

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day8_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day8_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_8_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_8_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day8_1-viz-code&#34; data-tab-content-day8_1 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; repeat
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; stdout

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display, HTML

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.segment&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Segment
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.console&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewLine
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.text&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Text
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.jupyter&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Patch the rich library to enable output&lt;/span&gt;

c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()
c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_rich_printer&lt;/span&gt;(target):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display_pyscript&lt;/span&gt;(segments: Iterable[Segment], text: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Allow output of raw HTML within pyscript/pyodide&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        html &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_render_segments(segments)
        display(HTML(html), target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;target, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
    rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; display_pyscript
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Solution code:&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day8_1&lt;/span&gt;():
    prepare_day8_1_element()
    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-viz&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day8_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_viz8_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
        target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-output&amp;#34;&lt;/span&gt;,
        append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
    post_day8_1_element()


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prepare_day8_1_element&lt;/span&gt;():
    viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-viz&amp;#34;&lt;/span&gt;)
    viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-x-auto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-auto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;whitespace-nowrap&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;post_day8_1_element&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js

    viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-viz&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pretag &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementsByTagName(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pre&amp;#39;&lt;/span&gt;):
        pretag&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;whiteSpace &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;nowrap&amp;#34;&lt;/span&gt;
        pretag&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;inline-block&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_viz8_1&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# (rowIndex, columnIndex)&lt;/span&gt;
    visible_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows left to right&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, line_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line_viz(row)}
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows right to left&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;([row[::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]):
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(row) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line_viz(row)}
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Top to Bottom:&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[column_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data]
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(row_index, column_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line_viz(column)}

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Bottom to Top:&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(data[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])):
        column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[column_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data][::&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
        visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(column) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; row_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, column_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; find_visible_in_line_viz(column)}
        
    printVisibleTrees_viz(data, visible_trees)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visible_trees))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printVisibleTrees_viz&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], visbile_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]]):
    row_strings &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        line_elements &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_trees:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_white on dark_green]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[aquamarine3]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
        row_strings&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line_elements))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; row_strings:
        get_rich_printer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_1-viz&amp;#34;&lt;/span&gt;)(r)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#rprint_8_1_viz(r)&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_visible_in_line_viz&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]:
    max_height_seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    visible_in_line &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, tree &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_height_seen:
            visible_in_line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(line_index)
            max_height_seen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; max_height_seen &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; visible_in_line     &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday8_1 = document.querySelectorAll(&#39;[data-tab-target-day8_1]&#39;)
    const tabContentsday8_1 = document.querySelectorAll(&#39;[data-tab-content-day8_1]&#39;)

    tabsday8_1.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay8_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday8_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday8_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day8_2&#39;&gt;Day 8: Treetop Tree House (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Figuring out all the indices, ranges, and &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/zfrgul/2022_day_8_i_know_i_should_read_it_more_carefully/&#34;&gt;exactly what was being asked&lt;/a&gt; was a bit hairy in this second part, but the ultimate stumbling block for me ended up being multiplying the running score by itself, rather than by the new trees seen in a given direction. Oops!&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript viz&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day8_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day8_2-upload-input&#34; name=&#34;day8_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day8_2-output&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;grid grid-cols-1 sm:grid-cols-2 sm:space-x-2&#34;&gt;
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day8_2-run-btn&#34; py-click=&#34;main_day8_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
                &lt;div&gt;
                    &lt;py-script src=&#34;day8/viz_2.py&#34;&gt;&lt;/py-script&gt;
                    &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 run-vis-button&#34; id=&#34;day8_2-viz-btn&#34; py-click=&#34;viz_day8_2()&#34;&gt;RUN VISUALIZATION&lt;/button&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day8_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day8/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day8_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day8_2=&#34;#day8_2-code&#34; class=&#34;active tab code-title&#34;&gt;day8_2.py&lt;/li&gt;
        &lt;li data-tab-target-day8_2=&#34;#day8_2-viz-code&#34; class=&#34;tab code-title&#34;&gt;day8_2-viz.py&lt;/li&gt; 
        
    &lt;/ul&gt;

    &lt;div id=&#34;day8_2-code&#34; data-tab-content-day8_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_8_2&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    max_trees_visible &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    high_score_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    visible_from_high_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; house_row_index, treehouse_row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; house_col_index, treehouse_height &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(treehouse_row):
        
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
            score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Row left to right&lt;/span&gt;
            row_to_right &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[house_row_index][house_col_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_8_2(row_to_right, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index, line_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; house_col_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows right to left&lt;/span&gt;
            row_to_left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;(data[house_row_index][:house_col_index]))
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_8_2(row_to_left, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index, house_col_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Top to Bottom:&lt;/span&gt;
            column_down &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[house_col_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[house_row_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]]
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_8_2(column_down, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, house_col_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns bottom to top:&lt;/span&gt;
            column_up &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;([row[house_col_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[:house_row_index]]))
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_8_2(column_up, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, house_col_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; score &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_trees_visible:
                max_trees_visible &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; score
                high_score_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (house_row_index, house_col_index)
                visible_from_high_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; visible_trees
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#printVisibleTrees(data, visible_from_high_score, special=high_score_location)&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; max_trees_visible


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printVisibleTrees&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], visible_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]], special &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; special:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[black dark_slate_gray_1]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visible_trees:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[green on dark_red]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_black]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;, end &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_visible_in_line_8_2&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, max_height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Visible in line {list(line)} from height {max_height}; &amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
    visible_trees &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; line:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;Nothing here, score 0&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; visible_trees

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, tree &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; max_height:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Score: {line_index+1}&amp;#34;)&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, line_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Max length, score {len(line)}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day8_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day8_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_8_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_8_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

    
    
    
    &lt;div id=&#34;day8_2-viz-code&#34; data-tab-content-day8_2 class=&#34;tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; repeat
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; stdout

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyscript&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; display, HTML

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.segment&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Segment
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.console&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NewLine
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.text&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Text
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.jupyter&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Patch the rich library to enable output&lt;/span&gt;

c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()
c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_rich_printer&lt;/span&gt;(target):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display_pyscript&lt;/span&gt;(segments: Iterable[Segment], text: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Allow output of raw HTML within pyscript/pyodide&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        html &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_render_segments(segments)
        display(HTML(html), target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;target, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
    rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; display_pyscript
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Solution code&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;viz_day8_2&lt;/span&gt;():
    prepare_day8_2_element()
    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-viz&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day8_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solution_viz8_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
        target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-output&amp;#34;&lt;/span&gt;,
        append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
    post_day8_2_element()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prepare_day8_2_element&lt;/span&gt;():
    viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-viz&amp;#34;&lt;/span&gt;)
    viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-x-auto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-auto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;whitespace-nowrap&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;post_day8_2_element&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; to_js

    viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-viz&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; pretag &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementsByTagName(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pre&amp;#39;&lt;/span&gt;):
        pretag&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;whiteSpace &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;nowrap&amp;#34;&lt;/span&gt;
        pretag&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;inline-block&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solution_viz8_2&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]):
    max_trees_visible &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    high_score_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    visible_from_high_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; house_row_index, treehouse_row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; house_col_index, treehouse_height &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(treehouse_row):
        
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()
            score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Row left to right&lt;/span&gt;
            row_to_right &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data[house_row_index][house_col_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]

            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_viz8_2(row_to_right, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index, line_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; house_col_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Rows right to left&lt;/span&gt;
            row_to_left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;(data[house_row_index][:house_col_index]))
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_viz8_2(row_to_left, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index, house_col_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns Top to Bottom:&lt;/span&gt;
            column_down &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [row[house_col_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[house_row_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]]
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_viz8_2(column_down, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, house_col_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Columns bottom to top:&lt;/span&gt;
            column_up &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;reversed&lt;/span&gt;([row[house_col_index] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data[:house_row_index]]))
            visbile_from_func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; find_visible_in_line_viz8_2(column_up, max_height&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(treehouse_height))
            visible_trees &lt;span style=&#34;color:#555&#34;&gt;|=&lt;/span&gt; {(house_row_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; line_index &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, house_col_index) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_from_func}
            score &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(visbile_from_func)

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; score &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; max_trees_visible:
                max_trees_visible &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; score
                high_score_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (house_row_index, house_col_index)
                visible_from_high_score &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; visible_trees
    
    printVisibleTrees_viz_8_2(data, visible_from_high_score, special&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;high_score_location)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; max_trees_visible


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;printVisibleTrees_viz_8_2&lt;/span&gt;(data: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], visbile_trees: &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;]], special &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
    row_strings &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; row_index, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(data):
        line_elements &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; column_index, char &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(row):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; special:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_white on dark_violet]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; (row_index, column_index) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; visbile_trees:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bright_white on dark_green]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                line_elements&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[aquamarine3]&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;char&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;[/]&amp;#34;&lt;/span&gt;)
        row_strings&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line_elements))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; row_strings:
        get_rich_printer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day8_2-viz&amp;#34;&lt;/span&gt;)(r)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_visible_in_line_viz8_2&lt;/span&gt;(line: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, max_height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Visible in line {list(line)} from height {max_height}; &amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
    visible_trees &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; line:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;Nothing here, score 0&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; visible_trees

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line_index, tree &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(line):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(tree) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; max_height:
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Score: {line_index+1}&amp;#34;)&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, line_index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Max length, score {len(line)}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(line))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;
     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday8_2 = document.querySelectorAll(&#39;[data-tab-target-day8_2]&#39;)
    const tabContentsday8_2 = document.querySelectorAll(&#39;[data-tab-content-day8_2]&#39;)

    tabsday8_2.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay8_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday8_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday8_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day9_1&#39;&gt;Day 9: Rope Bridge (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I felt quite clever during this first part of today&#39;s problem, when I noticed that, when the tail of the rope has to move, it always moves to where the head was in the previous step. This saves a fair amount of figuring out the logic of exactly where the tail moves to in each step - it can just reuse the previous position of the head, if necessary.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day9_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day9_1-upload-input&#34; name=&#34;day9_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day9_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day9_1-run-btn&#34; py-click=&#34;main_day9_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day9_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day9/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day9_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day9_1=&#34;#day9_1-code&#34; class=&#34;active tab code-title&#34;&gt;day9_1.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day9_1-code&#34; data-tab-content-day9_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Vector&lt;/span&gt;(NamedTuple):
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

direction_to_vector &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;U&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_9_1&lt;/span&gt;(data):
    head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    tail &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    tail_visited &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {tail}

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;):
        direction, quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
        diff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; direction_to_vector[direction]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(quantity)):
            prev_head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; head
            head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; too_far_9_1(head, tail):
                tail &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; prev_head
                tail_visited&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(tail)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(tail_visited)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;too_far_9_1&lt;/span&gt;(head, tail):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day9_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day9_1&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_9_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day9_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_9_1(data)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday9_1 = document.querySelectorAll(&#39;[data-tab-target-day9_1]&#39;)
    const tabContentsday9_1 = document.querySelectorAll(&#39;[data-tab-content-day9_1]&#39;)

    tabsday9_1.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay9_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday9_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday9_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day9_2&#39;&gt;Day 9: Rope Bridge (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Of course, I was being too clever by half, and the logic in part 1 doesn&#39;t hold in part two; I ended up chasing a nasty typo in the logic of determining where each tail segment moves for quite awhile. I&#39;ve left my rudimentary testing code and print statements in place and commented out for illustrative purposes.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day9_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day9_2-upload-input&#34; name=&#34;day9_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day9_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day9_2-run-btn&#34; py-click=&#34;main_day9_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day9_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day9/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day9_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day9_2=&#34;#day9_2-code&#34; class=&#34;active tab code-title&#34;&gt;day9_2.py&lt;/li&gt;
         
        
    &lt;/ul&gt;

    &lt;div id=&#34;day9_2-code&#34; data-tab-content-day9_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Point&lt;/span&gt;(NamedTuple):
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    previous: &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Vector&lt;/span&gt;(NamedTuple):
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

direction_to_vector &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;U&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;: Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;),
}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_9_2&lt;/span&gt;(data):
    head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Point(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;))
    tails &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [Point(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;)]
    tail_visited &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {(tails[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, tails[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y)}

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;\n{line=}&amp;#34;)&lt;/span&gt;
        direction, quantity &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
        head_move &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; direction_to_vector[direction]

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(quantity)):
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Segments:  {&amp;#39;&amp;#39;.join([f&amp;#39;({str(s.x): &amp;gt;2},{str(s.y): &amp;gt;2})&amp;#39; for s in [head, *tails]])}&amp;#34;)&lt;/span&gt;
            head &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Point(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; head_move&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; head_move&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, previous&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Vector(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y))
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Head moves by ({head_move.x},{head_move.y}) to ({head.x}, {head.y})&amp;#34;)&lt;/span&gt;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#move first tail&lt;/span&gt;
            diff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;  catchup_step(head, tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
            tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Point(tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, Vector(tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, tails[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y))

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Move other tails&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; index, following_tail &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(tails[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]):
                local_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
                diff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;  catchup_step(tails[local_index&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;], following_tail)
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#39;Moving tail at index {local_index} by {diff}&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;({str(diff.x): &amp;gt;2},{str(diff.y): &amp;gt;2})&amp;#34;, end = &amp;#34;&amp;#34;)&lt;/span&gt;
                tails[local_index] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Point(following_tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, following_tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; diff&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, Vector(following_tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, following_tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y))

            tail_visited&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add((tails[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, tails[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y))
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Segments:  {&amp;#39;&amp;#39;.join([f&amp;#39;({str(s.x): &amp;gt;2},{str(s.y): &amp;gt;2})&amp;#39; for s in [head, *tails]])}&amp;#34;)&lt;/span&gt;
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(&amp;#34;&amp;#34;)&lt;/span&gt;
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#input(&amp;#34;&amp;#34;)&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(tail_visited)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;catchup_step&lt;/span&gt;(head: Point, tail: Point) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Vector:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
        xdiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        ydiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x:
            xdiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x:
            xdiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y:
            ydiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; head&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; tail&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y:
            ydiff &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Vector(xdiff, ydiff)
        
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;test_catchup_step&lt;/span&gt;():
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Identity&lt;/span&gt;
    zero_vector &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#1 off&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(Vector(x, y), zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#2 off&lt;/span&gt;
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#2, 1 off&lt;/span&gt;
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(c:= catchup_step(a, zero_vector))&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(c:= catchup_step(a, zero_vector))&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 2, 2 off&lt;/span&gt;
    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Vector(x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, y &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; catchup_step(a, zero_vector) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Vector(&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Tests pass&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day9_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day9_2&amp;#39;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_9_2(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day9_2-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_9_2(data)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#test_catchup_step()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    

&lt;/div&gt;
&lt;script&gt;
    const tabsday9_2 = document.querySelectorAll(&#39;[data-tab-target-day9_2]&#39;)
    const tabContentsday9_2 = document.querySelectorAll(&#39;[data-tab-content-day9_2]&#39;)

    tabsday9_2.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay9_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday9_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday9_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day10_1&#39;&gt;Day 10: Cathode Ray Tube (Part 1)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;I had a very long dog walk this morning, during which I chose to vastly over-engineer today&#39;s problem. Partly for the fun of visualizing the solution on a quiet walk, and partly because this is the &lt;a href=&#34;https://adventofcode.com/2019/day/2&#34;&gt;kind of problem&lt;/a&gt; that tends to &lt;a href=&#34;https://adventofcode.com/2019/day/9&#34;&gt;come back&lt;/a&gt; in &lt;a href=&#34;https://adventofcode.com/2019/day/25&#34;&gt;later days&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also thoroughly type-hinted my solution, which I find tremendously helpful in keeping new data structures straight when developing them.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day10_1-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day10_1-upload-input&#34; name=&#34;day10_1-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day10_1-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day10_1-run-btn&#34; py-click=&#34;main_day10_1()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day10_1-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day10/main_1.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day10_1-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day10_1=&#34;#day10_1-code&#34; class=&#34;active tab code-title&#34;&gt;day10_1.py&lt;/li&gt;
         
        
        
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10computerpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/computer.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10parser_10_1py-code&#34; class=&#34;tab code-title&#34;&gt;day10/parser_10_1.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10registerpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/register.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10instructionpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/instruction.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10additionpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/addition.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_1=&#34;#day10_1day10nooppy-code&#34; class=&#34;tab code-title&#34;&gt;day10/noop.py&lt;/li&gt;
            
        
    &lt;/ul&gt;

    &lt;div id=&#34;day10_1-code&#34; data-tab-content-day10_1 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;os&lt;/span&gt;
    js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(os&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;listdir(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;))

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;parser_10_1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Parser_10_1


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_10_1&lt;/span&gt;(data):
    comp &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Computer(instructions&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;iter&lt;/span&gt;(data), parser&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Parser_10_1())
    signal_strength &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; breakpoint &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;)):
        comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run_until_clock(breakpoint)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Current instruction is {comp._current_instruction} with {comp._current_instruction._ellapsed_ticks} ellapsed ticks at index {comp._instruction_index}&amp;#34;)&lt;/span&gt;
        x_register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get()
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;{x_register=} &amp;#34;)&lt;/span&gt;
        signal_value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; breakpoint &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get()
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;At {breakpoint}, signal is {signal_value}&amp;#34;)&lt;/span&gt;
        signal_strength &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; signal_value
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Running total {signal_strength= }\n&amp;#34;)&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;(signal_strength)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day10_1&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day10_1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_10_1(data)&lt;span style=&#34;color:#a00&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_1-output&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solve_10_1(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    
        
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10computerpy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instructionparser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; InstructionParser
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;register&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Register

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Computer&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, instructions: Iterable[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], parser: InstructionParser &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instructions
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parser

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Register(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_instruction_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()
        

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Computer running&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_single_step&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Returns True if successfully completed a step, false if halted&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_until_clock&lt;/span&gt;(self, cycles) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Computer running until clock is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;cycles&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; cycles &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;next&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions))
        
        instruction_complete &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tick()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (instruction_complete):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;at_complete()
            
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;advance_instruction&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions), self)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_instruction_index &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Instruction advanced to {self._current_instruction}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;StopIteration&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
        
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10parser_10_1py-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instructionparser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; InstructionParser, InstructionParseException
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;addition&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Addition
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;noop&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Noop


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Parser_10_1&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parse&lt;/span&gt;(self, instruction: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, computer: Computer) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Instruction:
        str_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()
        match str_instruction:
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;noop&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Noop(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, computer)
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;addx&amp;#34;&lt;/span&gt;, value] :
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Addition(duration&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, computer&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;computer, register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x, addend &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(value))
            case _:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; InstructionParseException(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No instruction matching &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;instruction&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;inputtest_long.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    p &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Parser_10_1()
    computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Computer(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(instruction&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;line, computer&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;computer))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10registerpy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Register&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, data):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;set&lt;/span&gt;(self, data):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10instructionpy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;abc&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; ABC, abstractmethod
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#from computer import Computer&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(ABC):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, duration: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, computer):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;duration &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; duration
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; computer

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;

    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10additionpy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;register&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Register

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Addition&lt;/span&gt;(Instruction):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, duration: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, computer: Computer, register: Register, addend: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;):
        &lt;span style=&#34;color:#366&#34;&gt;super&lt;/span&gt;()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;__init__(duration, computer)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register: Register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; register
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addend: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; addend

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;set(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get() &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addend)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_1day10nooppy-code&#34; data-tab-content-day10_1 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Noop&lt;/span&gt;(Instruction):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Only 1 tick&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
    

&lt;/div&gt;
&lt;script&gt;
    const tabsday10_1 = document.querySelectorAll(&#39;[data-tab-target-day10_1]&#39;)
    const tabContentsday10_1 = document.querySelectorAll(&#39;[data-tab-content-day10_1]&#39;)

    tabsday10_1.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay10_1
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday10_1.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday10_1.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;

&lt;h2 class=&#34;mt-12 mb-1 border-b-2 border-gray-200 post-h2&#34; id=&#39;day10_2&#39;&gt;Day 10: Cathode Ray Tube (Part 2)&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2 md:gap-x-4&#34;&gt;
    &lt;div&gt;
        
&lt;p class=&#34;post-p&#34;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vero recusandae sint illo ab ullam deserunt. Fugiat debitis, harum velit corporis facilis modi perferendis consequuntur et eaque libero rem minima voluptatum?&lt;/p&gt;

    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;load-pyscript&#34;&gt;&lt;/div&gt;
        &lt;div class=&#34;hidden live-example&#34;&gt;
            &lt;div class=&#34;grid grid-cols-1 p-2 space-y-2 border-2 border-blue-200 rounded-xl&#34;&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Paste Input Here:&lt;/p&gt;
                    &lt;textarea class=&#34;w-full border-2 border-gray-500&#34; id=&#34;day10_2-textinput&#34;&gt;&lt;/textarea&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;p class=&#34;text-sm font-gray-700&#34;&gt;Or upload file:&lt;/p&gt;
                    &lt;input class=&#34;w-full&#34; type=&#34;file&#34; id=&#34;day10_2-upload-input&#34; name=&#34;day10_2-upload&#34;&gt;
                &lt;/div&gt;
                &lt;div class=&#34;font-mono bg-gray-200&#34; id=&#34;day10_2-output&#34;&gt;&lt;/div&gt;
                
                &lt;div class=&#34;col-span-1&#34;&gt;&lt;button class=&#34;w-full py-2 load-pyscript-button&#34; id=&#34;day10_2-run-btn&#34; py-click=&#34;main_day10_2()&#34;&gt;RUN&lt;/button&gt;&lt;/div&gt;
                
            &lt;/div&gt;
            &lt;py-script&gt;
                from utils import attach_upload_listener
                attach_upload_listener(&#39;day10_2-upload-input&#39;)
            &lt;/py-script&gt;
            &lt;py-script src=&#34;day10/main_2.py&#34;&gt;&lt;/py-script&gt; 
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:col-span-2&#34;id=&#34;day10_2-viz&#34;&gt;&lt;/div&gt;

    
    
     
    &lt;ul class=&#34;tabs md:col-span-2&#34;&gt;
        &lt;li data-tab-target-day10_2=&#34;#day10_2-code&#34; class=&#34;active tab code-title&#34;&gt;day10_2.py&lt;/li&gt;
         
        
        
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10computerpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/computer.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10screenpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/screen.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10parser_10_1py-code&#34; class=&#34;tab code-title&#34;&gt;day10/parser_10_1.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10registerpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/register.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10instructionpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/instruction.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10additionpy-code&#34; class=&#34;tab code-title&#34;&gt;day10/addition.py&lt;/li&gt;
            
                
                
                
                &lt;li data-tab-target-day10_2=&#34;#day10_2day10nooppy-code&#34; class=&#34;tab code-title&#34;&gt;day10/noop.py&lt;/li&gt;
            
        
    &lt;/ul&gt;

    &lt;div id=&#34;day10_2-code&#34; data-tab-content-day10_2 class=&#34;active tab-content md:col-span-2&#34;&gt;
        &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;screen&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Screen
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;parser_10_1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Parser_10_1

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_10_2&lt;/span&gt;(data):
    screen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Screen()
    comp &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Computer(instructions&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;iter&lt;/span&gt;(data), parser&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;Parser_10_1())

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        input_from_computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get()
        screen&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tick(input_from_computer)
        should_continue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; comp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run_single_step()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; should_continue:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(screen)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pyodide&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;modules:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;prepare_10_2&lt;/span&gt;():
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
        viz_div &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_2-viz&amp;#34;&lt;/span&gt;)
        pre &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pre&amp;#34;&lt;/span&gt;)
        pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_1-pre&amp;#34;&lt;/span&gt;
        pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bg-gray-900&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-gray-300&amp;#34;&lt;/span&gt;)
        pre&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lineHeight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.1&amp;#39;&lt;/span&gt;
        viz_div&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(pre)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main_day10_2&lt;/span&gt;():
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_input(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;day10_2&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        prepare_10_2()
        display(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;solve_10_2(data)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;,
            target&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;day10_1-pre&amp;#34;&lt;/span&gt;,
            append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;input.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(solve_10_2(data))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
         &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
    &lt;/div&gt;

     

    

    
        
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10computerpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instructionparser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; InstructionParser
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;register&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Register

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Computer&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, instructions: Iterable[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;], parser: InstructionParser &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instructions
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parser

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Register(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_instruction_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()
        

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Computer running&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_single_step&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Returns True if successfully completed a step, false if halted&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_until_clock&lt;/span&gt;(self, cycles) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Computer running until clock is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;cycles&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; cycles &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;next()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;next&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions))
        
        instruction_complete &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tick()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (instruction_complete):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;at_complete()
            
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clock_counter &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;advance_instruction&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#366&#34;&gt;next&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;instructions), self)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_instruction_index &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#print(f&amp;#34;Instruction advanced to {self._current_instruction}&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;StopIteration&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_current_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
        
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10screenpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NamedTuple

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Screen&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lines &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;)]
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;  Position(row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(line) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lines)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self, input_from_computer: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;abs&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;column &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; input_from_computer) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lines[self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;row][self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;column] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;

        next_column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;column &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; next_column &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;:
            next_column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
            next_row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;row &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            next_row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;row
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beam_position &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Position(row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; next_row, column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; next_column)
        

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Position&lt;/span&gt;(NamedTuple):
    row: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    column: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10parser_10_1py-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instructionparser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; InstructionParser, InstructionParseException
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;addition&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Addition
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;noop&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Noop


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Parser_10_1&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;parse&lt;/span&gt;(self, instruction: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, computer: Computer) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Instruction:
        str_instruction &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; instruction&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()
        match str_instruction:
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;noop&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Noop(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, computer)
            case [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;addx&amp;#34;&lt;/span&gt;, value] :
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Addition(duration&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, computer&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;computer, register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;reg_x, addend &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(value))
            case _:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; InstructionParseException(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No instruction matching &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;instruction&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;inputtest_long.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fp:
        data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
    
    p &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Parser_10_1()
    computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Computer(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; data:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(p&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;parse(instruction&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;line, computer&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;computer))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10registerpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Register&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, data):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;set&lt;/span&gt;(self, data):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_data&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10instructionpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;abc&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; ABC, abstractmethod
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#from computer import Computer&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Instruction&lt;/span&gt;(ABC):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, duration: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, computer):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;duration &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; duration
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; computer

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@abstractmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;

    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10additionpy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;computer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Computer
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;register&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Register

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Addition&lt;/span&gt;(Instruction):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, duration: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;, computer: Computer, register: Register, addend: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;):
        &lt;span style=&#34;color:#366&#34;&gt;super&lt;/span&gt;()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;__init__(duration, computer)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register: Register &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; register
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addend: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; addend

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;set(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;register&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get() &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addend)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                 &lt;div class=&#34;text-sm post-img-caption&#34;&gt;Scroll to see complete code&lt;/div&gt; 
            &lt;/div&gt;
        
            
            
            
            
            
            &lt;div id=&#34;day10_2day10nooppy-code&#34; data-tab-content-day10_2 class=&#34;tab-content md:col-span-2&#34;&gt;
                &lt;div class=&#34;overflow-y-scroll border-4 max-h-76&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;instruction&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Instruction

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Noop&lt;/span&gt;(Instruction):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tick&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_ellapsed_ticks &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Only 1 tick&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;at_complete&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;computer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;advance_instruction()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
                
            &lt;/div&gt;
        
    

&lt;/div&gt;
&lt;script&gt;
    const tabsday10_2 = document.querySelectorAll(&#39;[data-tab-target-day10_2]&#39;)
    const tabContentsday10_2 = document.querySelectorAll(&#39;[data-tab-content-day10_2]&#39;)

    tabsday10_2.forEach(tab =&gt; {
        tab.addEventListener(&#39;click&#39;, () =&gt; {
            let selector = tab.dataset.tabTargetDay10_2
            console.log(`Activating element with selector ${selector}`)
            const target = document.querySelector(selector)
            if (target !== null){
                tabContentsday10_2.forEach(tabContent =&gt; {
                    tabContent.classList.remove(&#39;active&#39;)
                })
                tabsday10_2.forEach(tab =&gt; {
                    tab.classList.remove(&#39;active&#39;)
                })
                tab.classList.add(&#39;active&#39;)
                target.classList.add(&#39;active&#39;)
            }
            else {
                console.warn(`No element found with selector ${selector}`)
            }
        })
    })
&lt;/script&gt;


&lt;py-script class=&#34;hidden&#34;&gt;
    import js
    loaded_event = js.Event.new(&#39;pyscript_ready&#39;)
    js.document.dispatchEvent(loaded_event)
&lt;/py-script&gt;

&lt;style&gt;
    .code-container {
        border-width: 2px;
    }
&lt;/style&gt;
&lt;span class=&#34;text-green&#34;&gt;&lt;/span&gt;
&lt;script&gt;    
    //Create Load PyScript buttons:
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        btn_locations = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(btn_locations).forEach(div =&gt; {
            div.classList.add(&#39;my-2&#39;, &#39;md:mx-4&#39;, &#39;border-2&#39;, &#39;border-blue-200&#39;, &#39;p-2&#39;, &#39;grid&#39;, &#39;grid-cols-1&#39;, &#39;rounded-xl&#39;, &#39;flex&#39;, &#39;flex-row&#39;, &#39;justify-center&#39;, &#39;w-auto&#39;, &#34;py-1&#34;, &#39;h-auto&#39;, &#39;md:h-full&#39;)
            let p = document.createElement(&#39;p&#39;)
            p.classList.add(&#39;my-auto&#39;, &#39;mr-4&#39;, &#39;italic&#39;)
            p.innerHTML = &#34;Want to run these examples live in your browser?&#34;
            if (div.classList.contains(&#34;viz&#34;)){
                p.innerHTML += &#39; &lt;p class=&#34;font-semibold text-green-600&#34;&gt;This example includes a visualization.&lt;/p&gt;&#39;
            }
            div.appendChild(p)
            //button
            let btn = document.createElement(&#39;button&#39;)
            btn.innerText = &#34;Load PyScript&#34;
            btn.classList.add(&#39;load-pyscript-button&#39;, &#39;h-12&#39;)
            btn.onclick = loadPyScript
            div.appendChild(btn)
        });
    })

    /* Make Table of Contents */
    document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {
        headings = document.getElementsByClassName(&#39;post-h2&#39;)
        tocContents = document.getElementById(&#39;toc-contents&#39;)
        Array.from(headings).forEach(header =&gt; {
            //&lt;p&gt;&lt;a class = &#34;text-gray-500&#34; href=&#34;#day1&#34;&gt;Day 1&lt;/a&gt;&lt;/p&gt;
            const line = document.createElement(&#39;p&#39;)
            const link = document.createElement(&#39;a&#39;)
            link.href = `#${header.id}`
            link.innerText = header.innerText
            line.appendChild(link)
            if (document.getElementById(`${header.id}-viz-btn`) !== null){
                const viztag = document.createElement(&#34;span&#34;)
                viztag.innerText = &#34; - Includes Visualization&#34;
                line.appendChild(viztag)
            }
            tocContents.appendChild(line)
        })
    })

    function loadPyScript() {
        //load chartjs
        chartlink = document.createElement(&#39;script&#39;)
        chartlink.src = &#34;https://cdn.jsdelivr.net/npm/chart.js&#34;
        document.body.append(chartlink)

        //load animejs
        animejslink = document.createElement(&#39;script&#39;)
        animejslink.src=&#34;https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js&#34;
        document.body.append(animejslink)
        
        //load css
        css_link = document.createElement(&#34;link&#34;)
        css_link.rel = &#34;stylesheet&#34;
        css_link.type = &#34;text/css&#34;
        css_link.href = &#34;https://pyscript.net/unstable/pyscript.css&#34;
        //css_link.href = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.css&#34;
        document.getElementsByTagName(&#39;head&#39;)[0].appendChild(css_link)

        //load cs
        script_tag = document.createElement(&#39;script&#39;)
        script_tag.src = &#34;https://pyscript.net/unstable/pyscript.js&#34;
        //script_tag.src = &#34;http://127.0.0.1:5501/pyscriptjs/build/pyscript.js&#34;
        document.body.append(script_tag)        
    }
    document.addEventListener(&#39;pyscript_ready&#39;, () =&gt; {
        static = document.getElementsByClassName(&#39;static-example&#39;)
        live = document.getElementsByClassName(&#39;live-example&#39;)
        Array.from(static).forEach(div =&gt; {
            div.classList.add(&#39;hidden&#39;)
        })
        Array.from(live).forEach(div =&gt; {
            div.classList.remove(&#39;hidden&#39;)
        })
        load_buttons = document.getElementsByClassName(&#39;load-pyscript&#39;)
        Array.from(load_buttons).forEach(elem =&gt; {
            elem.classList.add(&#39;hidden&#39;)
        })
    })
&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;tabs.css&#34;&gt;
&lt;!-- &lt;script src=&#34;tabs.js&#34;&gt;&lt;/script&gt; --&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>PyScript - Why Do We Need create_proxy()?</title>
      <link>https://jeff.glass/post/pyscript-why-create-proxy/</link>
      <pubDate>Mon, 24 Oct 2022 03:32:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-why-create-proxy/</guid>
      <description>&lt;style&gt;
    code:not(.nocode):not(.language-python){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide has an almost-magical ability to proxy objects and functions between Python and JavaScript in both directions... except when sometimes it seems to mysteriously break. Consider this stumbling block that new users often hit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;button &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;Say Hello&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console, document
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;hello&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;)

    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, hello)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This seems like a perfectly reasonable thing to do, but upon clicking the button, an error pops up in the developer console:&lt;/p&gt;
&lt;p class=&#34;post-p error-banner&#34;&gt;Uncaught Error: This borrowed proxy was automatically destroyed at the end of a function call. Try using create_proxy or create_once_callable.&lt;br&gt;The object was of type &#34;function&#34; and had repr &amp;quot;&amp;lt;function hello at 0x919828&amp;gt;&amp;quot;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The usual band-aid is wrap the Python Function in &lt;code&gt;create_proxy()&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_pyoxy(hello))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Which seems to just make things work... but why?&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;why&#34;&gt;Why &lt;code&gt;create_proxy()&lt;/code&gt;?&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;When you call something like &lt;code&gt;button.addEventListener(&#34;click&#34;, hello)&lt;/code&gt; (without create_proxy), Pyodide needs to briefly proxy the Python function &lt;code&gt;hello&lt;/code&gt; so the JS function &lt;code&gt;addEventListener&lt;/code&gt; knows how to interact with it. But once &lt;code&gt;addEventListener&lt;/code&gt; terminates, that proxy is no longer needed, it gets destroyed... and then when an event comes around to trigger your function, the proxy it should be using is gone. Which is why you&#39;ll see the error above talking about a &#34;borrowed proxy being automatically destroyed&#34;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The two functions that the Error mentions (&lt;code&gt;create_proxy()&lt;/code&gt; and &lt;code&gt;create_once_callable()&lt;/code&gt;) create a PyProxy (a JS object) of your Python object that you, the user, are supposed to manage the lifetime of, by calling &lt;code&gt;PyProxy.destroy()&lt;/code&gt; on it when you&#39;re done with it. Or, if you use &lt;code&gt;create_once_callable()&lt;/code&gt;, the proxy will destroy() itself after the first time it&#39;s called.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In practical terms, for something like an event listener, you may never want to destroy the proxy for the lifetime of your page, so you can just leave it hanging around. But it&#39;s worth noting that if you remove that event listener or button (maybe in a &#39;single-page-app&#39; where you&#39;re manipulating what&#39;s on the page quite a bit), you should plan to track and destroy the PyProxy, otherwise it just hangs around taking up memory.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;better-solution&#34;&gt;A Better Solution&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Keeping track of the proxies that wrap each of our Python functions sounds like a real pain, no? Thankfully, there&#39;s a better way, thanks to some new features in the Pyodide runtime.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since Pyodide 21.0 (PyScript 2022.09.1), there are now wrappers built into pyodide for adding event listeners: &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html?highlight=add_event_listener#pyodide.ffi.wrappers.add_event_listener&#34;&gt;pyodide.ffi.wrappers.add_event_listener()&lt;/a&gt; and &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html?highlight=remove_event_listener#pyodide.ffi.wrappers.remove_event_listener&#34;&gt;pyodide.ffi.wrappers.remove_event_listener()&lt;/a&gt; which, if you use them in conjunction, will handle proxy creation and destruction for you.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For example, here is the entirety of &lt;code&gt;pyodide.ffi.wrappers.add_event_listener&lt;/code&gt;:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;&lt;a href=&#34;https://github.com/pyodide/pyodide/blob/dc31bc8f3ecdde1eb21d345a81f8f4acc3d077ca/src/py/pyodide/ffi/wrappers.py&#34; class=&#34;underline no-style-link&#34;&gt;pyodide/wrappers.py &lt;span class=&#34;italic&#34;&gt;(partial)&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_event_listener&lt;/span&gt;(
    elt: JsProxy, event: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, listener: Callable[[Any], &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;]
) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Wrapper for JavaScript&amp;#39;s addEventListener() which automatically manages the lifetime
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    of a JsProxy corresponding to the listener param.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    proxy &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(listener)
    EVENT_LISTENERS[(elt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;js_id, event, listener)] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; proxy
    elt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(event, proxy)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;You can see that this:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Creates a proxy of the listener function using &lt;code&gt;create_proxy()&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Adds a reference to that proxy in an internal dictionary for later reference&lt;/li&gt;
    &lt;li&gt;Adds the event listener using the browser&#39;s &lt;code&gt;addEventListener()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;remove_event_listener&lt;/code&gt; simply undoes this process - it removes the event listener using JavaScript&#39;s &lt;code&gt;removeEventListener&lt;/code&gt;, looks up the appropriate proxy in the internal dictionary, and &lt;code&gt;destroy()&lt;/code&gt;s it.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So now, our code above would look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;button &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;Say Hello&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console, document
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;hello&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;)

    btn &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my_button&amp;#34;&lt;/span&gt;)
    add_event_listener(btn, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, hello)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;I personally recommend using these wrapper methods for all new code where possible, instead of using &lt;code&gt;create_proxy()&lt;/code&gt; and &lt;code&gt;addEventListener()&lt;/code&gt; manually.&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Asyncio in PyScript</title>
      <link>https://jeff.glass/post/pyscript-asyncio/</link>
      <pubDate>Fri, 21 Oct 2022 03:05:14 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-asyncio/</guid>
      <description>&lt;style&gt;
    code:not(.nocode){
        --tw-text-opacity: 1;
        color: rgba(5, 120, 85, var(--tw-text-opacity));
    }
&lt;/style&gt;
&lt;script defer src=&#34;https://pyscript.net/releases/2022.09.1/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;When running Python in a terminal or desktop, there&#39;s a myriad of ways to allow your code to do multiple things at once. You can spin off a new thread to handle computations, create a new process to offload work to other CPUs, even load up a while new &lt;a href=&#34;https://pythondev.readthedocs.io/subinterpreters.html&#34;&gt;subinterpretter&lt;/a&gt; (someday!) to execution more code.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;When running Python in the Browser, you get one process and (at least for now) one thread. That&#39;s it. And it&#39;s &lt;span class=&#34;italic&#34;&gt;the same thread&lt;/span&gt; that the browser window&#39;s event loop runs on. So we can&#39;t block - ever - or things fall apart.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So what if we want to do more than one thing at once? Asyncio to the rescue! In this post, we&#39;ll look at using &lt;code&gt;async/await/asyncio&lt;/code&gt; in PyScript/Pyodide to write concurrent code.&lt;/p&gt;
&lt;div class=&#34;info-banner&#34;&gt;Note that this page will focus on cooperative multitasking within Python via coroutines; for multitasking by running Python scripts in parallel in the browser, see Pyodide&#39;s documentation on &lt;a href=&#34;https://pyodide.org/en/stable/usage/webworker.html?highlight=thread&#34;&gt;Using Pyodide in a web worker&lt;/a&gt;.&lt;/div&gt;
&lt;div class=&#34;warning-banner&#34;&gt;This post was originally written for PyScript 2022.09.1. &lt;span class=&#34;font-semibold&#34;&gt;It will almost certainly be broken by later releases.&lt;/span&gt;&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;recap&#34;&gt;An Async/Await Recap&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;There are many ways of achieving the goal of &#34;do multiple things at once&#34; in Python - using multiple processes, using multiple threads within a single process, or making one thread do the work of many by requiring each piece of code to declare when it it wants to &#39;release&#39; the thread to do other work. The &lt;a href=&#34;https://docs.python.org/3/library/asyncio.html&#34;&gt;asyncio&lt;/a&gt; package in the python standard library, as well as the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords in the language, exist to support this last paradigm.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The typical way of writing these &#34;cooperative&#34; pieces of code is to declare &lt;code class=&#34;nocode&#34;&gt;Coroutines&lt;/code&gt; using the &lt;code&gt;async def&lt;/code&gt; keyword, then execute them with one of the many &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#running-an-asyncio-program&#34;&gt;asyncio execution methods&lt;/a&gt;. Within a coroutine, the &lt;code&gt;await&lt;/code&gt; keyword is used to indicate that control of the event loop (thread) should pause execution of the coroutine and move on to any others that are waiting. A statement like &lt;code class=&#34;code&#34;&gt;await foo()&lt;/code&gt; means &#34;suspend execution of the surrounding coroutine until the result of &lt;code&gt;foo()&lt;/code&gt; is returned.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;An example you can run in a regular terminal:&lt;/p&gt;
&lt;div class=&#34;mx-2&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;up_down&lt;/span&gt;():
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;What goes up&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Must come down&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;throw_things_up&lt;/span&gt;():
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# asyncio.gather() runs multiple awaitable things and gathers their return values (or errors)&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;gather(up_down(), up_down(), up_down())

asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run(throw_things_up())

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# ------ Output ------&lt;/span&gt;

What goes up
What goes up
What goes up
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# ~1 second gap here&lt;/span&gt;
Must come down
Must come down
Must come down&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&#34;post-p&#34;&gt;This is just a quick and dirty primer - if asnyc/await/asyncio is a wholly new subject for you, I recommend the excellent &lt;a href=&#34;https://realpython.com/async-io-python/#the-10000-foot-view-of-async-io&#34;&gt;Real Python article on Asyncio&lt;/a&gt; for a deeper understanding before moving on.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;webloop&#34;&gt;Pyodide.Webloop&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The Pyodide runtime (which is the most common one used in PyScript at the moment) provides a custom wrapper for the asyncio event loop, that allows &lt;code&gt;async/await&lt;/code&gt; to work with the browser event loop. Many of the methods will be familiar if you&#39;ve worked with &lt;code&gt;asyncio&lt;/code&gt;, but it&#39;s worth highlighting some useful ones, as well as broken ones:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 px-2 py-2 mx-4 bg-green-100 divide-y-2 divide-green-800 md:gap-y-2 md:divide-y-0 divide-opacity-30&#34;&gt;
    &lt;div class=&#34;md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-green-800 md:divide-opacity-50 &#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold text-black&#34;&gt;create_task(coro: Coroutine)&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L342-L363&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Schedules the Coroutine into the event loop, to run concurrently as a Task. Works like &lt;code&gt;asyncio.create_task()&lt;/code&gt;&lt;/code&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-green-800 md:divide-opacity-50 &#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold text-black&#34;&gt;call_soon(callback: Callable, ...)&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L207-L221&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Schedules calling the Callable in the browser event loop using &lt;code&gt;setTimeout(callback, 0)&lt;/code&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-green-800 md:divide-opacity-50 &#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold text-black&#34;&gt;call_later(delay: float, callback: Callable, ...)&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L235-L280&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Schedules &lt;code&gt;callback&lt;/code&gt; to be called in (roughly) &lt;code&gt;delay&lt;/code&gt; seconds, using &lt;code&gt;setTimeout(callback, delay)&lt;/code&gt;. Returns a &lt;code&gt;Handle&lt;/code&gt; object with a &lt;code&gt;cancel()&lt;/code&gt; the call.&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;px-2 bg-yellow-100 md:px-0 md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-yellow-800 md:divide-opacity-50 &#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold text-black&#34;&gt;run_until_complete(future)&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L185-L201&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Since we can&#39;t block, this just ensures that the future is scheduled and returns the future. As the documentation notes, it&#39;s better to use &lt;code&gt;future.add_done_callback(do_something_with_result)&lt;/code&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;px-2 bg-yellow-100 md:px-0 md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-yellow-800 md:divide-opacity-50&#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;run_forever()&lt;/span&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/blob/00d0f347c86008c70565001e62b03db42b20d3a4/src/py/pyodide/webloop.py#L176-L183&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;Different from asyncio.loop.run_forever - this is a a no-op! Since we can&#39;t block, this method does nothing.&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;px-2 bg-yellow-100 md:px-0 md:grid md:grid-cols-5 md:gap-x-2 md:divide-x-2 md:divide-yellow-800 md:divide-opacity-50&#34;&gt;
        &lt;div class=&#34;md:col-span-2 md:text-right&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;asyncio.run()&lt;/span&gt; &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio.run&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&#34;overflow-x-auto md:col-span-3&#34;&gt;This function, like several of the base &lt;code&gt;asyncio&lt;/code&gt; functions, can&#39;t be called from &lt;span class=&#34;italic&#34;&gt;within&lt;/span&gt; an active event loop. And because we&#39;re inside the event loop in the browser, my understanding is we&#39;re &lt;span class=&#34;italic&#34;&gt;always&lt;/span&gt; in an event loop. If you see an error like this, try one of the functions above.&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;We can access the Pyodide event loop at &lt;code class=&#34;code&#34;&gt;PyScript.loop&lt;/code&gt;, so we could write, for example, &lt;code class=&#34;code&#34;&gt;PyScript.loop.create_task(my_async_function())&lt;/code&gt;. It&#39;s worth looking at the full function signatures of the methods linked above - the ones which take Callables all take an *args parameter to pass arguments into your call, so you don&#39;t need to wrap them in &lt;code&gt;functools.partial&lt;/code&gt; or the like.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The presence of the Webloop implementation of the &lt;code&gt;asyncio&lt;/code&gt; event loop means that most async concepts translate pretty directly - &lt;code&gt;async for&lt;/code&gt;, &lt;code&gt;async with&lt;/code&gt;, and other constructs which generate or consume coroutines or async iterators/context managers mostly just work. But the above Webloop methods are the most useful in terms of creating behaviors you might want in your program.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Rather than walk through each method individually, I think the most instructive thing to do is simply to present and discuss examples of what I think are the most useful strategies:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;&lt;code&gt;create_task&lt;/code&gt;, which schedules a coroutine to be run soon.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;call_soon/call_later&lt;/code&gt;, which schedules a callable to be called &#34;ASAP&#34; or after a specific amount of time&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;asyncio.gather&lt;/code&gt;, for running multiple awaitables (coroutines, Tasks, and Futures) concurrently&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;webloopexamples&#34;&gt;Webloop Examples&lt;/h2&gt;
&lt;div class=&#34;grid grid-cols-1 gap-y-8&#34;&gt;
    &lt;div&gt;
        &lt;h4 class=&#34;post-h4&#34;&gt;&lt;code class=&#34;nocode&#34;&gt;create_task()&lt;/code&gt;&lt;/h4&gt;
        &lt;div class=&#34;flex items-stretch flex-col-reverse space-y-2   md:flex-row-reverse md:space-x-2 md:space-x-reverse  &#34;&gt;
    &lt;div class=&#34;flex flex-col items-stretch w-full md:w-1/2&#34;&gt;
        &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
        &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124&#34;&gt;
            &lt;py-script class=&#34;px-2&#34; src=&#34;clock.py&#34;&gt;&lt;/py-script&gt;
            &lt;div id=&#34;clock-output&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:w-1/2&#34;&gt;
        &lt;p class=&#34;code-title&#34;&gt;clock.py&lt;/p&gt;
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;datetime&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; datetime
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;clock_forever&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;):
        now &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;now()
        Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;clock-output&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;now&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;hour&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;now&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;minute&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;now&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;second&lt;span style=&#34;color:#a00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_task(clock_forever())&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        
    &lt;/div&gt;
&lt;/div&gt;
        &lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#task-object&#34;&gt;As the Python Documentation says&lt;/a&gt;: &lt;span class=&#34;italic&#34;&gt;Tasks are used to run coroutines in event loops. If a coroutine awaits [on a future], the Task suspends execution of the coroutine and waits for the completion of the Future.&lt;/span&gt;&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;This is the key behavior we want when we want coroutines (including async functions defined with &lt;code&gt;async def&lt;/code&gt;) to run concurrently.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;h4 class=&#34;mb-2 post-h4&#34;&gt;&lt;code class=&#34;nocode&#34;&gt;call_soon()&lt;/code&gt; and &lt;code class=&#34;nocode&#34;&gt;call_later()&lt;/code&gt;&lt;/h4&gt;
        &lt;div class=&#34;grid grid-cols-2&#34;&gt;
            &lt;div&gt;
                &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;timer.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;functools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; partial

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;finish_in&lt;/span&gt;(seconds):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; seconds &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;timer-output&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;DONE!&amp;#34;&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;timer-output&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(seconds, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
        PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;call_later(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, finish_in, seconds&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;call_soon(finish_in, &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
                &lt;py-script src=&#34;timer.py&#34;&gt;&lt;/py-script&gt;
            &lt;/div&gt;
            &lt;div class=&#34;flex flex-col items-stretch w-full&#34;&gt;
                &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
                &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124 md:ml-2&#34;&gt;
                    &lt;div id=&#34;timer-output&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;p class=&#34;post-p&#34;&gt;Let&#39;s say you don&#39;t have a a coroutine with an internal &lt;code&gt;await&lt;/code&gt; - you just have a regular old function (or Callable) that you&#39;d like to be called either &#34;now&#34; (but allow other Async processes to happen as well) or after an interval (while not blocking in the meantime). For that, we have &lt;code&gt;call_soon()&lt;/code&gt; and &lt;code&gt;call_later()&lt;/code&gt;, respectively.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;Notice that this example happens to use both &lt;code&gt;call_soon()&lt;/code&gt; and &lt;code&gt;call_later&lt;/code&gt;, but that&#39;s purely to illustrate their functionality. If you wanted to make an async function that counts down from 5, there are probably clearer ways to do it.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;Two positive effects of using either of these methods is that they (1) wrap your callable in a PyProxy object, so the browser garbage colletor doesn&#39;t throw them away before they&#39;re called; and (2) they return a &lt;a href=&#34;https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Handle&#34;&gt;Handle Object&lt;/a&gt; which can be used to cancel execution of the Callable prior to its calling. Neat!&lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;h4 class=&#34;mb-2 post-h4&#34;&gt;&lt;code class=&#34;nocode&#34;&gt;asyncio.gather()&lt;/code&gt;&lt;/h4&gt;
        &lt;div class=&#34;grid grid-cols-2&#34;&gt;
            &lt;div&gt;
                &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;race.py&lt;/p&gt;
    
    
    &lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;functools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; partial
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Our awaitable coroutine - we&amp;#39;ll use asyncio.gather() to run lots of these&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;racer&lt;/span&gt;(lane_element):
    speed &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;random() &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;.4&lt;/span&gt;
    lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;:
        lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; speed
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;.1&lt;/span&gt;)
    
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#race is over for this lane; change border color&lt;/span&gt;
    lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;border-yellow-700&amp;#39;&lt;/span&gt;)
    lane_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;border-green-500&amp;#39;&lt;/span&gt;)
    

NUM_RACERS &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run_race&lt;/span&gt;():
    racers &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#clear output&lt;/span&gt;
    output &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;race-output&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;firstChild:
        output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;removeChild(output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;firstChild)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(NUM_RACERS):
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Create new progress bars as lanes for our &amp;#34;racers&amp;#34;&lt;/span&gt;
        new_lane &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;progress&amp;#34;&lt;/span&gt;)
        new_lane&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;lane-&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;n&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
        new_lane&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;max &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;
        new_lane&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;border-4&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;border-yellow-500&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;m-2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;h-6&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;w-11/12&amp;#39;&lt;/span&gt;)
        

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Add the progress bars and labels to the document&lt;/span&gt;
        document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;race-output&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(new_lane)

        racers&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(racer(new_lane))

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Return a Promise representing the results.&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# If you don&amp;#39;t need the results, no need to return or await this&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;gather(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;racers)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Run the race over and over&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;race_monitor&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
        results &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; run_race()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; results
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Start the monitoring task&lt;/span&gt;
asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_task(race_monitor())&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
    
&lt;/div&gt;
                &lt;py-script src=&#34;race.py&#34;&gt;&lt;/py-script&gt;
            &lt;/div&gt;
            &lt;div class=&#34;flex flex-col items-stretch w-full&#34;&gt;
                &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
                &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124 md:ml-2&#34;&gt;
                    &lt;div id=&#34;race-output&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;p class=&#34;post-p&#34;&gt;When you have multiple &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio-awaitables&#34;&gt;awaitable objects&lt;/a&gt; (coroutines, Tasks, and Futures) that you want to run &#34;in a group&#34; or &#34;as a batch&#34;, &lt;code&gt;asyncio.gather()&lt;/code&gt; can simplify your life. If any of the collection of awaitables is a coroutine, it is automatically wrapped in a Task (and scheduled).&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;In a PyScript/Pyodide context, one can image using &lt;code&gt;gather&lt;/code&gt; for UI management or &#34;backend&#34; work. For example, you might have a collection of onscreen objects (like the example above) that each need to update themselves asynchronously. Or you might &lt;code&gt;gather()&lt;/code&gt; a collection of coroutines that use &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/http.html?highlight=pyfetch#pyodide.http.pyfetch&#34;&gt;pyfetch()&lt;/a&gt; to retrieve network resources, allowing them to fetch asynchronously while PyScript continues executing on the page.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;implicitasync&#34;&gt;Implicit Async&lt;/h2&gt;
&lt;div class=&#34;mt-2 warning-banner&#34;&gt;As predicted, this featurew as removed in &lt;a href=&#34;../../post/whats-new-pyscript-2022-12-1#implicit&#34;&gt;PyScript 2022.12.1&lt;/a&gt;; it is described here for historical reference.&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript/Pyodide has an interesting quirk that allows an additional way of working with coroutines, that has to to with what&#39;s called &lt;span class=&#34;italic&#34;&gt;&#34;Top-Level Await&#34;&lt;/span&gt;. If you&#39;ve written async/await code before, you might be familiar with Python yelling at you for trying to use &#39;await&#39; outside of a coroutine, like so:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2&#34;&gt;
    &lt;div class=&#34;h-full m-2 overflow-x-auto&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;One plus two is... wait for it...&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#555&#34;&gt;----&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;^&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;SyntaxError&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;await&amp;#39;&lt;/span&gt; outside function&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;h-full m-2 overflow-x-auto&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_slowly&lt;/span&gt;():
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;One plus two is... wait for it...&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; add_slowly()
    &lt;span style=&#34;color:#555&#34;&gt;----&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;^&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;SyntaxError&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;await&amp;#39;&lt;/span&gt; outside &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; function&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;However, if you run those same pieces of code in PyScript, they work just fine!&lt;/p&gt;
&lt;div class=&#34;flex flex-col-reverse items-stretch space-y-2 md:flex-row-reverse md:space-x-2 md:space-x-reverse&#34;&gt;
    &lt;div class=&#34;flex flex-col items-stretch w-full md:w-1/2&#34;&gt;
        &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
        &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124&#34;&gt;
            &lt;py-script class=&#34;px-2&#34; src=&#34;bad_add.py&#34; std-out=&#34;ou\t&#34;&gt;&lt;/py-script&gt;
            &lt;div id=&#34;out&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:w-1/2&#34;&gt;
        &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;bad_add.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_slowly&lt;/span&gt;():
    Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;out&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;One plus two is... wait for it...&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)
    Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;out&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#This isn&amp;#39;t normally possible:&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; add_slowly()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The reason that code with top-level await (i.e. &#34;&lt;code&gt;await&lt;/code&gt;&#34; outside an async function) works in PyScript is due to a design decision on the part of the Pyodide team, whose thinking I imagine goes like this:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;We usually can&#39;t just nakedly &lt;code&gt;await&lt;/code&gt; things in Python, since we need an active event loop to schedule the coroutines into.&lt;/li&gt;
    &lt;li&gt;In the browser, we &lt;span class=&#34;italic&#34;&gt;always&lt;/span&gt; have an active event loop (the browser event loop)&lt;/li&gt;
    &lt;li&gt;CPython allows us to compile code with the &lt;code class=&#34;code&#34;&gt;PyCF_ALLOW_TOP_LEVEL_AWAIT&lt;/code&gt;, which, if it finds Top-Level &#39;Await&#39; statements, returns the evaluated code as a coroutine&lt;/li&gt;
    &lt;li&gt;Therefore, if we evaluate a chunk of code and the result is a coroutine, we have the option to simply schedule it into the browser event loop for the user and execute it. (If the result and discuss is not a coroutine, just return the result as normal.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;This is exactly what the internal Pyodide function &lt;code class=&#34;code&#34;&gt;runPythonAsync()&lt;/code&gt; does - compiles code with PyCF_ALLOW_TOP_LEVEL_AWAIT, and if the result is a coroutine, schedules it and returns a promise representing the result. It&#39;s essentially a convenience function that takes advantage of the fact that, by definition, we always have an every loop available to us. And since PyScript (currently) uses &lt;code class=&#34;code&#34;&gt;runPythonAsync()&lt;/code&gt; to run every code block, you can write top-level await code wherever you like.&lt;/p&gt;
&lt;p class=&#34;warning-banner&#34;&gt;Importantly, &lt;code&gt;runPythonAsync()&lt;/code&gt; &lt;span class=&#34;font-semibold&#34;&gt;does not run synchronous Python &#39;asynchronously&#39;&lt;/span&gt;. It simply allows code with Top Level Await statements to compile and be &lt;code&gt;await&lt;/code&gt;ed. &lt;a href=&#34;https://gist.github.com/JeffersGlass/10adc330d8099fda1ee481bd82bc29c7&#34;&gt;[1]&lt;/a&gt;. &lt;code class=&#34;code&#34;&gt;While True: pass&lt;/code&gt; will still block forever.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;See the following pair of demos, both of which run with top-level await&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 md:gap-2 md:grid-cols-2&#34;&gt;
    &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;sleep_1.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; count

output_1 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output-1&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; count():
    output_1&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Counted to &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
    &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;sleep_2.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;itertools&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; count

output_2 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output-2&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; count():
    output_2&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Counted to &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;.7&lt;/span&gt;) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Note the smaller sleep time!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
&lt;py-script&gt;
    import asyncio
from itertools import count

output_1 = Element(&#34;output-1&#34;)
for i in count():
    output_1.write(f&#34;Counted to {i}&#34;)
    await asyncio.sleep(1)

&lt;/py-script&gt;
&lt;py-script&gt;
    import asyncio
from itertools import count

output_2 = Element(&#34;output-2&#34;)
for i in count():
    output_2.write(f&#34;Counted to {i}&#34;)
    await asyncio.sleep(.7) #Note the smaller sleep time!

&lt;/py-script&gt;
&lt;/div&gt;
&lt;div class=&#34;flex flex-col md:flex-row&#34;&gt;
    &lt;div class=&#34;w-full my-4 md:w-1/2&#34;&gt;
        &lt;span class=&#34;text-sm text-gray-500&#34;&gt;Output from sleep_1.py&lt;/span&gt;
        &lt;div class=&#34;h-auto text-base bg-green-100 border-2&#34; id=&#34;output-1&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full m-4 md:w-1/2&#34;&gt;
        &lt;span class=&#34;text-sm text-gray-500&#34;&gt;Output from sleep_2.py&lt;/span&gt;
        &lt;div class=&#34;h-auto text-base bg-green-100 border-2&#34; id=&#34;output-2&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;BUT BEWARE!&lt;/span&gt; This is the part that&#39;s most likely to change in future versions of PyScript. You&#39;ll note above that when we compile our Python Code, if the result is a coroutine, the JavaScript side gets a promise that resolves to the result of the coroutine. Importantly though, at least in PyScript 2022.09.1, &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/7d5f6c9ead72798f23915b2ce7b619f02322ac84/pyscriptjs/src/runtime.ts#L180&#34;&gt;we don&#39;t await that promise resolving!&lt;/a&gt; This is what allows the loader to continue, other scripts to evaluate etc. while the scheduled coroutine resolves in the background.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s been &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/763&#34;&gt;quite&lt;/a&gt; a &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/715&#34;&gt;bit&lt;/a&gt; of &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/796&#34;&gt;discussion&lt;/a&gt; around what the loader lifecycle and async scripts, so I do expect this to change in the future. At this moment, it doesn&#39;t look like it&#39;s changing in the planned 2022.10.1, but time will tell!&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Personally, I think the implicit style is nice to have for quick-and-dirty examples like those just above, but they do make it hard to reason about execution order and script completion. And like I say, I suspect the details of that are going to continue to change and morph over time, so they might not be the most future-proof solution.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That&#39;s why I&#39;d recommend, for any significant projects, you lean toward using the &lt;code&gt;Webloop&lt;/code&gt; methods for handling concurrent tasks. Back when I wrote &lt;a href=&#34;../../project/the-7-guis-pyscript/&#34;&gt;The 7 Guis in PyScript&lt;/a&gt;, I wasn&#39;t particularly familiar with Webloop, and so coded everything in the implicit style. All of the async work in those demos breaks down to essentially &#34;do a lot of setup, then run a loop asynchronously forever.&#34; Which makes quick, implicit async plausible.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But when I moved on to the much-more-integrated &lt;a href=&#34;../../project/richdemo/&#34;&gt;Rich on PyScript Project&lt;/a&gt;, I had a hell of a time reasoning about what processes would be completed when, how to cancel and monitor them etc. from the Python side - starting that project with an asyncio/Webloop approach from the beginning would have been radially easier.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, remember that while &lt;code&gt;async/await&lt;/code&gt; in PyScript/Pyodide works &lt;span class=&#34;italic&#34;&gt;mostly&lt;/span&gt; like it does on desktop or terminal, because there&#39;s an intermediate layer of reimplementation in Webloop, not all behaviors are guaranteed to be exactly the same. Troubleshoot and test thoroughly, and &lt;span class=&#34;italic&#34;&gt;don&#39;t block the loop!&lt;/span&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Whats New in Pyscript 2022.09.1</title>
      <link>https://jeff.glass/post/whats-new-pyscript-2022-09-1/</link>
      <pubDate>Fri, 30 Sep 2022 12:05:33 -0500</pubDate>
      
      <guid>https://jeff.glass/post/whats-new-pyscript-2022-09-1/</guid>
      <description>&lt;style&gt;
    body {
        scroll-margin-top: 8em;
    }
&lt;/style&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;PyScript Version 2022.09.1 was just released&lt;/span&gt;, and just as &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/337&#34;&gt;tech lead Fabio Pliger said&lt;/a&gt; in proposing the versioning scheme:&lt;/p&gt;
&lt;blockquote class=&#34;post-blockquote&#34;&gt;&#34;...An important aspect to keep in mind is that PyScript is still in its very early stages. So, we should highlight that the expectations should be that think can often break until we reach a level of maturity and stability.&#34;&lt;/blockquote&gt;
&lt;p class=&#34;post-p&#34;&gt;And wow, are there a lot of new things in this version of PyScript. What&#39;s more, the default Pyodide runtime has been upgraded to the recently-released &lt;a href=&#34;https://pyodide.org/en/0.21.2/usage/quickstart.html&#34;&gt;version 21.2&lt;/a&gt;, which itself provides many new features and improved functionality to PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I want to specificically highlight new features, breaking changes, and neat behind-the-scenes work. The full details of what&#39;s changed are captured in the &lt;a href=&#34;https://github.com/pyscript/pyscript/compare/2022.06.1...2022.09.1&#34; class=&#34;&#34;&gt;PyScript Release Changelog&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;TOC&#34; class=&#34;grid justify-center p-1 m-auto bg-gray-200&#34;&gt;
        &lt;span&gt;Jump To: &lt;span&gt;
        &lt;a href=&#34;#PyScript&#34;&gt;PyScript&lt;/a&gt; • 
        &lt;a href=&#34;#Documentation&#34;&gt;Documentation&lt;/a&gt; • 
        &lt;a href=&#34;#Pyodide&#34;&gt;Pyodide&lt;/a&gt; • 
        &lt;a href=&#34;#Emscripten&#34;&gt;Emscripten&lt;/a&gt; • 
        &lt;a href=&#34;#Testing&#34;&gt;Testing&lt;/a&gt; • 
        &lt;a href=&#34;#Infrastructure&#34;&gt;Infrastructure&lt;/a&gt; • 
        &lt;a href=&#34;#Next&#34;&gt;What&#39;s Next&lt;/a&gt;        
&lt;/div&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;PyScript&#34;&gt;PyScript&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&amp;lt;py-env&amp;gt; Will Be Going Away&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Previously, the &lt;code&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; tag was where one would specify additional libraries to download from PyPI, as well as URL&#39;s to load into the local filesystem. Now, those options are being &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md&#34;&gt;folded into &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt;&lt;/a&gt;, alongside other options like plugins and &lt;a href=&#34;#runtimes&#34;&gt;runtimes&lt;/a&gt; and metadata like the pages name and version number. The use of &lt;code&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; is deprecated and &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/775&#34;&gt;will be removed in a future release&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Additionally, &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; can now &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/783&#34;&gt;accept configurations in JSON in addition to TOML&lt;/a&gt;. Creators using build systems that strip out whitespace (which isn&#39;t very kind to TOML) may find this especially useful.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;
  packages: [&amp;#34;rich&amp;#34;, &amp;#34;faker&amp;#34;]
  paths: [&amp;#34;./data_file.txt&amp;#34;]
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-config&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;    
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;span class=&#34;px-1 font-mono bg-gray-200&#34;&gt;py-*&lt;/span&gt; Events&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The alpha and 2022.06.1 releases supported a couple of special attributes on HTML tags - &lt;code class=&#34;code&#34;&gt;pys-onClick&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;pys-onKeyDown&lt;/code&gt; - that PyScript hooked into to allow the running of Python code in response to a couple of common browser interactions.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Release 2022.09.1 &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/561&#34;&gt;radically expands this capability&lt;/a&gt; with &lt;a href=&#34;https://github.com/lpliger/pyscript/blob/19491d80107f17d43633b224e231cd1cf2f657d5/pyscriptjs/src/components/pyscript.ts#L128-L220&#34;&gt;many, many more browser events supported.&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/686&#34;&gt;syntax of py-* events has also changed&lt;/a&gt; to more closely match JavaScripts &lt;code class=&#34;code&#34;&gt;event&lt;/code&gt; syntax. Previously, you supplied a &lt;code&gt;Callable&lt;/code&gt; which was called with no arguments. Now you write a line of code (optionally broken up with &lt;code&gt;;&lt;/code&gt; symbols) which is run when the event triggers. The correct usage is now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    from js import console as jsconsole
    def say_hi(name):
        jsconsole.log(&amp;#34;Hi, &amp;#34; + name)
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-paragraph&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;py-mouseover&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;say_hi(&amp;#39;Jeff&amp;#39;); jsconsole.log(&amp;#39;I did it!&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;Mouse Over Me&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that, unlike JavaScripts event syntax, the value of the &lt;code&gt;py-*&lt;/code&gt; attribute can be any valid Python code, not just a single function call.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Better Input/Output Escaping&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Embedding something that looks like HTML inside of Python inside of HTML is... well, even just saying it is a mouthful, and it comes with its own pitfalls. Previously, PyScript tags like the following would fail in a couple of ways:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;b&amp;gt;A bold tag!&amp;lt;/b&amp;gt;&amp;#34;&lt;/span&gt;)
tag_name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;I&amp;#39;m pretty sure 1 &amp;lt; 2 but 2 &amp;gt; 0&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;First, the Browser needs to be prevented from interpretting the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tag as internal HTML, and second, the output needs to recognize that the &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; symbols are &lt;i&gt;not&lt;/i&gt; an HTML tag. These issues have been solved by a &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/684&#34;&gt;pair&lt;/a&gt; of &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/481&#34;&gt;changes&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Better Logging&lt;/h4&gt;
&lt;img src=&#34;logging.PNG&#34; alt=&#34;&#34; class=&#34;float-right w-full m-2 border-2 border-gray-300 sm:w-80&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Logging to the Developer Console that PyScript does is now much cleaner, and annotated by what file the log line is generated in. This makes it easier to see what&#39;s logged by the user&#39;s program and what&#39;s being logging by the PyScript mechanisms themselves.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34; id=&#34;runtimes&#34;&gt;Framework for Multiple Runtimes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The use of a specific version of Pyodide is no longer hardcoded into a PyScript release - users may now opt to supply a URL and name for a &#39;runtime&#39; in the &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; tag. If one is not supplied, the default is still to load the version of Pyodide that PyScript has been most recently tested against, which should be the right option for most users. But this does open the door to future improvements like:
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Running &lt;code&gt;py-script&lt;/code&gt; blocks in different versions of Pyodide&lt;/li&gt;
    &lt;li&gt;Running &lt;code&gt;py-script&lt;/code&gt; blocks in runtimes that are &lt;i&gt;not&lt;/i&gt; Pyodide (Micropython??)&lt;/li&gt;
    &lt;li&gt;Running &lt;code&gt;py-script&lt;/code&gt; blocks in a self-built/custom build of Pyodide for experimentation or demonstrating new features&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Try PyScript&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A new &lt;a href=&#34;https://github.com/pyscript/pyscript#try-pyscript&#34;&gt;Try PyScript&lt;/a&gt; section now leads the main ReadMe on the PyScript GitHub, to more quickly get new users up to speed on how to try out PyScript in their browser.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Contributing&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; guide has been fleshed out with more guidance on developing submitting useful issues, forking the repository for local building and setting up the a development environment, and more. Both Mariana Meireles and Fabio Rosado have contributed excellent information on &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/066ecbe02219e9c9ff5aff28a57d37e7baba8ace&#34;&gt;how to build PyScript&lt;/a&gt; and &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/d203b60f446c347fdb59b6c1350e6b3a2d9f7d66&#34;&gt;how to create and submit a Pull Request&lt;/a&gt; - every open source project should be so lucky!&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;How Tos&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Two new How-To guides were added to the documentation. The first covers &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/howtos/http-requests.md&#34;&gt;how to make HTTP requests in pure Python&lt;/a&gt; by using pyodide&#39;s &lt;code class=&#34;code&#34;&gt;pyfetch&lt;/code&gt; method. The second illustrates the techniques for &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/howtos/passing-objects.md&#34;&gt;passing objects between JavaScript and Python (in PyScript)&lt;/a&gt;, including some slightly-cursed uses of JavaScript&#39;s &lt;code&gt;eval()&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Getting Started&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md&#34;&gt;Getting Started&lt;/a&gt; guide got a huge update to reflect the new &lt;code&gt;&amp;lt;py-config&amp;gt;&lt;/code&gt; changes (see above).&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Pyodide&#34;&gt;Pyodide&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s no secret that the beating heart of the PyScript project is the &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide project&lt;/a&gt;, which makes it possible to run Python in the browser by compiling the CPython runtime to Web Assembly. (This is now &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/792&#34;&gt;nicely highlighted at the top of the PyScript readme&lt;/a&gt;.) Which means that improvements to Pyodide are big boons for PyScript!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While PyScript&#39;s Alpha and 2022.06.1 were designed around Pyodide 20, PyScript 2022.09.1 fully embraces Pyodide 21.2 and the many changes and improvements it brings. We&#39;ll only hit the highlights here; for more details, see the &lt;a href=&#34;https://blog.pyodide.org/posts/0.21-release/&#34;&gt;Pyodide 21 Release Post&lt;/a&gt; and &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#version-0-21-0&#34;&gt;Change Log&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;API Changes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This is probably the most visible change for the casual PyScriptian - the functionality of the Pyodide Python API has been &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2787&#34;&gt;divied&lt;/a&gt; &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2790&#34;&gt;up&lt;/a&gt; into &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api.html&#34;&gt;a number of individual packages&lt;/a&gt; for clarity and namespace control. So now, rather than using &lt;code class=&#34;code&#34;&gt;from pyodide import create_proxy&lt;/code&gt;, one would use &lt;code class=&#34;code&#34;&gt;from pyodide.ffi import create_proxy&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_hi&lt;/span&gt;(name):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hi, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;FutureWarning&lt;/span&gt;: pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy has been moved to pyodide&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ffi&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_proxy Accessing it through the pyodide module &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; deprecated&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The old locations of the functions are still present but deprecated in version 21, so this change alone won&#39;t break code written for Pyodide 20. But you will see a deprecation warning, and any new code should obey the new namespacing as the deprecation&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Python Wrappers for &lt;code&gt;addEventListener&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt;, and more&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;As part of the reorganization mentioned above, the Pyodide API &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2456&#34;&gt;added a bunch of Python utility functions&lt;/a&gt; that handle common JS actions. Specifically, within the a[href=&#34;https://pyodide.org/en/stable/usage/api/python-api/ffi.html&#34;&gt;&lt;code&gt;pyodide.ffi.wrappers&lt;/code&gt; namespace, we now have functions for &lt;code class=&#34;code&#34;&gt;add_event_listener&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;remove_event_listener&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;set_timeout&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;clear_timeout&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;set_interval&lt;/code&gt;, and &lt;code class=&#34;code&#34;&gt;clear_interval&lt;/code&gt;. This avoids the need import those JS functions directly from &lt;code&gt;js.document&lt;/code&gt;, and since the Python functions automatically wrap passed functions with &lt;code&gt;create_proxy&lt;/code&gt;, that can be left out as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
  
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide.ffi.wrappers&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; add_event_listener
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_bye&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Goodbye!&amp;#34;&lt;/span&gt;)
    
    tag &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-div&amp;#34;&lt;/span&gt;)
    add_event_listener(tag, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, say_bye)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;pyodide.code.run_js&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Yet another API addition is &lt;code class=&#34;code&#34;&gt;pyodide.code.run_js&lt;/code&gt;, which &lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/code.html#pyodide.code.run_js&#34;&gt;evaluates the passed JavaScript code&lt;/a&gt; and returns the result as a JSProxy object. This removes the need to, for example, import &lt;code&gt;eval&lt;/code&gt; from JavaScript to execute JS within Python. A nice clean feature.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;New Packages&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;A whole load of new packages have now been bundled with Pyodide, including &lt;code&gt;opencv-python&lt;/code&gt;, &lt;code&gt;ffmpeg&lt;/code&gt;, &lt;code&gt;svgwrite&lt;/code&gt;, &lt;code&gt;sqlite3&lt;/code&gt;, &lt;code&gt;python-magic&lt;/code&gt;, and many more. See the &lt;a href=&#34;https://pyodide.org/en/stable/project/changelog.html#packages&#34;&gt;full list&lt;/a&gt; to see if your favorite package is now included.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Improved Build Process for Binary Wheels&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For those looking to integrate their own Python wheels into apps built with Pyodide, the process for building binary wheels for Pyodide has been significantly improved. See &lt;a href=&#34;https://blog.pyodide.org/posts/0.21-release/#building-binary-wheels-for-pyodide&#34;&gt;the Pyodide team&#39;s blog post on Binary Wheels&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;JavaScript Array Slicing&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There are lots of little edge cases and behaviors where JavaScript&#39;s and Python&#39;s behaviors are different, and the Pyodide team is constantly working on new ways to make that interface less painful. Recently, they&#39;ve implemented &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2907&#34;&gt;slicing on JavaScript array objects&lt;/a&gt; that obeys the same syntax as Python lists, which is a neat feature for those passing data from the browser into Python for processing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s been some &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2938&#34;&gt;additional work and corrections&lt;/a&gt; to this process, and I&#39;d imagine we&#39;ll continue to see it evolve and refine.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Correct Handling of Objects with Null Constructor&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This is a &lt;a href=&#34;https://github.com/pyodide/pyodide/pull/2520&#34;&gt;small but necessary improvement&lt;/a&gt; - previously, it was difficult (if not impossible) to import a javascript &lt;span class=&#34;italic&#34;&gt;module&lt;/span&gt; into Python-in-Pyodide, since JS modules don&#39;t have constructors, but Python expects everything (including modules) to be an object, and so would try to &#34;construct&#34; them. Now, JavaScript module imports work as expected.&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Emscripten&#34;&gt;Emscripten &lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Just as PyScript uses Pyodide as its primary runtime to run Python in the browser, so Pyodide relies on Emscripten to compile CPython &lt;span class=&#34;italic&#34;&gt;for&lt;/span&gt; the browser. Pyodide 21 now moves from using Emscripten version 2.0.27 to version 3.1.14&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To be honest, I&#39;m not well enough versed in EmScripten to be able to parse the &lt;a href=&#34;https://github.com/emscripten-core/emscripten/blob/main/ChangeLog.md&#34;&gt;changelog details&lt;/a&gt; enough to highlight them. If you&#39;re more familiar with that program and its capabilities, &lt;a href=&#34;https://twitter.com/JeffersGlass&#34;&gt;let me know!&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The last two categories of changes really shouldn&#39;t impact end-users of PyScript much, but they&#39;re already making a huge difference to the PyScript devs and maintainers. Prior to this release, there wasn&#39;t much of a testing regimin. Now there&#39;s multiple different means of testing the Python and TypeScript code that make up PyScript, as well as integration tests that test them &lt;span class=&#34;italic&#34;&gt;both&lt;/span&gt;, making it easier and faster to tell when something&#39;s going to break. The testing methods are:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/pyscript/pyscript/tree/main/pyscriptjs/tests/integration&#34;&gt;Integration Tests&lt;/a&gt; with &lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt; - loads HTML pages in the browser and checks that PyScript works as intended.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/pyscript/pyscript/commit/8aba271a421ac9d22006fcaeb776efe686d3892c&#34;&gt;TypeScript Testing&lt;/a&gt; with &lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt; - Testing whether Py-Script elements load correctly via TS/jS&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/pyscript/pyscript/tree/main/pyscriptjs/tests/py-unit&#34;&gt;Python Tests&lt;/a&gt; with &lt;a href=&#34;https://docs.pytest.org/en/7.1.x/&#34;&gt;PyTest&lt;/a&gt; - Test functionality in PyScript.py, Python things like Element, PyScript, ContextManager, etc. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Infrastructure&#34;&gt;Infrastructure&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, there&#39;s the bounty of little improvements that make the codebase stronger and the dev process more repeatable.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Continuous Deployment&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;The CI/CD pipeline continues to get refined and grow more resiliant - there have been some improvements to the CD process to ensure &lt;a href=&#34;https://github.com/pyscript/pyscript/commit/ebfed27630c1e41fb42f3a67ef5978df1c9a71c3&#34;&gt;PyScript is rebuilt with every commit and pushed to Unstable&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Type Annotations&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;PyScript is being developed in TypeScript, which has the nice property of allowing quick prototyping with loose typing and gradually refining the typing to make the Linter/compiler happier. Several users, especially contributor &lt;a href=&#34;https://github.com/woxtu&#34;&gt;Woxtu&lt;/a&gt; have been hard at work makign sure types line up, Promises are resolved, and type signatures are accurate.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Though end-users don&#39;t see the results directly, having thorough and consistant type signatures makes it easy to spot smelly code when adding new features. Does this function &lt;span class=&#34;italic&#34;&gt;really&lt;/span&gt; need to return two different types of thing, or should we be rethinking the code structure? Why is this &lt;code&gt;any&lt;/code&gt; necessary?&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;&lt;/h4&gt;
&lt;h2 class=&#34;pb-1 border-b-2 border-gray-300 post-h2 anchor&#34; id=&#34;Next&#34;&gt;What&#39;s Next?&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;So what&#39;s coming down the pipe next for PyScript? Frankly, a ton, and that work is largely visible in the open PR&#39;s and issues on the PyScript GitHub.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;New Output and Rendering Design&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;One of the largest overhauls coming to a near-future version of PyScript is a total rethink of how PyScript renders to the browser window. &lt;code class=&#34;code&#34;&gt;print()&lt;/code&gt; is the right output method for a terminal, but it doesn&#39;t quite make sense in the context of a browser window, where the world of UI is much much larger.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To that end, there&#39;s a &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/622&#34;&gt;large project in the works&lt;/a&gt; that, among other things:
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Introduces a new &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/749&#34;&gt;display() function&lt;/a&gt;, which is the preferred way of outputting to the browser window&lt;/li&gt;
    &lt;li&gt;Routes stdout to the developer console by default&lt;/li&gt;
    &lt;li&gt;Improves escaping of HTML-like text included inside PyScript source&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The exact syntax and methodology of &lt;code&gt;display()&lt;/code&gt; is &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/769&#34;&gt;still being hashed out&lt;/a&gt;, but work is proceding a breakneck pace, and it&#39;ll be exciting to see where it ends up.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;PyScript Lifecycle Changes&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Antonio Cuni et. al. have &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/763&#34;&gt;laid the groundwork&lt;/a&gt; for a sweeping rethink of how PyScript manages the lifecylce of initializing, loading Pyodide, processing tags into custom elements, and more. It includes provisions for user-created plugins (to extend functionality) and widgets (essentially custom tags) on the page, in more-or-less a plug-and-play fashion.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This isn&#39;t the kind of dish that can be cooked up in 20 minutes - it&#39;ll touch almost every part of the PyScript codebase. But it&#39;s exciting to see the code moving in a direction that&#39;s more flexible and understandable, which will only make it more expansible.&lt;/p&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Async Behavior&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;This one is near and dear to my heart. Exactly how asynchronous code should function in PyScript has been a hot topic for some of the maintainers, considering &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/751&#34;&gt;we broke it&lt;/a&gt; and &lt;a href=&#34;https://github.com/pyscript/pyscript/pull/796&#34;&gt;had to fix it&lt;/a&gt; again.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Pyodide has a curious feature that allows you to run code with Top Level Await, since there&#39;s always an event loop running (the browser event loop). This is both handy and confusing, since it doesn&#39;t correspond to the experience of running Python in a terminal at all. So what&#39;s to be done? Perhaps we need to &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/751#issuecomment-1250991639&#34;&gt;further specify the execution order of async tags&lt;/a&gt;? Or &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/751#issuecomment-1260999684&#34;&gt;preclude top-level-await entirely&lt;/a&gt;? Do we even entirely understand how Pyodide is interacting with the browser event loop? What if an async task never terminates? Lots to be done here.&lt;/p&gt; 
&lt;h4 class=&#34;post-h4&#34;&gt;And More&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s plenty more swirling around in the PyScript ecosystem - &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/808&#34;&gt;web workers&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/804&#34;&gt;arrow functions&lt;/a&gt;, &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/756&#34;&gt;further documentation&lt;/a&gt;, a &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/558&#34;&gt;file API&lt;/a&gt;... &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, not all ideas become plans, and not all plans become reality, but there&#39;s no lack of great ideas to keep pushing PyScript forward.&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Monkeypatching Rich for Beautiful Terminals in Pyscript</title>
      <link>https://jeff.glass/post/pyscript-rich/</link>
      <pubDate>Tue, 27 Sep 2022 10:34:50 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-rich/</guid>
      <description>&lt;py-env&gt;
    - rich
    - Faker
    - paths:
        - _richsetup.py
        - scripts/working/livetable.py
&lt;/py-env&gt;
&lt;script src=&#34;https://pyscript.net/releases/2022.06.1/pyscript.js&#34; defer&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://pyscript.net/releases/2022.06.1/pyscript.css&#34; /&gt;
&lt;py-script src=&#34;./_richsetup.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;p-4 mt-4 bg-gray-100 border-2&#34;&gt;
    &lt;div class=&#34;grid items-center grid-cols-1 gap-y-2 xl:grid-cols-2&#34;&gt;
        &lt;div&gt;&lt;py-script src=&#34;./scripts/working/intro.py&#34;&gt;&lt;/py-script&gt;&lt;/div&gt;
        &lt;div&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;intro.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[bold]This text[/bold] is being [b]formatted[/b] by the [link https://github.com/Textualize/rich]Rich Console Formatting Library[/]&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and output with [yellow1 on grey15]&amp;lt;PyScript&amp;gt;[/]. There&amp;#39;s a [b link ../../project/richdemo]whole page of examples :link:[/]&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;The REPL below is automatically formatted with RICH;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Press [italic]shift+enter[/] or click :play_button: to execute the REPL:&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;p class=&#34;post-p&#34;&gt;&lt;/py-script&gt;&lt;py-repl id=&#34;top&#34; root=&#34;top&#34; auto-generate=&#34;true&#34;&gt;from rich import inspect; inspect(int)&lt;/py-repl&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;TL;DR: How to Use Rich in PyScript&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;To use Rich for the output of all your PyScript tags, add the following to a new PyScript take at the top of the page&#39;s &lt;code&gt;body&lt;/code&gt;:&lt;/p&gt;
&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;_richsetup.py&lt;/p&gt;
    
    
    &lt;div class=&#34;overflow-y-scroll h-52&#34;&gt;
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;sys&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; stdout, modules
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;contextlib&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; contextmanager

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.console&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; _is_jupyter
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.segment&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Segment
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.jupyter&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; JsException
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Per pyodide docs, determine if we&amp;#39;re running inside pyodide at Runtime&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;is_pyodide&lt;/span&gt;() &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pyodide&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; modules
 
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Patch jupyter detection of the global _console object to detect pyodide&lt;/span&gt;
c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()
c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; is_pyodide &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#monkeypatch jupyter detection @propety&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# patch function so if user creates any additional Consoles they behave correctly&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# While the global _console us&lt;/span&gt;
_is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; is_pyodide

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Jupyter display method renders html and writes to stdout&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display_pyscript&lt;/span&gt;(segments: Iterable[Segment], text: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Allow output of raw HTML within pyscript/pyodide&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    html &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_render_segments(segments)
    stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(html)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#patch jupyter display method to write processed HTML to stdout&lt;/span&gt;
rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; display_pyscript 

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# PyScripts OutputCTXManager is used for stdout but does not implement&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# full fill interface; this prevents a warning each time console tries&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# to print&lt;/span&gt;
stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flush &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;##---- Redefine Pyscript.write()---&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;output_buffer&lt;/span&gt;():
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A (inefficient) buffer to capture stdout to a string &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;write&lt;/span&gt;(self, value: &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;internal_buffer &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;br&amp;gt;&amp;#39;&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; value

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;read&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;flush&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@contextmanager&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;stdout_to_buffer&lt;/span&gt;(el:Element, append: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A context manager to manage an output_buffer, writes to an Element on closure&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; stdout &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Usually Pyscript OutputCTXManager at this pont&lt;/span&gt;
    _old_stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stdout
    stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; output_buffer()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;yield&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;finally&lt;/span&gt;:
        el&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_write(stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read(), append)
        stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _old_stdout 

Element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_write &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Allow Element.write() to take an object from rich&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;newWrite&lt;/span&gt;(self, value, append: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A Monkeypatched version of Pyscript&amp;#39;s Element.write(), auto-transforming Rich objects and rendering standard objects. &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;isinstance&lt;/span&gt;(value, (&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;, JsException)):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_write(value, append)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; stdout_to_buffer(self, append):
            get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(value)

Element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newWrite&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
    
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Live updates work a little differently in PyScript than they do in the terminal - see the &lt;a href=&#34;#live-updates&#34;&gt;Live Updates&lt;/a&gt; section for details.&lt;/p&gt;
&lt;blockquote class=&#34;warning-banner&#34;&gt;This code was written (and is running on this page on) &lt;span class=&#34;font-semibold&#34;&gt;PyScript Version 2022.06.1&lt;/span&gt;. Since there&#39;s an &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/622&#34;&gt; overhaul of how PyScript renders&lt;/a&gt; coming very soon, check the documentation for updates.&lt;/blockquote&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Background&lt;/h2&gt;
&lt;div class=&#34;flex flex-col lg:flex-row&#34;&gt;
    &lt;div class=&#34;w-full lg:w-3/5&#34;&gt;
        &lt;p class=&#34;post-p&#34;&gt;Though PyScript is still in its infancy, the possibilities unlocked by running Python in a browser are already blossoming. As such, I&#39;m seeing more and more users on the &lt;a href=&#34;https://community.anaconda.cloud/c/tech-topics/pyscript/41&#34;&gt;official forums&lt;/a&gt;, the &lt;a href=&#34;https://discord.com/invite/TynfPGRwda&#34;&gt;unofficial Discord&lt;/a&gt;, and the &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;Github Issue Tracker&lt;/a&gt; interested in working with their favorite libraries to the web. Let&#39;s look at the process of taking a package that &lt;span class=&#34;italic&#34;&gt;runs&lt;/span&gt; but doesn&#39;t run &lt;span class=&#34;italic&#34;&gt;well&lt;/span&gt;, and see how we can use patch it after import to bring it to life using Pyscript.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;Lots of packages work fine right out of the box - anything &lt;a href=&#34;https://pyodide.org/en/stable/usage/loading-packages.html#loading-packages&#34;&gt;written in Pure Python stands a good chance of at least running&lt;/a&gt;. But just because it runs, doesn&#39;t mean it&#39;ll look good or behave the way we expect objects to on a webpage. Interactive packages, like &lt;a href=&#34;https://matplotlib.org/&#34;&gt;matplotlib&lt;/a&gt; or terminal-based packages like &lt;a href=&#34;https://github.com/tqdm/tqdm&#34;&gt;tqdm&lt;/a&gt; or &lt;a href=&#34;https://github.com/tartley/colorama&#34;&gt;colorama&lt;/a&gt;, may not be immediately interactable in the browser, because they&#39;ve implemented their own methods for interpretting input/output that the browser doesn&#39;t play nicely with. Just because the PyScript/Pyodide interpretter doesn&#39;t crash doesn&#39;t mean you can get useful info in and out of an existing module.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;One such library is &lt;a href=&#34;https://github.com/Textualize/rich&#34;&gt;Rich&lt;/a&gt;: &#34;a Python library for rich text and beautiful formatting in the terminal&#34; by Will McGugan. It allows for tasteful pretty-printing of most Python objects, syntax highlighting, color and layout control and more, all written in Pure Python. See the sample image to the side or the linked homepage for bountiful exmaples.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;Of course, Rich is intended to run in the terminal. Since the display functionality in a web browser differs significantly from a terminal environment, there&#39;s no reason to expect it will work out of the box in PyScript. But since it exists as a pure Python wheel and is importable by Pyodide, I wanted to see what it would take to get it working.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;What follows is the result of a few hours of bashing things together. It&#39;s not meant to be production ready (thought it could turn into a module if there&#39;s interest). Rather, it&#39;s meant to demonstrate a patching strategy for modules that already integrate with web-Python environments like Jupyter and iPython.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;If you want to skip the dev log, you can skip to &lt;a href=&#34;patch&#34;&gt;the code that runs to patch Rich on this page &lt;/a&gt; or the &lt;a href=&#34;#examples&#34;&gt;gallery of Rich-in-PyScript samples&lt;/a&gt; below.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&#34;items-center justify-center w-auto mx-4 md:float-right md:w-96&#34;&gt;
        &lt;img src=&#34;rich-features.png&#34; alt=&#34;A demo of the features of the rich library, including colors, styles, text, markup etc&#34; class=&#34;mx-auto w-96&#34;&gt;
        &lt;p class=&#34;italic&#34;&gt;The demo image from the Rich GitHub page shows off its many features&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;The Groundwork&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The strategy we&#39;ll employ to get Rich working is called &#34;Monkeypatching.&#34; &lt;a href=&#34;https://web.archive.org/web/20120730014107/http://wiki.zope.org/zope2/MonkeyPatch&#34;&gt;From the Zope Wiki&lt;/a&gt;:&lt;/p&gt;
&lt;p class=&#34;p-2 mx-6 mb-4 italic bg-gray-100 border-l-4 border-gray-800&#34;&gt;A MonkeyPatch is a piece of Python code which extends or modifies other code at runtime (typically at startup)...The motivation for monkeypatching is typically that the developer needs to modify or extend behavior of a third-party product ... and does not wish to maintain a private copy of the source code.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, we&#39;ll be loading/importing Rich &lt;span class=&#34;italic&#34;&gt;as-is&lt;/span&gt;, modifying some of the attributes/methods/behaviors of its classes and functions and leaving others along. This will let us preserve the most of Rich&#39;s functionality untouched, while tweaking it just enough to work inside PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Almost all of the heavy lifting in terms of the formatting is handled by the fact Rich &lt;a href=&#34;https://www.willmcgugan.com/blog/tech/post/rich-adds-support-for-jupyter-notebooks/&#34;&gt;already supports Jupyter Notebooks&lt;/a&gt;, so there&#39;s already translation in place to translate Rich&#39;s internal formatting syntax to HTML. All we have to do is:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Import rich (which means it&#39;ll need to be present in our &lt;code class=&#34;code&#34;&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt;  &lt;/li&gt;
    &lt;li&gt;Hook into or replace the code that detects that we&#39;re running in a Notebook to instead tell that we&#39;re running inside Pyodide.&lt;/li&gt;
    &lt;li&gt;Take the output that would be fed to the notebook and feed it to &lt;code class=&#34;code&#34;&gt;stdout&lt;/code&gt;, where PyScript&#39;s context managers will get it to the right place&lt;/li&gt;
    &lt;li&gt;Overwrite the built-in &lt;code class=&#34;code&#34;&gt;print()&lt;/code&gt; function to point to rich&#39;s print function, to get nicely formatted printing&lt;/li&gt;
    &lt;li&gt;Point PyScript&#39;s &lt;code class=&#34;code&#34;&gt;Element.write()&lt;/code&gt; method at a new method that hooks into Rich&#39;s __rich_console__ and &lt;code class=&#34;code&#34;&gt;__rich__&lt;/code&gt; formatting methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;The Steps&lt;/h2&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Making Rich Think We&#39;re in a Jupyter Notebook&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Since we&#39;re intending to run this in a browser anyway, we could just set &lt;code class=&#34;code&#34;&gt;console.is_jupyter = True&lt;/code&gt; to force Rich to render HTML. But we&#39;ll be slightly nicer and redirect that property to a new function &lt;code class=&#34;code&#34;&gt;is_pyodide&lt;/code&gt;. This just looks to see if &#39;pyodide&#39; is in our available modules, &lt;a href=&#34;https://pyodide.org/en/stable/usage/faq.html#how-to-detect-that-code-is-run-with-pyodide&#34;&gt;as suggested by the pyodide FAQ&lt;/a&gt;. This means that whenever our code is running in Pyodide, the Rich library will render as if it&#39;s going to be output to a Jupyter notebook.&lt;/p&gt;
&lt;div class=&#34;mb-6 lg:mx-4&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Per pyodide docs, determine if we&amp;#39;re running inside pyodide at Runtime&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;is_pyodide&lt;/span&gt;() &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pyodide&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; modules
 
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Patch jupyter detection of the global _console object to detect pyodide&lt;/span&gt;
c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()
c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; is_pyodide &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#monkeypatch jupyter detection @propety&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# patch function so if user creates any additional Consoles they behave correctly&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# While the global _console us&lt;/span&gt;
_is_jupyter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; is_pyodide&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Replacing Rich&#39;s Display Function with our Own&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Similarly, we&#39;ll point &lt;code class=&#34;code&#34;&gt;rich.jupyter.display&lt;/code&gt; at a new function we&#39;ll write that gets the output that the Jupyter notebook would have received and send it to stdout. And, as noted above, we&#39;ll redirect the usual &lt;code class=&#34;code&#34;&gt;print&lt;/code&gt; function to the rich print function, to get nicely formatted outputs whenever we use the standard print() syntax.&lt;/p&gt;
&lt;div class=&#34;mb-6 lg:mx-4&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Jupyter display method renders html and writes to stdout&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;display_pyscript&lt;/span&gt;(segments: Iterable[Segment], text: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Allow output of raw HTML within pyscript/pyodide&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    html &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_render_segments(segments)
    stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(html)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#patch jupyter display method to write processed HTML to stdout&lt;/span&gt;
rich&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;jupyter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; display_pyscript 

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;post-h4&#34;&gt;Fixing &lt;span class=&#34;italic&#34;&gt;Element.write()&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, we need to match some adjustments to PyScript&#39;s &lt;code class=&#34;code&#34;&gt;Element.write()&lt;/code&gt; function, which is a utility method that allows PyScript users to send output to a specific DOM element directly. Since this bypasses the usual writing to stdout (and directly modifies the &lt;span class=&#34;italic&#34;&gt;innerHTML&lt;/span&gt; attribute of the DOM element), we need to do a little legwork to get the formatting to work.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In a nutshell, we&#39;ll solve this issue in 3 steps:
    &lt;ul class=&#34;post-ul&#34;&gt;
        &lt;li&gt;When the user&#39;s code calls to &lt;code class=&#34;code&#34;&gt;Element.write()&lt;/code&gt;, if the object written is a plain &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;Exception&lt;/code&gt;, or &lt;code&gt;JsException&lt;/code&gt;, we&#39;ll pass it though to &lt;code class=&#34;code&#34;&gt;Element.write()&lt;/code&gt; unchanged. This preserves some of the functionality around how PyScript currrently does error handling and presentation.&lt;/li&gt;
        &lt;li&gt;Otherwise, we&#39;ll use a context manager to temporarily redirect &lt;code&gt;stdout&lt;/code&gt; to a buffer, feed the object to &lt;code class=&#34;code&#34;&gt;rich.console.print()&lt;/code&gt;, and capture that output in the buffer.&lt;/li&gt;
        &lt;li&gt;When the context manager closes, it writes its contents to the appropriate element using the original &lt;code class=&#34;code&#34;&gt;Element.write()&lt;/code&gt; functionality.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; I&#39;ve implemented a rudementary &lt;a href=&#34;https://docs.python.org/3/glossary.html#term-file-object&#34;&gt;File-like object&lt;/a&gt; called &lt;code class=&#34;code&#34;&gt;output_buffer&lt;/code&gt; that simply saves anything written to it as a concatenated string. If this isn&#39;t the first thing in the buffer, we insert a &lt;code class=&#34;code&#34;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tag to make it start on a new line. This is admittedly a hack, but it largely gives the right appearance.&lt;/p&gt;
&lt;div class=&#34;mb-6 overflow-y-scroll h-76 lg:mx-4&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# PyScripts OutputCTXManager is used for stdout but does not implement&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# full fill interface; this prevents a warning each time console tries&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# to print&lt;/span&gt;
stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;flush &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;##---- Redefine Pyscript.write()---&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;output_buffer&lt;/span&gt;():
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A (inefficient) buffer to capture stdout to a string &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;write&lt;/span&gt;(self, value: &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;internal_buffer &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;br&amp;gt;&amp;#39;&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; value

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;read&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_internal_buffer

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;flush&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@contextmanager&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;stdout_to_buffer&lt;/span&gt;(el:Element, append: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A context manager to manage an output_buffer, writes to an Element on closure&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; stdout &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Usually Pyscript OutputCTXManager at this pont&lt;/span&gt;
    _old_stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stdout
    stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; output_buffer()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;yield&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;finally&lt;/span&gt;:
        el&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_write(stdout&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read(), append)
        stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _old_stdout 

Element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_write &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Allow Element.write() to take an object from rich&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;newWrite&lt;/span&gt;(self, value, append: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34; A Monkeypatched version of Pyscript&amp;#39;s Element.write(), auto-transforming Rich objects and rendering standard objects. &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;isinstance&lt;/span&gt;(value, (&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;, &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;, JsException)):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_write(value, append)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; stdout_to_buffer(self, append):
            get_console()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;print(value)

Element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; newWrite&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;What About ...&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Those who are familiar with the various ways Rich already provides to capture its own output, as well as exporting it as HTML, may have some reasonable questions here. It&#39;s surely possible I&#39;ve missed something in Rich&#39;s expansive API, but I didn&#39;t find a solution that did everything I want without implementing my own context manager. That said, it does feel like there shuold be a simpler way...&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;I wanted to make the default console returned by &lt;code class=&#34;code&#34;&gt;get_console()&lt;/code&gt; have the desired behavior, as well as any consoles the user created in the future. Hence the reason for overriding the _is_jupyter method instead of just making the default console &lt;code class=&#34;code&#34;&gt;force_jupyter=True&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Using &lt;code class=&#34;code&#34;&gt;Console.capture()&lt;/code&gt; captures the entire contents of the console, from which it can be exported (or saved as a file) to HTML, but there isn&#39;t a direct way to save just the user-input-turned-into-HTML as far as I know.&lt;/li&gt;
    &lt;li&gt;Because &lt;a href=&#34;https://github.com/Textualize/rich/blob/8e2da1afab8743d8e3c55b8191492cc5f9905b7f/rich/jupyter.py#L84-L95&#34;&gt;Rich&#39;s jupyter.display() method&lt;/a&gt; tries specifically to write to an iPython display, I needed to override this method to render the objects to HTML and just write those to std.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;With all these pieces put together, now most writes to stdout should be formatted using Rich&#39;s format rules.&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34; id=&#34;live-updates&#34;&gt;Live Updates&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;While there are lots of things that make running Python inside a browser window different from running in a terminal/desktop environment, one of the most striking is that we only have one event loop and we can&#39;t block it. Ever. Even a simple &lt;code class=&#34;code&#34;&gt;time.sleep(1)&lt;/code&gt; irrevocably blocks the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop&#34;&gt;JavaScript event loop&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is where asyncio comes to the rescue. The Pyodide runtime has a custom event loop (&#34;&lt;a href=&#34;https://pyodide.org/en/stable/usage/api/python-api/webloop.html#module-pyodide.webloop&#34;&gt;Webloop&lt;/a&gt;&#34;) that hooks to the asyncio webloop, allowing nonblock asynchronous operations. For example, we can use &lt;code class=&#34;code&#34;&gt;asyncio.sleep()&lt;/code&gt; instead of &lt;code&gt;time.sleep()&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;asynccontextmanager&lt;/code&gt;s instead of &lt;code&gt;context managers&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Hooking this deep into Rich&#39;s functionality requires some significant rewriting of the &lt;a href=&#34;https://rich.readthedocs.io/en/stable/live.html&#34;&gt;Live class&lt;/a&gt;, as well as an additional helper class that constantly refreshes the live display by adding new callouts to the event loop every quarter second. The full results are below.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you want to use the Live update element in your PyScript page, you&#39;ll want to:
    &lt;ul class=&#34;mb-6 post-ul&#34;&gt;
        &lt;li&gt;Add the following code to a PyScript tag near the top of your page.&lt;/li&gt;
        &lt;li&gt;Use the included &lt;code&gt;Live&lt;/code&gt; class instead of importing from &lt;code&gt;Rich.live&lt;/code&gt;. It has the same interface as Rich.live, though not all features are implemented yet.&lt;/li&gt;
        &lt;li&gt;Avoid using any blocking io calls, instead substituting with their async versions. For an example of how to use the new Live class &lt;a href=&#34;https://rich.readthedocs.io/en/stable/live.html&#34;&gt;in the same way Rich does&lt;/a&gt; (i.e. as a context manager), see the live examples on the &lt;a href=&#34;../../project/richdemo&#34;&gt;Rich Demo&lt;/a&gt; page.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;_livepatch.py&lt;/p&gt;
    
    
    &lt;div class=&#34;overflow-y-scroll h-52&#34;&gt;
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;153
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;154
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;155
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;156
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;157
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;158
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;159
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;160
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;161
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;162
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;163
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;164
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;165
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;166
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;167
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;168
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;169
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;170
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;171
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; get_console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.console&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Console, RenderableType, ConsoleRenderable
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Type, Optional, Callable, IO, List
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;types&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; TracebackType
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.live_render&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; VerticalOverflowMethod

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;PyscriptRefresher&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(
        self,
        renderable: RenderableType,
        element: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Element&amp;#39;&lt;/span&gt;,
        live: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Live&amp;#39;&lt;/span&gt;,
        refresh_per_second: &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,
    ) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; renderable
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;live &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; live
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; element
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh_per_second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; refresh_per_second
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;done &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;


    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update_live&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Starting update live function&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
            console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;About to write &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh_per_second)


    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;run&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Starts the refresh coroutine if it is not already running
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Returns:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            True if the coroutine was successfully created and started
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            False if the coroutine was already running, or not successfully created
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
        loop &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyscript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loop
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;About to start running refresh task&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; loop&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;create_task(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;update_live())
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#loop.run_until_complete(self._refresh_task)&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;stop&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Stops the refresh coroutine if it is running&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;cancel()
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Live&lt;/span&gt;():
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Renders an auto-updating live display of any given renderable.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Mirrors the API of rich.live.LIVE
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        renderable (RenderableType, optional): The renderable to live display. Defaults to displaying nothing.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        console (Console, optional): Optional Console instance. Default will an internal Console instance writing to stdout. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        auto_refresh (bool, optional): Enable auto refresh. If disabled, you will need to call `refresh()` or `update()` with refresh flag. Defaults to True &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        refresh_per_second (float, optional): Number of times per second to refresh the live display. Defaults to 4. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        transient (bool, optional): Clear the renderable on exit (has no effect when screen=True). Defaults to False. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        redirect_stdout (bool, optional): Enable redirection of stdout, so ``print`` may be used. Defaults to True. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        redirect_stderr (bool, optional): Enable redirection of stderr. Defaults to True. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        vertical_overflow (VerticalOverflowMethod, optional): How to handle renderable when it is too tall for the console. Defaults to &amp;#34;ellipsis&amp;#34;. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        get_renderable (Callable[[], RenderableType], optional): Optional callable to get renderable. Defaults to None. &amp;gt;&amp;gt;&amp;gt; NOT IMPLEMENTED
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        element_id (str): The id of a DOM element (often a div) that the live element will be written to
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        The screen parameters of rich.live.Live is not used
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(
        self,
        renderable: Optional[RenderableType] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;,
        element_id: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;,
        rich_console: Optional[Console] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;,
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#screen: bool attribute not used&lt;/span&gt;
        auto_refresh: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;,
        refresh_per_second: &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,
        transient: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;,
        redirect_stdout: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;,
        redirect_stderr: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;,
        vertical_overflow: VerticalOverflowMethod &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ellipsis&amp;#34;&lt;/span&gt;,
        get_renderable: Optional[Callable[[], RenderableType]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;,
        &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs
    ) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; refresh_per_second &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;refresh_per_second must be &amp;gt; 0&amp;#34;&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; renderable
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;console &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; rich_console &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; rich_console &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; get_console()
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#self._screen = screen&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_alt_screen &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_redirect_stdout &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; redirect_stdout
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_redirect_stderr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; redirect_stderr
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_restore_stdout: Optional[IO[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_restore_stderr: Optional[IO[&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;]] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#self._lock = RLock()&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;auto_refresh &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto_refresh
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;transient &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; transient

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;vertical_overflow &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; vertical_overflow
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_get_renderable &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; get_renderable

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; element_id &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element(element_id)

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh_per_second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; refresh_per_second
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_thread &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; PyscriptRefresher(renderable &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable, element &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element, live&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;self, refresh_per_second &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;refresh_per_second)
        

    &lt;span style=&#34;color:#99f&#34;&gt;@property&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;is_started&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Check if live display has been started.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_thread&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_task &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_renderable&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; RenderableType:
        renderable &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_get_renderable()
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_get_renderable &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable
        )
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; renderable &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;start&lt;/span&gt;(self, refresh: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Start live rendering display.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            refresh (bool, optional): Also refresh. Defaults to False.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; refresh: self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_thread&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;stop&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Stop live rendering display.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_refresh_thread&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stop()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __enter__(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Live&amp;#39;&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start(refresh&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __exit__(
        self,
        exc_type: Optional[Type[&lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;BaseException&lt;/span&gt;]],
        exc_val: Optional[&lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;BaseException&lt;/span&gt;],
        exc_tb: Optional[TracebackType],
    ) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stop()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;renderable&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_renderable

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update&lt;/span&gt;(self, renderable: RenderableType, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;, refresh: &lt;span style=&#34;color:#366&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Update the renderable that is being displayed
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Args:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            renderable (RenderableType): New renderable to use.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            refresh (bool, optional): Refresh the display. Defaults to False.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Not implemented&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;refresh&lt;/span&gt;(self) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;:
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Update the display of the Live Render.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#not implemented&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;process_renderables&lt;/span&gt;(
        self, renderables: List[ConsoleRenderable]
    ) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; List[ConsoleRenderable]:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#not implemented&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
    
&lt;/div&gt;
&lt;py-script src=&#34;_livepatch.py&#34;&gt;&lt;/py-script&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Live Table Demo&lt;/h3&gt;
&lt;div class=&#34;flex flex-col space-x-2 xl:flex-row gap-y-2&#34;&gt;
    &lt;div class=&#34;w-full bg-gray-200 border-2 border-gray-400 xl:w-1/2 &#34;&gt;
        &lt;py-script class=&#34;px-2&#34; src=&#34;scripts/working/livetable.py&#34;&gt;&lt;/py-script&gt;
        &lt;div id=&#34;live-table-output&#34; class=&#34;h-56 overflow-y-auto&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full xl:w-1/2&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;livetable.py&lt;/p&gt;
    
    
    &lt;div class=&#34;overflow-y-scroll h-52&#34;&gt;
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deque
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; random, choice, randint
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.table&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Table
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;rich.emoji&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Emoji
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;datetime&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; datetime
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;faker&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Faker
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#from livepatch import Live&lt;/span&gt;

fake &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Faker()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;):
    table &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Table(width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;80&lt;/span&gt;)
    table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add_column(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;, width&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)
    table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add_column(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Source&amp;#34;&lt;/span&gt;, width&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;)
    table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add_column(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Destination&amp;#34;&lt;/span&gt;, width&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;)

    max_rows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; randint(&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;)
    num_rows &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; num_rows &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; max_rows:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; Live(table, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;live-table-output&amp;#34;&lt;/span&gt;):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;.3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; random() &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;.6&lt;/span&gt;)
            num_rows &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

            time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;now()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;%S.&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;)
            time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; time[:&lt;span style=&#34;color:#366&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(time), &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)]
            source, dest &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fake&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ipv4(), fake&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ipv4()

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#data added here is automatically visible in the Table&lt;/span&gt;
            table&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add_row(time, source, dest)         &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
    
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;What Works and What Doesn&#39;t&lt;/h2&gt;
&lt;p class=&#34;italic post-p&#34;&gt;See the &lt;a href=&#34;../../project/richdemo&#34;&gt;demo page&lt;/a&gt; for working examples.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Out of the box, this allows for formatting of most static Rich objects: Text, Lists and Dicts, JSON objets, etc. The various formatting objects that rely on them - Panels, Columns, Layouts etc - also work.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Some specific formatting tags are broken - though personally, I&#34;m not too sad that &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; doesn&#39;t work.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Emoji are also (somewhat) broken, though that&#39;s mostly through me running out of time to look at their implementation in depth. A brief glance at the &lt;a href=&#34;https://github.com/Textualize/rich/blob/master/rich/emoji.py&#34;&gt;Emoji.py source&lt;/a&gt; makes it look like perhaps what I&#39;m doing for output is clobbering the unicode characters that should be output as Emoji? Or perhaps how they&#39;re being rendered - the TL;DR example at the top of the page shows (for me) a successful &#34;hand-pointing-down&#34; but a non-colored &#34;play button&#34;.&lt;/p&gt;
&lt;hr class=&#34;my-6&#34;&gt;    
&lt;h2 class=&#34;post-h3&#34;&gt;Things that Don&#39;t Work&lt;/h2&gt;
&lt;div class=&#34;flex flex-col space-y-6&#34;&gt;
    &lt;div class=&#34;flex flex-col space-x-2 xl:flex-row gap-y-2&#34;&gt;
        &lt;div class=&#34;w-full h-32 bg-red-100 border-2 border-gray-400 xl:w-1/2&#34;&gt;
        &lt;h3&gt;Some Text Formatting Options&lt;/h3&gt;
            &lt;py-script class=&#34;px-2&#34; src=&#34;scripts/not_working/richnonformatted.py&#34;&gt;&lt;/py-script&gt;
        &lt;/div&gt;
        &lt;div class=&#34;w-full xl:w-1/2&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;richnonformatted.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;[blink]Blinking Text[/blink]&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex flex-col space-x-2 xl:flex-row gap-y-2&#34;&gt;
        &lt;div class=&#34;w-full h-32 bg-red-100 border-2 border-gray-400 xl:w-1/2&#34;&gt;
        &lt;h3&gt;Emoji&#39;s (Ish)&lt;/h3&gt;
            &lt;py-script class=&#34;px-2&#34; src=&#34;scripts/not_working/richemoji.py&#34;&gt;&lt;/py-script&gt;
        &lt;/div&gt;
        &lt;div class=&#34;w-full xl:w-1/2&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;richemoji.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;:red_heart-emoji:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;:red_heart-text:&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;


&lt;!-- &lt;p class=&#34;line-through post-p&#34;&gt;What breaks, however, is anything that uses threading under the hood to operate: live-updating displays, progress bars, that sort of thing. Since &lt;a href=&#34;https://github.com/pyodide/pyodide/issues/237&#34;&gt;threading isn&#39;t currently supported in Pyodide&lt;/a&gt;, there&#39;s not much of a direct solution here, but some workarounds can be had by using &lt;span class=&#34;italic&#34;&gt;async-await&lt;/span&gt; to concurrently update the state of these objects. Check out the &lt;a href=&#34;#progress-bar&#34;&gt;progress-bar demo&lt;/a&gt; below for an example.&lt;/p&gt;
&lt;p class=&#34;px-2 mx-4 bg-gray-200 border-l-4 border-gray-800 post-p&#34;&gt;Since writing the above, I&#39;ve (almost) completed work on implementing a version of the &lt;a href=&#34;https://rich.readthedocs.io/en/stable/live.html&#34;&gt;Rich Live class&lt;/a&gt; using pyodide&#39;s event loop and async/await instead of threads. That work is detailed in a separate post (coming soon), but there are some previews on twitter in the meantime: &lt;a target=&#34;_blank&#34; href=&#34;https://twitter.com/JeffersGlass/status/1559634350513299456?s=20&amp;t=qHo-w2VcStd_-fWLtSdotQ&#34;&gt;[1]&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://twitter.com/JeffersGlass/status/1559671709250342917?s=20&amp;t=qHo-w2VcStd_-fWLtSdotQ&#34;&gt;[2]&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://twitter.com/JeffersGlass/status/1559682257312423937?s=20&amp;t=qHo-w2VcStd_-fWLtSdotQ&#34;&gt;[3]&lt;/a&gt;. I&#39;ve left the examples below that using async/await directly as an example of what you might do if you want to manage updates more manually.&lt;/p&gt; --&gt;

&lt;!-- &lt;style&gt;
    h3 {
        font-size: 1.5rem/* 24px */;
        line-height: 2rem/* 32px */;
        padding-bottom: 0.5rem;
        width: 100%;
        --tw-bg-opacity: 1;
        background-color: rgba(209, 213, 219, var(--tw-bg-opacity));
        padding-left: 0.25rem;
    }
&lt;/style&gt;

&lt;a id=&#34;patch&#34;&gt;&lt;/a&gt;
&lt;h2 class=&#34;mb-6 post-h2&#34; id=&#34;&#34;&gt;The Code&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s all of the code above compiled into a single .py file. To get Rich output on your own PyScript page, include the following code before any of your outputs, or as a separate file using &lt;code class=&#34;code&#34;&gt;src=&#34;...&#34;&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that you&#39;ll need to have the Rich module in your environment - the easiest way to do this is using &lt;code class=&#34;code&#34;&gt;&amp;lt;py-env&amp;gt; - rich &amp;lt;/py-env&amp;gt;&lt;/code&gt;&lt;/p&gt; --&gt;

    
&lt;/div&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Rich on PyScript</title>
      <link>https://jeff.glass/project/richdemo/</link>
      <pubDate>Sat, 10 Sep 2022 13:50:24 -0500</pubDate>
      
      <guid>https://jeff.glass/project/richdemo/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;tooltips.css&#34;&gt;
&lt;script src=&#34;//unpkg.com/alpinejs&#34; defer&gt;&lt;/script&gt;
&lt;script defer src=&#34;https://pyscript.net/releases/2022.06.1/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://pyscript.net/releases/2022.06.1/pyscript.css&#34;&gt;
&lt;py-env&gt;
    - rich
    - faker
    - paths:
        - ./_richsetup.py
        - ./scripts/liverunner.py
&lt;/py-env&gt;
&lt;script&gt;
    function createJSObject(object, variableName){
        //Bind a variable whose name is the string variableName
        // to the object called &#39;object&#39;
        let execString = variableName + &#34; = object&#34;
        console.log(&#34;Running `&#34; + execString + &#34;`&#34;);
        eval(execString)
    }
&lt;/script&gt;
&lt;py-script src=&#34;_richsetup.py&#34;&gt;&lt;/py-script&gt;
&lt;py-script src=&#34;livepatch.py&#34;&gt;&lt;/py-script&gt;
&lt;py-script src=&#34;cancel_tasks.py&#34;&gt;&lt;/py-script&gt;
&lt;py-script src=&#34;show_docstring.py&#34;&gt;&lt;/py-script&gt;
&lt;py-script&gt;
    #click Text button to start
    from js import document
    document.getElementById(&#34;button1&#34;).click()
&lt;/py-script&gt;
&lt;div id=&#34;intro&#34; class = &#34;block mb-1 text-sm&#34;&gt;
    &lt;p class=&#34;mb-1&#34;&gt;&lt;a href=&#34;https://rich.readthedocs.io/en/stable/introduction.html&#34;&gt;Rich&lt;/a&gt; is a Python library for writing rich text (with color and style) to the terminal, and for displaying advanced content such as tables, markdown, and syntax highlighted code. The page illustrates the core classes and concepts of the Rich library, runninng live in the browser via &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;PyScript&lt;/a&gt; (v2022.06.1). &lt;/p&gt;
    &lt;p&gt;Select any of the classes below to load a live code sample using that class. Select any of the demos to see them run in realtime. Try changing the code in the REPL to see the results! See the accompanying blog post for notes on &lt;a href=&#34;../../post/pyscript-rich/&#34;&gt;How to use Rich in PyScript&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;grid grid-cols-1 gap-y-2 lg:flex lg:flex-row&#34; x-data =&#34;{ scripts: [
    {id:  1, name: &#39;Text&#39;            , src: &#39;scripts/richtext.py&#39;            , type: &#39;script&#39;, referenceImports: &#39;from rich.text import Text&#39;, referenceObject: &#39;Text&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/text.html&#39;},
    {id:  2, name: &#39;Bar&#39;             , src: &#39;scripts/richbar.py&#39;            , type: &#39;script&#39;, referenceImports: &#39;from rich.bar import Bar&#39;, referenceObject: &#39;Bar&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/bar.html&#39;},
    {id:  3, name: &#39;Columns&#39;         , src: &#39;scripts/richcolumns.py&#39;         , type: &#39;script&#39;, referenceImports: &#39;from rich.columns import Columns&#39;, referenceObject: &#39;Columns&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/columns.html&#39;},
    {id:  4, name: &#39;Exception&#39;       , src: &#39;scripts/richexception.py&#39;       , type: &#39;script&#39;, referenceImports: &#39;from rich.console import Console&#39;, referenceObject: &#39;Console().print_exception&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/console.html?highlight=print_exception#rich.console.Console.print_exception&#39;},
    {id:  5, name: &#39;Group&#39;         , src: &#39;scripts/richgroup.py&#39;             , type: &#39;script&#39;, referenceImports: &#39;from rich.console import Group&#39;, referenceObject: &#39;Group&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/console.html?highlight=group#rich.console.Group&#39;},
    {id:  6, name: &#39;Highlighter&#39;      , src: &#39;scripts/richhighlighter.py&#39;   , type: &#39;script&#39;, referenceImports: &#39;from rich.highlighter import RegexHighlighter&#39;, referenceObject: &#39;regexHighlighter&#39;, note: &#39;This demo is adapted from the highlighter.py demo included with Rich&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/highlighter.html&#39;},
    {id:  7, name: &#39;Inspect&#39;          , src: &#39;scripts/richinspect.py&#39;        , type: &#39;script&#39;, referenceImports: &#39;from rich import inspect&#39;, referenceObject: &#39;inspect&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/init.html?highlight=inspect#rich.inspect&#39;},
    {id:  8, name: &#39;Layout&#39;          , src: &#39;scripts/richlayout.py&#39;          , type: &#39;script&#39;, referenceImports: &#39;from rich.layout import Layout&#39;, referenceObject: &#39;Layout&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/layout.html&#39;},
    {id:  9, name: &#39;Live&#39;            , src: &#39;scripts/liverunner.py&#39;          , type: &#39;script&#39;, referenceImports: &#39;&#39;, referenceObject: &#39;&#39;, apiLink: &#39;http://localhost:1313/post/pyscript-rich#live-updates&#39;},
    {id:  10, name: &#39;Logging&#39;         , src: &#39;scripts/richlogging.py&#39;         , type: &#39;script&#39;, referenceImports: &#39;from rich.logging import RichHandler&#39;, referenceObject: &#39;RichHandler&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/logging.html&#39;},
    {id:  11, name: &#39;Markdown&#39;         , src: &#39;scripts/richmarkdown.py&#39;      , type: &#39;script&#39;, referenceImports: &#39;from rich.markdown import Markdown&#39;, referenceObject: &#39;Markdown&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/markdown.html&#39;},
    {id:  12, name: &#39;Panel&#39;           , src: &#39;scripts/richpanel.py&#39;          , type: &#39;script&#39;, referenceImports: &#39;from rich.panel import Panel&#39;, referenceObject: &#39;Panel&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/panel.html&#39;},
    {id:  13, name: &#39;Progress Bar&#39;    , src: &#39;scripts/richprogressbar.py&#39;     , type: &#39;script&#39;, referenceImports: &#39;from rich.progress_bar import ProgressBar&#39;, referenceObject: &#39;ProgressBar&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/progress_bar.html&#39;},
    {id:  14, name: &#39;Syntax&#39;          , src: &#39;scripts/richsyntax.py&#39;          , type: &#39;script&#39;, referenceImports: &#39;from rich.syntax import Syntax&#39;, referenceObject: &#39;Syntax&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/syntax.html&#39;},
    {id:  15, name: &#39;Table&#39;          , src: &#39;scripts/richtables.py&#39;          , type: &#39;script&#39;, referenceImports: &#39;from rich.table import Table&#39;, referenceObject: &#39;Table&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/table.html&#39;},
    {id:  16, name: &#39;Traceback&#39;       , src: &#39;scripts/richtraceback.py&#39;       , type: &#39;script&#39;, referenceImports: &#39;from rich.traceback import install&#39;, referenceObject: &#39;install&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/traceback.html&#39;},
    {id:  17, name: &#39;Tree&#39;            , src: &#39;scripts/richtree.py&#39;            , type: &#39;script&#39;, referenceImports: &#39;from rich.tree import Tree&#39;, referenceObject: &#39;Tree&#39;, note: &#39;This code has been borrowed/adapted from the Rich documentation.&#39;, apiLink: &#39;https://rich.readthedocs.io/en/stable/reference/tree.html&#39;},
    

    //{id:  29, name: &#39;Jobs&#39;                         , src: &#39;scripts/jobs.py&#39;  , type: &#39;demo&#39;, note: &#39;This demo is adapted from the jobs.py demo included with Rich&#39;}
    {id:  30, name: &#39;REPL&#39;                          ,src: &#39;scripts/repl.py&#39;,     type: &#39;demo&#39;, note: &#39;Output from this live REPL will be formatted with Rich&#39;},
    {id:  34, name: &#39;Rainbow                &#39;      , src: &#39;scripts/richrainbow.py&#39;   , type: &#39;demo&#39;, note: &#39;This demo is adapted from the rainbow.py demo included with Rich&#39;},
    {id:  32, name: &#39;print_calendar&#39;                  , src: &#39;scripts/print_calendar.py&#39;      , type: &#39;demo&#39;, note: &#39;This demo is adapted from the print_calendar.py demo included with Rich&#39;},
    {id:  33, name: &#39;table_movie&#39;                  , src: &#39;scripts/table_movie.py&#39;      , type: &#39;demo&#39;, note: &#39;This demo is adapted from the table_movie.py demo included with Rich&#39;},
    {id:  31, name: &#39;dynamic_progress&#39;             , src: &#39;scripts/dynamic_progress.py&#39; , type: &#39;demo&#39;, note: &#39;This demo is adapted from the dynamic_progress.py demo included with Rich&#39;},
    {id:  50, name: &#39;PyScript`s Element.Write&#39;     , src: &#39;scripts/element-write.py&#39;    , type: &#39;demo&#39;},
    ],
    current_id: 0} &#34;&gt;
    &lt;div class=&#34;lg:hidden&#34; id=&#34;mobile-controls&#34;&gt;
        &lt;div class=&#34;grid grid-cols-1 px-2 py-2 bg-blue-50&#34; id=&#34;classes-panel&#34;&gt;
            &lt;div class=&#34;italic text-center text-blue-700&#34;&gt;Classes&lt;/div&gt;
            &lt;div id=&#34;rich-element-buttons&#34; class=&#34;flex flex-row flex-wrap justify-center w-auto gap-x-2 gap-y-1&#34;&gt;
                &lt;template x-for=&#34;my_script in scripts.filter(obj =&gt; {return obj.type === &#39;script&#39;})&#34; :key=&#34;my_script.id&#34;&gt;
                    &lt;button class=&#34;richbutton&#34; :id=&#34;&#39;button&#39; + my_script.id&#34; x-text=&#34;my_script.name&#34; @click=&#34; current_id = my_script.id; setReplCode(my_script.src); if (my_script.referenceObject != undefined) setInfo(my_script.referenceObject, my_script.referenceImports, my_script.apiLink)&#34; :class=&#34;my_script.id === current_id &amp;&amp; &#39;bg-blue-600 text-white font-semibold&#39;&#34;&gt;&lt;/p&gt;
                &lt;/template&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;grid grid-cols-1 px-2 py-2 bg-green-50&#34; id=&#34;demos-panel&#34;&gt;
            &lt;div class=&#34;italic text-center text-green-700&#34;&gt;Demos&lt;/div&gt;
            &lt;div id=&#34;rich-demo-buttons&#34; class=&#34;flex flex-row flex-wrap justify-center w-auto gap-x-2 gap-y-1&#34;&gt;
                &lt;template x-for=&#34;my_demo in scripts.filter(obj =&gt; {return obj.type === &#39;demo&#39;})&#34; :key=&#34;my_demo.id&#34;&gt;
                    &lt;button class=&#34;richbutton&#34; :id=&#34;&#39;demo&#39; + my_demo.id&#34; x-text=&#34;my_demo.name&#34; @click=&#34;setReplCode(my_demo.src); current_id = my_demo.id;&#34; :class=&#34;my_demo.id === current_id &amp;&amp; &#39;bg-green-600 text-white font-semibold&#39;&#34;&gt;&lt;/p&gt;
                &lt;/template&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&#34;desktop-controls&#34; class=&#34;flex-none hidden pl-1 pr-3 mt-2 bg-gray-100 border-r-2 border-gray-600 lg:block&#34;&gt;
        &lt;p class=&#34;text-lg font-semibold text-gray-600&#34;&gt;Rich Objects&lt;/p&gt;
        &lt;template x-for=&#34;my_script in scripts.filter(obj =&gt; {return obj.type === &#39;script&#39;})&#34; :key=&#34;my_script.id&#34;&gt;
            &lt;p&gt;&lt;button :id=&#34;&#39;scriptlink&#39; + my_script.id&#34; x-text=&#34;my_script.name&#34; @click=&#34;current_id = my_script.id; setReplCode(my_script.src); if (my_script.referenceObject != undefined) setInfo(my_script.referenceObject, my_script.referenceImports, my_script.apiLink)&#34; class=&#34;ml-2&#34; :class=&#34;my_script.id === current_id &amp;&amp; &#39;font-bold&#39;&#34;&gt;&lt;/p&gt;
        &lt;/template&gt;
        &lt;p class=&#34;mt-6 text-lg font-semibold text-gray-600&#34;&gt;Rich Demos&lt;/p&gt;
        &lt;template x-for=&#34;my_demo in scripts.filter(obj =&gt; {return obj.type === &#39;demo&#39;})&#34; :key=&#34;my_demo.id&#34;&gt;
            &lt;p&gt;&lt;button :id=&#34;&#39;demolink&#39; + my_demo.id&#34; x-text=&#34;my_demo.name&#34; @click=&#34;setReplCode(my_demo.src); current_id = my_demo.id;&#34; class=&#34;ml-2&#34; :class=&#34;my_demo.id === current_id &amp;&amp; &#39;font-bold&#39;&#34;&gt;&lt;/p&gt;
        &lt;/template&gt;
    &lt;/div&gt;
    &lt;div id=&#34;userpane&#34; class=&#34;grid flex-auto grid-cols-1 ml-2 xl:grid-cols-2&#34;&gt;
        &lt;div class=&#34;hidden my-2 ml-8 text-gray-600 lg:block xl:col-span-2&#34;&gt;
            &lt;h2 class=&#34;&#34;&gt;
                &lt;span class=&#34;text-3xl font-semibold&#34; x-text=&#34;scripts.find(obj =&gt; {return obj.id === current_id}).name&#34;&gt;
                    Text
                &lt;/span&gt;&lt;span id=&#34;api-link&#34; class=&#34;ml-2&#34;&gt;&lt;/span&gt;
                &lt;div id=&#34;docs&#34; class=&#34;1&#34;&gt;
                    &lt;div&gt;
                        &lt;meta charset=&#34;UTF-8&#34;&gt;
                        &lt;style&gt;
                        .r1 {color: #800080; text-decoration-color: #800080}
                        body {
                            color: #000000;
                            background-color: #ffffff;
                        }
                        &lt;/style&gt;
                        &lt;code&gt;
                            &lt;pre style=&#34;font-family:Menlo,&#39;DejaVu Sans Mono&#39;,consolas,&#39;Courier New&#39;,monospace&#34;&gt;Text with color &lt;span class=&#34;r1&#34;&gt;/&lt;/span&gt; style.
                            &lt;/pre&gt;
                        &lt;/code&gt;                  
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div class=&#34;px-4 py-2 mx-2 overflow-y-scroll bg-gray-200 xl:order-last max-h-160&#34;&gt;
            &lt;p class=&#34;italic text-center text-gray-600&#34;&gt;Output&lt;/p&gt;
            &lt;div id=&#34;output-container&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;py-2&#34; id=&#34;repl-box&#34;&gt;
            &lt;p class=&#34;italic text-center text-gray-600&#34;&gt;REPL&lt;/p&gt;
            &lt;div id=&#34;repl-container&#34; class=&#34;&#34;&gt;
                &lt;py-repl id=&#34;repl&#34;&gt;&lt;/py-repl&gt;
            &lt;/div&gt;
            &lt;div id=&#34;repl-note&#34; x-show=&#34;scripts.find(obj =&gt; {return obj.id === current_id}) != undefined &amp;&amp; scripts.find(obj =&gt; {return obj.id === current_id}).hasOwnProperty(&#39;note&#39;)&#34; 
                x-text=&#34;(scripts.find(obj =&gt; {return obj.id === current_id}) != undefined &amp;&amp; scripts.find(obj =&gt; {return obj.id === current_id}).hasOwnProperty(&#39;note&#39;)) ? scripts.find(obj =&gt; {return obj.id === current_id}).note : &#39;&#39;&#34;
                class=&#34;italic text-center text-gray-600&#34;&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
    async function setReplCode(filename){
        if (typeof cancelTasks != &#34;undefined&#34;){
            console.log(&#34;Cancelling async tasks&#34;);
            cancelTasks();
        }

        console.log(&#34;Loading code from &#34; + filename);
        const result = await fetch(filename)
        const code = await result.text()

        document.getElementById(&#34;repl&#34;).remove()
        const new_repl = document.createElement(&#34;py-repl&#34;)
        new_repl.textContent = code
        new_repl.id = &#34;repl&#34;
        if (filename.includes(&#39;repl&#39;)) {
            new_repl.setAttribute(&#34;auto-generate&#34;, &#34;true&#34;)
        }
        new_repl.setAttribute(&#34;std-out&#34;, &#34;output-container&#34;)

        document.getElementById(&#34;repl-container&#34;).appendChild(new_repl)
        document.getElementById(&#34;btnRun&#34;).click()
    }

    async function setInfo(object, imports, apiLink){
        console.warn(`setInfo on ${object}`)
        if (typeof get_object_info_html != &#34;undefined&#34; &amp;&amp; object != undefined){
            get_object_info_html(object, imports, apiLink);
        }

        else {
            clear_object_info();
        }
    }

   /*  document.getElementById(&#34;docs-link&#34;).addEventListener(&#39;click&#39;, () =&gt; {
        let apiTooltip = document.getElementById(&#34;docs&#34;)
        if (apiTooltip.style.visibility == &#39;hidden&#39;){
            apiTooltip.style.visibility = &#39;visible&#39;;
        }
        else {
            apiTooltip.style.visibility = &#39;hidden&#39;;
        }
    }); */
&lt;/script&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Hugo Shortcodes for Coding Blogs</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-shortcodes/</link>
      <pubDate>Tue, 23 Aug 2022 07:43:03 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-shortcodes/</guid>
      <description>&lt;script defer src=&#34;https://pyscript.net/releases/2022.06.1/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://pyscript.net/releases/2022.06.1/pyscript.css&#34; /&gt;
&lt;script defer src=&#34;https://pyscript.net/releases/2022.06.1/pyscript.css&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;As I&#39;ve been &lt;a href=&#34;tags/pyscript&#34;&gt;diving deep into PyScript&lt;/a&gt; the past couple months, I&#39;ve developed a handful of shortcodes for Hugo that make it quicker and easier to display code snippets on the page in a nicely formatted way.&lt;/p&gt;
&lt;p class=&#34;post-&#34;&gt;We&#39;ll use the following Python code as the source to be formatted. The code below is displayed by simply wrapped it in a pair of &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt; tags:&lt;/p&gt;
&lt;div class=&#34;p-2 m-2 bg-gray-100 border-2 border-gray-500&#34;&gt;
    &lt;pre&gt;
class hello_sayer:
    def __init__(self, greeting = &#34;Hello&#34;):
        self.greeting = greeting
    def say_hello(self, name):
        print(f&#34;{self.greeting}, {name}!&#34;)

if __name__ == &#34;__main__&#34;:
    h = hello_sayer(&#34;Good morning&#34;)
    h.say_hello(&#34;Jeff&#34;)&lt;/pre&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This really isn&#39;t a bad place to start, but now let&#39;s make it better.&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;All of the following assumes the &lt;a href=&#34;&#34; hef=&#34;https://xyproto.github.io/splash/docs/monokai.html&#34;&gt;monokai syntax highlighting theme&lt;/a&gt; and use of the &lt;a href=&#34;https://v2.tailwindcss.com/&#34;&gt;tailwind css framework&lt;/a&gt;. The custom css-classes used on this page are included &lt;a href=&#34;#css-classes&#34;&gt;at the end&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;highlight&#34; class=&#34;text-2xl&#34;&gt;Built-in &lt;code&gt;{{&amp;lt; highlight &amp;gt;}}&lt;/code&gt;&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can use Hugo&#39;s built-in &lt;code&gt;{{&amp;lt; highlight &amp;gt;}}&lt;/code&gt; shortcode to highlight our code.  This works fairly-well for simple code examples that you&#39;re copying and pasting into the document - it&#39;s also the default behavior if you&#39;re relyingon Markdown code fences to do highlighting for you.&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 space-y-2 lg:space-x-2 lg:space-y-0 lg:grid-cols-2&#34;&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-gray-500&#34;&gt;Code&lt;/p&gt;
        &lt;pre class=&#34;bg-gray-100 border-2 border-gray-500&#34;&gt;
{{ highlight python }}
    class hello_sayer:
        def __init__(self, greeting = &#34;Hello&#34;):
            self.greeting = greeting
        def say_hello(self, name):
            print(f&#34;{self.greeting}, {name}!&#34;)

    if __name__ == &#34;__main__&#34;:
        h = hello_sayer(&#34;Good morning&#34;)
        h.say_hello(&#34;Jeff&#34;)
{{ /highlight }}&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-green-500&#34;&gt;Result&lt;/p&gt;
        &lt;div class=&#34;p-1 border-2 border-green-500&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;hello_sayer&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; greeting
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_hello&lt;/span&gt;(self, name):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;!&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    h &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; hello_sayer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Good morning&amp;#34;&lt;/span&gt;)
    h&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;say_hello(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;loadcode&#34; class=&#34;mt-4 text-2xl&#34;&gt;Import Code with &lt;code&gt;loadcode&lt;/code&gt;&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The first and simplest shortcode I wrote I call &lt;code&gt;loadcode&lt;/code&gt;, which simply takes the contents of an external file and drops it into the current file. The source is:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;layouts/shortcodes/loadcode.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{{ os.ReadFile (.Get 0) | htmlUnescape | safeHTML}}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;If we move our &#34;hello_saver&#34; code into a separate file called &lt;code&gt;hellosayer.py&lt;/code&gt;, we can use &lt;code&gt;loadcode&lt;/code&gt; to dynamically load the text into our page. This allows for using an external code editor to work on the code itself (with autocompletion, linting etc) while keeping the display correct on the page.&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 space-y-2 lg:space-x-2 lg:space-y-0 lg:grid-cols-2&#34;&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-gray-500&#34;&gt;Code&lt;/p&gt;
        &lt;pre class=&#34;bg-gray-100 border-2 border-gray-500&#34;&gt;
&lt;pre&gt;{{&amp;lt; highlight python &amp;gt;}}
{{&amp;lt; loadcode &amp;quot;post/Cloud-Resume-Challenge-Shortcodes/hellosayer.py&amp;quot; &amp;gt;}}
{{&amp;lt; /highlight &amp;gt;}}&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-green-500&#34;&gt;Result&lt;/p&gt;
        &lt;div class=&#34;p-1 border-2 border-green-500&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;hello_sayer&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; greeting
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_hello&lt;/span&gt;(self, name):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;!&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    h &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; hello_sayer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Good morning&amp;#34;&lt;/span&gt;)
    h&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;say_hello(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;showcode&#34; class=&#34;mt-4 text-2xl&#34;&gt;Pleasing Code Displays with &lt;code&gt;{{&amp;lt; showcode &amp;gt;}}&lt;/code&gt;&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course when writing about code, it&#39;s nice for me to have a fairly standard format that code blocks are displayed in, including the title of the included file. The &lt;code&gt;showcode&lt;/code&gt; shortcode accomplishes this: it adds a nicely beveled header tag to the top of the code block, and ensures that if the code is over 20 lines, we prevent it from getting any longer and add a scrollbar. The second and third arguments to &lt;code&gt;showcode&lt;/code&gt; are the language to try to highlight and the highlight options:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;layouts/shortcodes/showcode.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;code-title&amp;#34;&lt;/span&gt;&amp;gt;{{ path.Base (.Get 0) }}&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    {{ $lines :=  len (split (os.ReadFile (.Get 0)) &amp;#34;\n&amp;#34;) }}
    {{ if ge $lines 21 }}
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-scroll h-124&amp;#34;&lt;/span&gt;&amp;gt;
    {{ end }}
    {{ highlight (os.ReadFile (.Get 0) | htmlUnescape | safeHTML) (.Get 1) (.Get 2) }}
    {{ if ge $lines 21 }}
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;post-img-caption&amp;#34;&lt;/span&gt;&amp;gt;Scroll to see complete code&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    {{ end }}
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Applying this to our &lt;code&gt;hellosayer.py&lt;/code&gt; example, we get:&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 space-y-2 lg:space-x-2 lg:space-y-0 lg:grid-cols-2&#34;&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-gray-500&#34;&gt;Code&lt;/p&gt;
        &lt;pre class=&#34;bg-gray-100 border-2 border-gray-500&#34;&gt;
&lt;pre&gt;{{&amp;lt; showcode &amp;quot;post/Cloud-Resume-Challenge-Shortcodes/hellosayer.py&amp;quot; &amp;quot;python&amp;quot; &amp;gt;}}&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-green-500&#34;&gt;Result&lt;/p&gt;
        &lt;div class=&#34;p-1 border-2 border-green-500&#34;&gt;
            &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;hellosayer.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;hello_sayer&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; greeting
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_hello&lt;/span&gt;(self, name):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;!&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    h &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; hello_sayer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Good morning&amp;#34;&lt;/span&gt;)
    h&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;say_hello(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;showandrun&#34; class=&#34;mt-4 text-2xl&#34;&gt;Displaying and Running PyScript Code with &lt;code&gt;{{&amp;lt; showandrun &amp;gt;}}&lt;/code&gt;&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;For an upcoming post about integrating the &lt;a href=&#34;https://rich.readthedocs.io/en/stable/&#34;&gt;Rich&lt;/a&gt; terminal formatting library with PyScript, I&#39;d like to be able to run a piece of Python code in PyScript on the page &lt;span class=&#34;italic&#34;&gt;and&lt;/span&gt; display its source code adjacent to it. For this, I use the &lt;code&gt;showandrun&lt;/code&gt; shortcode:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code&gt;showandrun&lt;/code&gt; creates a div which displays the source much like &lt;code&gt;showcode&lt;/code&gt; does; however, for my purposes, since it&#39;s intended specifically to run Python code and be formatted a specific way, the language is hardcoded to &#34;python3&#34; and the options are not passed from the shortcode.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The lengthy &lt;a href=&#34;https://v2.tailwindcss.com/&#34;&gt;tailwind&lt;/a&gt; class list in the first div ensures that the code and results live side-by-side on large screens, but get stacked one-over-the-other on smaller/mobile screens. We also accept a &#34;flip&#34; parameter which swaps the placement of the code and results, if desired.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;layouts/shortcodes/shownadrun.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex items-stretch flex-col-reverse space-y-2 {{ if (.Get &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;direction&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;)&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;eq&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;(.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;direction&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;)&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;flip&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;md:flex-row-reverse&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;md:space-x-2&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;md:space-x-reverse&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;md:flex-row&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;md:space-x-2&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex flex-col items-stretch w-full md:w-1/2&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex-none w-full italic h-7&amp;#34;&lt;/span&gt;&amp;gt;Live PyScript Results:&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124&amp;#34;&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px-2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ path.Base (.Get &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;)&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{{ strings.TrimSuffix &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;py&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;Base&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;(.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;))&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;-output&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full md:w-1/2&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;code-title&amp;#34;&lt;/span&gt;&amp;gt;{{ path.Base (.Get &amp;#34;file&amp;#34;) }}&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        {{ $lines :=  len (split (os.ReadFile (.Get &amp;#34;file&amp;#34;)) &amp;#34;\n&amp;#34;) }}
        {{ if ge $lines 21 }}
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-y-scroll h-124&amp;#34;&lt;/span&gt;&amp;gt;
        {{ end }}
        {{ highlight (os.ReadFile (.Get &amp;#34;file&amp;#34;) | htmlUnescape | safeHTML) &amp;#34;python3&amp;#34; &amp;#34;&amp;#34; }}
        {{ if ge $lines 21 }}
        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;post-img-caption&amp;#34;&lt;/span&gt;&amp;gt;Scroll to see complete code&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        {{ end }}
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The result, when applied to &lt;code&gt;hellosayer.py&lt;/code&gt;, is:&lt;/p&gt;

&lt;div class=&#34;grid grid-cols-1 space-y-2&#34;&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-gray-500&#34;&gt;Code&lt;/p&gt;
        &lt;pre class=&#34;bg-gray-100 border-2 border-gray-500&#34;&gt;
&lt;pre&gt;{{&amp;lt; showandrun file=&amp;quot;post/Cloud-Resume-Challenge-Shortcodes/hellosayer.py&amp;quot; direction=&amp;quot;flip&amp;quot; &amp;gt;}}&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&#34;&#34;&gt;
        &lt;p class=&#34;text-sm italic text-green-500&#34;&gt;Result&lt;/p&gt;
        &lt;div class=&#34;p-1 border-2 border-green-500&#34;&gt;
            &lt;div class=&#34;flex items-stretch flex-col-reverse space-y-2   md:flex-row-reverse md:space-x-2 md:space-x-reverse  &#34;&gt;
    &lt;div class=&#34;flex flex-col items-stretch w-full md:w-1/2&#34;&gt;
        &lt;div class=&#34;flex-none w-full italic h-7&#34;&gt;Live PyScript Results:&lt;/div&gt;
        &lt;div class=&#34;flex-auto w-full px-2 overflow-y-auto bg-gray-200 border-2 border-gray-400 max-h-124&#34;&gt;
            &lt;py-script class=&#34;px-2&#34; src=&#34;hellosayer.py&#34;&gt;&lt;/py-script&gt;
            &lt;div id=&#34;hellosayer-output&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full md:w-1/2&#34;&gt;
        &lt;p class=&#34;code-title&#34;&gt;hellosayer.py&lt;/p&gt;
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;hello_sayer&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; greeting
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;say_hello&lt;/span&gt;(self, name):
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;greeting&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;!&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    h &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; hello_sayer(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Good morning&amp;#34;&lt;/span&gt;)
    h&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;say_hello(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        
    &lt;/div&gt;
&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;a id=&#34;css-classes&#34;&gt;&lt;/a&gt;
&lt;h2 id=&#34;cssclasses&#34; class=&#34;mt-4 text-2xl&#34;&gt;CSS Classes&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Many of the examples above make use of a couple of &#39;css-classes&#39; in the tailwind style that I&#39;ve defined for ease of use. Their definitions (in both tailwind classes and raw css) are:&lt;/p&gt;
&lt;div class=&#34;pl-4 overflow-y-auto h-124&#34; style=&#34;background-color:#f0f0f0&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;/* in tailwind styles: */
.code-title {
    @apply table-cell px-6 py-1 font-semibold leading-tight text-center text-white rounded-t-xl;
    background-color: #f0f3f3;
}

/* in css: */
.code-title {
    display: table-cell;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
    padding-left: 1.5rem;
    padding-right: 1.5rem;
    color: #ffffff;
    font-weight: 600;
    line-height: 1.25;
    text-align: center;
    border-top-left-radius: 0.75rem;
    border-top-right-radius: 0.75rem;
    background-color: #f0f3f3;
}

/* in tailwind styles: */
.post-img-caption {
    @apply w-auto m-auto italic text-center;
    }

/* in css: */
.post-img-caption {
    font-style: italic;
    text-align: center;
    width: auto;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Pyscript/Pyodide and JS Object Passing</title>
      <link>https://jeff.glass/post/pyscript-js-functions/</link>
      <pubDate>Sun, 21 Aug 2022 07:38:14 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-js-functions/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;A question I&#39;ve been seeing quite a bit over in the &lt;a href=&#34;https://discord.gg/RUYqNXRN&#34;&gt;Unofficial PyScript Community Discord&lt;/a&gt; is: &lt;span class=&#34;italic font-semibold&#34;&gt;How do you pass objects back and forth between JavaScript and PyScript/Pyodide?&lt;/span&gt; So I&#39;ve created recipies below for passing objects back and forth between JavaScript and Python; the specifics are somewhat different depending on whether we&#39;re working in PyScript or directly in Pyodide, so both options are illustrated below.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Currently, you can:
    &lt;ul class=&#34;&#34;&gt;
        &lt;li&gt;✅ Pass objects from JavaScript to Python running in PyScript&lt;/li&gt;
        &lt;li&gt;✅ Pass objects from JavaScript Python running in Pyodide&lt;/li&gt;
        &lt;li&gt;✅ Pass objects from Python running in Pyodide to JavaScript&lt;/li&gt;
        &lt;l1&gt;⚠️ Pass objects from Python running in PyScript to JavaScript, with a little extra work. See the &lt;a href=&#34;#commentary&#34;&gt;commentary&lt;/a&gt; and &lt;a href=&#34;#demo&#34;&gt;live demo&lt;/a&gt; with the code sample below.&lt;/l1&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For our purposes, an &#39;object&#39; is anything that can be bound to a variable (a number, string, object, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function&#34;&gt;function&lt;/a&gt;, etc). Also, recall that the &lt;code class=&#34;code&#34;&gt;import js&lt;/code&gt; or &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; &lt;a href=&#34;https://pyodide.org/en/stable/usage/type-conversions.html#type-translations-using-js-obj-from-py&#34;&gt;in Pyodide&lt;/a&gt; gets objects from the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis&#34;&gt;JavaScript globalThis scope&lt;/a&gt;, so keep the &lt;a href=&#34;https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/&#34;&gt;rules of JavaScript variable scoping&lt;/a&gt; in mind.&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;(At time of writing, the most current versions are &lt;span class=&#34;&#34;&gt;PyScript Version 2022.06.1&lt;/span&gt; and &lt;span class=&#34;&#34;&gt;Pyodide v21&lt;/span&gt;. Both are changing fast, so if you&#39;re reading this in the far future, check the documentation and forums for new best procedures.)&lt;/p&gt;
&lt;h2 class=&#34;text-xl font-semibold post-p&#34;&gt;JavaScript to Python (PyScript)&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can use the simple &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; to import JavaScript objects directly into PyScript.&lt;/p&gt;
&lt;h3 class=&#34;code-title&#34;&gt;Javascript to Python (PyScript)&lt;/h3&gt;
&lt;div class=&#34;mb-6&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//A JS variable
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Define a JS Function
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; addTwoNumbers(x, y){
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; y;
    }
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Import and use JS function in Python&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; name, addTwoNumbers, console
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.Adding 1 and 2 in Javascript: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(addTwoNumbers(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;text-xl font-semibold post-p&#34;&gt;JavaScript to Python (Pyodide)&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;We can also use &lt;code class=&#34;code&#34;&gt;from js import ...&lt;/code&gt; to import JavaScript objects directly into Python in Pyodide. The syntax is identical to the PyScript example above - the &amp;lt;py-script&amp;gt; calls the &lt;code class=&#34;code&#34;&gt;runPython&lt;/code&gt; function for us (among other things).&lt;/p&gt;
&lt;h3 class=&#34;code-title&#34;&gt;Javascript to Python (Pyodide)&lt;/h3&gt;
&lt;div class=&#34;mb-6&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//A JS variable
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Define a JS Function
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; addTwoNumbers(x, y){
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; y;
    }

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; main() {
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;let&lt;/span&gt; pyodide &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; loadPyodide();
        result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyodide.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            # Import and use JS function in Python
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            from js import name, addTwoNumbers, console
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            console.log(&amp;#34;Hello &amp;#34; + name + &amp;#34;.Adding 1 and 2 in Javascript: &amp;#34; + str(addTwoNumbers(1, 2)))
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        `&lt;/span&gt;);
    }
    main();
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&#34;text-xl font-semibold post-p&#34;&gt;Python (Pyodide) to JavaScript&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;One we&#39;ve initialized the Pyodide runtime, the JS object &lt;code class=&#34;code&#34;&gt;pyodide.globals&lt;/code&gt; is a mapping that represents the global Python namespace. We can use the &lt;code class=&#34;code&#34;&gt;get()&lt;/code&gt; method to retrieve an object from this mapping and make use of it in JavaScript.&lt;/p&gt;
&lt;h3 class=&#34;code-title&#34;&gt;Python (Pyodide) to JavaScript&lt;/h3&gt;
&lt;div class=&#34;mb-6&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; pyodideRuntime &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; loadPyodide();
    pyodideRuntime.runPython(&lt;span style=&#34;color:#c30&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        name = &amp;#34;Jeff&amp;#34; # A Python variable
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        # Define a Python function
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        def multiplyTwoNumbers(x, y):
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            return (x * y)
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    `&lt;/span&gt;);
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Access and call it in JavaScript
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;let&lt;/span&gt; mult &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyodideRuntime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;multiplyTwoNumbers&amp;#39;&lt;/span&gt;);
    console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Multiplying 2 and 3 in Python: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; mult(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;));
    console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You&amp;#39;re welcome, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; pyodideRuntime.globals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;))
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;text-lg font-semibold&#34;&gt;Python (PyScript) to JavaScript&lt;/h3&gt;
&lt;a id=&#34;commentary&#34;&gt;&lt;/a&gt;
&lt;p class=&#34;post-p&#34;&gt;Since &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/494&#34;&gt;PyScript doesn&#39;t export its instance of Pyodide&lt;/a&gt; and only one instance of Pyodide can be running in a browser window at a time, there isn&#39;t currently a way for Javascript to access Objects defined inside PyScript tags &lt;span class=&#34;italic&#34;&gt;&#34;directly&#34;&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;However, I&#39;ve found a workaround using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&#34;&gt;JavaScript&#39;s eval() function&lt;/a&gt;, which executes a string as code much like &lt;a href=&#34;https://docs.python.org/3/library/functions.html#eval&#34;&gt;Python&#39;s eval()&lt;/a&gt;. First, we create a JS function &lt;code class=&#34;code&#34;&gt;createObject&lt;/code&gt; which takes an object and a string, then uses eval() to bind that string as a variable to that object. By calling this function from PyScript (where we have access to the Pyodide global namespace), we can bind JavaScript variables to Python objects without having direct access to that global namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; createObject(object, variableName){
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//Bind a variable whose name is the string variableName
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// to the object called &amp;#39;object&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;let&lt;/span&gt; execString &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; variableName &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; = object&amp;#34;&lt;/span&gt;
        console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Running `&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; execString &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;`&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#366&#34;&gt;eval&lt;/span&gt;(execString)
    }
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This takes a Python Object and creates a variable pointing to it in the JavaScript global scope. So what if we made a JavaScript variable point at... the Python global namespace?&lt;/p&gt;
&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;exportGlobals.py&lt;/p&gt;
    
    
    &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from js import createObject
from pyodide import create_proxy
createObject(create_proxy(globals()), &amp;#34;pyodideGlobals&amp;#34;)&lt;/code&gt;&lt;/pre&gt;
    
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This, amazingly, just works. All Python global variables are now accessible at in JavaScript with the syntax &lt;code class=&#34;code&#34;&gt;pyodideGlobals.get(&#39;myVariableName&#39;)&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s see an example running live. The three buttons below print the values of the variables &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; respectively, as looked up in the Python global namespace. Use the REPL to set the values of those variables, and see how JavaScript goes from seeing them as &#34;undefined&#34; to their value in PyScript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve pre-populated an example line in the REPL for you. Click the &#39;&lt;svg id=&#34;&#34; class=&#34;inline&#34; style=&#34;height:20px;width:20px;vertical-align:-.125em;transform-origin:center;overflow:visible;color:green&#34; viewBox=&#34;0 0 384 512&#34; aria-hidden=&#34;true&#34; role=&#34;img&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;g transform=&#34;translate(192 256)&#34; transform-origin=&#34;96 0&#34;&gt;&lt;g transform=&#34;translate(0,0) scale(1,1)&#34;&gt;&lt;path d=&#34;M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 29.99 73.03 39.04L361 215z&#34; fill=&#34;currentColor&#34; transform=&#34;translate(-192 -256)&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&#39; or press &lt;code&gt;shift-enter&lt;/code&gt; to run the current REPL line.&lt;/p&gt;
&lt;a id=&#34;demo&#34;&gt;&lt;/a&gt;
&lt;script src=&#34;createObject.js&#34;&gt;&lt;/script&gt;
&lt;py-script src=&#34;exportGlobals.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;grid grid-cols-1 md:grid-cols-2&#34;&gt;
    &lt;div&gt;
        &lt;py-repl auto-generate=&#34;true&#34;&gt;x = &#34;Hello, world!&#34;&lt;/py-repl&gt;
    &lt;/div&gt;
    &lt;div class=&#34;grid grid-cols-1&#34;&gt;
        &lt;input type=&#34;button&#34; id=&#34;x&#34; value=&#34;print(x)&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
        &lt;input type=&#34;button&#34; id=&#34;y&#34; value=&#34;print(y)&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
        &lt;input type=&#34;button&#34; id=&#34;z&#34; value=&#34;print(z)&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;w-full text-yellow-700 bg-yellow-100 border-2 border-yellow-700&#34;&gt;
    &lt;p class=&#34;text-sm italic&#34;&gt;#button-output&lt;/p&gt;
    &lt;div id=&#34;button-output&#34;&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script src=&#34;assignButtons.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;buttons.js&lt;/p&gt;
&lt;div class=&#34;overflow-x-auto&#34;&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;buttonOutput &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;button-output&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    buttonOutput.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; pyodideGlobals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
});

&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    buttonOutput.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; pyodideGlobals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
});

&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    buttonOutput.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; pyodideGlobals.get(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;mt-4 text-lg font-semibold&#34;&gt;A Deeper Dive&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;We don&#39;t have to export the entire Python global namespace as an object if we don&#39;t want to. The example below shows exporting a single list and a lambda function as JavaScript variables, using the same &lt;code class=&#34;code&#34;&gt;createObject&lt;/code&gt; function above.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Note that the names of the JavaScript variable and the Python variable don&#39;t have to be similar/identical/different - I&#39;ve named them similarly (&lt;code&gt;&#39;names&#39;&lt;/code&gt; and &lt;code&gt;&#39;names_js&#39;&lt;/code&gt;, &lt;code&gt;&#39;mutliplier&#39;&lt;/code&gt; and &lt;code&gt;&#39;multiplier_js&#39;&lt;/code&gt;) for readability.&lt;/p&gt;
&lt;span class=&#34;code-title&#34;&gt;Python (PyScript) to JavaScript&lt;/span&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy, to_js

names &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Jeff Glass&amp;#34;&lt;/span&gt;]
js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createObject(create_proxy(names), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;names_js&amp;#34;&lt;/span&gt;)

multiplier &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; z: z &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
js&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createObject(create_proxy(multiplier), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;multiplier_js&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;The code above binds the JavaScript variable &lt;code class=&#34;code&#34;&gt;names_js&lt;/code&gt; to a PyProxy of the Python list &lt;code class=&#34;code&#34;&gt;names&lt;/code&gt;, and the JavaScript variables &lt;code class=&#34;code&#34;&gt;multiplier_js&lt;/code&gt; to a PyProxy for the Python lambda function &lt;code class=&#34;code&#34;&gt;multiplier&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, this means we have to use the createObject function to &#34;export&#34; the objects from Python before we can use them in JavaScript. But this may be preferred for your use case.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With those objects created, we can refer to/call them like any other JS objects. To see this, let&#39;s add two buttons: one that references our function and list from within JavaScript (&#34;use-python-objects&#34;), and one that adds some names to our list so we can see it change (&#34;add-name&#34;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
    - faker
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;faker&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Faker

fake &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Faker()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_a_name&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    new_name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fake&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;name()
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Adding &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;new_name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; to names&amp;#34;&lt;/span&gt;)
    names&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(new_name)

Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;add-name&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_proxy(add_a_name))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;overflow-x-auto&#34;&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;use-python-objects&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
        console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Displaying contents of Python list &amp;#39;names&amp;#39;, calling Python function &amp;#39;multiplier&amp;#39;&amp;#34;&lt;/span&gt;)
        el &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;)
        el.innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//Clear contents of output
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; name &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;of&lt;/span&gt; names_js){
            el.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Name: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; name &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br\&amp;gt;&amp;#34;&lt;/span&gt;;
        };
        number &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;Math&lt;/span&gt;.floor(&lt;span style=&#34;color:#366&#34;&gt;Math&lt;/span&gt;.random() &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//random between 1 and 10
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        el.innerHTML &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; number &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; times two is &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; multiplier_js(number) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;lt;br\&amp;gt;&amp;#34;&lt;/span&gt;;
    });&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 class=&#34;mt-6 text-lg font-semibold&#34;&gt;Python (PyScript) Individual Objects to JavaScript Demo&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The code in the preceding section is running live on this page. Click &#34;Add Name to List&#34; to append a new name (provided by the Faker library) to the list &lt;code class=&#34;code&#34;&gt;names&lt;/code&gt;; click &#34;Use Python Objects&#34; to reference that list (and the &lt;code class=&#34;code&#34;&gt;multiplier&lt;/code&gt; function) and display the results in the green box. Open your browser&#39;s development console to see additional output.&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 space-x-1 space-y-2 md:grid-cols-2&#34;&gt;
    &lt;div class=&#34;grid grid-cols-2 space-x-1&#34;&gt;
        &lt;input type=&#34;button&#34; value=&#34;Use Python Objects&#34; id=&#34;use-python-objects&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
        &lt;input type=&#34;button&#34; value=&#34;Add a Name&#34; id=&#34;add-name&#34; class=&#34;p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-full h-auto bg-green-100 border-2 border-green-600&#34;&gt;
        &lt;p class=&#34;text-sm italic text-green-700&#34;&gt;#output:&lt;/p&gt;
        &lt;div  class=&#34;p-1&#34; id=&#34;output&#34;&gt;&lt;br&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;py-env&gt;
    - faker
&lt;/py-env&gt;
&lt;script defer src=&#34;https://pyscript.net/releases/2022.06.1/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://pyscript.net/releases/2022.06.1/pyscript.css&#34; /&gt;

&lt;script src=&#34;createObject.js&#34;&gt;&lt;/script&gt;
&lt;py-script src=&#34;registerJsObjects.py&#34;&gt;&lt;/py-script&gt;
&lt;py-script src=&#34;nameButton.py&#34;&gt;&lt;/py-script&gt;
&lt;script src=&#34;usePythonButton.js&#34;&gt;&lt;/script&gt;
&lt;h3 class=&#34;mt-4 text-lg font-semibold&#34;&gt;Viewing &lt;code&gt;globals()&lt;/code&gt;&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Since we have a reference to the PyScript global namespace, we can also just view its contents from JavaScript. And again so we can see it really changing, let&#39;s add a button that creates new Python objects with random names using &lt;a href=&#34;https://docs.python.org/3/library/functions.html#exec&#34;&gt;exec()&lt;/a&gt;:&lt;/p&gt;&lt;p class=&#34;code-title&#34;&gt;displayGlobals.js&lt;/p&gt;
&lt;div class=&#34;overflow-x-auto&#34;&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;printGlobals&amp;#34;&lt;/span&gt;).addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    console.warn(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Clicked print globals&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;globals&amp;#34;&lt;/span&gt;).innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; pyodideGlobals;
});&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;my-3&#34;&gt;&lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;makeNewObjects.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; choice, randint
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy, to_js

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;makePythonObject&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([choice(string&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ascii_lowercase) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)])
    value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; randint(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;)
    exec_string &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;global &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
    exec(exec_string)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;makeObject&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_proxy(makePythonObject))&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Click the Print Globals button to see the Python global objects visible from JavaScript; click the Make Python Variable to make a new Python variable with a 5-letter name (then click Print Globals again to see it). Since this shares a global namespace with the rest of the PyScript code on this page, you may also see variables like &#39;&lt;code&gt;x&lt;/code&gt;&#39;, &#39;&lt;code&gt;y&lt;/code&gt;&#39;, and &#39;&lt;code&gt;z&lt;/code&gt;&#39; from the example above.&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1 my-2 space-x-2 md:grid-cols-2&#34;&gt;
    &lt;input type=&#34;button&#34; value=&#34;Print Globals&#34; id=&#34;printGlobals&#34; class=&#34;col-span-1 p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
    &lt;input type=&#34;button&#34; value=&#34;Make Python Variable&#34; id=&#34;makeObject&#34; class=&#34;col-span-1 p-2 my-1 border-2 border-gray-700 rounded-md&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;w-full col-span-2 bg-blue-200 border-2 border-blue-700&#34;&gt;
    &lt;p class=&#34;text-sm italic text-blue-700&#34;&gt;#globals:&lt;/p&gt;
    &lt;div id=&#34;globals&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;makeNewObjects.py&#34;&gt;&lt;/py-script&gt;
&lt;script src=&#34;showGlobalsButton.js&#34;&gt;&lt;/script&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Uploading and Manipulating Images in Pyscript</title>
      <link>https://jeff.glass/post/pyscript-image-upload/</link>
      <pubDate>Tue, 31 May 2022 12:22:16 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-image-upload/</guid>
      <description>&lt;script defer src=&#34;../../ps/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;A curious dev on the &lt;a href=&#34;https://discord.com/invite/TynfPGRwda&#34;&gt;PyScript Discord&lt;/a&gt; (which you should really come check out) asked:&lt;/p&gt;
&lt;blockquote class=&#34;p-2 mx-6 my-4 italic bg-gray-200 border-l-4 border-gray-800&#34;&gt;I am taking file input in HTML where I am selecting image, how to show image when submit button is hit in PyScript?&lt;br&gt;&lt;br&gt;Actually, I need to use that file in PyScript to process. How can I do that?&lt;/blockquote&gt;
&lt;p class=&#34;post-p&#34;&gt;Well, there&#39;s an interesting question. How do we deal with uploaded files in Javascript/Pyscript?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For those looking to skip to the punchline - here&#39;s a working demo. We&#39;ll show off both the ability to upload and display images, as well as manipulating them with &lt;a href=&#34;https://pillow.readthedocs.io/en/stable/&#34;&gt;the Pillow image manipulation library&lt;/a&gt;:&lt;/p&gt;
&lt;py-env&gt;
    - Pillow
&lt;/py-env&gt;
&lt;div class=&#34;p-4 m-auto mt-6 mb-8 bg-blue-100 border-2 justify-items-center&#34;&gt;
    &lt;label for=&#34;File Upload&#34;&gt;Upload an image file here to display it onscreen.&lt;/label&gt;
    &lt;br&gt;&lt;input type=&#34;file&#34; id=&#34;file-upload&#34;&gt;
    &lt;div id=&#34;output_upload&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;./image_upload.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;p-4 m-auto mt-6 mb-8 bg-red-100 border-2 justify-items-center&#34;&gt;
    &lt;label for=&#34;File Upload&#34;&gt;Upload an image file here to display it onscreen with filters&lt;/label&gt;
    &lt;br&gt;&lt;input type=&#34;file&#34; id=&#34;file-upload-pillow&#34;&gt;
    &lt;div id=&#34;output_upload_pillow&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;./image_upload_pillow.py&#34;&gt;&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;If all has gone to plan, images uploaded in the first dialog should just appear onscreen full-size; images uploaded in the second dialog should appear below the upload dialog, having been (1) &#34;embossed&#34;, (2) rotated 45 degrees, (3) had any empty space filled with a dark green background, and (4) been rescaled to 300x300 pixels&lt;/p&gt;
&lt;h2 class=&#34;post-h2&#34;&gt;Simple Image Upload and Display&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The HTML portion of this project is very straightforward - an input with &lt;code class=&#34;code&#34;&gt;type=file&lt;/code&gt; and an ID to refer to it by, as well as an empty div for us to shove output in later:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Upload a PNG image&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file-upload&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output_upload&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./image_upload.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;p class=&#34;post-p&#34;&gt;The Pyscript portion of this example is only slightly more involved. We use &lt;code class=&#34;code&#34;&gt;addEventListener()&lt;/code&gt; to trigger a function when the selected file in the input field changes. Then we get the file targetted by that input, and create a temporary URL for it using &lt;code class=&#34;code&#34;&gt;window.URL.createObjectURL()&lt;/code&gt;. Finally, we create a new &lt;code class=&#34;code&#34;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and stick it inside our output div.&lt;/p&gt;
    &lt;p class=&#34;post-p&#34;&gt;If desired, this functionality could be trigged by submitting a form, clicking a separate &#34;Process Image&#34; button, or any other event. This demo just slaps the image up as soon as its chosen, for brevity of example.&lt;/p&gt;
    &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;image_upload.py&lt;/p&gt;
    
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console, window
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_upload_file_and_show&lt;/span&gt;(e):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Attempted file upload: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)
    file_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;files
    first_item &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; file_list&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;item(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    new_image &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;)
    new_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;src &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; window&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;URL&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createObjectURL(first_item)
    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output_upload&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(new_image)

upload_file &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_upload_file_and_show)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file-upload&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;change&amp;#34;&lt;/span&gt;, upload_file)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
&lt;/div&gt;

&lt;h2 class=&#34;mt-8 post-h2&#34;&gt;Image Processing with PILLOW&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;Things get slightly more involved if we want to use the Python Image Library (or its kinder wrapper, PILLOW) to work with the images. The HTML looks almost identical, but we do need to add Pillow to a new &lt;code class=&#34;code&#34;&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; tag so that micropip will install Pillow into our environment for us.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
        &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
    - Pillow
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Upload a PNG image&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file-upload-pillow&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output_upload_pillow&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./image_upload_pillow.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
        &lt;p class=&#34;post-p&#34;&gt;However, the Pyscript in this case is somewhat more involved, getting the bytes back and forth from Pyscript and the browser in formats they like. Full caveat - through testing, I &lt;span class=&#34;italic&#34;&gt;think&lt;/span&gt; all of these castings and conversions are necessary for this to work, but if anyone finds a shorter way, &lt;a href=&#34;https://twitter.com/jeffersglass&#34;&gt;please let me know!&lt;/a&gt;&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;That said, to load the image data into Pillow, we:&lt;/p&gt;
        &lt;ul class=&#34;post-ul&#34;&gt;
            &lt;li&gt;Get the raw bytes of data from the image using &lt;code class=&#34;code&#34;&gt;await item.arrayBuffer()&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Cast that data into a &lt;code class=&#34;code&#34;&gt;bytearray&lt;/code&gt; and then as an &lt;code class=&#34;code&#34;&gt;io.BytesIO&lt;/code&gt; object, which is an in-memory object that behaves as a file-like object for IO purposes.&lt;/li&gt;
            &lt;li&gt;Load that BytesIO object into Pillow using &lt;code class=&#34;code&#34;&gt;Image.open()&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p class=&#34;post-p&#34;&gt;Once we have the image loaded, we can do all of our usual Pillow-based adjustments to it - in this case, I&#39;m having it filter, rotate, fill, and resize the image using a succession of operations.&lt;/p&gt;
        &lt;p class=&#34;post-p&#34;&gt;Finally, to retrieve the data in a format that we can use in the DOM, we:&lt;/p&gt;
        &lt;ul class=&#34;post-ul&#34;&gt;
            &lt;li&gt;Create another &lt;code class=&#34;code&#34;&gt;BytesIO&lt;/code&gt; file-link object, and use &lt;code class=&#34;code&#34;&gt;Image.save()&lt;/code&gt; to write our image out to it.&lt;/li&gt;
            &lt;li&gt;Create a new &lt;code class=&#34;code&#34;&gt;File&lt;/code&gt; object containing the bytes of our image, with a placeholder name and a MIME type of &lt;code class=&#34;code&#34;&gt;image/png&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Create an URL we can use for this File using &lt;code class=&#34;code&#34;&gt;indow.URL.createObjectURL()&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Use that URL as the src of a new img tag (made with &lt;code class=&#34;code&#34;&gt;document.createElement()&lt;/code&gt;) and append that as a child of our div.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
        &lt;div&gt;
    &lt;p class=&#34;code-title&#34;&gt;image_upload_pillow.py&lt;/p&gt;
    
    
    &lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console, Uint8Array, window, File
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;io&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;PIL&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Image, ImageFilter

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_upload_change_and_show&lt;/span&gt;(e):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Get the first file from upload&lt;/span&gt;
    file_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;files
    first_item &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; file_list&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;item(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Get the data from the files arrayBuffer as an array of unsigned bytes&lt;/span&gt;
    array_buf &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Uint8Array&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; first_item&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;arrayBuffer())

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#BytesIO wants a bytes-like object, so convert to bytearray first&lt;/span&gt;
    bytes_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bytearray&lt;/span&gt;(array_buf)
    my_bytes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; io&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;BytesIO(bytes_list) 

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Create PIL image from np array&lt;/span&gt;
    my_image &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;open(my_bytes)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Log some of the image data for testing&lt;/span&gt;
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;my_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;format&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;my_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;my_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Now that we have the image loaded with PIL, we can use all the tools it makes available. &lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# &amp;#34;Emboss&amp;#34; the image, rotate 45 degrees, fill with dark green&lt;/span&gt;
    my_image &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; my_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;filter(ImageFilter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;EMBOSS)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;rotate(&lt;span style=&#34;color:#f60&#34;&gt;45&lt;/span&gt;, expand&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;, fillcolor&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;))&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;resize((&lt;span style=&#34;color:#f60&#34;&gt;300&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;300&lt;/span&gt;))

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Convert Pillow object array back into File type that createObjectURL will take&lt;/span&gt;
    my_stream &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; io&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;BytesIO()
    my_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;save(my_stream, &lt;span style=&#34;color:#366&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;PNG&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Create a JS File object with our data and the proper mime type&lt;/span&gt;
    image_file &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; File&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new([Uint8Array&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(my_stream&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getvalue())], &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;new_image_file.png&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;image/png&amp;#34;&lt;/span&gt;})

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Create new tag and insert into page&lt;/span&gt;
    new_image &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;)
    new_image&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;src &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; window&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;URL&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createObjectURL(image_file)
    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;output_upload_pillow&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(new_image)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Run image processing code above whenever file is uploaded    &lt;/span&gt;
upload_file &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_upload_change_and_show)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;file-upload-pillow&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;change&amp;#34;&lt;/span&gt;, upload_file)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
    
&lt;/div&gt;
    &lt;/div&gt;
    &lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>The 7 GUIs - Pyscript</title>
      <link>https://jeff.glass/project/the-7-guis-pyscript/</link>
      <pubDate>Thu, 12 May 2022 07:57:13 -0500</pubDate>
      
      <guid>https://jeff.glass/project/the-7-guis-pyscript/</guid>
      <description>&lt;script defer src=&#34;../../ps/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;style&gt;
    .project-row {
        padding-top: 1em;
        padding-bottom: 1em;
    }
    .project-description {
        text-align: justify;
        padding-top: 0.25em;
        padding-bottom: 0.25em;
    }
&lt;/style&gt;
&lt;p class=&#34;post-p&#34;&gt;Since &lt;a href=&#34;https://anaconda.cloud/pyscript-pycon2022-peter-wang-keynote&#34;&gt;its announcement at PyCon 2022&lt;/a&gt;, the Python community has been buzzing about &lt;a href=&#34;https://www.pyscript.com/&#34;&gt;PyScript&lt;/a&gt;, a framewok for creating and running Python applications in the browser. Below are implementations of &lt;a href=&#34;https://eugenkiss.github.io/7guis/tasks&#34;&gt;&#39;The 7 GUIs&#39; UI Challanges&lt;/a&gt; in PyScript, which hopefully will hopefully be educational for those looking to get into writing Python for the web. (They were certainly educational to create.)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For source code, a build-log, discussion of the examples and how they work, see &lt;a href=&#34;../../post/7-guis-pyscript&#34;&gt;the accompanying blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;Examples are only tested in Chrome on Desktop. Your experience on mobile/touch devices may vary. If you find a glaring error, or you make something cool with PyScript, &lt;a href=&#34;https://www.twitter.com/jeffersglass&#34;&gt;I want to hear about it!&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;grid grid-cols-1&#34; id=&#34;row-container&#34;&gt;
    &lt;div class=&#34;flex flex-col lg:flex-row project-row&#34;&gt;
        &lt;div class=&#34;flex items-center justify-centerw-full lg:w-1/2&#34;&gt;
            &lt;div&gt;
                &lt;div class=&#34;flex flex-row items-end&#34;&gt;
                    &lt;h3 class=&#34;mr-2 post-h3&#34;&gt;Counter&lt;/h3&gt;
                    &lt;span&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#counter&#34; class=&#34;&#34;&gt;Spec &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4 mr-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                    &lt;span&gt;&lt;a href=&#34;../../post/7-guis-pyscript#counter-header&#34;&gt;Source &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4 mr-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                &lt;/div&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Description:&lt;/span&gt; A label which starts at zero and a button labelled &#34;Count.&#34; Pressing the button increments the number in the label by 1.&lt;/p&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Core Ideas:&lt;/span&gt; Basic interactivity, scaffolding, buttons&lt;/p&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;PyScript/Python Concepts:&lt;/span&gt; Basic browser interaction, PyScript.write()&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;py-script src=&#34;../../post/7-guis-pyscript/counter.py&#34;&gt;&lt;/py-script&gt;
        &lt;div class=&#34;flex items-center justify-center w-full my-8 lg:w-1/2&#34;&gt;
            &lt;div class=&#34;grid w-full grid-cols-2 p-4 m-auto bg-blue-100 border-2 rounded-md justify-items-center&#34;&gt;
                &lt;label id=&#34;counter-target&#34; class=&#34;w-full text-center align-middle bg-white border-2&#34;&gt;{PyScript Loading}&lt;/label&gt;
                &lt;py-button id=&#34;counter-btn&#34; label=&#34;Count&#34; class=&#34;&#34;&gt;
                    def on_click(event):
                        add_one()
                &lt;/py-button&gt;
                &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex flex-col lg:flex-row project-row&#34;&gt;
        &lt;div class=&#34;flex items-center justify-center w-full my-8 lg:w-1/2&#34;&gt;
            &lt;div&gt;
                &lt;div class=&#34;flex flex-row items-end&#34;&gt;
                    &lt;h3 class=&#34;mr-2 post-h3&#34;&gt;Temperature Converter&lt;/h3&gt;
                    &lt;span&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#temp&#34; class=&#34;&#34;&gt;Spec &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4 mr-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                    &lt;span&gt;&lt;a href=&#34;../../post/7-guis-pyscript#temp-header&#34;&gt;Source &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                &lt;/div&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Description:&lt;/span&gt; Two input boxes, labelled Fahrenheit and Celsuis. Typing a number into either immediately updates the other to the corresponding converted temperature. Entering anything other than a number has no effect.&lt;/p&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Core Ideas:&lt;/span&gt; Bidirectional data flow, user-provided text imput, live-updating in response to input&lt;/p&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;PyScript/Python Concepts:&lt;/span&gt; Atached event listeners to DOM objects, JS proxies, math, function flow&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;py-script src=&#34;../../post/7-guis-pyscript/temperature.py&#34;&gt;&lt;/py-script&gt;
        &lt;div class=&#34;flex items-center justify-center w-full my-8 lg:w-1/2&#34;&gt;
            &lt;div class=&#34;grid w-full grid-cols-2 p-4 m-auto bg-blue-100 border-2 rounded-md justify-items-center&#34;&gt;
                &lt;div&gt;
                    &lt;h4 class=&#34;font-semibold&#34;&gt;Fahrenheit&lt;/h4&gt;
                    &lt;input id = &#34;f-temp&#34; class=&#34;w-3/4 bg-white border-4&#34;&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;h4 class=&#34;font-semibold&#34;&gt;Celsuis&lt;/h4&gt;
                    &lt;input id=&#34;c-temp&#34; class=&#34;w-3/4 bg-white border-4&#34;&gt;
                &lt;/div&gt;
        &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex flex-col lg:flex-row project-row&#34;&gt;
        &lt;div class=&#34;flex items-center justify-center w-full lg:w-1/2&#34;&gt;
            &lt;div&gt;
                &lt;div class=&#34;flex flex-row items-end&#34;&gt;
                    &lt;h3 class=&#34;mr-2 post-h3&#34;&gt;Flight Booker&lt;/h3&gt;
                    &lt;span&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#flight&#34; class=&#34;&#34;&gt;Spec &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4 mr-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                    &lt;span&gt;&lt;a href=&#34;../../post/7-guis-pyscript#flight-header&#34;&gt;Source &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                &lt;/div&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Description:&lt;/span&gt;Two input boxes, labelled Departure Date and Arrival Date, along with a selector for One-Way or Round-Trip and a Book Flight button. When One-Way is selected, input to the Departure Date field is disabled. When the Book Flight button is pressed, the user is notified that they have booked a flight for one or both dates, as appropriate. (No data validation is done on the Date fields.)&lt;/p&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Core Ideas:&lt;/span&gt; Constraints on input (inputs affect each other), additional text handling, options-box&lt;/p&gt;
                    &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;PyScript/Python Concepts:&lt;/span&gt; Enabling and disabling inputs, changing innerHTML and innerText&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;py-script src=&#34;../../post/7-guis-pyscript/flight.py&#34;&gt;&lt;/py-script&gt;
        &lt;div class=&#34;flex items-center justify-center w-full lg:w-1/2&#34;&gt;
            &lt;!-- Code for content goes in here --&gt;
            &lt;div class=&#34;grid w-full grid-rows-4 p-4 bg-blue-100 border-2 rounded-md justify-items-left&#34;&gt;
                &lt;div&gt;
                    &lt;select name=&#34;flight-mode&#34; id=&#34;flight-mode-select&#34;&gt;
                        &lt;option value=&#34;one&#34;&gt;One Way&lt;/option&gt;
                        &lt;option value=&#34;round&#34;&gt;Round Trip&lt;/option&gt;
                    &lt;/select&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;h4 class=&#34;font-semibold&#34;&gt;Departure Date&lt;/h4&gt;
                    &lt;input id = &#34;dep&#34; class=&#34;w-3/4 bg-white border-4&#34;&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;h4 class=&#34;font-semibold&#34;&gt;Return Date&lt;/h4&gt;
                    &lt;input id=&#34;ret&#34; class=&#34;w-3/4 bg-white border-4&#34;&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;button id=&#34;book-flight&#34; class=&#34;p-2 my-2 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;Book Flight&lt;/button&gt;
                    &lt;p id=&#34;flight-info&#34; class=&#34;italic&#34;&gt;Flight Info will go here&lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex flex-col lg:flex-row project-row&#34;&gt;
        &lt;div class=&#34;flex items-center justify-center w-full lg:w-1/2&#34;&gt;
            &lt;div&gt;
                &lt;div class=&#34;flex flex-row items-end&#34;&gt;
                    &lt;h3 class=&#34;mr-2 post-h3&#34;&gt;Timer&lt;/h3&gt;
                    &lt;span&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#timer&#34; class=&#34;&#34;&gt;Spec &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4 mr-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                    &lt;span&gt;&lt;a href=&#34;../../post/7-guis-pyscript#timer-header&#34;&gt;Source &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                &lt;/div&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Description:&lt;/span&gt; When the program starts, a timer begins, which is shown on both a text label and a visual gauge, with a slider and reset button for control. The duration of the timer is adjusted by moving the slider, and pressing the reset button sets the elapsed time back to zero.&lt;/p&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Core Ideas:&lt;/span&gt; Concurrency, real-time interaction, responsiveness&lt;/p&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;PyScript/Python Concepts:&lt;/span&gt; Asyncio.sleep(), connected control-flow with and without events, input slider, progress bar&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;flex items-center justify-center w-full py-8 lg:w-1/2&#34;&gt;
            &lt;!-- Code for content goes in here --&gt;
            &lt;div class=&#34;w-full my-2 ml-8 bg-blue-100 border-2 rounded-md&#34;&gt;
                &lt;div class=&#34;grid w-full grid-rows-4 justify-items-start&#34;&gt;
                    &lt;div class=&#34;flex w-full px-2 py-2 justify-items-start&#34;&gt;
                        &lt;p class=&#34;flex-none&#34;&gt;Elapsed Time:&lt;/p&gt;
                        &lt;progress id=&#34;progress-bar&#34; value=&#34;50&#34; max=&#34;100&#34; class=&#34;flex-grow mx-4&#34;&gt; 0% &lt;/progress&gt;
                    &lt;/div&gt;
                    &lt;div&gt;
                        &lt;p id=&#34;seconds&#34; class=&#34;px-2&#34;&gt;0.0 Seconds&lt;/p&gt;
                    &lt;/div&gt;
                    &lt;div class=&#34;flex w-full px-2 justify-items-center&#34;&gt;
                        &lt;p class=&#34;flex-none&#34;&gt;Duration&lt;/p&gt;
                        &lt;div class=&#34;flex-grow mx-4 &#34;&gt;&lt;input type=&#34;range&#34; min=&#34;1&#34; max=&#34;100&#34; value=&#34;50&#34; id=&#34;duration-slider&#34; class=&#34;w-full&#34;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div&gt;
                        &lt;button id=&#34;reset&#34; class=&#34;px-2 my-2 ml-2 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;RESET&lt;/button&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex flex-col lg:flex-row project-row&#34;&gt;
        &lt;div class=&#34;flex items-center justify-center w-full lg:w-1/2&#34;&gt;
            &lt;div&gt;
                &lt;div class=&#34;flex flex-row items-end&#34;&gt;
                    &lt;h3 class=&#34;mr-2 post-h3&#34;&gt;CRUD&lt;/h3&gt;
                    &lt;span&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#crud&#34; class=&#34;&#34;&gt;Spec &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4 mr-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                    &lt;span&gt;&lt;a href=&#34;../../post/7-guis-pyscript#crud-header&#34;&gt;Source &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                &lt;/div&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Description:&lt;/span&gt; A selection box shows a &#39;database&#39; of names. Entering a given-name and surname into two text boxes and pressing the &#39;create&#39; button adds a new entry to the database. Selecting an entry in the database and clicking the &#39;update&#39; button will change the selected entry to the values currently in the name boxes. Selecting an entry and pressing the &#39;delete&#39; button will delete that entry. Enterring text into the &#39;filter-prefix&#39; textbox will filter the presented entries by surname.&lt;/p&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Core Ideas:&lt;/span&gt; Separating domain and presentation logic, managing mutation, building a non-trivial layout
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;PyScript/Python Concepts:&lt;/span&gt; Managing/sharing state with Python objects, separating data from view, dataclasses&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;py-script src=&#34;../../post/7-guis-pyscript/crud.py&#34;&gt;&lt;/py-script&gt;
        &lt;div class=&#34;flex items-center justify-center w-full py-8 lg:w-1/2&#34;&gt;
            &lt;!-- Code for content goes in here --&gt;
            &lt;div class=&#34;grid p-4 m-auto bg-blue-100 border-2 rounded-md justify-items-start&#34;&gt;
                &lt;div class=&#34;m-auto&#34;&gt;
                    &lt;div id=&#34;upper-content&#34; class=&#34;bg-gray-300&#34;&gt;
                        &lt;div id=&#34;filter-box&#34; class=&#34;grid w-full grid-cols-2&#34;&gt;
                            &lt;p id=&#34;filter-label&#34; class=&#34;px-4&#34;&gt;Filter Prefix:
                            &lt;input type=&#34;text&#34; id=&#34;filter-input&#34; class=&#34;border-2 border-gray-300&#34;&gt;&lt;/p&gt;
                        &lt;/div&gt;
                        &lt;div id=&#34;middle-section&#34; class=&#34;grid grid-cols-2&#34;&gt;
                            &lt;select id=&#34;listbox&#34; size=&#34;5&#34; class=&#34;h-48 m-4 bg-blue-50&#34;&gt;test&lt;/select&gt;
                            &lt;div id=&#34;name-entry-container&#34; class=&#34;grid grid-rows-2&#34;&gt;
                                &lt;div id=&#34;firstname-container&#34; class=&#34;flex flex-rows&#34;&gt;
                                    &lt;p&gt;Name:&lt;/p&gt;
                                    &lt;input type=&#34;text&#34; id=&#34;firstname-input&#34; class=&#34;w-full h-8 mx-2&#34;&gt;
                                &lt;/div&gt;
                                &lt;div id=&#34;surname-container&#34; class=&#34;flex flex-rows&#34;&gt;
                                    &lt;p&gt;Surname:&lt;/p&gt;
                                    &lt;input type=&#34;text&#34; id=&#34;surname-input&#34; class=&#34;w-full h-8 mx-2&#34;&gt;
                                &lt;/div&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div id=&#34;lower-buttons&#34; class=&#34;grid w-full grid-cols-3&#34;&gt;
                        &lt;button id=&#34;create&#34; class=&#34;m-4 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;Create&lt;/button&gt;
                        &lt;button id=&#34;update&#34; class=&#34;m-4 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;Update&lt;/button&gt;
                        &lt;button id=&#34;delete&#34; class=&#34;m-4 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;Delete&lt;/button&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex flex-col lg:flex-row project-row&#34;&gt;
        &lt;div class=&#34;flex items-center justify-center w-full lg:w-1/2&#34;&gt;
            &lt;div&gt;
                &lt;div class=&#34;flex flex-row items-end&#34;&gt;
                    &lt;h3 class=&#34;mr-2 post-h3&#34;&gt;Circle Drawer&lt;/h3&gt;
                    &lt;span&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#circle&#34; class=&#34;&#34;&gt;Spec &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4 mr-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                    &lt;span&gt;&lt;a href=&#34;../../post/7-guis-pyscript#circle-header&#34;&gt;Source &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                &lt;/div&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Description:&lt;/span&gt; A blank drawing canvas is created. Left-clicking on the canvas creates an empty circle of a random size centered on the mouse. The circle nearest the mouse is shaded gray. Right clicking opens a custom menu that presents a slider which changes the radius of the shaded circle in realtime. Undo and Redo buttons step forward and backward through creation and resizing operations.&lt;/p&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Core Ideas:&lt;/span&gt; Undo/redo. Custom drawing, dialog control, realtime interactivity&lt;/p&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;PyScript/Python Concepts:&lt;/span&gt; Canvas, list and index management, dataclasses, actions-as-objects (undo/redo), hiding/showing/positioning custom elements&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;py-script src=&#34;../../post/7-guis-pyscript/circle.py&#34;&gt;&lt;/py-script&gt;
        &lt;div class=&#34;flex items-center justify-center w-full py-8 lg:w-1/2&#34;&gt;
            &lt;!-- Code for content goes in here --&gt;
            &lt;div class=&#34;p-2 bg-blue-100 border-2 rounded-md &#34;&gt;
                &lt;canvas id=&#34;circle-canvas&#34; width=&#34;400&#34; height=&#34;500&#34; class=&#34;m-auto border-2&#34; &gt;&lt;/canvas&gt;
                &lt;div id=&#34;button-holder&#34; class=&#34;flex w-full mt-2 justify-evenly&#34;&gt;&lt;button id=&#34;undo&#34; class=&#34;px-2 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;Undo&lt;/button&gt;&lt;button id=&#34;redo&#34; class=&#34;px-2 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;Redo&lt;/button&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;link rel =&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;../../post/7-guis-pyscript/context-menu.css&#34;&gt;
            &lt;div id=&#34;right-click-menu&#34; class=&#34;absolute bg-gray-100 rounded-lg border-1&#34; 
                style=&#34;display: none&#34;&gt;
                &lt;div class=&#34;mx-4 my-2 &#34;&gt;
                    &lt;p id=&#34;circle-slider-label&#34;&gt;Adjust diameter of Circle at (x, y)&lt;/p&gt;
                    &lt;div class=&#34;w-full m-auto&#34;&gt;&lt;input type=&#34;range&#34; min=&#34;1&#34; max=&#34;100&#34; value=&#34;50&#34; id=&#34;circle-slider&#34; class=&#34;w-5/6&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex flex-col lg:flex-row project-row&#34;&gt;
        &lt;div class=&#34;flex items-center justify-center w-full lg:w-1/2&#34;&gt;
            &lt;div&gt;
                &lt;div class=&#34;flex flex-row items-end&#34;&gt;
                    &lt;h3 class=&#34;mr-2 post-h3&#34;&gt;Cells&lt;/h3&gt;
                    &lt;span&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#cells&#34; class=&#34;&#34;&gt;Spec &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4 mr-1&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                    &lt;span&gt;&lt;a href=&#34;../../post/7-guis-pyscript#cells-header&#34;&gt;Source &lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
                &lt;/div&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Description:&lt;/span&gt; A spreadsheet is presented to the user, which allows for basic mathematical operations. (+ - / *) &lt;span class=&#34;italic&#34;&gt;Referencing of other cells is not yet implemented.&lt;/span&gt;&lt;/p&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;Core Ideas:&lt;/span&gt; Change propagation, widget customization, implementing a more involved/authentic GUI application.&lt;/p&gt;
                &lt;p class=&#34;project-description&#34;&gt;&lt;span class=&#34;font-semibold&#34;&gt;PyScript/Python Concepts:&lt;/span&gt; Input focus/defocus management (blur), realtime and input-trigger processing combined, data structures.&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;py-env&gt;
            - paths:
                - /post/7-guis-pyscript/spreadsheet.py
                - /post/7-guis-pyscript/formula_parser.py
            &lt;/py-env&gt;
        &lt;py-script src=&#34;../../post/7-guis-pyscript/cells-table.py&#34;&gt;&lt;/py-script&gt;
        &lt;div class=&#34;flex items-center justify-center w-full py-8 lg:w-1/2&#34;&gt;
            &lt;!-- Code for content goes in here --&gt;
            &lt;link rel =&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;../../post/7-guis-pyscript/cells-table.css&#34;&gt;
            &lt;div class=&#34;grid w-full p-4 m-auto bg-blue-100 border-2 rounded-md&#34;&gt;
                &lt;div id=&#34;spreadsheet-wrapper&#34; class=&#34;overflow-x-auto overflow-y-auto h-72&#34;&gt;
                    &lt;table id=&#34;spreadsheet&#34; style=&#34;empty-cells:show&#34; class=&#34;m-auto bg-white border-2&#34;&gt;
                        &lt;thead&gt;&lt;/thead&gt;
                        &lt;tbody&gt;&lt;/tbody&gt;
                    &lt;/table&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;../../post/7-guis-pyscript/timer.py&#34;&gt;&lt;/py-script&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>7GUIs Pyscript - Explanations and Details</title>
      <link>https://jeff.glass/post/7-guis-pyscript/</link>
      <pubDate>Tue, 10 May 2022 07:16:07 -0500</pubDate>
      
      <guid>https://jeff.glass/post/7-guis-pyscript/</guid>
      <description>&lt;script defer src=&#34;../../ps/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;italic post-p&#34;&gt;This post is a companion to my project &lt;a href=&#34;../../project/the-7-guis-pyscript/&#34;&gt;The 7 GUIs in PyScript&lt;/a&gt; - I recommend checking out that page first. Viewing on Desktop is highly recommended.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://eugenkiss.github.io/7guis/tasks/&#34;&gt;The Seven Guis&lt;/a&gt; is a set of typical challenges in GUI programming. &lt;a href=&#34;https://eugenkiss.github.io/7guis/implementations&#34;&gt;Implementations abound&lt;/a&gt;, in lower-level frameworks like tcl and Qt to modernist frameworks like React and Svelte. Let&#39;s see what it takes to implement them in PyScript.&lt;/p&gt;

&lt;h2 class=&#34;post-h2&#34; id=&#34;counter-header&#34;&gt;Counter &lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#counter&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;&#34;The task is to build a frame containing a label or read-only textfield T and a button B. Initially, the value in T is “0” and each click of B increases the value in T by one.&#34; &lt;/h3&gt;
&lt;div class=&#34;m-4&#34;&gt;
    &lt;div class=&#34;grid grid-cols-2 p-4 m-auto bg-blue-100 border-2 justify-items-center&#34;&gt;
        &lt;label id=&#34;counter-target&#34; class=&#34;w-full text-center bg-white border-2&#34;&gt;Some Placeholder Text&lt;/label&gt;
        &lt;py-button id=&#34;counter-btn&#34; label=&#34;Count&#34; class=&#34;&#34;&gt;
            def on_click(event):
                add_one()
        &lt;/py-button&gt;
        &lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;counter.py&#34;&gt;&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;We can break the parts of this initial problem into a few key questions, with answers:
&lt;h4 class=&#34;mt-8 text-lg font-semibold&#34;&gt;How do buttons works in PyScript&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;When you add a &lt;span class=&#34;font-bold&#34;&gt;&amp;lt;py-button&amp;gt;&lt;/span&gt; tag to your page, on page-load, PyScript (specifically the code in &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/main/pyscriptjs/src/components/pybutton.ts&#34;&gt;pybutton.ts&lt;/a&gt; adds a &amp;lt;button&amp;gt; tag to the DOM with all the same classes that the py-button tag had. Then, if the Python code inside the py-button tag defines an &lt;code class=&#34;code&#34;&gt;on_focus&lt;/code&gt; or &lt;code class=&#34;code&#34;&gt;on_click&lt;/code&gt; method, callbacks are registered in Javascript to cause those methods to run on focus/click as appropriate.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, to create a &#34;Count&#34; button to increment our counter, we can do something as simple as:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;on_click&lt;/span&gt;(event):
        add_one()
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;mt-8 text-lg font-semibold&#34;&gt;How do we put output from a script in a specific place on a page?&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, we&#39;ll need to actually define that &lt;code class=&#34;code&#34;&gt;add_one&lt;/code&gt; function somewhere, to add one to... &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well, I guess we&#39;ll want somewhere to display the count as well. Lets add a paragraph tag to our HTML code, and give it an id so we can refer to it later: &lt;pre&gt;&lt;code class=&#34;code&#34;&gt;&amp;lt;p id=&#34;counter-target&#34;&amp;gt;Some Placeholder Text&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We could choose to leave the tag empty for now, or perhaps have a &#34;0&#34; there to hide a bit of ugliness as the page loads, but I having placeholder text will give us a clearer view of what&#39;s happening when.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To actually change the content of our new tag, we can use the &lt;a href=&#34;https://github.com/pyscript/pyscript/blob/bc4581d9e50286f0463285f13c015e487831fa0e/pyscriptjs/src/pyscript.py#L110-L129&#34;&gt;PyScript.write() function&lt;/a&gt;, which takes an &lt;code&gt;element_id&lt;/code&gt; as a string, a &lt;code&gt;value&lt;/code&gt; to replace/append there (another string), and an optional &lt;code&gt;append&lt;/code&gt; argument to tell whether the new content should be appended (as a new div) or replace the existing content.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, to start our count at zero and have it increment each time we press the &#34;Count&#34; button, our code could look something like:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;myPage.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;p &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;counter-target&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;Some Placeholder Text&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;on_click&lt;/span&gt;(event):
        add_one()
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;button&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script src&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./counter.py&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 class=&#34;mt-8 text-lg font-semibold&#34;&gt;How do we seperate Python code into external files?&lt;/h4&gt;
&lt;p class=&#34;post-p&#34;&gt;For cleanliness, let&#39;s put our code in a separate file called &lt;code&gt;counter.py&lt;/code&gt;. To include use this in our html page, we simple use the &lt;code class=&#34;code&#34;&gt;src&lt;/code&gt; attribute of the py-script tag to specify an additional external source. Thus, our complete solution looks like:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;myPage.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;counter-target&amp;#34;&lt;/span&gt;&amp;gt;Some Placeholder Text&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-button&lt;/span&gt;&amp;gt;
    def on_click(event):
        add_one()
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-button&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;counter.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;counter.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;internalCount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
target &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;counter-target&amp;#34;&lt;/span&gt;
PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(target, &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(internalCount), append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;add_one&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; internalCount
    internalCount &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    PyScript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(target, &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(internalCount), append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 class=&#34;mt-12 post-h2 &#34; id=&#34;temp-header&#34;&gt;Temperature Converter &lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#temp&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;&#34;The task is to build a frame containing two textfields TC and TF representing the temperature in Celsius and Fahrenheit, respectively. Initially, both TC and TF are empty. When the user enters a numerical value into TC the corresponding value in TF is automatically updated and vice versa. When the user enters a non-numerical string into TC the value in TF is not updated and vice versa. The formula for converting a temperature C in Celsius into a temperature F in Fahrenheit is C = (F - 32) * (5/9) and the dual direction is F = C * (9/5) + 32.&#34; &lt;/h3&gt;
&lt;py-script src=&#34;./temperature.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;m-4&#34;&gt;
    &lt;div class=&#34;grid grid-cols-2 p-4 m-auto bg-blue-100 border-2 justify-items-center&#34;&gt;
            &lt;div&gt;
                &lt;h4 class=&#34;font-semibold&#34;&gt;Fahrenheit&lt;/h4&gt;
                &lt;input id = &#34;f-temp&#34; class=&#34;w-3/4 bg-white border-4&#34;&gt;
            &lt;/div&gt;
            &lt;div&gt;
                &lt;h4 class=&#34;font-semibold&#34;&gt;Celsuis&lt;/h4&gt;
                &lt;input id=&#34;c-temp&#34; class=&#34;w-3/4 bg-white border-4&#34;&gt;
            &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;p class=&#34;post-p&#34;&gt;Since we&#39;re handle user-inputted text for this project, we&#39;ll need to learn a bit about how PyScript interacts with Javascript event listeners. Let&#39;s look at a stripped-down example:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;sample-event-handling.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-input&amp;#34;&lt;/span&gt; style&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;background-color: lightgray;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_log_input_to_console&lt;/span&gt;(e):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;The value of the input is currently &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)

log_input_to_console &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_log_input_to_console)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-input&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, log_input_to_console)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;/&lt;/span&gt;py&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;script&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
    .instruction-row{
        background-color: rgb(230, 239, 236);
    }
&lt;/style&gt;
&lt;div class=&#34;grid grid-cols-1 mt-6 gap-y-8 instruction-grid&#34;&gt;
    &lt;div class=&#34;flex flex-col items-center px-2 lg:flex-row gap-x-4 instruction-row&#34;&gt;
        &lt;div class=&#34;w-full lg:w-1/2&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-input&amp;#34;&lt;/span&gt; style&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;background-color: lightgray;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        &lt;p class=&#34;w-full post-p lg:w-1/2&#34;&gt;First, we create the html element we want to target. We&#39;ll give it the unique id &#34;my-input&#34; so we can select it later. (You&#39;ll probably want a more specific descriptor than this.) The styling is just to make it easier to find on the screen, if you drop just this code into a blank page.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex flex-col items-center px-2 lg:flex-row gap-x-4&#34;&gt;
        &lt;div class=&#34;w-full lg:w-1/2&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        &lt;p class=&#34;w-full post-p lg:w-1/2&#34;&gt;Next, we&#39;ll import some useful modules. Through some &lt;a href=&#34;https://pyodide.org/en/stable/usage/type-conversions.html#type-translations-using-js-obj-from-py&#34;&gt;Pyodide dark incantation magic&lt;/a&gt;, importing from JS gives us a Python mapping of a Javascript module directly! So now we have access to the JS &#39;document&#39; and &#39;console&#39; objects, though we could also &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis&#34;&gt;directty import anything in the Javascript global scope&lt;/a&gt;. How cool is that.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&#34;flex flex-col items-center px-2 lg:flex-row gap-x-4 instruction-row&#34;&gt;
        &lt;div class=&#34;w-full lg:w-1/2&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_log_input_to_console&lt;/span&gt;(e)
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;The value of the input is currently &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)
        
log_input_to_console &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_log_input_to_console)
        
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementByID(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;my-input&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, log_input_to_console)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
        &lt;div class=&#34;w-full lg:w-1/2&#34;&gt;
            &lt;p class=&#34;post-p&#34;&gt;This is where the real magic happens. We&#39;ll define our python function using the usual &lt;code class=&#34;code&#34;&gt;def functionname():&lt;/code&gt; syntax. It will take one parameter, which i&#39;ve called &lt;code class=&#34;code&#34;&gt;e&lt;/code&gt;, which will be passed the &lt;a href=&#34;https://www.w3schools.com/js/js_events.asp&#34;&gt;Javascript event&lt;/a&gt; that triggered this function. These events have &lt;a href=&#34;https://www.w3schools.com/jsref/dom_obj_event.asp&#34;&gt;many, many useful properties and methods&lt;/a&gt; we can access - in this case, the &lt;code class=&#34;code&#34;&gt;value&lt;/code&gt; property gives us the value of the inputbox that triggered this event.&lt;/p&gt;
            &lt;p class=&#34;post-p&#34;&gt;The trick is, because of &lt;a href=&#34;https://pyodide.org/en/stable/usage/type-conversions.html#call-js-from-py&#34;&gt;how Pyodide interacts with Javascript promises&lt;/a&gt;, we can&#39;t just use this Python function as our event handler. We&#39;ll need to create a Javascript proxy object for it using create_proxy. This returns a new proxy object that we can use directly as our event handler. (This issue is common enough that its &lt;a href=&#34;https://pyodide.org/en/stable/usage/faq.html#how-can-i-use-a-python-function-as-an-event-handler&#34;&gt;included in Pyodide&#39;s FAQ&lt;/a&gt;.&lt;/p&gt;
            &lt;p class=&#34;post-p&#34;&gt;Once we have our proxy object, we can again lean on that magic js-to-python mapping to use Javascript&#39;s own &lt;code class=&#34;code&#34;&gt;querySelector&lt;/code&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&#34;&gt;addEventListener&lt;/a&gt; methods to add a callback that will run our method whenever the specified event happens - in this case, &#34;input&#34;. Note that this is not the &#34;on-&#34; version of the event keywords; that is, it&#39;s &#34;input&#34; not &#34;oninput&#34;; &#34;click&#34;, not &#34;onclick&#34;, and so on.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;And here&#39;s that example running live:&lt;/p&gt;
&lt;div class=&#34;w-full p-4 m-4 bg-blue-100&#34;&gt;
    &lt;p class=&#34;post-p&#34;&gt;Open the developer console and type here: &lt;input id=&#34;my-input&#34; class=&#34;bg-white border-2 border-gray-700 &#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;py-script&gt;
from js import document, console
from pyodide import create_proxy

def _log_input_to_console(e):
    console.log(&#34;The value of the input is currently &#34; + e.target.value)

log_input_to_console = create_proxy(_log_input_to_console)

document.getElementById(&#34;my-input&#34;).addEventListener(&#34;input&#34;, log_input_to_console)
&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;With this in place, if you type into the inputbox, you should see its contents being output to the console with each keystroke. If you want to have it log (or take any other action) only when the input is submitted/enter is pressed... I think the best option is to wrap the input in a &lt;code class=&#34;code&#34;&gt;form&lt;/code&gt; tag and use the &#34;submit&#34; event to handle it, but I&#39;m not %100 sure what best practice is there.&lt;/p&gt;

&lt;p class=&#34;post-p&#34;&gt;The full code of the Temperature Converter  is as follows:&lt;/p&gt;
&lt;p class=&#34;mt-4 code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./temperature.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid grid-cols-2 p-4 m-auto bg-blue-100 border-2 justify-items-center&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-semibold&amp;#34;&lt;/span&gt;&amp;gt;Fahrenheit&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id &lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;f-temp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-3/4 bg-white border-4&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-semibold&amp;#34;&lt;/span&gt;&amp;gt;Celsuis&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;c-temp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-3/4 bg-white border-4&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;temperature.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#This is necessary for reasons I don&amp;#39;t understand&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy

write_in_progress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isTemp&lt;/span&gt;(input_temp):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        _ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(input_temp)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; err:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_f&lt;/span&gt;(self, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; write_in_progress
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; write_in_progress:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        write_in_progress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        f_input &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;f-temp&amp;#34;&lt;/span&gt;)
        c_output &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;c-temp&amp;#34;&lt;/span&gt;)
        input_value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; f_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isTemp(input_value):
            c_output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;round&lt;/span&gt;((&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(input_value)) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;), &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            c_output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        write_in_progress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_c&lt;/span&gt;(self, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; write_in_progress
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; write_in_progress:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        write_in_progress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        c_input &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;c-temp&amp;#34;&lt;/span&gt;)
        f_output &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;f-temp&amp;#34;&lt;/span&gt;)
        input_value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; c_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; isTemp(input_value):
            f_output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;round&lt;/span&gt;((&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(input_value)) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            f_output&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        write_in_progress &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

f_change &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_f)
c_change &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_c)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;querySelector(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#f-temp&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, f_change)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;querySelector(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#c-temp&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, c_change)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;

&lt;h2 class=&#34;mt-12 post-h2 &#34; id=&#34;flight-header&#34;&gt;Flight Booker &lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#flight&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;&#34;The task is to build a frame containing a combobox C with the two options “one-way flight” and “return flight”, two textfields T1 and T2 representing the start and return date, respectively, and a button B for submitting the selected flight. T2 is enabled iff C’s value is “return flight”. When C has the value “return flight” and T2’s date is strictly before T1’s then B is disabled. When a non-disabled textfield T has an ill-formatted date then T is colored red and B is disabled. When clicking B a message is displayed informing the user of his selection (e.g. “You have booked a one-way flight on 04.04.2014.”). Initially, C has the value “one-way flight” and T1 as well as T2 have the same (arbitrary) date (it is implied that T2 is disabled).&lt;/h3&gt;
&lt;py-script src=&#34;./flight.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;m-4&#34;&gt;
    &lt;div class=&#34;grid grid-rows-4 p-4 bg-blue-100 border-2 justify-items-left&#34;&gt;
            &lt;div&gt;
                &lt;select name=&#34;flight-mode&#34; id=&#34;flight-mode-select&#34;&gt;
                    &lt;option value=&#34;one&#34;&gt;One Way&lt;/option&gt;
                    &lt;option value=&#34;round&#34;&gt;Round Trip&lt;/option&gt;
                &lt;/select&gt;
            &lt;/div&gt;
            &lt;div&gt;
                &lt;h4 class=&#34;font-semibold&#34;&gt;Departure Date&lt;/h4&gt;
                &lt;input id = &#34;dep&#34; class=&#34;w-3/4 bg-white border-4&#34;&gt;
            &lt;/div&gt;
            &lt;div&gt;
                &lt;h4 class=&#34;font-semibold&#34;&gt;Return Date&lt;/h4&gt;
                &lt;input id=&#34;ret&#34; class=&#34;w-3/4 bg-white border-4&#34;&gt;
            &lt;/div&gt;
            &lt;div&gt;
                &lt;button id=&#34;book-flight&#34; class=&#34;p-2 my-2 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;Book Flight&lt;/button&gt;
                &lt;p id=&#34;flight-info&#34; class=&#34;italic&#34;&gt;Flight Info will go here&lt;/p&gt;
            &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Not too many additional puzzle pieces to fill in here, after the first two examples. We&#39;ll make use of the &lt;code class=&#34;code&#34;&gt;disabled&lt;/code&gt; property to control whether the &#39;return&#39; inputbox is active or not, setting it to &lt;code class=&#34;code&#34;&gt;true&lt;/code&gt; to disable the box. We&#39;ll also use the &lt;code class=&#34;code&#34;&gt;innerText&lt;/code&gt; property of the &lt;code class=&#34;code&#34;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag at the bottom of the GUI to set its text when the user presses the &#39;book-flight&#39; button.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As mentioned in the &lt;a href=&#34;#temperature-header&#34;&gt;Temperature Converter section&lt;/a&gt;, we cannot call our Python functions directly from event handlers - we&#39;ll need to use pyodide.create_proxy to create a Javascript proxy of our function, and have the event trigger that.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The full code of this solution is as follows:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./flight.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid grid-rows-4 p-4 bg-blue-100 border-2 justify-items-left&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-mode&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-mode-select&amp;#34;&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&amp;gt;One Way&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;option&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;round&amp;#34;&lt;/span&gt;&amp;gt;Round Trip&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;option&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;select&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-semibold&amp;#34;&lt;/span&gt;&amp;gt;Departure Date&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id &lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dep&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-3/4 bg-white border-4&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-semibold&amp;#34;&lt;/span&gt;&amp;gt;Return Date&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;h4&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ret&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-3/4 bg-white border-4&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;book-flight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;p-2 my-2 bg-green-200 border-2 border-gray-400 rounded-lg&amp;#34;&lt;/span&gt;&amp;gt;Book Flight&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-info&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;italic&amp;#34;&lt;/span&gt;&amp;gt;Flight Info will go here&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;flight.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#This is necessary for reasons I don&amp;#39;t understand&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_flight_mode_change&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        currentMode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-mode-select&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; currentMode &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;:
            document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ret&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;disabled &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ret&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;disabled &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
    
    flight_mode_change &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_flight_mode_change)
    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-mode-select&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, flight_mode_change)
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_book_flight&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
        currentMode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-mode-select&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        departure &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;dep&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        return_flight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ret&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; currentMode &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;:
            document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-info&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You&amp;#39;ve booked a one-way flight departing on &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;departure&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flight-info&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;You&amp;#39;ve booked a round-trip flight departing on &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;departure&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; and returning on &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;return_flight&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;.&amp;#34;&lt;/span&gt;
    
    book_flight &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_book_flight)
    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;book-flight&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, book_flight)
    
    flight_mode_change()
    
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;

&lt;h2 class=&#34;mt-12 post-h2 &#34; id=&#34;timer-header&#34;&gt;Timer&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#timer&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;The task is to build a frame containing a gauge G for the elapsed time e, a label which shows the elapsed time as a numerical value, a slider S by which the duration d of the timer can be adjusted while the timer is running and a reset button R. Adjusting S must immediately reflect on d and not only when S is released. It follows that while moving S the filled amount of G will (usually) change immediately. When e ≥ d is true then the timer stops (and G will be full). If, thereafter, d is increased such that d &gt; e will be true then the timer restarts to tick until e ≥ d is true again. Clicking R will reset e to zero.&lt;/h3&gt;
&lt;div class=&#34;m-4&#34;&gt;
    &lt;div class=&#34;grid grid-rows-4 p-4 m-auto bg-blue-100 border-2 justify-items-start&#34;&gt;
        &lt;div class=&#34;grid grid-cols-2 justify-items-start&#34;&gt;
            &lt;p&gt;Elapsed Time:&lt;/p&gt;
            &lt;progress id=&#34;progress-bar&#34; value=&#34;32&#34; max=&#34;100&#34;&gt; 32% &lt;/progress&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;p id=&#34;seconds&#34;&gt;Seconds&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class=&#34;flex flex-row justify-items-center&#34;&gt;
            &lt;p&gt;Duration&lt;/p&gt;
            &lt;div class=&#34;w-full m-auto&#34;&gt;&lt;input type=&#34;range&#34; min=&#34;1&#34; max=&#34;100&#34; value=&#34;50&#34; id=&#34;duration-slider&#34; class=&#34;w-72&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;button id=&#34;reset&#34; class=&#34;px-2 my-2 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;RESET&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;We&#39;ll explore a slightly different style of interactivity with this one - using an infinite loop to constantly update the timer as tracked, and update the values of the onscreen label and slider. Before we jump into this infinite loop, we&#39;ll set up an event listener to handle pressing the &#39;reset&#39; button.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But note! By doing this, we&#39;ll trap the Python interpretter in an infinite loop, and it won&#39;t be able to do anything else. Which is fine, so long as you&#39;re only running a single &#34;script&#34; on one page... but if you look at the source of this very page, for example, you&#39;ve notice &lt;code class=&#34;code&#34;&gt;timer.py&lt;/code&gt; is imported at the very end of the &lt;code class=&#34;code&#34;&gt;body&lt;/code&gt; section. Why? Because if we get trapped in an infinite loop at &lt;span class=&#34;italic&#34;&gt;this point&lt;/span&gt; in the page, we&#39;ll never even load the following examples!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Handily, we don&#39;t actually need an separate event handler to handle the changing of the input slider (though that would also be a valid away to do it). Instead, we can directly read the value of the slider each time through out loop using the &lt;code class=&#34;code&#34;&gt;value&lt;/code&gt; property of the slider to get its current value.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The full code of this solution is as follows:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;timer.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid grid-rows-4 p-4 m-auto bg-blue-100 border-2 justify-items-start&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid grid-cols-2 justify-items-start&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;Elapsed Time:&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;progress&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;progress-bar&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;32&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;&amp;gt; 32% &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;progress&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;seconds&amp;#34;&lt;/span&gt;&amp;gt;Seconds&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex flex-row justify-items-center&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;Duration&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full m-auto&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;range&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;min&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;duration-slider&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-72&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;reset&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px-2 my-2 bg-green-200 border-2 rounded-lg&amp;#34;&lt;/span&gt;&amp;gt;RESET&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;timer.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy

my_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
seconds_element &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;seconds&amp;#34;&lt;/span&gt;)
duration_slider &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;duration-slider&amp;#34;&lt;/span&gt;)
progress_bar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;progress-bar&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_reset_time&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Time reset&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; my_time
    my_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;

reset_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_reset_time)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;reset&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, reset_time)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;.1&lt;/span&gt;)
    my_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;round&lt;/span&gt;(my_time &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;.1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    seconds_element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(my_time) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; Seconds&amp;#34;&lt;/span&gt;

    min_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(duration_slider&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;min)
    max_time &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(duration_slider&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)

    min_bar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
    max_bar &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(progress_bar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;max)

    progress_bar&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ((my_time &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; min_time) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; (max_bar &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; (max_time &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; min_time &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;.01&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;

&lt;h2 class=&#34;mt-12 post-h2 &#34; id=&#34;crud-header&#34;&gt;CRUD&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#timer&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;The task is to build a frame containing the following elements: a textfield Tprefix, a pair of textfields Tname and Tsurname, a listbox L, buttons BC, BU and BD and the three labels as seen in the screenshot. L presents a view of the data in the database that consists of a list of names. At most one entry can be selected in L at a time. By entering a string into Tprefix the user can filter the names whose surname start with the entered prefix—this should happen immediately without having to submit the prefix with enter. Clicking BC will append the resulting name from concatenating the strings in Tname and Tsurname to L. BU and BD are enabled iff an entry in L is selected. In contrast to BC, BU will not append the resulting name but instead replace the selected entry with the new name. BD will remove the selected entry. The layout is to be done like suggested in the screenshot. In particular, L must occupy all the remaining space.&lt;/h3&gt;
&lt;py-script src=&#34;./crud.py&#34;&gt;&lt;/py-script&gt;
&lt;div class=&#34;m-4&#34;&gt;
    &lt;div class=&#34;grid p-4 m-auto bg-blue-100 border-2 justify-items-start&#34;&gt;
        &lt;div class=&#34;p-2 m-auto bg-gray-300 rounded-lg&#34;&gt;
            &lt;div id=&#34;upper-content&#34; class=&#34;grid &#34;&gt;
                &lt;div id=&#34;filter-box&#34; class=&#34;grid w-full grid-cols-2&#34;&gt;
                    &lt;p id=&#34;filter-label&#34; class=&#34;px-4&#34;&gt;Filter Prefix:
                    &lt;input type=&#34;text&#34; id=&#34;filter-input&#34; class=&#34;border-2 border-gray-300&#34;&gt;&lt;/p&gt;
                &lt;/div&gt;
                &lt;div id=&#34;middle-section&#34; class=&#34;grid grid-cols-2&#34;&gt;
                    &lt;select id=&#34;listbox&#34; size=&#34;5&#34; class=&#34;h-48 m-4 bg-blue-50&#34;&gt;test&lt;/select&gt;
                    &lt;div id=&#34;name-entry-container&#34; class=&#34;grid grid-rows-2 w-96&#34;&gt;
                        &lt;div id=&#34;firstname-container&#34; class=&#34;grid h-8 grid-cols-2 align-middle justify-items-end&#34;&gt;
                            &lt;p&gt;Name:&lt;/p&gt;
                            &lt;input type=&#34;text&#34; id=&#34;firstname-input&#34;&gt;
                        &lt;/div&gt;
                        &lt;div id=&#34;surname-container&#34; class=&#34;grid h-8 grid-cols-2 align-middle justify-items-end&#34;&gt;
                            &lt;p&gt;Surname:&lt;/p&gt;
                            &lt;input type=&#34;text&#34; id=&#34;surname-input&#34;&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div id=&#34;lower-buttons&#34; class=&#34;grid w-full grid-cols-3&#34;&gt;
                &lt;button id=&#34;create&#34; class=&#34;m-4 bg-green-200 border-2 border-gray-400 rounded-md&#34;&gt;Create&lt;/button&gt;
                &lt;button id=&#34;update&#34; class=&#34;m-4 bg-green-200 border-2 border-gray-400 rounded-md&#34;&gt;Update&lt;/button&gt;
                &lt;button id=&#34;delete&#34; class=&#34;m-4 bg-green-200 border-2 border-gray-400 rounded-md&#34;&gt;Delete&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;This is the first challenge where we get to play a little bit with DOM manipulation. So far we&#39;ve only been reading/manipulating the values of inputs and textboxes - now we&#39;ll actually add and remove elements.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To do this, we&#39;ll use the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement&#34;&gt;document.creteElement()&lt;/a&gt; method, which takes a tag name as a string (like &lt;code class=&#34;code&#34;&gt;p&lt;/code&gt; or &lt;code class=&#34;code&#34;&gt;div&lt;/code&gt;) and creates a tag of that type. We can then set the &lt;code class=&#34;code&#34;&gt;value&lt;/code&gt; of that tag (if appropriate for an input-like object), its &lt;code class=&#34;code&#34;&gt;text&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;innerHTML&lt;/code&gt;, and so on. We can then add that tag as a child of an existing DOM element by calling &lt;code class=&#34;code&#34;&gt;myOtherElement.appendChild(myNewTagElement)&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I will admit to somewhat brute-forcing the issue removal and replacement of &#39;database&#39; entries by wiping the list view of all entries and re-displaying them each time the user takes an action the modifies the list. This is certainly not the most efficient way to handle things. For a better example of managing the state of a list of objects, see the &lt;a href=&#34;#circle-header&#34;&gt;Circle Drawer example&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also took the opportunity to introduce &lt;a href=&#34;https://docs.python.org/3/library/dataclasses.html&#34;&gt;Dataclasses&lt;/a&gt; here, a really useful tool if you haven&#39;t encountered them before. They really simply small container classes - no more writing &lt;code class=&#34;code&#34;&gt;__str__&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;__repr__&lt;/code&gt;, or even &lt;code class=&#34;code&#34;&gt;__init__&lt;/code&gt; by hand! There&#39;s a &lt;a href=&#34;https://www.youtube.com/watch?v=vBH6GRJ1REM&#34;&gt;great video about Dataclasses from mCoding&lt;/a&gt; the explains this in greater detail.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The full code of this solution is as follows:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./crud.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid p-4 m-auto bg-blue-100 border-2 justify-items-start&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;p-2 m-auto bg-green-100 rounded-lg&amp;#34;&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;upper-content&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid &amp;#34;&lt;/span&gt;&amp;gt;
                &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;filter-box&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid w-full grid-cols-2&amp;#34;&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;filter-label&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px-4&amp;#34;&lt;/span&gt;&amp;gt;Filter Prefix:
                    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;filter-input&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;border-2 border-gray-300&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
                &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
                &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;middle-section&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid grid-cols-2&amp;#34;&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;listbox&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;h-48 m-4 bg-blue-50&amp;#34;&lt;/span&gt;&amp;gt;test&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;select&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name-entry-container&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid grid-rows-2 w-96&amp;#34;&lt;/span&gt;&amp;gt;
                        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;firstname-container&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid h-8 grid-cols-2 align-middle justify-items-end&amp;#34;&lt;/span&gt;&amp;gt;
                            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;Name:&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
                            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;firstname-input&amp;#34;&lt;/span&gt;&amp;gt;
                        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
                        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;surname-container&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid h-8 grid-cols-2 align-middle justify-items-end&amp;#34;&lt;/span&gt;&amp;gt;
                            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;Surname:&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
                            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;surname-input&amp;#34;&lt;/span&gt;&amp;gt;
                        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
                    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
                &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;lower-buttons&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid w-full grid-cols-3&amp;#34;&lt;/span&gt;&amp;gt;
                &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;create&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;m-4 bg-gray-200 border-2 border-gray-400 rounded-md&amp;#34;&lt;/span&gt;&amp;gt;Create&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
                &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;m-4 bg-gray-200 border-2 border-gray-400 rounded-md&amp;#34;&lt;/span&gt;&amp;gt;Update&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
                &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;delete&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;m-4 bg-gray-200 border-2 border-gray-400 rounded-md&amp;#34;&lt;/span&gt;&amp;gt;Delete&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;
            &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;crud.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass, field
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;collections&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; UserList
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; randint

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;(order&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Entry&lt;/span&gt;():
    surname: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;    
    firstname: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;EntryList&lt;/span&gt;(UserList):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;append&lt;/span&gt;(self, other):
        &lt;span style=&#34;color:#366&#34;&gt;super&lt;/span&gt;()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(other)
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;sorted&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data)

entries &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; EntryList()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_get_namefields&lt;/span&gt;():
    first &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;firstname-input&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    sur &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;surname-input&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; first, sur

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_update_view&lt;/span&gt;():
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Updating listbox view&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;listbox&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

    filter_text &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;filter-input&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; filter_text &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#366&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; filter_text

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; entry &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; entries:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;surname&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;startswith(&lt;span style=&#34;color:#366&#34;&gt;filter&lt;/span&gt;):
            option &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;option&amp;#39;&lt;/span&gt;)
            option&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;firstname &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;surname
            option&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;firstname &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;surname
            &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(option)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_create_entry&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Create clicked&amp;#34;&lt;/span&gt;)
    first, sur &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _get_namefields()
    new_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Entry(firstname &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; first, surname &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; sur)
    entries&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(new_entry)
    _update_view()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_delete_entry&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Delete clicked&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;listbox&amp;#34;&lt;/span&gt;)
    index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selectedIndex
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        entries&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(index)
        _update_view()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_update_entry&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;listbox&amp;#34;&lt;/span&gt;)
    index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;selectedIndex

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; index &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        entries&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop(index)
        _create_entry()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_filter_key&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;kwargs):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Filter input changed&amp;#34;&lt;/span&gt;)
    _update_view()

create_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_create_entry)
delete_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_delete_entry)
update_entry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_update_entry)
filter_key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_filter_key)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;create&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, create_entry)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;delete&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, delete_entry)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, update_entry)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;filter-input&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, filter_key)
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;

&lt;h2 class=&#34;mt-12 post-h2 &#34; id=&#34;circle-header&#34;&gt;Circle Drawer&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#circle&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;The task is to build a frame containing an undo and redo button as well as a canvas area underneath. Left-clicking inside an empty area inside the canvas will create an unfilled circle with a fixed diameter whose center is the left-clicked point. The circle nearest to the mouse pointer such that the distance from its center to the pointer is less than its radius, if it exists, is filled with the color gray. The gray circle is the selected circle C. Right-clicking C will make a popup menu appear with one entry “Adjust diameter..”. Clicking on this entry will open another frame with a slider inside that adjusts the diameter of C. Changes are applied immediately. Closing this frame will mark the last diameter as significant for the undo/redo history. Clicking undo will undo the last significant change (i.e. circle creation or diameter adjustment). Clicking redo will reapply the last undoed change unless new changes were made by the user in the meantime.&lt;/h3&gt;
&lt;div class=&#34;grid p-4 m-auto bg-blue-100 border-2&#34;&gt;
    &lt;canvas id=&#34;circle-canvas&#34; width=&#34;500&#34; height=&#34;500&#34; class=&#34;m-auto border-2&#34; &gt;&lt;/canvas&gt;
    &lt;div id=&#34;button-holder&#34; class=&#34;flex w-full mt-2 justify-evenly&#34;&gt;&lt;button id=&#34;undo&#34; class=&#34;px-6 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;Undo&lt;/button&gt;&lt;button id=&#34;redo&#34; class=&#34;px-6 bg-green-200 border-2 border-gray-400 rounded-lg&#34;&gt;Redo&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;link rel =&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;./context-menu.css&#34;&gt;
&lt;div id=&#34;right-click-menu&#34; class=&#34;absolute bg-gray-200 border-1&#34; 
    style=&#34;display: none&#34;&gt;
    &lt;div class=&#34;mx-4 my-2&#34;&gt;
        &lt;p id=&#34;circle-slider-label&#34;&gt;Adjust diameter of Circle at (x, y)&lt;/p&gt;
        &lt;div class=&#34;w-full m-auto&#34;&gt;&lt;input type=&#34;range&#34; min=&#34;1&#34; max=&#34;100&#34; value=&#34;50&#34; id=&#34;circle-slider&#34; class=&#34;w-5/6&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;py-script src=&#34;circle.py&#34;&gt;&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;Oh boy we get to play with the canvas! There are almost-certainly Javascript libraries for handling onscreen objects as sprites, with undo-redo perhaps, but the whole point of this challenge is to learn by doing. So I&#39;ll start with a bare canvas object and work up from there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;When thinking about a somewhat-involved challenge like this, it&#39;s useful to break it down into managable chunks. I figured I&#39;d get circles being drawn with a mouse-click, then figure out the right-click-to-change-size functionality, then work on undo/redo.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thanks again to Pyodide&#39;s marvelous JS-to-Python mapping, we can directly use all the methods available in the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D&#34;&gt;CanvasRenderingContext2D&lt;/a&gt; object to draw to our existing canvas. The &lt;code class=&#34;code&#34;&gt;arc&lt;/code&gt; method is perfect for drawing circles, and &lt;code class=&#34;code&#34;&gt;stroke&lt;/code&gt; or &lt;code class=&#34;code&#34;&gt;fill&lt;/code&gt; actually place the drawn strokes on the canvas.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With just those simple functions in place, if we hook up an eventListener to listen for the &lt;code class=&#34;code&#34;&gt;mousedown&lt;/code&gt; event, which relies on our _draw_circle function, we can pretty quickly begin clicking away:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;canvas-context-examples.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;canvas &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-canvas&amp;#34;&lt;/span&gt;)
ctx &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getContext(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_clear_screen&lt;/span&gt;():
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillStyle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillRect(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width, canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_draw_circle&lt;/span&gt;(x, y, radius):
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beginPath();
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;arc(x, y, radius, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;pi)
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stroke()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_draw_filled_circle&lt;/span&gt;(x, y, radius):
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beginPath();
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;arc(x, y, radius, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;pi)
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillStyle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;gray&amp;#34;&lt;/span&gt;
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fill()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_on_click&lt;/span&gt;(e):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;button &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#left mouse button&lt;/span&gt;
        _make_new_circle(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetX,e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetY, randint(&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;70&lt;/span&gt;))

on_click &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_on_click)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-canvas&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mousedown&amp;#34;&lt;/span&gt;, on_click)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;As far as handling the custom right-click menu, I found &lt;a href=&#34;https://www.geeksforgeeks.org/how-to-add-a-custom-right-click-menu-to-a-webpage/&#34;&gt;this guide from geeksforgeeks&lt;/a&gt; to be useful. Basically, you create a &lt;code class=&#34;code&#34;&gt;div&lt;/code&gt; somewhere on your page that holds the contents of your new menu. Then you set its style to &lt;code class=&#34;code&#34;&gt;display:none&lt;/code&gt; so it doesn&#39;t actually appear. When you want it to show up, to change its &lt;code class=&#34;code&#34;&gt;left&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;top&lt;/code&gt; properties to match the current position of the mouse and set its display stlye to &lt;code class=&#34;code&#34;&gt;block&lt;/code&gt;. Voila, the div appears where you clicked.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The nice thing about handing the menu as a div (as opposed to, say, defining our own custom piece of interactive GUI) is that we can make use of all the functionality that native HTML elements provide already. Our menu can have labels, inputs of any kind, even addtional canvases.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s a little extra legwork to do to make sure that the browser&#39;s native right-click menu doesn&#39;t also appear. With &lt;code class=&#34;code&#34;&gt;e&lt;/code&gt; as the event that the eventListener passed to our function, we can prevent the default right-click menu from opening by calling &lt;code class=&#34;code&#34;&gt;e.preventDefault()&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;e.stopPropagation()&lt;/code&gt;, and returning &lt;code class=&#34;code&#34;&gt;false&lt;/code&gt; from our handler function.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, for the undo/redo functionality, we need to actually start tracking our circles as objects. This is the point when Circle became a Dataclass in the code. We also need to track the changes-in-diameter that are made to the circles, so a ResizeOperation Dataclass was born. Each time the user takes an action, a new object (Circle or ResizeOperation) is appended to a list of actions, and a pointer to the most-recent action is incremented by one. When the user presses undo, if the pointed-to action is a ResizeOperation, we reverse the resizing of the appropriate Circle, and either way, the pointer is decremented by 1. We then set the rendering function to only draw circles that exist earlier than our pointer in our list of actions. A redo operation is similar, resizing circles as necessary and incrementing the pointer. Finally, we adjust out functions for drawing new circles and resizing them to always truncate the list of actions after the current point, and set the pointer to the end of our list of actions.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If the preceding paragaph was just so much word-spaghetti, the full code of this solution is as follows:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid p-4 m-auto bg-blue-100 border-2&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;canvas&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-canvas&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;500&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;500&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;m-auto border-2&amp;#34;&lt;/span&gt; &amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;canvas&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;button-holder&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flex w-full mt-2 justify-evenly&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;undo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px-6 bg-green-200 border-2 rounded-lg&amp;#34;&lt;/span&gt;&amp;gt;Undo&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;redo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px-6 bg-green-200 border-2 rounded-lg&amp;#34;&lt;/span&gt;&amp;gt;Redo&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;button&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;rel &lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./context-menu.css&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right-click-menu&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;absolute bg-gray-200 border-1&amp;#34;&lt;/span&gt; 
    &lt;span style=&#34;color:#309&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;display: none&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mx-4 my-2&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider-label&amp;#34;&lt;/span&gt;&amp;gt;Adjust diameter of Circle at (x, y)&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;p&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full m-auto&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;range&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;min&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-5/6&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;circle.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;153
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;154
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;155
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;156
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;157
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;158
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;159
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;160
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;161
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;162
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;163
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;164
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;165
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;166
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;167
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;168
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;169
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;170
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;171
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;172
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;173
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;174
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;175
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;176
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;177
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;178
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;179
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;180
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;181
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;182
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;183
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;184
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;185
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;186
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;187
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;188
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;189
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;190
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;191
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;192
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;193
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;194
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;195
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;196
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;197
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;198
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;199
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;200
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;201
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;202
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console, window
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;math&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; pi, sqrt
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; randint
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;dataclasses&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; dataclass, field

canvas &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-canvas&amp;#34;&lt;/span&gt;)
ctx &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getContext(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Fill background with white&lt;/span&gt;
ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillStyle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;
ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillRect(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width, canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height)

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Circle&lt;/span&gt;():
    x: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    y: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    radius: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;UndoQueue&lt;/span&gt;:
    index : &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    q : &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;() &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; field(default_factory &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;)

&lt;span style=&#34;color:#99f&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;ResizeOperation&lt;/span&gt;:
    circle: Circle
    previous_size: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;
    new_size: &lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;

uq &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; UndoQueue(index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
currentResize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ResizeOperation(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)

my_circles &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
closest_circle_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_clear_screen&lt;/span&gt;():
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillStyle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillRect(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width, canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_draw_circle&lt;/span&gt;(x, y, radius):
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beginPath();
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;arc(x, y, radius, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;pi)
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stroke()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_draw_filled_circle&lt;/span&gt;(x, y, radius):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Drawing filled circle at &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;x&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;y&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, with radius &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;radius&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beginPath();
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;arc(x, y, radius, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;pi)
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fillStyle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;gray&amp;#34;&lt;/span&gt;
    ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;fill()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_redraw_all&lt;/span&gt;():
    _clear_screen()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(my_circles):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; closest_circle_index &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
            c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; my_circles[closest_circle_index]
            _draw_filled_circle(c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; my_circles:
            _draw_circle(c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_make_new_circle&lt;/span&gt;(x, y, radius):
    new_circle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Circle(x, y, radius)
    my_circles&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(new_circle)

    uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q[:uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
    uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(new_circle)
    uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;uq&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_on_click&lt;/span&gt;(e):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; my_circles
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetX) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetY))
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right-click-menu&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;block&amp;#34;&lt;/span&gt;): _hide_menu(e)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;button &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#left mouse button&lt;/span&gt;
        _make_new_circle(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetX,e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetY, randint(&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;70&lt;/span&gt;))
        _redraw_all()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#if (document.getElementById(&amp;#34;right-click-menu&amp;#34;).style.display == &amp;#34;block&amp;#34;): _hide_menu(e)&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; closest_circle_index &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: _show_menu(e)
        e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;preventDefault()
        e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stopPropagation()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_no_context&lt;/span&gt;(e):
    e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;preventDefault()
    e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stopPropagation()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;

canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;oncontextmenu &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _no_context
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right-click-menu&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;oncontextmenu &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; _no_context

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_show_menu&lt;/span&gt;(event):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Right mouse button clicked, showing menu&amp;#34;&lt;/span&gt;)
    menu &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right-click-menu&amp;#34;&lt;/span&gt;)
    menu&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;block&amp;#34;&lt;/span&gt;
    menu&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(event&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pageX) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px&amp;#34;&lt;/span&gt;
    menu&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;top &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(event&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pageY) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px&amp;#34;&lt;/span&gt;

    c &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; my_circles[closest_circle_index]

    label &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider-label&amp;#34;&lt;/span&gt;)
    label&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Adjust diameter of Circle at (&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;)&amp;#34;&lt;/span&gt;

    slider &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider&amp;#34;&lt;/span&gt;)
    slider&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; my_circles[closest_circle_index]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; currentResize
    currentResize&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;previous_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; slider&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    currentResize&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;circle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; c

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_change_radius&lt;/span&gt;(_):
    slider &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider&amp;#34;&lt;/span&gt;)
    new_radius &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; slider&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
    my_circles[closest_circle_index]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; new_radius
    _redraw_all()
    

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_hide_menu&lt;/span&gt;(e):
    slider &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; currentResize
    currentResize&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new_size &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; slider&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value

    uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q[:uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
    uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(currentResize)
    uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    currentResize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ResizeOperation(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right-click-menu&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
    _recalc_nearest_circle(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetX, e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetY)
        
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_on_move&lt;/span&gt;(e):
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Do not reselect circle when menu is open&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;right-click-menu&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;display &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;block&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; 
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(my_circles):
        _recalc_nearest_circle(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetX, e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;offsetY)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_recalc_nearest_circle&lt;/span&gt;(mouse_x, mouse_y):
        closest_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        closest_distance &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1000000&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, c &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(my_circles):
            dist &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; sqrt((mouse_x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (mouse_y &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; c&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; dist &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; closest_distance: 
                closest_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; i
                closest_distance &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dist
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;global&lt;/span&gt; closest_circle_index
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; closest_index &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; closest_circle_index:
            closest_circle_index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; closest_index
            _redraw_all()

on_click &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_on_click)
on_move &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_on_move)
change_radius &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_change_radius)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-canvas&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mousedown&amp;#34;&lt;/span&gt;, on_click)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-canvas&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;mousemove&amp;#34;&lt;/span&gt;, on_move)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;circle-slider&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;, change_radius)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_press_undo&lt;/span&gt;(e):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Nothing more to undo&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;uq&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;

    op_to_undo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q[uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;(op_to_undo) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Circle:
        my_circles&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pop()
        uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(my_circles):
            _recalc_nearest_circle(&lt;span style=&#34;color:#f60&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;500&lt;/span&gt;) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#A hack, bottom of the canvas&lt;/span&gt;
        _redraw_all()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;(op_to_undo) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ResizeOperation:
        op_to_undo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;circle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; op_to_undo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;previous_size
        uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        _redraw_all()
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;After Undo &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;uq&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;my_circles&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_press_redo&lt;/span&gt;(e):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;REDO &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;uq&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;my_circles&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;: 
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Nothing more to redo&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;uq&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;

    op_to_redo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;q[uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;(op_to_redo) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Circle:
        my_circles&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(Circle(op_to_redo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;x, op_to_redo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;y, op_to_redo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius))
        uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;(op_to_redo) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; ResizeOperation:
        op_to_redo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;circle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;radius &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; op_to_redo&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new_size
        uq&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(my_circles):
        _recalc_nearest_circle(&lt;span style=&#34;color:#f60&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;500&lt;/span&gt;)   

    _redraw_all()
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;After Redo &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;uq&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;my_circles&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


press_undo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_press_undo)
press_redo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_press_redo)

document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;undo&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, press_undo)
document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;redo&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, press_redo)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;

&lt;h2 class=&#34;mt-12 post-h2 &#34; id=&#34;cells-header&#34;&gt;Spreadsheet&lt;a target=&#34;_blank&#34; href=&#34;https://eugenkiss.github.io/7guis/tasks#cells&#34;&gt;&lt;img src=&#34;../../svg/externallink.svg&#34; alt=&#34;&#34; class=&#34;inline-block h-6&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 class=&#34;italic&#34;&gt;The task is to create a simple but usable spreadsheet application. The spreadsheet should be scrollable. The rows should be numbered from 0 to 99 and the columns from A to Z. Double-clicking a cell C lets the user change C’s formula. After having finished editing the formula is parsed and evaluated and its updated value is shown in C. In addition, all cells which depend on C must be reevaluated. This process repeats until there are no more changes in the values of any cell (change propagation). Note that one should not just recompute the value of every cell but only of those cells that depend on another cell’s changed value. If there is an already provided spreadsheet widget it should not be used. Instead, another similar widget (like JTable in Swing) should be customized to become a reusable spreadsheet widget.&lt;/h3&gt;
&lt;link rel =&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;./cells-table.css&#34;&gt;
            &lt;div class=&#34;grid w-full p-4 m-auto bg-blue-100 border-2 rounded-md&#34;&gt;
                &lt;div id=&#34;spreadsheet-wrapper&#34; class=&#34;overflow-x-auto overflow-y-auto h-72&#34;&gt;
                    &lt;table id=&#34;spreadsheet&#34; style=&#34;empty-cells:show&#34; class=&#34;m-auto bg-white border-2&#34;&gt;
                        &lt;thead&gt;&lt;/thead&gt;
                        &lt;tbody&gt;&lt;/tbody&gt;
                    &lt;/table&gt;
                &lt;/div&gt;
            &lt;/div&gt;
&lt;py-env&gt;
- paths:
    - ./spreadsheet.py
    - ./formula_parser.py
&lt;/py-env&gt;
&lt;py-script src=&#34;./cells-table.py&#34;&gt;
&lt;/py-script&gt;
&lt;p class=&#34;post-p&#34;&gt;I will entirely own to not-quite-finishing this challenge, in that I didn&#39;t actually implement the &#39;cells-can-refer-to-other-cells&#39; component of it that actually makes it a Spreadsheet and not a big grid of calculators. Ah well, perhaps you&#39;ll forgive me. &lt;span class=&#34;font-bold&#34;&gt;The error handling is also quite bad.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is the first time I&#39;ve had cause to use the &lt;code class=&#34;code&#34;&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; tag in these challenges. This takes a toml-style list of additional modules to import from PYPI (via &lt;a href=&#34;https://pyodide.org/en/stable/usage/loading-packages.html&#34;&gt;micropip&lt;/a&gt;), as well as a list of additional local paths that one can import from. In my case, I broke out my code into a couple of additional Python files, so my &lt;code class=&#34;code&#34;&gt;&amp;lt;py-env&amp;gt;&lt;/code&gt; tag looked like this:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;py-env-example.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
- paths:
    - ./spreadsheet.py
    - ./formula_parser.py
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./cells-table.py&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;post-p&#34;&gt;I could spend a whole post talking about the logic in &lt;code class=&#34;code&#34;&gt;formula-parser.py&lt;/code&gt;, but since this is really more of a PyScript adventure and not so much just Python, I&#39;ll leave you to explore that code on your own if you&#39;re interested. Let&#39;s talk about the setup/HTML parts.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The grid cells themselves are all &lt;code class=&#34;code&#34;&gt;input&lt;/code&gt; tags, which are generated at runtime by the &lt;code class=&#34;code&#34;&gt;create_cells()&lt;/code&gt; function. Each one is assigned an ID based on its column and row, which we&#39;ll use later to read and assign contents to it. We&#39;ll store the representation of our data separately as a Spreadsheet object, and use that to render the contents of each input as needed.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The Spreadsheet object has to be a bit clever, since it seeds to be able to hold both the input the user typed into a cell, as well as determine the value of an input (if it&#39;s an equation) and present that back to the interface. To that end, the UI can ask either &lt;code class=&#34;code&#34;&gt;getRawValue()&lt;/code&gt; to retrieve what the user actually typed in, or &lt;code class=&#34;code&#34;&gt;getRenderedValue()&lt;/code&gt; to process the equation represented by the raw value, if any.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The full code of this solution is as follows:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;my-page.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;rel &lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./cells-table.css&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;grid w-full p-4 m-auto bg-blue-100 border-2 rounded-md&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;spreadsheet-wrapper&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-x-auto overflow-y-auto h-72&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;spreadsheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;empty-cells:show&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;m-auto bg-white border-2&amp;#34;&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;thead&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;thead&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;tbody&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;tbody&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;table&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
- paths:
    - ./spreadsheet.py
    - ./formula_parser.py
&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;./cells-table.py&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;cells-table.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;87
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; document, console
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;spreadsheet&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Spreadsheet
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;

columnIndices &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;&lt;/span&gt;

document_sheet &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;spreadsheet&amp;#34;&lt;/span&gt;)

sheet &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Spreadsheet()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_handle_input_change&lt;/span&gt;(e):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Processing Cell&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id))
    render_table(sheet)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_handle_cell_enter&lt;/span&gt;(e):
    code &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;keyCode
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; code &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;13&lt;/span&gt;:
        e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;blur()

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_handle_cell_blur&lt;/span&gt;(e):
    column &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;cell-(\w)-(\d+)&amp;#39;&lt;/span&gt;, e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;cell-(\w)-(\d+)&amp;#39;&lt;/span&gt;, e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id)&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;)
    sheet&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;set((column, row), e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)
    _handle_input_change(e)

handle_cell_enter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_handle_cell_enter)
handle_input_blur &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_handle_cell_blur)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;_handle_cell_focus&lt;/span&gt;(e):
    console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;target&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; gained focus&amp;#34;&lt;/span&gt;)
    _handle_input_change(e)

handle_cell_focus &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; create_proxy(_handle_cell_focus)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;render_table&lt;/span&gt;(s: Spreadsheet):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; location &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data:
        &lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cell-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(location[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(location[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;])
        cell_input &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(&lt;span style=&#34;color:#366&#34;&gt;id&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; cell_input &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;activeElement: 
            cell_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getRawValue(location)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            cell_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getRenderedValue(location)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;create_table&lt;/span&gt;(num_x, num_y):
    create_header(num_x)
    create_cells(num_x, num_y)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;create_header&lt;/span&gt;(num_x):
    header &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;querySelector(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#spreadsheet &amp;gt; thead&amp;#34;&lt;/span&gt;)
    upperLeft &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;th&amp;#34;&lt;/span&gt;)
    header&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(upperLeft)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(num_x):
        heading &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;th&amp;#34;&lt;/span&gt;)
        heading&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; columnIndices[i]
        header&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(heading)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;create_cells&lt;/span&gt;(num_x, num_y):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(num_y):
        row &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;tr&amp;#34;&lt;/span&gt;)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;overflow-x-hidden&amp;#34;&lt;/span&gt;)
        
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Create row label&lt;/span&gt;
        cell &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;td&amp;#34;&lt;/span&gt;)
        label &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;)
        label&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-full&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-bold&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;text-right&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;px-2&amp;#34;&lt;/span&gt;)
        label&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerText &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; y
        cell&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(label)
        row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(cell)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(num_x):
            sheet&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;set((columnIndices[x], y), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(x)&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(y))
            cell &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;td&amp;#34;&lt;/span&gt;)
            cell&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;border-2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;border-gray-300&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-48&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;h-6&amp;#34;&lt;/span&gt;)
            new_input &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;)
            new_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;classList&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;w-48&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;h-6&amp;#34;&lt;/span&gt;)
            new_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;cell-&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;columnIndices[x]&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;y&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;
            new_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;keydown&amp;#34;&lt;/span&gt;, handle_cell_enter)
            new_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;blur&amp;#34;&lt;/span&gt;, handle_input_blur)
            new_input&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;addEventListener(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;focus&amp;#34;&lt;/span&gt;, handle_cell_focus)
            cell&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(new_input)
            row&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(cell)
        document_sheet&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(row)

create_table(&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(columnIndices),&lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;)
render_table(sheet)
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;spreadsheet.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;formula_parser&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; FormulaParser, TokenType
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; console

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Spreadsheet&lt;/span&gt;():
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data : &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;[&lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;, &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;set&lt;/span&gt;(self, location: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;, value: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data[location] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; value
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getRawValue&lt;/span&gt;(self, location: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data[location]

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getRenderedValue&lt;/span&gt;(self, location: &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;):
        value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data[location] 
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data[location][&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;:
            tokens &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tokenize(value[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:])
            console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Tokens: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;tokens&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;([t&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_CELL &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; tokens]):
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;solve_with_references(tokens, self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;data)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;solve_full_expression(tokens)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; value
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;br&gt;
&lt;p class=&#34;code-title&#34;&gt;formula_parser.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;128
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;129
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;130
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;131
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;132
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;133
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;134
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;135
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;136
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;137
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;138
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;139
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;140
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;141
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;142
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;143
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;144
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;145
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;146
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;147
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;148
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;149
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;150
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;151
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;152
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;153
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;154
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;155
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;156
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;157
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;158
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;159
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;160
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;161
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;162
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;163
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;164
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;165
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;166
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;167
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;168
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;169
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;170
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;171
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;172
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;173
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;174
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;175
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;176
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;177
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;178
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;179
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;180
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;181
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;182
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;183
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;184
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;185
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;copy&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; deepcopy
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Enum, auto
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;re&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;typing&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Iterable

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;TokenType&lt;/span&gt;(Enum):
    T_NUM &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_EMPTY &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_PLUS &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_MINUS &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_DIVIDE &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_MULT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_LEFTP &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_RIGHTP &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_CELL &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_END &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()
    T_EXPRESSION &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auto()

arithmetic &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; : TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_PLUS,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; : TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_MINUS,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; : TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_DIVIDE,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; : TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_MULT,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; : TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_LEFTP,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt; : TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_RIGHTP,
}

parens_types &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_LEFTP, TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_RIGHTP}
my_dear &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_MULT : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x,y: x&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;y, TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_DIVIDE: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x, y: x&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;y}
aunt_sally &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_PLUS: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x,y: x&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;y, TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_MINUS: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x, y: x &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; y}

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;quiet_index&lt;/span&gt;(i: Iterable, obj):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        index &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(obj)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;ValueError&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; err:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; index

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;ParseError&lt;/span&gt;(&lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Node&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, token_type, value&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;, children&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; token_type
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; value
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; children &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;: self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; children
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Node (&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;):&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; children: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;__str__()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_value&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_NUM:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Could not derive value of token &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;FormulaParser&lt;/span&gt;():
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#re_ident = r&amp;#34;[a-zA-Z_]\w*&amp;#34; #matches identifiers&lt;/span&gt;
    re_decimal &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;-?\d+(\.\d*)?&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#matches decimal numbers&lt;/span&gt;
    re_cell &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;([a-zA-Z])(\d+)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#group 1 is column, group 2 is row&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#re_range = re_cell + &amp;#34;:&amp;#34; + re_cell #matches a range like A2:B4&lt;/span&gt;
    re_operators &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[\+\-\/\*\(\)]&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tokenize&lt;/span&gt;(value: &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(value) &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
        value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join(value&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;split()) &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#remove all whitespace&lt;/span&gt;

        tokens &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;()
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(value) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
            token &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
            match &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; match &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;re_cell, value):
                token &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_CELL, value&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group())
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; match &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;re_operators, value):
                token &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(token_type&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;arithmetic[match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group()], value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group())
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; match &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; re&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;match(FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;re_decimal, value):
                token &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_NUM, value&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;(match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;group()))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;No further tokens found in &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
            tokens&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(token)
            value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; value[match&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;end():]
            
        tokens &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [Node(token_type&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_LEFTP, value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; tokens &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [Node(token_type&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_RIGHTP, value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;)]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; tokens

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;get_referenced_cells&lt;/span&gt;(token_list: &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; [node &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; token_list &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;isinstance&lt;/span&gt;(node, Node) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; node&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_CELL]

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;find_closest_parens&lt;/span&gt;(token_list:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;tuple&lt;/span&gt;:
        leftIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        rightIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, token &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(token_list):
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; token&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_LEFTP:
                leftIndex &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; i
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;elif&lt;/span&gt; token&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_RIGHTP:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; leftIndex &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; leftIndex, i
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;Exception&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Left and right parentheses do not match&amp;#34;&lt;/span&gt;)
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#-----------------------------------------#&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_full_expression&lt;/span&gt;(token_list:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;:
        original_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; deepcopy(token_list)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;([t&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; parens_types &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; token_list]):
            left_p, right_p &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;find_closest_parens(token_list)
            result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;evaluate_simple_expression(token_list[left_p&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:right_p])
            token_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (token_list[:left_p] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; left_p &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; []) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [result] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (token_list[right_p &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (right_p &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(token_list) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; [])
            

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(token_list) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; token_list[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; ParseError(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Failed to parse full expression &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;original_list&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;Final tokens were &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;token_list&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)


    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;evaluate_simple_expression&lt;/span&gt;(token_list:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Node:
        original_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; deepcopy(token_list)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(token_list) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; token_list[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]

        token_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;evaluate_for_single_opset(token_list, my_dear)
        token_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;evaluate_for_single_opset(token_list, aunt_sally)
        
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(token_list) &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; token_list[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;raise&lt;/span&gt; ParseError(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Failed to parse simple expression &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;original_list&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;Final tokens were &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;token_list&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;evaluate_for_single_opset&lt;/span&gt;(token_list:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;, operators:&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;any&lt;/span&gt;(ops_to_do &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; [t&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; operators &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; token_list]):
            op_location &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ops_to_do&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;)
            func &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; operators[token_list[op_location]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;token_type]

            result &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; func(token_list[op_location&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value, token_list[op_location&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;value)
            new_node &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Node(TokenType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;T_NUM, value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; result)

            token_list &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (token_list[:op_location&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; op_location &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; []) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; [new_node] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; (token_list[op_location &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;:] &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; op_location &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(token_list) &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; [])
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; token_list

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tokenize_and_solve&lt;/span&gt;(expression:&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;solve_full_expression(FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tokenize(expression))

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;solve_with_references&lt;/span&gt;(token_list:&lt;span style=&#34;color:#366&#34;&gt;list&lt;/span&gt;, data: &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;, already_referenced:&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;None&lt;/span&gt;) &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;float&lt;/span&gt;:
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Not yet implemented&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;solve_full_expression(token_list)

        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Psuedocode:
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Get list of all references in tokens
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            if any of these area in our already-referenced set, we have a loop and cannot solve this. Bail!
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Recursively get the values of each of those cells.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            If the cell is a striaght numerical value, just get a node with that value
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            If the cell is not a number or tokenizable, BAIL! #REF error
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            Tokenize their destination
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            If they have references, call this again with self added to the list of referenced cells
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;            If not, solve them normally with solve_full_expression
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        solve_full_expression of this normal expression
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        Return
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;



&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    values &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2 + 3&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2 * 3&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2 + 3 * 4&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2 * 3 + 4&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2 * (3 + 4)&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(2 * 3) + 4&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;(2 + 3) * (4 + 5)&amp;#34;&lt;/span&gt;
    ]
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; values:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;v&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;FormulaParser&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tokenize_and_solve(v)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see complete code&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;ve made it this far down the page, I&#39;m truly honored. &lt;a href=&#34;https://twitter.com/jeffersglass&#34;&gt;I&#39;m just a guy who loves Python and playing with code&lt;/a&gt;, and I&#39;d love to hear what you think of PyScript.&lt;/p&gt;
&lt;py-script src=&#34;timer.py&#34;&gt;&lt;/py-script&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Pyscript Intro</title>
      <link>https://jeff.glass/post/pyscript-intro/</link>
      <pubDate>Mon, 02 May 2022 07:36:11 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pyscript-intro/</guid>
      <description>&lt;script defer src=&#34;../../ps/pyscript.js&#34;&gt;&lt;/script&gt;
&lt;p class=&#34;post-p&#34;&gt;Installation is simple, as noted on the &lt;a href=&#34;https://github.com/pyscript/pyscript&#34;&gt;Github repository&lt;/a&gt;: clone the repo, cd into the pyscriptjs folder, run &lt;code class=&#34;code&#34;&gt;npm install&lt;/code&gt; and you&#39;re good to go. &lt;code class=&#34;code&#34;&gt;npm run dev&lt;/code&gt; starts a live server for playing with code or examples. You can also just include Pyscript via CDN.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Looking at the core part of the hello_world example shows us a few things:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;hello_world.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
    Hello world! &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;br&lt;/span&gt;&amp;gt;
    This is the current date and time, as computed by Python:
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
from datetime import datetime
now = datetime.now()
now.strftime(&amp;#34;%m/%d/%Y, %H:%M:%S&amp;#34;)
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;firstoutput.PNG&#34; alt=&#34;A screenshot of the pyscript Hello World app, with generated HTML source code clipped from the inspector&#34; class=&#34;mb-4 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems that, REPL-like, the raw string output of... the final line? Is printed to the sceen. In our case,  inside a div with what looks like a UUID:&lt;/p&gt;

&lt;img src=&#34;firsthtml.PNG&#34; alt=&#34;A screenshot of the pyscript Hello World app, with generated HTML source code clipped from the inspector&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems that this is only true for raw, literal values. That is, adding &lt;code class=&#34;code&#34;&gt;test_name = &#34;test&#34;&lt;/code&gt; to the end of the py-script tag means that nothing is output, but just adding &lt;code class=&#34;code&#34;&gt;&#34;test&#34;&lt;/code&gt; prints &lt;span class=&#34;italic&#34;&gt;test&lt;/span&gt; to the screen.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;&amp;lt;py-script&amp;gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;datetime&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; datetime
now &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;now()
now&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;%m/&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;/%Y, %H:%M:%S&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;testoutput.PNG&#34; alt=&#34;&#34; class=&#34;my-4 post-img&#34;&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s look at a slightly more complicated example with the simple clock:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;&amp;lt;py-script&amp;gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-mono&amp;#34;&lt;/span&gt;&amp;gt;start time: 
        &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-mono&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-mono&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv&amp;#34;&lt;/span&gt;&amp;gt;
import utils
utils.now()
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;utils&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; now
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;asyncio&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;foo&lt;/span&gt;():
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
    output &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; now()
    pyscript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv2&amp;#34;&lt;/span&gt;, output)
    
    out3 &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Element(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv3&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; output[&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt;]:
      out3&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;It&amp;#39;s espresso time!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
      out3&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clear()

pyscript&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;run_until_complete(foo())&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;simple_clock_output.gif&#34; alt=&#34;&#34; class=&#34;my-4 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;What&#39;s going on here? Well, the static text that is the start time of the program comes from the first py-script tag, again using that &#34;final value is exported as a string&#34; thing we saw before. The second py-script takes care of of the constatntly updating time, as well as printing &#34;It&#39;s espresso time!&#34; if the final character in the datetime string is a 0, 4, or 8. We&#39;re using &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep&#34;&gt;asynchio.sleep&lt;/a&gt; to handle the timing&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Out of curiousity, I replaced &lt;code class=&#34;code&#34;&gt;await asyncio.sleep(1)&lt;/code&gt; with &lt;code class=&#34;code&#34;&gt;import time&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;time.sleep(1)&lt;/code&gt;, and not only does the program not wake up after 1 second to continue running, the entire chrome tab is frozen. I can&#39;t even right-click to inspect/view source. And if I try to close it or rfresh the page, I get a &#34;page not responsive&#34; error and the option to kill the process. So time.sleep, it seems, is right out.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Other things I&#39;m noticing - the &lt;code class=&#34;code&#34;&gt;pyscript.write&lt;/code&gt; function, which apparently puts takes an element id and a value, and stuffs the value into a div within that element id. Let&#39;s look at the source to see what&#39;s actually happening here. &lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;src/pyscript.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;PyScript&lt;/span&gt;:
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#...&lt;/span&gt;

    &lt;span style=&#34;color:#99f&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;write&lt;/span&gt;(element_id, value, append&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;, exec_id&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;):
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Writes value to the element with id &amp;#34;element_id&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        console&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;APPENDING: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;append&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; ==&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;element_id&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; --&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; append:
            child &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createElement(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
            element &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;querySelector(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;#&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;element_id&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;);
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; element:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;
            exec_id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; exec_id &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;or&lt;/span&gt; element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;childElementCount &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
            element_id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; child&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;element_id&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;exec_id&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;;
            element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(child);

        element &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getElementById(element_id)
        html, mime_type &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; format_mime(value)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; mime_type &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;application/javascript&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;):
            scriptEl &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; document&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createRange()&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;createContextualFragment(html)
            element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;appendChild(scriptEl)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            element&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;innerHTML &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; html&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;So the &lt;code class=&#34;code&#34;&gt;pyscript.write&lt;/code&gt; static method takes an element id and value, as well as two optional arguments. The &lt;code class=&#34;code&#34;&gt;append&lt;/code&gt; argument specifies whether to append the value as an additional div, as the final child of the given element, or simply set the innerHTML of the provided element to the value given. And the exec-id seems to be an index of which child of the given element is being modified, though it&#39;s also auto-incremented when appending, so probably one wouldn&#39;t set this manually much.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Adding &lt;code class=&#34;code&#34;&gt;append = True&lt;/code&gt; to the final pyscript.write statement behaves as expected:&lt;/p&gt;
&lt;img src=&#34;simple_clock_output_append.gif&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;And since this particular app is built with Svelte and includes tailwind, we can use all the familiar tailwind classes to start formatting the output, to make it a little more clear where our data is coming from. Let&#39;s make the first div red, the second green, and the &#39;espresso time&#39; div blue:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;simple_clock.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-mono bg-red-200&amp;#34;&lt;/span&gt;&amp;gt;start time: &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;label&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-mono bg-green-200&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputDiv3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;font-mono bg-blue-200&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;colorful_append.gif&#34; alt=&#34;&#34; class=&#34;my-4 post-img&#34;&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;As long as we&#39;re in the source, let&#39;s see whatever methods and classes live in pyscript.py.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It looks like the &lt;span class=&#34;font-bold&#34;&gt;PyScript class&lt;/span&gt; has only two methods: write and run_until_complete, i.e. loop forever.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s also the &lt;span class=&#34;font-bold&#34;&gt;Element class&lt;/span&gt;, which seems to be the internal, pythonic representation of a DOM element, with basic write, clear, and select method, as well as a clone(duplciate) method&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, there&#39;s quite a few functions that appear to deal with the output formatting of various objects based on their &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&#34;&gt;MIME types&lt;/a&gt;, allowing rendering of objects to the screen.&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;&lt;code class=&#34;code&#34;&gt;PyScript.write&lt;/code&gt; calls &lt;code class=&#34;code&#34;&gt;format_mime&lt;/code&gt; to get the properly formatted HTML for an object (in theory) before stuffing it into (or appending it to) the targetted element. If the object is a string, it simply returns that string with the MIME type &#39;text/plain&#39;. Otherwise, the &lt;code class=&#34;code&#34;&gt;eval_formatter&lt;/code&gt; method is called to determine if the object has a &lt;code class=&#34;code&#34;&gt;print_method&lt;/code&gt; attribute.&lt;/li&gt;
&lt;li&gt;In most cases, &lt;code class=&#34;code&#34;&gt;eval_formatter&lt;/code&gt;, just returns the objects &lt;code class=&#34;code&#34;&gt;print_method&lt;/code&gt; attribute, if it has one. But if the object&#39;s print_method is &#39;savefig&#39;, it stuffs the image into a base64-encoded png and returns that as well. Neat!&lt;/li&gt;
&lt;li&gt;Once the content (possibly text, or a now-base64-encoded image) and MIME type are determined, some additional transformations on the content may be made. The &lt;code class=&#34;code&#34;&gt;MIME_RENDERERS&lt;/code&gt; dict maps MIME types to functions, some of which are the identity function, and some of which add additional html tags or boilerplate around the contetn so it will display properly. At this point, &lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;code-title&#34;&gt;pyscript.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;render_image&lt;/span&gt;(mime, value, meta):
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;data:&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;mime&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;;charset=utf-8;base64,&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;
    attrs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;join([&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{k}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{v}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; meta&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;items()])
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;img src=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;attrs&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/img&amp;gt;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;identity&lt;/span&gt;(value, meta):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; value


MIME_RENDERERS &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;: identity,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt; : identity,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; value, meta: render_image(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;, value, meta),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; value, meta: render_image(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt;, value, meta),
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;image/svg+xml&amp;#39;&lt;/span&gt;: identity,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;: identity,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;application/javascript&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;lambda&lt;/span&gt; value, meta: &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;value&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;/script&amp;gt;&amp;#39;&lt;/span&gt;
} &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;So, the flow is:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;PyScript.write finds the element with the given element_id&lt;/li&gt;
&lt;li&gt;PySript.write calls format_mime to get the appropriate html-formatted representation of the value passed to PyScript.write&lt;/li&gt;
&lt;li&gt;If the value was a string, format_mime just returns it with a mime_type of &#39;text/plain&#39;&lt;/li&gt;
&lt;li&gt;Otherwise, format_mime calls eval_formatter to get the print_method&#39;s of the object, and possibly the base64 representation of it if it&#39;s an iamge.&lt;/li&gt;
&lt;li&gt;Once format_mime has these methods, it looks up the repr names in its MIME_METHODS dict to map the presence of __repr__ methods to a probably mime type&lt;/li&gt;
&lt;li&gt;Once the mime type is known, the value may optionally be transformed by the functions that are the values in the MIME_RENDERERS dictionary&lt;/li&gt;
&lt;li&gt;Finally, if the type turned out to be either application/javascript or text/html, the given value is wrapped up in a next html or script element and stuffed into the desired element in the DOM. Otherwise, the content is simply overwritten/appended to the elements innerHTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;I dug through all this as I was digging into &lt;a href=&#34;https://github.com/pyscript/pyscript/issues/103&#34;&gt;Issue #103&lt;/a&gt; on the PyScript Github, and learned a few things about Python on the way. Namely, print() is pretty much just a wrapper to sys.stdout.write() (or any other file-like object, if specified). And while print() can be called with any number of positional arguments and will send them all to stdout, it does so as &lt;span class=&#34;italic&#34;&gt;individual calls to stdout.writer()&lt;/span&gt;. So programs (like PyScript) that interrupt that output to do other things with may get results that look off if they behave differently than the line-o&#39;-text that a terminal would display.&lt;/p&gt;
&lt;div id=&#34;my_canvas&#34;&gt;&lt;canvas class=&#34;m-auto&#34;&gt;&lt;/canvas&gt;&lt;/div&gt;
&lt;py-env&gt;
- paths:
  - ./pathing.py
&lt;/py-env&gt;
&lt;py-script&gt;
from js import document
from pathing import PathFollower

canvas = document.querySelector(&#34;#my_canvas canvas&#34;)
canvas.style.display = &#34;block&#34;
width = canvas.width
print(width)

p = PathFollower(canvas, width, 250)
p.start(interval = 100)
&lt;/py-script&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;If all has gone well (and you&#39;re viewing this on a compatible browser), you should see my final experiment of the day, a line jumping around on an HTML canvas, powered entirely by Python (well, via JS too, but I didn&#39;t have to write any).&lt;/p&gt;
&lt;p class=&#34;my-8 code-title&#34;&gt;pyscript-intro.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
    - paths:
      - ./pathing.py
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-env&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;
    from js import document
    from pathing import PathFollower
    
    canvas = document.querySelector(&amp;#34;#my_canvas canvas&amp;#34;)
    canvas.style.display = &amp;#34;block&amp;#34;
    width = canvas.width
    print(width)
    
    p = PathFollower(canvas, width, 250)
    p.start(interval = 100)
    &amp;lt;/&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;py-script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&#34;my-8 code-title&#34;&gt;pathing.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;random&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; randint
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; setInterval, document, DOMParser
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;pyodide&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; create_proxy

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;PathFollower&lt;/span&gt;:
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, canvas, width, height, numPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;numPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; numPoints
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; width
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; height
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ctx &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getContext(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;)
        
        canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;width&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;
        canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;style&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;height&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;px&amp;#34;&lt;/span&gt;

        canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; width
        canvas&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; height
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;randomizePath()
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;getNewPoint&lt;/span&gt;(self):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; (randint(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;width&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;), randint(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;height&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;))
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;randomizePath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getNewPoint() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;range&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;numPoints)]

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;movePath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;append(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getNewPoint())

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;clearPath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clearRect(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;)
    
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;drawPath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;beginPath()    
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;moveTo(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;])
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, point &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pathPoints[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:]):
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;lineTo(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;point)
            self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ctx&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;stroke()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;remakePath&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;clearPath()
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#self.randomizePath()&lt;/span&gt;
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;movePath()
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;drawPath()

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;start&lt;/span&gt;(self, interval):
        setInterval(create_proxy(self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remakePath), interval)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;</description>
      &lt;
    </item>
    
  </channel>
</rss>