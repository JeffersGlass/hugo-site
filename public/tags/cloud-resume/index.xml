<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloud-Resume on Jeff Glass</title>
    <link>https://jeff.glass/tags/cloud-resume/</link>
    <description>Recent content in Cloud-Resume on Jeff Glass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Mar 2022 17:54:43 -0500</lastBuildDate><atom:link href="https://jeff.glass/tags/cloud-resume/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Improving Website Experience with AWS Cloudfront Stats</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-improving-hits/</link>
      <pubDate>Sun, 13 Mar 2022 17:54:43 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-improving-hits/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I was digging around in the available statistics for this very site on &lt;a href=&#34;post/Cloud-Resume-Challenge-Cloudfront-for-HTTPs&#34;&gt;my Cloudfront Distribution&lt;/a&gt;, when I came across an interesting chart.&lt;/p&gt;
&lt;img src=&#34;dailyhits.PNG&#34; alt=&#34;A chart showing the total requests per day for this website. The hits range from roughly one thousand to over 2500&#34; class=&#34;post-img lg:w-2/5&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Wow, almost 2500 hits to my Cloudfront cache on 3/8! My site must be getting so much traffic!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Or is it? Let&#39;s dig futher into the cache stats and see what&#39;s happening. The next charge on this page shows percentage of viewer requests by result type and... it doesn&#39;t look good. Especially if I stretch it out cover the last month.&lt;/p&gt;
&lt;img src=&#34;hitsmisses2.PNG&#34; alt=&#34;A chart showing the percentage of hits, misses, and errors for users (hosts) requesting pages from this site. Before March 2 they are mostly misses, but on March 2 the errors shoot up wildly.&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Well, double dang. Two things that jump out immediately:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Before about March 2nd, roughly 60% of the requests to the site were generating misses. That&#39;s fine, just means that content wasn&#39;t being accessed all that often. But:&lt;/li&gt;
    &lt;li&gt;After about March 2nd, roughly 50% of the requests to the site were generating errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;That March 2nd date makes some sense - that&#39;s when I officially switched over all (most) of my content from my old wordpress site to this hugo-made site. I finalized this while &lt;a href=&#34;../../project/usitt2022&#34;&gt;sitting in a convention hall in Baltimore&lt;/a&gt;, so I guess it&#39;s not 100% surprising that something was left unaccounted for. And I know that there are a couple pieces of content that I haven&#39;t ported over at time of writing (specially, links to the Electronics Bash class pages.) But let&#39;s see if we can determine exactly what&#39;s failing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &#39;Popular Objects&#39; view gives a pretty straightforward view of what users (or scrapers) are looking for. Anything that has only 4xx responses (and/or zero cache hits) is likely to be something that doesn&#39;t exist on our site. And if necessary, we can compare this list to the view of the past month (before and after changeover-day) to see what resources are no longer being found.&lt;/p&gt;
&lt;div class=&#34;flex&#34;&gt;&lt;img src=&#34;popularmisses1.PNG&#34; alt=&#34;A chart of the most popularly acessed objects on my site in the last 7 days. The most common hits and misses are mentioned in the text.&#34; class=&#34;post-img lg:w-2/5&#34;&gt;&lt;img src=&#34;popularmisses2.PNG&#34; alt=&#34;A chart of the most popularly acessed objects on my site in the last 7 days. The most common hits and misses are mentioned in the text.&#34; class=&#34;post-img lg:w-2/5&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Wow, almost 2000 requests for &lt;code class=&#34;code&#34;&gt;/feed&lt;/code&gt; in the last week that have gone nowhere. This makes sense - it&#39;s a default URL for RSS feeds in a wordpress site. It doesn&#39;t look like that&#39;s something I broke specifically at my Wordpress transition, but it&#39;d be nice to allow scrapers looking for wordpress sites to actually find my feed, I think. Since the default RSS feed in a Hugo build are at &lt;code class=&#34;code&#34;&gt;/index.xml&lt;/code&gt;, I&#39;d like to &lt;a href=&#34;../../post/cloud-resume-challenge-aliases/&#34;&gt;add a redirect&lt;/a&gt; to make that happen. Unfortunately, it seems like &lt;a href=&#34;https://discourse.gohugo.io/t/rss-url-or-an-alias/35501/2&#34;&gt;redirects/aliases in Hugo can only create aliases with an html extention&lt;/a&gt;, so I&#39;ll need to go about this another way.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;I was a little worried that I&#39;d hit a dead-end at this point. After all, I&#39;m hosting this static site through S3 specifically to eliminate the need for a webserver, but I assumed I&#39;d need an actual server to create proper 301 redirects. Thankfully, it seems &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/how-to-page-redirect.html&#34;&gt;S3 has basic redirect capabilities built in&lt;/a&gt; after all. (&lt;span class=&#34;italic&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Update:&lt;/span&gt; on later examination this method has some issues - skip to the next Update tag for the new method.&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;There are options for redirect rules (up to 50), which can handle redirecting by prefix, postfix, error code, etc, though only 50 rules are allowed per site. Individual objects can also be setup to redirect to other objects, which seems like perhaps what we want in this case.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll start by createing a file at &lt;code class=&#34;code&#34;&gt;/static/feed&lt;/code&gt; (no suffix), which will appear on my site at &lt;code class=&#34;code&#34;&gt;https://jeff.glass/feed&lt;/code&gt;, the address I want to redirect. I&#39;ll &lt;a href=&#34;post/cloud-resume-challenge-hugo/&#34;&gt;build my site&lt;/a&gt; and &lt;a href=&#34;post/cloud-resume-challenge-github-for-frontend/&#34;&gt;push it to the GitHub Repo that stores the site&#39;s code&lt;/a&gt;, where a GitHub action automatically pushes it to my S3 bucket within a couple mintues.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Once the new feed object appears in the S3 bucket, we can pretty easily &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/how-to-page-redirect.html#redirect-requests-object-metadata&#34;&gt;follow the steps outlined here&lt;/a&gt; to create a redirect. We simply edit the objects metadata, add a key of type &lt;code class=&#34;code&#34;&gt;x-amx-website-redirect-location&lt;/code&gt; with a value of the new URL we wish to point to. &lt;span class=&#34;italic&#34;&gt;That key is available in a dropdown, no need to type it.&lt;/span&gt;&lt;/p&gt;
&lt;img src=&#34;redirectfeed.PNG&#34; alt=&#34;The metadata field of an object in a S3 bucket, showing the redirect key and value described in the text&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Now if you go to &lt;a href=&#34;https://jeff.glass/feed&#34;&gt;https://jeff.glass/feed&lt;/a&gt;, you (or an RSS reader) will be redirected to &lt;code class=&#34;code&#34;&gt;/index.xml&lt;/code&gt; where the actual RSS feed lives. Pretty slick!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One thing I tested at this point is whether the object will retain its metadata even if the underlying object is changed. I tweaked the text of the &lt;code class=&#34;code&#34;&gt;/feed&lt;/code&gt; object some, rebuilt the site and reuploaded it, and unfortunately the answer is &lt;span class=&#34;font-bold&#34;&gt;no&lt;/span&gt;. However, because the &lt;a href=&#34;https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3/sync.html&#34;&gt;AWS CLI Sync Action&lt;/a&gt; which is used under the hood by &lt;a href=&#34;https://github.com/jakejarvis/s3-sync-action&#34;&gt;Jake Jarvis&#39; Github to S3 Sync Action&lt;/a&gt; only overwrites new files, so long as we don&#39;t modify the static &lt;code class=&#34;code&#34;&gt;/feed&lt;/code&gt; object, that metadata should remain indefinitely.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;font-bold&#34;&gt;Update:&lt;/span&gt; It seems that some of what I determined about the persistance of the object metadata is not true, and that the metadata is getting wiped whenever I rebuild and re-upload the site. Which is a shame, this would have been a nice clean way to handle this case. Thankfully, we can still use the site Redirection Rules in the Static Site settings of our S3 bucket to redirect from /feed to /index.xml as follows:&lt;/p&gt;
&lt;pre class=&#34;w-auto px-4 mx-4 mb-4 bg-gray-200&#34;&gt;
[
    {
        &#34;Condition&#34;: {
            &#34;KeyPrefixEquals&#34;: &#34;feed&#34;
        },
        &#34;Redirect&#34;: {
            &#34;ReplaceKeyPrefixWith&#34;: &#34;index.xml&#34;
        }
    }
]
&lt;/pre&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;The resource with the next-most 4xx responses is for &lt;code class=&#34;code&#34;&gt;robots.txt&lt;/code&gt;. This is a page that tells crawlers that obey the &lt;a href=&#34;https://en.wikipedia.org/wiki/Robots_exclusion_standard&#34;&gt;Robots Exclusion Standard&lt;/a&gt; what they are and aren&#39;t allowed to crawl on your site. We can &lt;a href=&#34;https://gohugo.io/templates/robots/&#34;&gt;generate it in Hugo very simply&lt;/a&gt; by adding &lt;code class=&#34;code&#34;&gt;enableRobotsTXT = true&lt;/code&gt; to our &lt;code class=&#34;code&#34;&gt;config.toml&lt;/code&gt; file. We could also add a &lt;code class=&#34;code&#34;&gt;robots.txt&lt;/code&gt; file to our templates folder to override the default Hugo template (which allows everything to be crawled), but I think the default is fine in my case.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code class=&#34;code&#34;&gt;xmlrpc.php&lt;/code&gt; is apparently a &lt;a href=&#34;https://www.hostinger.com/tutorials/xmlrpc-wordpress&#34;&gt;long-outdated way of accessing Wordpress sites remotely&lt;/a&gt;. I don&#39;t know if it has any legitimate uses anymore, but since my site is in no way Wordpress-ed, I don&#39;t need it.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That said, perhaps it would be nice if the site showed something more testful than server-garbge when an inaccessible page was requested.&lt;/p&gt;
&lt;img src=&#34;whatishere.PNG&#34; alt=&#34;A server error message reading &#39;404 Not Found&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Hugo has capablities to help us with this too. By adding a &lt;code class=&#34;code&#34;&gt;layouts/404.html&lt;/code&gt; page, we can &lt;a href=&#34;https://gohugo.io/templates/404/&#34;&gt;customize what&#39;s shown to the end user&lt;/a&gt; when they request a page that can&#39;t be found. There are some opinions online, however, that &lt;a href=&#34;https://moonbooth.com/hugo/custom-404/&#34;&gt;maybe this isn&#39;t the best thing to do.&lt;/a&gt; But I&#39;m not going to bite off more than I can chew at this point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To give my 404 page a little more life and interest, I&#39;ll have it include cards for 5 pages on the site. While I initially thought these should be random, like the oneoffs on the index page, I think perhaps its better that they represent the best content on the site in a curated way. I can somewhat reuse the &#34;card&#34; layout I built for the index page for this.&lt;/p&gt;
&lt;img src=&#34;nice404.PNG&#34; alt=&#34;A screenshot of the 404 page of the website showing 5 content cards: cloud resume challenge, Demilight, Setting Up and Electronics Lab, Advent of Code, and Soft Shutdown and Consistent Boot on Power Loss&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;I did have to learn a bit more about Hugos range and slice capabilities so I could store the selected pages in an array, rather than inserting them all individually into the template. The final syntax is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;{{ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pages&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/project/demilight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post/setting-up-an-electronics-lab-tools/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post/advent-of-code-2021/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post/quick-dirty-system-power/&amp;#34;&lt;/span&gt; }}
{{ &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pages&lt;/span&gt; }}
    {{ &lt;span style=&#34;color:#a6e22e&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetPage&lt;/span&gt; . }}
        {{ .&lt;span style=&#34;color:#a6e22e&#34;&gt;Render&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;card&amp;#34;&lt;/span&gt; }}
    {{ &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; }}
{{ &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; }}  
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Because the Cloud Resume Challenge page is actually a list page, I inserted it manually with some HTML.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, there&#39;s a small amount of configuration to be done in the S3 bucket to clarify that &lt;code class=&#34;code&#34;&gt;404.html&lt;/code&gt; is indeed the error page.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;So, that takes care of the assorted wordpress holdovers I no longer need. The only remaining items that are giving 404-responses are a number of links to images of various sizes, all to &lt;code class=&#34;code&#34;&gt;/wp-content/uploads/&lt;/code&gt;. At first I was worried that this was someone hotlinking to these images from outside my domain, but a quick search of my site proved me wrong.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;When I &lt;a href=&#34;http://localhost:1313/post/cloud-resume-challenge-porting-wordpress-blogs-to-hugo/&#34;&gt;ported this blog to Hugo using Python&lt;/a&gt;, I missed the fact that, in many posts created on wordpress, images are embedded as thumbnails which link to larger versions of the original image. I failed to remove or update those links, so the images on my site were still linking to the (now dead) wordpress images. Thankfully, a quick regex find-and-replace (&lt;code class=&#34;code&#34;&gt;&amp;lt;a href=\&amp;quot;.+wp-content/uploads/.+&amp;gt;(.+)&amp;lt;/a&amp;gt;&lt;/code&gt; replaced with &lt;code class=&#34;code&#34;&gt;$1&lt;/code&gt;) cleared up almost all of these instances. One more with irregular formatting was swatted by hand.&lt;/p&gt;
&lt;img src=&#34;changeview.PNG&#34; alt=&#34;A screenshot of VS Code showing the find-and-replace interface for multiple replacement. Lines to be added are color-coded green, those being deleted are color-coded red.&#34; class=&#34;post-img&#34;&gt;
&lt;hr&gt;
&lt;p class=&#34;post-p&#34;&gt;And with that, hopefully I&#39;ve nipped all those pesky 404 responses in bud. I know there are some remaining pages I have left to port over from Wordpress, but since they aren&#39;t seeing many hits on Cloudflare, I&#39;m not feeling terribly urgent about them. Besides, the new 404 page makes the response to missing content much cleaner.&lt;/p&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Aliases</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-aliases/</link>
      <pubDate>Fri, 04 Mar 2022 12:32:00 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-aliases/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;As part of transitionining from my old wordpress site to this new one created with Hugo, I wanted to be sure to preserve any external links that pointed to URLs that may no longer exist in Hugo&#39;s content structure. In partilcular, the format of permalinks to my blog posts has changed from &lt;code class=&#34;code&#34;&gt;/year/date/post-name&lt;/code&gt; to just &lt;code class=&#34;code&#34;&gt;/post/post-name&lt;/code&gt;. Additionally, I had created 301 redirects from several short URLS like &lt;code class=&#34;code&#34;&gt;/demilight&lt;/code&gt; to unique pages; I wanted those links to be preserved as well.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, Hugo has some simple functionality to help with this in the form of &lt;a href=&#34;https://gohugo.io/content-management/urls/#aliases&#34;&gt;aliases&lt;/a&gt;. By including a relative path in any page&#39;s front matter, Hugo will create a redirect link from that relative path to the current page.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For example, I would like users who visit &lt;code class=&#34;code&#34;&gt;https://jeff.glass/demilight&lt;/code&gt; to be redirected to  &lt;code class=&#34;code&#34;&gt;https://jeff.glass/project/demilight&lt;/code&gt;. To do this, I simply add the following in front matter of the index.html file of the demilight project:&lt;/p&gt;
&lt;pre class=&#34;block w-auto px-4 mx-4 border-2 border-gray-300 bg-green-50&#34;&gt;aliases:
    - /demilight/
&lt;/pre&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, if you head to &lt;a href=&#34;https://jeff.glass/demilight&#34;&gt;https://jeff.glass/demilight&lt;/a&gt;, you should be taken to the correct project page.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since everything in Hugo is a page, including list pages and other programmatically generated content, this can be used in lots of ways. For example, with the old wordpress site, my blog posts were at &lt;code class=&#34;code&#34;&gt;jeff.glass/blog&lt;/code&gt;, but Hugo puts them at &lt;code class=&#34;code&#34;&gt;jeff.glass/post&lt;/code&gt;. To create this redirect, I create a &lt;code class=&#34;code&#34;&gt;_index.md&lt;/code&gt; file at the root of the &lt;code class=&#34;code&#34;&gt;post&lt;/code&gt; folder with the following frontmatter:&lt;/p&gt;
&lt;pre class=&#34;block w-auto px-4 mx-4 border-2 border-gray-300 bg-green-50&#34;&gt;
---
    title: &#34;Blog Posts&#34;
    aliases:
      - /blog/
---
&lt;/pre&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, I could make these modifications programmatically (and probably should have done so &lt;a href=&#34;../../post/cloud-resume-challenge-porting-wordpress-blogs-to-hugo/&#34;&gt;when I was porting things from Wordpress to Hugo&lt;/a&gt;, but there are few enough of them and enough edge cases that I&#39;m just going through and handling them by manually editting frontmatter. Like good ole &lt;a href=&#34;https://xkcd.com/1205/&#34;&gt;XKCD 1205&lt;/a&gt; says, automation just isn&#39;t always worth it.&lt;/p&gt;
&lt;img src=&#34;https://imgs.xkcd.com/comics/is_it_worth_the_time.png&#34; alt=&#34;A comic from XKCD showing a chart describing how long a task takes to automate, how much time it saves, and how often you&#39;d have to do the task to make automating it worthwhile.&#34; class=&#34;self-center p-2 mx-auto&#34;&gt;</description>
      &lt;
    </item>
    
    <item>
      <title>Auto-Generated YouTube Thumbnails</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-google-playlists/</link>
      <pubDate>Sun, 12 Dec 2021 19:46:36 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-google-playlists/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;One thing I&#39;d like to have for both my &lt;a href=&#34;project/demilight&#34;&gt;Demilight project page&lt;/a&gt; and the homepage is an automatically generated gallery of thumbnails of my recent YouTube uploads, either from a specific playlist or from all of my uploads. Unfortunately, this doesn&#39;t seem to be a straightfoward thing to do with YouTube&#39;s built-in embedding tools. But perhaps we can figure out a way to do so using the &lt;a href=&#34;https://developers.google.com/youtube/v3&#34;&gt;YouTube Data Api&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As one might guess from my approach to the &lt;a href=&#34;tags/codeadvent&#34;&gt;Advent of Code challenges&lt;/a&gt;, my preferred langauge for bashing together solutions like this is Python. So I&#39;ll be following the &lt;a href=&#34;https://developers.google.com/youtube/v3/quickstart/python&#34;&gt;Python Quickstart Guide&lt;/a&gt; for the YouTube Data API to see if that gets me anywhere.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since I prefer to work inside a pipenv, I&#39;ll start by running &lt;code class=&#34;code&#34;&gt;pipenv install google-api-python-client --python 3.10&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;pipenv install google-auth-oauthlib google-auth-httplib2&lt;/code&gt; to get the prerequisite libraries set up.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;On the Google Cloud Platform API page, I&#39;ll click the project button at the top and create a new project called &#34;hugo-youtube-playlists&#34;. In the library panel, I&#39;ll enable the YouTube Data API v3 for this new project as well.&lt;/p&gt;
&lt;div class=&#34;px-4 bg-yellow-100&#34;&gt;
&lt;p class=&#34;italic post-p&#34;&gt;Editors note - the following 3 steps turned out to be unnecessary, and are included here for posterity. Feel free to skip ahead to the next editor&#39;s note.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The next step, according to the guide, creating an oauth2 clientID, is a a bit more involved, as I first need to configure my consent screen.&lt;/p&gt;
&lt;img src=&#34;configureconsent.PNG&#34; alt=&#34;A screenshot of the GCP dialog instruciting the user to configure a consent screen before creating an OAuth client ID&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;And since I&#39;m not a &lt;span class=&#34;italic&#34;&gt;Google Workspace User&lt;/span&gt;, I can apparently only create &#34;External&#34; apps, which means I&#39;ll have to manually add users to the list of tes users who can use my app... which should be fine, since the only user will be me, I expect.&lt;/p&gt;
&lt;img src=&#34;internalexternal.PNG&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;The settings for creating a consent screen don&#39;t seem to arduous, and most are optional besides the application name and some contact email information. The only scope I expect the app to need access to is read-only access to the YouTube Data API v3; thankfully, the filtering function on the 34-pages of possible scopes helps find that.&lt;/p&gt;
&lt;img src=&#34;readonlyscope.PNG&#34; alt=&#34;A window on GCP showing the ability to select scopes that a user app will access, with only the YouTube Data API V3 readonly option selected&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, I&#39;ll add myself as a &#34;test&#34; user (though up to 100 are allowed, I only need 1).&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;italic post-p&#34;&gt;Editor&#39;s note: actually necessary steps pick up here.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;line-through&#34;&gt;Now, I&#39;ll head over to the YouTube data API&#39;s sample for listing channel data and copy that over into a script&lt;/span&gt;. Actually, though the YouTube API explorer allows you to run code using just an API key and returns a valid response, the sample code provided only works for OAuth authentication. Thankfully, &lt;a href=&#34;https://stackoverflow.com/questions/57531368/where-do-you-specify-your-api-key-when-making-a-request-with-the-google-api-pyth&#34;&gt;Stack Overflow comes to the rescue&lt;/a&gt; as it so often does, with a simple bit of code that uses an API key to make a request. From there, I built a couple of useful utility functions that get, for a given Channel ID, the playlist representing All Uploads and, for a given playlist, get the most recent X videos (5 by default).&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;yt-request.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prebuild&lt;/span&gt;():
        &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; googleapiclient.discovery &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; build
    
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;config.json&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; infile:
            config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(infile)
        api_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; config[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yt_api_key&amp;#39;&lt;/span&gt;]  &lt;span style=&#34;color:#75715e&#34;&gt;# Please set your API key&lt;/span&gt;
    
        api_service_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;youtube&amp;#34;&lt;/span&gt;
        api_version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v3&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; build(api_service_name, api_version, developerKey&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;api_key)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getPlaylistVideos&lt;/span&gt;(playlistID, maxVids &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
        youtube &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prebuild()
    
        request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; youtube&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;playlistItems()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list(
            part&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;snippet,contentDetails&amp;#34;&lt;/span&gt;,
            maxResults&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;maxVids,
            playlistId&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;playlistID
        )
    
        response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(json.dumps(response, indent=4))&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (response)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getUploadsPLFromChannelID&lt;/span&gt;(channelID):
        youtube &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prebuild()
    
        request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; youtube&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;channels()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list(
            part&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;snippet,contentDetails,statistics&amp;#34;&lt;/span&gt;,
            id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;channelID
        )
        response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(response[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;items&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;contentDetails&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;relatedPlaylists&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uploads&amp;#39;&lt;/span&gt;])
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        print(getUploadsPLFromChannelID(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UCjgmTMVx2B5_DOB3bCZBq7A&amp;#34;&lt;/span&gt;))
        print(getPlaylistVideos(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UUjgmTMVx2B5_DOB3bCZBq7A&amp;#34;&lt;/span&gt;))
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In this case, the API key I created earlier is stored in the config.json file, which I&#39;ve of-course added to my .gitignore file so it doesn&#39;t pop up on Github and do all kinds of nefarious things. The YouTube ID in the above code snippet is also the default one provided.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With these methods created, it&#39;s pretty straightforward to write a little script that just pulls the 5 most recently uploaded videos from my youtube channel and stashes the data in a json file.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;generateAll.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; ytgallery &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
    
    myChannelID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UCjgmTMVx2B5_DOB3bCZBq7A&amp;#34;&lt;/span&gt;
    myUploads &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UUjgmTMVx2B5_DOB3bCZBq7A&amp;#34;&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generateIndexGallery&lt;/span&gt;():
        videos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getPlaylistVideos(myUploads, maxVids&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
        info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; vData &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; videos[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;items&amp;#39;&lt;/span&gt;]:
            vid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;: vData[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;snippet&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resourceId&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;videoId&amp;#39;&lt;/span&gt;],
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;: vData[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;snippet&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;],
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;thumbnailURL&amp;#39;&lt;/span&gt;: vData[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;snippet&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;thumbnails&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;high&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;]
                }
            info&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(vid)
    
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../../data/indexvideos.json&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w+&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(info, outfile)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
        generateIndexGallery()
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        main()
    &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, I can create a list of recent videos. Now how to display them on the homepage? Thankfully, Hugo has built-in functionality for working with json/toml/yaml data in the form of &lt;a href=&#34;https://gohugo.io/templates/data-templates/&#34;&gt;Data Templates&lt;/a&gt;. It took quite a bit of bumbling around to work out the proper syntax, but here&#39;s what I worked out:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Data (as json, yaml, or toml file) goes into the /data folder (optionally into subfolders). For me, this is in a file at data/indexvideos.json &lt;span class=&#34;italic&#34;&gt;for videos that will be embedded into index.html&lt;/span&gt;.&lt;/li&gt;
    &lt;li&gt;We range over the data &lt;span class=&#34;underline&#34;&gt;in a particular file&lt;/span&gt; using syntax like &lt;code class=&#34;code&#34;&gt;range $.Site.Data.indexvideos&lt;/code&gt;. Note the lack of file extension.&lt;/li&gt;
    &lt;li&gt;Within that range, we reference our partial, &lt;span class=&#34;underline&#34;&gt;and we pass it the current context using the &#39;.&#39; operator&lt;/span&gt;. This allows the partial to receive the data from the current &#34;object&#34; the range function is operating over.&lt;/li&gt;
    &lt;li&gt;Within each partial, we can refer to individual attributes using double-mustache syntax, with using the dot operator to refernece the current context as in &lt;code class=&#34;code&#34;&gt;{{ .id }}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;That&#39;s a bit of a word jumble, but perhaps it will be more clear visually. Here is the directory structure of files, a selected part of the template file (index.html) and the partial (yt_index.html):&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;Directory Structure&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;my-hugo-project
├── data
│   ├── yt
│   │   ├──indexvideos.json
├── layouts
│   ├── index.html
│   ├── partials    
│   │   ├──yt_index.html 
&amp;#39;   &amp;#39;   &amp;#39;
&amp;#39;   &amp;#39;   &amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;h-4&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;code-title&#34;&gt;indexvideos.json &lt;span class=&#34;italic&#34;&gt;(partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
    {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r3Z6bVylrbs&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Using Analog Dials in your Projects&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;thumbnailURL&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://i.ytimg.com/vi/r3Z6bVylrbs/hqdefault.jpg&amp;#34;&lt;/span&gt;
    },
    {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E-TAz610T0c&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wireless DMX LED Pixel Control #Shorts&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;h-4&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;code-title&#34;&gt;index.html &lt;span class=&#34;italic&#34;&gt;(partial)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flex flex-col space-y-2 md:space-y-0 md:space-x-2 md:flex-row&amp;#34;&lt;/span&gt;&amp;gt;
    {{ range $.Site.Data.indexvideos }}
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;        {{ partial &amp;#34;yt_index.html&amp;#34; . }}
&lt;/span&gt;    {{ end }}
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;The dot after the name of the partial is &lt;span class=&#34;underline&#34;&gt;crucial&lt;/span&gt;; it passes the current context to the partial template so the partial has access to all the data it needs.&lt;/p&gt;
&lt;div class=&#34;h-4&#34;&gt;&lt;/div&gt;
&lt;p class=&#34;code-title&#34;&gt;yt_index.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/watch?v={{ .id }}&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;border-2 border-gray-400&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .thumbnailURL }}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Youtube Video: {{ .title }}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w-auto&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m-auto text-sm italic text-center&amp;#34;&lt;/span&gt;&amp;gt;{{ .title }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;All this put together creates a series of divs on the front-page corresponding to my 5 most recently uploaded YouTube videos.&lt;/p&gt;
&lt;img src=&#34;autovideos.PNG&#34; alt=&#34;A screenshot of the various youtube videos that appear automatically on the front-page&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m currently relying on the fact that the script which generates the json file populates it with 5 videos, but I could also have limited it to 5 videos in the range command using something like &lt;code class=&#34;code&#34;&gt;range first 5...&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Speaking of which, the next step in automation is to have my script that pulls the 5 most recent videos run every time I build the site. Ideally, it would also fail gracefully in the case that it can&#39;t retrieve the new videos, i.e. if it can&#39;t connect to YouTube&#39;s API for some reason. But it turns out that running a Python script from npm is non-trivial - there are a number of ways to do it, including the &lt;a href=&#34;https://www.npmjs.com/package/python-shell&#34;&gt;python-shell&lt;/a&gt; package, but it seems like a chunky project in its own right.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This being a static site and all, this isn&#39;t exactly always my latest 5 uploaded videos. It&#39;s the 5 most recently uploaded videos &lt;span class=&#34;italic&#34;&gt;at the last time Hugo built the site&lt;/span&gt;. But that&#39;s a decent enough tradeoff for me.&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Dockerfiles</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-dockerfiles/</link>
      <pubDate>Mon, 29 Nov 2021 12:36:07 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-dockerfiles/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I&#39;m setting out to rectify a pretty silly part of my workflow. Namely, when I want to push new content to the site that I&#39;ve built with hugo, I:&lt;/p&gt;
&lt;ol class=&#34;post-ol&#34;&gt;
    &lt;li&gt;Clean my current hugo build locally (removing /public, /resources/ and /dist). Slightly unnecessary, but has cleared some issues in the past.&lt;/li&gt;
    &lt;li&gt;Rebuild all files using &lt;code class=&#34;code&#34;&gt;npx hugo&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Add all files to git using &lt;code class=&#34;code&#34;&gt;git add -A&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Commit the new files using &lt;code class=&#34;code&#34;&gt;git commit -m &#34;Commit Message Here&#34;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&#34;post-p&#34;&gt;This pushes the new files to github, which triggers a github action to upload the files in the ./public folder to s3.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There must be a better way.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And I&#39;m confident there is - I&#39;d love to use some like &lt;a href=&#34;https://github.com/JeffersGlass/hugo-build-action&#34;&gt;Jake Jarvis&#39; Hugo Build Action&lt;/a&gt; to automatically rebuild the site whenever new code is pushed to Github or merged into the main branch. The issue is, the Docker image that Jarvis has used doesn&#39;t happen to include tailwind as part of its build. So, I think the way forward is for me to learn enough about docker and dockerfiles to add Tailwind to a fork of Jarvis&#39; action, and use that to build my site.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The dockerfile for this action is remarkably short:&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://github.com/jakejarvis/hugo-docker&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ghcr.io/jakejarvis/hugo-extended:0.89.4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hugo&amp;#34;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;From what I understand, this is using a pre-built docker image stored online (via Github?) to improve the speed of this action. That seems like quite a deep rabbit hole to go down, though an interesting one, but let&#39;s see if there&#39;s a faster way.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One thing that occurs to me is to see if anyone else has forked this repo, to make their own changes in the way I&#39;m interesed in. And indeed, I&#39;m the 10th person to fork this action, and several of them are X commits &lt;span class=&#34;italic&#34;&gt;ahead&lt;/span&gt; of the original (as well as being several behind), meaning they&#39;ve made some tweaks and changes. Let&#39;s look at &lt;a href=&#34;https://github.com/willbicks/hugo-build-action/commit/96b801e40324dc378775d648a2d202ea244837ce&#34;&gt;one of these commits from willbicks&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;ruby \
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;HUGO_EXTENDED&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;libc6&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;compat libstdc&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
update&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ca&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;certificates &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; npm install &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;global postcss&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cli autoprefixer @babel&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;core @babel&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cli &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; npm install &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;global postcss postcss&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cli autoprefixer @babel&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;core @babel&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cli &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
&lt;/span&gt;pip3 install &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;upgrade &lt;span style=&#34;color:#66d9ef&#34;&gt;Pygments&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;* &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
gem install asciidoctor &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
wget &lt;span style=&#34;color:#e6db74&#34;&gt;https&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;//&lt;/span&gt;github&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;gohugoio&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;hugo&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;releases&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;download&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;v&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;HUGO_VERSION&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;hugo_&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;HUGO_EXTENDED&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;extended_}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;HUGO_VERSION&lt;/span&gt;}_Linux&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;bit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gz &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Hang on, that&#39;s alredy way longer than the Dockerfile in my fork! But it also looks like something I could actually modify...ah, it looks like back in &lt;a href=&#34;https://github.com/JeffersGlass/hugo-build-action/commit/0aeee3828f8f0d61ab36cfc57f8a30190c70a57b&#34;&gt;commit #0aeee38&lt;/a&gt;, Jarvis switched from using a fully-written-out dockerfile to a version which is hosted as one of these prebuilt images. Let&#39;s see if we can put that old, fully-written-out docker file into use with the most recent version of hugo.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll start by copy-pasting the last longhand version of the Dockerfile that Jarvis wrote. Then I&#39;ll update the Hugo version to 0.89.4 (the latest at time of writing), and add &#34;tailwindcss&#34; to the npm command the Dockerfile runs. Finally, I&#39;ll change the action.yml file to point to the local Dockerfile, instead of the prebuilt image. Finally, I&#39;ll commit all the changes to git and push them back upstream to Github.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll create a new workflow for this instead of blowing away my old one (that just manually published a folder to s3), called hugoBuildAndUpload.yml. I&#39;ll also disable the previous action on Github, so it doesn&#39;t try to run when the new action uploads. Having saved that new yaml file, I&#39;ll push it to Github and see what happens...&lt;/p&gt;
&lt;img src=&#34;noTailwind.PNG&#34; alt=&#34;An error message saying Docker cannot find tailwindcss&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Drat, not quite. Hugo seems to be running, but it still can&#39;t find tailwind, even though it should be installed via NPM now... perhaps my install order is wrong? By adding &lt;code class=&#34;code&#34;&gt;require(&#39;tailwindcss/nesting&#39;)&lt;/code&gt; to my postcss requirements and re-pushing, I can see that Hugo/postcss are indeed attempting to build the site, but aren&#39;t able to find the required tailwind dependencies. This time the error is: &lt;code class=&#34;code&#34;&gt;Error: Error building site: POSTCSS: failed to transform &#34;css/style.css&#34; (text/css): Error: Cannot find module &#39;tailwindcss/nesting&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s see if tailwind isn&#39;t installing successfully, or if postcss can&#39;t find it for some reason. I&#39;ll add a line to the Dockerfile which should just run the -help command for tailwind on the command line, and error out if it breaks:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; hugo version &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;hugo env &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;postcss --version &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;tailwindcss -h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;autoprefixer --version &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;babel --version &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;pygmentize -V &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;asciidoctor --version&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And indeed, in the action&#39;s output I can see the full help info from tailwindcss. A bit verbose perhaps, but I can at least see that tailwind is being installed successfully via npm&lt;/p&gt;
&lt;img src=&#34;tailwind-h.PNG&#34; alt=&#34;A console log showing TailwiindCSS&#39;s help output on Github Actions&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;On a whim, and after some internet cruising, I ran across &lt;a href=&#34;https://discourse.gohugo.io/t/postcss-error-cannot-find-module-tailwindcss/34581/4&#34;&gt;a post on the Hugo forums&lt;/a&gt; where a user was similarly having issues with Hugo not recognizing that tailwind was installed. The user had identified that the NODE_PATH was being set to a Yarn installation folder, and that changing it to an NPM path solved the issue. While that was related to a local build, I wondered if perhaps the Dockerfile installing yarn was screwing up my pathing? Unfortunately, removing the yarn install didn&#39;t fix the issue. There were &lt;a href=&#34;https://github.com/dirkolbrich/hugo-theme-tailwindcss-starter/issues/5&#34;&gt;some references from a couple years ago&lt;/a&gt; to similar services having issues with node modules when installed globally, but removing the &lt;code class=&#34;code&#34;&gt;--global&lt;/code&gt; flag from the npm install step didn&#39;t fix anything&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Some other things that didn&#39;t work:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Trying to install via &lt;code class=&#34;code&#34;&gt;npm install package.json&lt;/code&gt; with various versions of &lt;code class=&#34;code&#34;&gt;--save&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;--save-dev&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;--global&lt;/code&gt; etc&lt;/li&gt;
    &lt;li&gt;Trying to install by specifying packages, and using &lt;code class=&#34;code&#34;&gt;--dev&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;--save-dev&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Moving the tailwindcss install to after the postcss install in the RUN npm install line of the docker file&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems I will indeed need to dive deeper into docker to understand what&#39;s going on. I&#39;ll install &lt;a href=&#34;https://docs.docker.com/desktop/windows/install/&#34;&gt;Docker Desktop for Windows&lt;/a&gt; and see about loading up this Dockerfile. I&#39;m hoping it&#39;s something small, like a path being off or a module being in one folder and not another, but we shall see...&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Docker&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The install process was painless, just download and run an exe. It wanted me to walk through a tutorial, but there will be plenty of time to learn how to craft my own image from scratch later - right now I really want to know how to run a preexsiting dockerfile. Thankfully, &lt;a href=&#34;https://developer.toradex.com/getting-started/module-3-creating-my-own-container/writing-your-first-dockerfile-windows&#34;&gt;a post from Toradex&lt;/a&gt; pointed me the right direction - just using &lt;code class=&#34;code&#34;&gt;docker build .&lt;/code&gt; in the directory where a dockerfile is is sufficient to build it for use. I&#39;ll revert the npm installation text back to what it was for now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Using &lt;code class=&#34;code&#34;&gt;Get-Content Dockerfile | docker build - -t hugodebug&lt;/code&gt; we can use a local Dockerfile for &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/&#34;&gt;building a new image&lt;/a&gt; with the kernel specified in our Dockerfile, with the name hugodebug. Where exactly this image goes I&#39;m not sure, but Docker Desktop sure spots it and lets me open it up. I&#39;ll give it a name &lt;span class=&#34;line-through&#34;&gt;and access to ports 80:80 as well.&lt;/span&gt; (&lt;span class=&#34;italic&#34;&gt;Turns out, opening a port was both unneccesary and caused Docker to throw up. So scratch that.&lt;/span&gt;)&lt;/p&gt;
&lt;img src=&#34;dockerstart.PNG&#34; alt=&#34;The open-image window of Docker Desktop&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;It does seem that the container is happy to open in docker desktop, once I eliminated the port mapping (which was unnecessary) but it&#39;s closing right away. Which makes some sense - the &#34;entrypoint&#34; (which I gather is the singular command to run) is &lt;code class=&#34;code&#34;&gt;hugo&lt;/code&gt;, which terminates. I&#39;ll change that to &lt;code class=&#34;code&#34;&gt;sh&lt;/code&gt; to drop into a shell, which keeps the container running.&lt;/p&gt;
&lt;img src=&#34;imageShell.PNG&#34; alt=&#34;The shell of a container image running, with ls commands showing&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Alright, we&#39;re in! And I can test commands against this command line to see what did and didn&#39;t install correctly. Come to think of it, in theory I could deploy this as its own image online... but one step at a time. Let&#39;s figure out how to get our website source in here.&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;Curiously, I happened to switch to a differnt development machine at this point and... the container just would not stay running, with the same Dockerfile? Or rather, it will stay running when run from the docker desktop UI but not via Powershell. Which makes me think I&#39;m just running the wrong command. Hmmm.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I gather from &lt;a href=&#34;https://www.youtube.com/watch?v=gAkwW2tuIqE&#34;&gt;a video from Fireship.io&lt;/a&gt; that perhaps the thing to do is to put the Dockerfile right in my development environment, and mount the local source directly to it using the COPY command. So let&#39;s try that! According to the &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile Reference&lt;/a&gt;, we can use the copy directive, simply with &lt;code class=&#34;code&#34;&gt;copy . . &lt;/code&gt; to copy the files in the current directory to the image home directory. But since there are some files (like our local node_modules folder, the /public build folder, github workflows etc), we&#39;ll add them to a .dockerignore file.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And that&#39;s where I hit a bit of wall, since, &lt;a href=&#34;https://forums.docker.com/t/docker-desktop-wont-work-on-windows-10-home/103187/5&#34;&gt;according to a post on the Docker forums&lt;/a&gt;, Windows 10 Home is incapable of running docker desktop. A brief pause here while I switch back to the other machine...&lt;/p&gt;
&lt;img src=&#34;oneeternity.jpg&#34; alt=&#34;The &#39;one eternity later&#39; image from Spongebob Squarepants&#34; class=&#34;w-1/2 post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Oh, the other machine is also Windows 10 home. Well dang. Perhaps this is a dead end.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But wait, there&#39;s &lt;a href=&#34;https://www.docker.com/blog/docker-desktop-for-windows-home-is-here/&#34;&gt;an official post from Docker&lt;/a&gt; in March of 2020 saying that Docker should for work Windows 10 home users above build 19040 (I&#39;m on 19042). So what the heck?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Gosh this post is going to be a mess. I&#39;ve just noticed that &lt;a href=&#34;https://github.com/jakejarvis/hugo-build-action/issues/4&#34;&gt;the one open issue on the original hugo-site-build action&lt;/a&gt; references pretty much exactly the issue I&#39;m having! In the words of moritzheiber:&lt;/p&gt;
&lt;p class=&#34;post-blockquote&#34;&gt;&lt;code class=&#34;code&#34;&gt;postcss&lt;/code&gt;, &lt;code class=&#34;code&#34;&gt;postcss-cli&lt;/code&gt; and &lt;code class=&#34;code&#34;&gt;autoprefixer&lt;/code&gt; are globally installed modules. Unfortunately, if the theme has a &#34;local&#34; &lt;code class=&#34;code&#34;&gt;postcss.config.js&lt;/code&gt; (e.g. like the docsy theme) npm fails to resolve the global module path and therefore thinks the autoprefixer module is missing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are further refernces to some &lt;a href=&#34;https://discourse.gohugo.io/t/hugo-pipes-postcss-how-to-use-global-autoprefixer/15699/11&#34;&gt;references&lt;/a&gt; and &lt;a href=&#34;https://github.com/regolith-linux/website/commit/8622ae384cc20f17c7de819663a829a8aaf13ade&#34;&gt;examples&lt;/a&gt;  listed in that issue as well&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Mobile Friendly Design</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-mobile-friendly-design/</link>
      <pubDate>Tue, 23 Nov 2021 04:36:07 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-mobile-friendly-design/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;The site&#39;s coming along well now! But there&#39;s just one small problem - specifically, how the site looks on mobile devices, or even just devices smaller than fullscreen. In short, bad.&lt;/p&gt;
&lt;img class=&#34;m-auto&#34; src=&#34;uglymobile.PNG&#34; alt=&#34;A mobile-representative view of the site - text overlapping other text, buttons colliding. It looks awful.&#34;&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;That design is just straight-up mobile antagonistic.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, Chrome&#39;s dev tools have a very handy device toolbar that forces the sites dimensions to be that of any of a number of common mobile devices, or allows the user to set a custom screen size. It also enables things like touch/click to scroll, to allow a dev to get the feeling of what the site will be like on a mobile touchscreen. I say &#34;get the feeling&#34; because nothing will quite mimick the actual feeling of holding the site on your hand and interacting with it at arms length; this is more of a tool to explore layouts than UI.&lt;/p&gt;
&lt;img src=&#34;devicetoolbar.PNG&#34; alt=&#34;A screenshot of Chrome&#39;s device-selector toolbar&#34; class=&#34;m-auto&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;So, let&#39;s see how tailwindcss can handle mobile-responsive designs. It seems that I&#39;ve actually being going at the framework somewhat backward from how tailwind thinks about attributes. Any css attributes that do not have a size selector (sm, md, lg, xl, or 2xl) apply to all sizes of page; any attributes that &lt;span class=&#34;italic&#34;&gt;do&lt;/span&gt; have a selector will apply on &lt;span class=&#34;italic&#34;&gt;that screen size and above.&lt;/span&gt; So, as I&#39;m going back and shoehorning mobile-friendliness into my site, I&#39;ll mostly be applying size selectors (probably lg or xl) to my existing css attributes, then adding new, un-size-tagged attributes that are mobile-appropriate.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s start on the homepage (index.html). Even at reasonable large monitor sizes, like those found on quite compact laptops or uses in a larger-resolution setting, we start to see issues created by fixed-width elements and non-responsible flexboxes.&lt;/p&gt;
&lt;img class=&#34;p-2 m-auto bg-gray-200 rounded-md&#34; src=&#34;768_issues.gif&#34; alt=&#34;A gif showing the site at 1024x768 resolution, where some page elements overlap poorly&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;So, let&#39;s figure out what we can do about this. I&#39;ll start by changing those blog-post cards from w-96 to w-auto, so they automatically shrink in size. That helps, but leaves us with an awkward issue where the text runs off the bottom of the card.&lt;/p&gt;
&lt;img class = &#34;p-2 m-auto bg-gray-200 rounded-md&#34; src=&#34;runoff.PNG&#34; alt=&#34;Some HTML &#39;cards&#39; representing blog posts - the text flows off the bottom of the cards&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Interstingly, the divs that contain this text already have the &#39;overflow-hidden&#39; property. If I delete that for the moment, the overflow only gets worse!&lt;/p&gt;
&lt;img class=&#34;p-2 m-auto bg-gray-200 rounded-md&#34; src=&#34;worseoverflow.PNG&#34; alt=&#34;Some HTML &#39;cards&#39; representing blog posts - the text flows off the bottom of the cards and completely overlaps the next section of the page&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Although, now I can see that Hugo is indeed putting the default number of words into each summary (75 I think?) and adding the &#34;read more&#34; link to the end of the next, as I&#39;d expect from my card code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flex-grow w-auto&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p-2 m-1 bg-gray-100 border-2 border-gray-300 rounded-3xl h-96 drop-shadow-xl&amp;#34;&lt;/span&gt;&amp;gt;
        {{ if isset .Params &amp;#34;static_slug&amp;#34; }}
            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;staticslug&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Params.static_slug }}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object-cover w-full border-2 border-gray-400 rounded-3xl h-36&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
        {{ else if isset .Params &amp;#34;slug_image&amp;#34; }}
            {{ $img := (.Page.Resources.GetMatch .Params.slug_image) }}
            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ $img.RelPermalink }}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object-cover w-full border-2 border-gray-400 rounded-3xl h-36&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
        {{ else }}
            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/svg/notfound.svg&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object-cover w-full border-2 border-gray-400 rounded-3xl h-36&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
        {{ end }}
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-center&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-2xl&amp;#34;&lt;/span&gt;&amp;gt;{{ .Title }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;italic text-center&amp;#34;&lt;/span&gt;&amp;gt;Posted: &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Date.Format &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;2006-01-02T15:04:05&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}}&amp;#34;&lt;/span&gt;&amp;gt;{{ .Date | time.Format &amp;#34;:date_long&amp;#34; }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;time&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;h-24 col-span-2 text-justify&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;                {{ if .Slug}}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;                    {{ .Slug }}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;                {{ else }}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;                    {{ .Summary }}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;                    {{ if .Truncated }}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;                        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&amp;gt;Read more...&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;                    {{ end }}
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;                {{ end }}
&lt;/span&gt;        &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;article&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;I&#39;ve also starting integrating Hugo&#39;s builtin code-highlighting functionality to show blocks of code like this one! The process is getting a bit meta now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One thing I&#39;m noticing is that I have a number of elements with fixed heights in these blog-post cards - the card itself is h-96, and the images are all h-36 - but the &amp;lt;a&amp;gt; tag title, the &amp;lt;p&amp;gt; tag for the posting date, and the actual summary text are variable in size. And for some reason, aren&#39;t being constrained to wihin the div that surrounds the whole thing.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Changing the summaryLength variable in the general Hugo config (config.toml, in my case) does change the number of words included. It seems to really want to split on a punctuation mark though.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It was at this point that I decided on a change of tactics. I already have the option in the snippet above to include a custom &#39;slug&#39; of text for each post, which will always be the priority for each summary. If that&#39;s not there, I want to default to the auto-generated summary of each post.... but is that really the right behavior on the homepage? Perhaps simply the title, post date, and a list of associated tags is more correct? I&#39;ll borrow from code from how tags are displayed on posts themselves (in layout/post/single.html) to try that out.&lt;/p&gt;
&lt;img class=&#34;p-2 m-auto bg-gray-200 rounded-md&#34; src=&#34;withtags.PNG&#34; alt=&#34;Cards for the blog posts, with no summary, just tags&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;I think this is better, but not great? Especially since I think if I add too many tags it&#39;ll overflow again...&lt;/p&gt;
&lt;img class=&#34;p-2 m-auto bg-gray-200 rounded-md&#34; src=&#34;overflowtag.PNG&#34; alt=&#34;&#34;&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Yes, yes it does overflow.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Perhaps I need a slightly less brute-force approach. Let&#39;s see how somewhere like &lt;a href=&#34;https://tailblocks.cc&#34;&gt;Tailblocks.cc&lt;/a&gt; does it. It seems they have a &#39;flex-flex&#39; wrap&#39; dive, with simple divs underneath it that are md:w-1/3 with no width qualifiers at smaller sizes?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After mucking around with some margin and padding settings, this setup does seem to essentially work. There are (currently 5) blog cards side-by-side on the main page whne the screen is above a certain size; below that, they snap to being one above the other.&lt;/p&gt;
&lt;img src=&#34;cardstacking.gif&#34; alt=&#34;A window changing sizes, showing how html &#39;cards&#39; stack one above the other&#34; class=&#34;p-2 m-auto bg-gray-200 rounded-md&#34;&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Remembering to add &#39;w-auto&#39; in all the right places fiex that one &#34;refactoring&#34; blog post card that&#39;s too small.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We can do the same thing to the project cards as well. There&#39;s still some minor formatting errors, but so far this is basically working. And since the list pages are all flexbox based, they look not-too-shabby when the screen width gets smaller.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Mobile Menu&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;The navbar, as designed, isn&#39;t particularly mobile-friendly. It isn&#39;t even small-monitor friendly. But we can use some basic css and Javascript to fix that. Using a combination of tailwinds&#39; responsive tags, and some Javascript to show and high menu&#39;s on various clicks, we can implement three different versions of the navbar for large, medium, and smaller screens.&lt;/p&gt;
&lt;img src=&#34;navbarsizing.gif&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;


</description>
      &lt;
    </item>
    
    <item>
      <title>Porting Wordpress Blogs to Hugo</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-porting-wordpress-blogs-to-hugo/</link>
      <pubDate>Mon, 22 Nov 2021 18:36:07 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-porting-wordpress-blogs-to-hugo/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;As the site gains more and more content, it seems like it&#39;s only a matter of time before I port my previous blog(s) over to the Hugo framework that I&#39;m enjoying so much. This would include at least the current Wordpress blog hosted at Jeff.Glass, as well as potentially importing old posts from my ham radio blog, kk9jef.wordpress.com.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The Hugo documentation has &lt;a href=&#34;https://gohugo.io/tools/migrations/&#34;&gt;some information on exporting from Wordpress to Hugo&lt;/a&gt;. The first listed option, wordpress-to-hugo-exporter, didn&#39;t work well - it returned an error code 500 timeout after about 5 minutes of trying to export. And the second option, exitwp-for-hugo wasn&#39;t working, since it relies on Python 2 and some of its dependencies (notably) html2text no longer support Python 2. So I&#39;m pursuing an alternative, using the Wordpress-to-Jekyll exporter and converting to Hugo from there... but that too is 500-erroring. So... let&#39;s do this the hard way and parse the XML file?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Using python and the elementTree library, this isn&#39;t too bad? It think the most painful part will be porting the images over, since those will have to move from the Wordpress media library to Hugo&#39;s page bundles... but the actual parsing of the XML isn&#39;t too bad. Here&#39;s the script I hacked together, which finds all the post-objects in XML, pulls out their title and content and draft status and tags, and exports them with some basic frontmatter:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/8b02a6fab79d4418f101fd973e21bd5c.js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;Let me be clear, this is a pretty hacky thing. But thankfully, this is just a timesaver to do some pre-processing that I should only have to do once. So if it&#39;s a bit of a hack and it works.... it works. It also separates the posts previously marked as &#34;draft&#34; into their own folder, while marking all posts as &#34;draft: true&#34; for the purposes of Hugo, so that I can vet each post before I mark it to go live, while preserving the old, draft, never-published posts. (Which at the time of writing includes these very words.) I also realized I could make my life easier my only exporting the actually live posts instead of all the content in a single XML file.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I later modified this script to add some tags by default to paragraph, image, and list elements, then styled those tags using tailwind to create some basic formatting. I used BeautifulSoup4 to grab the appropriate tags and modify/add to their classes. The full script is below:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/c9e89c313081b88574ebb759d7e3e72e.js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;Once this was done, and some minor title-formatting was adjusted (removing extraneous punctuation and other things that might cause URL issues), I imported all of the post folders into my content/post folder. And voila, a blog is born.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-4040 post-img&#34; height=&#34;689&#34; src=&#34;firstpos.png&#34; width=&#34;739&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Not a very pretty blog yet, mind, but I don&#39;t think there&#39;s a way around doing much of the correction by hand.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I did use some VS-code search-and-replace-with-regexes to adjust how captions were being handled. In particular, I used:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;search: &lt;code class=&#34;code&#34;&gt;&amp;lt;figcaption&amp;gt;(.*)&amp;lt;\/figcaption&amp;gt;&amp;lt;\/figure&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;replace with: &lt;code class=&#34;code&#34;&gt;&amp;lt;/figure&amp;gt;&amp;lt;p class=&#34;post-img-caption&#34;&amp;gt;$1&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To move the image caption into a new paragraph outside of the figure, and then used CSS to center/style it.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Similarly, I used some regex to move the contents of another style of captions into their own paragraph.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code class=&#34;code&#34;&gt;search: \/&amp;gt;(.*?\[\/caption\])&amp;lt;\/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;replace with:&lt;code class=&#34;code&#34;&gt; &amp;lt;\/p&amp;gt;&amp;lt;p class=&#34;post-img-caption&#34;&amp;gt;$1&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also learned some new useful keyboard shortcuts in VS Code. Namely, Cntl-K Cntl-F to auto-format a section of text, which helps break up spacing and tabbing on nested tables/divs.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Overall, the process of converting my 42 existing blog posts to Hugo formatting took roughly 2 hours of manual processing - adjusting tags, changing image format and list layout, using shortcodes for video links, and so on. This first pass does &lt;em&gt;not&lt;/em&gt; include the process of moving all the images over from Wordpress to Hugo... which I did as a separate process. The script for is as follows:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/c08a5784abb0de6e67fdf61028ab4a78.js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;Again, not necessarily a script anyone else would want to use vertbatim, just something I hacked together in half an hour that got the job done.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;At this point, it seemed silly to continue editing my drafts of these very posts in wordpress, so I endevoured to port them over to Hugo as well. This essentially involved repeating the process above, but with a selected set of the draft posts instead of the published blog posts.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In fact, as of &lt;span class=&#34;italic&#34;&gt;these very words&lt;/span&gt;, I&#39;m currently writing my blog posts directly into static files for generation via Hugo! So long, Wordpress! I&#39;ll just redirect the previous external link on my header.html partial to point to my list of blog posts, and voila. It&#39;s gone.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Removing the Default Theme</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-removing-the-default-theme/</link>
      <pubDate>Thu, 18 Nov 2021 15:28:54 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-removing-the-default-theme/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;At this point, I feel I have the theming and functionality of hugo pretty well in hand. So I&#39;ll delete the &#34;Blank&#34; theme that I started with, remove references to it from Config.toml and .gitmodules, and see what breaks. Looks like it&#39;s just the &#34;pagination&#34; partial, which I&#39;m using to drive the list page layouts. I&#39;ll just copy the pagination.html partial back in from the blank theme and... we&#39;re now theme-free! It&#39;s all natural jeffcode at this point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll also add a favicon to the site to it shows up nicely in the user&#39;s browser tabs. Tutsplus has a nice &lt;a href=&#34;https://www.creativebloq.com/illustrator/create-perfect-favicon-12112760&#34;&gt;tutorial on creating favicons in Affinity Designer&lt;/a&gt;; combined with &lt;a href=&#34;https://favicon.io/favicon-converter/&#34;&gt;facivon.io&lt;/a&gt;, the process of creating a basic favicon was very quick. Then adding a quick&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;lang-html s-code-block post-paragrpah&#34;&gt;&lt;code class=&#34;hljs language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;rel&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;icon&#34;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;href&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;/favicon.ico?v=2&#34;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;to the baseof.html template forces the cached favicon to be refreshed on page load.&lt;/p&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Page Bundles and Image Processing</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-page-bundles-and-image-processing/</link>
      <pubDate>Fri, 05 Nov 2021 16:16:42 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-page-bundles-and-image-processing/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As I figure out my workflow for creating pages, especially the &#34;One Offs&#34;, I want to keep things as simple and straightforward as can be for adding new content. The intention of the One Offs is a place to memorialize small, interesting things - things that shouldn&#39;t disappear into twitter, but aren&#39;t a full project writeup. To that end, I&#39;d like to have some standard formatting for all of their individual pages that makes it simple to add a new piece of content. So let&#39;s work on the /layouts/small/single.html layout.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It turns out that there is no style being applied to external links currently, which is something I imagine I might want. So I&#39;ll add a css rule for &amp;lt;a&amp;gt; tags... and then add an ID to the label &#34;Jeff Glass&#34; in the header so it doesn&#39;t also get styled, and use a:not(#header-name) to prevent it from getting snagged by this new rule.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To make things a little easier at this point, I&#39;ll add the postcss-nesting module following &lt;a href=&#34;https://tailwindcss.com/docs/using-with-preprocessors&#34;&gt;the steps in the Tailwind docs&lt;/a&gt;. This did require refactoring my postcss.config.js file to use a list of require() statements instead of a map, as illustrated &lt;a href=&#34;https://tailwindcss.com/docs/using-with-preprocessors&#34;&gt;in the Tailwind Docs&lt;/a&gt;:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;/* Old version&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;module.exports = {&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;  plugins: {&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    tailwindcss: {},&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    autoprefixer: {},&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;  },&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;}*/&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;//New, working version&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;module.exports = {&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;  plugins: [&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    require(&#39;tailwindcss/nesting&#39;),&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    require(&#39;tailwindcss&#39;),&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    require(&#39;autoprefixer&#39;),&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;  ]&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m also borrowing &lt;a href=&#34;https://davidwalsh.name/external-links-css&#34;&gt;a bit of code from David Walsh&lt;/a&gt; to automatically style external links with the &#34;external link&#34; symbol... well, I would have except it seems embedded html inside markdown files is a bit cumbersome in Hugo. It seems its markdown renderer, Goldmark, only allows directly adding HTML attributes to &lt;em&gt;header&lt;/em&gt; tags via markdown. Thankfully, Ana Ulin came to the rescue with their &lt;a href=&#34;https://anaulin.org/blog/hugo-raw-html-shortcode/&#34;&gt;Raw HTML Shortcode&lt;/a&gt;.... Or rather, that was the plan, but the ::after selector is fiddly in some way I can&#39;t understand yet. So for now I&#39;m just a css class called &#34;no-style-link&#34; to exclude links I don&#39;t want to be formatted using the :not() operator. I&#39;m moving on.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(Some resources for when I come back to this: &lt;a href=&#34;https://stackoverflow.com/questions/45691117/how-can-i-add-a-svg-as-content-on-before-pseudo-element-of-an-element&#34;&gt;Stack Overflow&lt;/a&gt;, &lt;a href=&#34;https://www.geeksforgeeks.org/how-to-use-svg-with-before-or-after-pseudo-element/&#34;&gt;Geeks for Geeks&lt;/a&gt;, &lt;a href=&#34;https://css-tricks.com/gotchas-on-getting-svg-into-production/&#34;&gt;css-tricks&lt;/a&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems like the preferred way to keep image content near site content is through what Hugo calls &lt;a href=&#34;https://gohugo.io/content-management/page-bundles/&#34;&gt;Page Bundles&lt;/a&gt;, where a page is represented by &lt;a href=&#34;https://cloudcannon.com/community/learn/hugo-tutorial/page-bundles-and-shortcodes/#practical-work-creating-page-bundles-and-shortcodes&#34;&gt;a folder containing the content&lt;/a&gt; or &lt;a href=&#34;https://www.hackification.io/software-development/hugo/page-bundles/the-basics/&#34;&gt;a folder containing an _index.md file if the hierarchy is nested further&lt;/a&gt;. It looks like, if I just move my current &#34;small&#34; projects markdown files (Parks.md, meterclock.md) into folders with the same name and rename the files to &#34;index.md&#34;, all of the formatting and templating work I&#39;ve done so far is preserved. Well that&#39;s good at least.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-4018 post-img&#34; height=&#34;440&#34; src=&#34;page-bundles.png&#34; width=&#34;518&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, I&#39;ll chose a small project to work on. How about the Votive Fence Hooks project? I&#39;ll just drop a couple of pictures from my phone into the weddinghooks folder. And by using the following range commands, I can get all the images to appear nicely formatted on the page (&lt;a href=&#34;https://www.regisphilibert.com/blog/2018/01/hugo-page-resources-and-how-to-use-them/&#34;&gt;this write-up was very helpful&lt;/a&gt;):&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            &amp;lt;p&amp;gt;{{ .Content }}&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                {{ with .Page.Resources.ByType &#34;image&#34; }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                &amp;lt;div class=&#34;flex flex-wrap pt-4&#34;&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                    {{ range . }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                        &amp;lt;img src=&#34;{{ .RelPermalink }}&#34; class=&#34;flex my-4 mr-8 max-h-60&#34;&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                    {{ end }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                {{ end }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I then rebuilt and pushed my site to Github and... something I&#39;ve done has broken the formatting/sorting of the small cards on the frontpage, and the auto-generating of the tags. Basically all my work from the previous post. Which is frustrating, but my generation code is still there. So something I&#39;ve done recently has broken that functionality. I wonder if it was moving the content into Page Bundles?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Interestingly, the code still works when I serve locally with hugo... Oh, I must not have rebuilt with the -D flag on. That&#39;s better. Gotta remember that.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So now onto image display. Currently, I&#39;m loading the whole, large image to the end user, then using CSS to scale it down, when what I&#39;d like to do is have the image be rescaled at build-time and served at that size. It seems that, once again, Hugo Pipes are the answer, but sadly, there doesn&#39;t seem to be a way to intregrate pipes functionality with page bundling. There&#39;s a &lt;a href=&#34;https://hugo-mini-course.netlify.app/sections/optimizing/images/&#34;&gt;Hugo Mini-Course on image processing&lt;/a&gt; that seems the right track for that, but again, it specifies the images must be in the /assets folder.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Instead, let&#39;s look at &lt;a href=&#34;https://christianspecht.de/2020/08/10/creating-an-image-gallery-with-hugo-and-lightbox2/&#34;&gt;Christian Sprecht&#39;s post on integrating Lightbox with Hugo&lt;/a&gt;. And the lightbox documentation makes it seem like a simple-enough process. &lt;del&gt;&lt;em&gt;I&#39;ll start by installing lightbox via npm using npm install lightbox2 --save-dev. Then I&#39;ll add the requisite references to the lightbox.css and lightbox.js files inside of my baseof.html template, so it&#39;s present on every page.&lt;/em&gt;&lt;/del&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In actuality, it turns out to be easier to reference this CSS and JS from CDN&#39;s. Then, in my /layouts/small/single.html template, I&#39;ll transform the range code to the following:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre&gt;{{ if gt (len (.Page.Resources.ByType &#34;image&#34;)) 0 }}    &lt;br/&gt;    &amp;lt;h2 class=&#34;pt-6 text-xl&#34;&amp;gt;Images&amp;lt;/h2&amp;gt;&lt;br/&gt;    {{ with .Page.Resources.ByType &#34;image&#34; }}&lt;br/&gt;    &amp;lt;div class=&#34;flex flex-wrap pt-4&#34;&amp;gt;&lt;br/&gt;        {{ range . }}&lt;br/&gt;            &amp;lt;a href=&#34;{{ .RelPermalink }}&#34; data-lightbox=&#34;image-set&#34;&amp;gt;&amp;lt;img src=&#34;{{ .RelPermalink }}&#34; class=&#34;flex mb-4 mr-8 max-h-60&#34;&amp;gt;&amp;lt;/a&amp;gt;&lt;br/&gt;        {{ end }}&lt;br/&gt;    &amp;lt;/div&amp;gt;&lt;br/&gt;    {{ end }}&lt;br/&gt;{{ end}}&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This ensures that the h2 &#34;Images&#34; header only appears if there are actually images to display, and turns all the loaded images into Lightbox links. The links all get their data-lightbox attribute set to the same thing (in this case &#34;image-set&#34;, but it could be anything) so that the lightbox gallery that pops up is scrollable directly between pictures.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-4021 post-img&#34; height=&#34;597&#34; src=&#34;lightbox.gif&#34; width=&#34;600&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that wasn&#39;t too hard! Now any images that live inside a small-project folder will be automatically added to a lightbox. Neato!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;During some cleanup, I encounted an odd issue with how the slug images were appearing/being found on the main page. This Stack Overflow post cleared up &lt;a href=&#34;https://stackoverflow.com/questions/34247337/object-fit-not-affecting-images/34247563&#34;&gt;some things about how object-cover works&lt;/a&gt;, and I found some guidance on &lt;a href=&#34;https://www.markusantonwolf.com/blog/guide-for-different-ways-to-access-your-image-resources/&#34;&gt;how to reference images in the same folder as content&lt;/a&gt;. During this modification, I accidently screwed up the default summary.html template (I editted it instead of the summary.html template for the &#39;small&#39; taxonomy), but I found a &lt;a href=&#34;https://stackoverflow.com/questions/338436/how-can-i-view-an-old-version-of-a-file-with-git&#34;&gt;Stack Overflow post on using git to view past versions of files&lt;/a&gt;, which helped me find the previous syntax and restore things. Since I figured the issue was in a single line, I didn&#39;t do anything fancy like a &lt;a href=&#34;https://www.metaltoad.com/blog/beginners-guide-git-bisect-process-elimination&#34;&gt;git bisect&lt;/a&gt;, but that&#39;s a tool in the pocket for the future.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;aslkhad&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Javascript Beginnings</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-javascript-beginnings/</link>
      <pubDate>Thu, 04 Nov 2021 12:32:00 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-javascript-beginnings/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I&#39;ve written very little Javascript up to this point, but now I&#39;ve found a use case for some. The One-Off project cards I&#39;ve added to the homepage would be improved by a filtering system. Let&#39;s say by default the page shows the last 10 added One-Offs, but there are some buttons the user can flick to filter the cards by specific categories (tags?). Maybe Radio, Theatrical, Electronics, etc. Not sure if this list will be hard-coded or auto-generated - hard coded to start, for sure, and then we can look into generation.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since this is going to be a hardcoded example to start, I&#39;ll embed a script tag right inside my Index.html template for now. I&#39;m also going to take the &#34;first 5&#34; limiter out of the range function that displays the cards - I&#39;ll want all the cards to load (probably), then constrain which ones are actually visible with Javascript.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Alright, well let&#39;s see about getting a little JQuery going. I&#39;ll add&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;tagnamecolor&#34;&gt;&lt;span class=&#34;tagcolor&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&#34;attributecolor&#34;&gt; src&lt;span class=&#34;attributevaluecolor&#34;&gt;=&#34;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;tagcolor&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;tagnamecolor&#34;&gt;&lt;span class=&#34;tagcolor&#34;&gt;&amp;lt;&lt;/span&gt;/script&lt;span class=&#34;tagcolor&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To the head tag in my baseof.html template to include it. Then, in my index template, I&#39;ll use a little script tag:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    &amp;lt;script&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        $(document).ready(function() {&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            console.log(&#34;Hello, world&#34;);&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        })&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    &amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;And voila, a console log:&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;img alt=&#34;&#34; class=&#34;size-full wp-image-3980 aligncenter post-img&#34; height=&#34;162&#34; src=&#34;hellolog.png&#34; width=&#34;234&#34;/&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s see about finding all the cards on the page. &lt;a href=&#34;https://stackoverflow.com/questions/55521589/how-to-filter-bootstrap-cards-based-on-search-box&#34;&gt;This Stack Overflow answer&lt;/a&gt; suggests doing something like this with data-roles, which seem like an easy way of grabbing DOM elements. And since I&#39;m generating an article per one-off, I can add the data-role=&#34;small-card&#34; param to each card by adding it to the summary.html template for the one-offs. I think. Let&#39;s try something like:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        $(document).ready(function() {&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            console.log($(&#39;article[data-role=&#34;small-card&#34;]&#39;));&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        })&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;And indeed I can see we&#39;ve selected 7 articles, corresponding to the 7 One-Offs generated on the page.&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;img alt=&#34;&#34; class=&#34;size-full wp-image-3981 aligncenter post-img&#34; height=&#34;292&#34; src=&#34;articlesJquery.png&#34; width=&#34;240&#34;/&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With the help of the &lt;a href=&#34;https://api.jquery.com/&#34;&gt;JQuery Documentation&lt;/a&gt; and the &lt;a href=&#34;https://www.w3schools.com/jquERy/default.asp&#34;&gt;W3 Schools JQuery reference&lt;/a&gt;, I can use a JQuery selector to grab, for example, all the articles whose content contains the word &#34;Meter&#34; (since I happen to have two of them) and hide them like so:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3982 size-full post-img&#34; height=&#34;156&#34; src=&#34;hide.png&#34; width=&#34;559&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And, it hides those two cards! Progress! (&lt;em&gt;Although I note that the list page &#34;Smalls&#34; is also included in there...&lt;/em&gt;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;size-medium wp-image-3986 aligncenter post-img&#34; height=&#34;217&#34; src=&#34;5cards-300x217.png&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, now we need some buttons that dynamically do the same thing based on... something. So let&#39;s start by adding an &#34;All&#34; button that makes everything visible. I&#39;ll throw a couple of addition buttons next to it for now, just for formatting&#39;s sake&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3987 post-img&#34; height=&#34;229&#34; src=&#34;demobuttons.png&#34; width=&#34;359&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, let&#39;s get that All button to do a thing. I started by creating a couple of hard-coded classes that would do the filtering I wanted - one specifically for the &#34;All&#34; button (show everything) and one that would contain only the cards that contained the word &#34;Meter&#34;. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3992 post-img&#34; height=&#34;281&#34; src=&#34;functions.png&#34; width=&#34;685&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Then I refactored that code into a single function that looks at the ID of when the button was clicked, and filters the one-off cards based on that:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3989 post-img&#34; height=&#34;299&#34; src=&#34;filter-gifs.gif&#34; width=&#34;400&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(&lt;em&gt;This is also the point when I discovered &lt;a href=&#34;http://blog.bahraniapps.com/gifcam/&#34;&gt;GifCam&lt;/a&gt; - to enable Gif representations of my progress as things get more interactive.)&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So now... how to dynamically generate this list of tags?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s start with some light theft. &lt;a href=&#34;https://discourse.gohugo.io/t/list-all-tags-categories/17765/2&#34;&gt;This post from the Hugo discord&lt;/a&gt; has a solution for just generating a list of all the tags with their number of tagged items.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;size-full wp-image-3994 aligncenter post-img&#34; height=&#34;189&#34; src=&#34;taglistcode.png&#34; width=&#34;901&#34;/&gt;&lt;img alt=&#34;&#34; class=&#34;size-full wp-image-3993 aligncenter post-img&#34; height=&#34;133&#34; src=&#34;taglistresult.png&#34; width=&#34;143&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, how to turn this into buttons? Well, first I can take out the parts that use the Count variable (though maybe I&#39;ll want to add that back in later). And we&#39;ll turn that href into a button and remove the div, like so:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3995 post-img&#34; height=&#34;97&#34; src=&#34;buttonautos.png&#34; width=&#34;1145&#34;/&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And that generates the buttons, at least.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3996 post-img&#34; height=&#34;69&#34; src=&#34;tagbuttons.png&#34; width=&#34;563&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And because our earlier script applies to any button on the page, it&#39;s already filtering on the cards based on these tags! Sadly, the cards don&#39;t have that tag information yet, so all of those buttons blow away all the cards. But I&#39;ll bet we can fix that by editing the summary.html renderer for those cards. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After a bit of trouble because Hugo (Go?) templating interprets single-quotes as instructions to translate characters into their Ascii (Unicode?) equivalents, and some funking around with&lt;a href=&#34;https://stackoverflow.com/questions/4547363/jquery-filter-by-an-attribute-value&#34;&gt; how the Jquery interacts&lt;/a&gt; with the (invented) data-tags attribute, and the &lt;a href=&#34;https://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element&#34;&gt;unfortunate behavior of the .attr() function&lt;/a&gt; to return undefined if the block doesn&#39;t have that attribute, I came up with:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3999 post-img&#34; height=&#34;109&#34; src=&#34;autoButtons.png&#34; width=&#34;957&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-4000 post-img&#34; height=&#34;387&#34; src=&#34;buttonClick.png&#34; width=&#34;735&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This does mean that all the tags I use in my frontmatter have to have the same cannonical form as Hugo&#39;s tag pages, ie all lowercase, no spaces (hyphens ok). But that&#39;s fine for now, I can figure out how to style the text later.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-4002 post-img&#34; height=&#34;337&#34; src=&#34;filteringauto.gif&#34; width=&#34;1130&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Interestingly, the &#34;Smalls&#34; list page is included in all of the current filters, which isn&#39;t desirable. But I can fix this by just not rendering that card in the first place, by wrapping the  {{ .Render &#34;summary&#34; }} statement that actually renders the small cards in a &lt;a href=&#34;https://gohugo.io/variables/page/#page-variables&#34;&gt;{{ if .IsPage }}&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s still some slightly funky things happening with the spacing of the small cards, but I&#39;ll figure that out at some point. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;asdsadsa&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Refactoring the Site</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-refactoring-the-site/</link>
      <pubDate>Wed, 03 Nov 2021 12:41:35 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-refactoring-the-site/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;At this point, I transitioned between a couple of different computers; in fact, I&#39;m likely to be bouncing back and forth between two and even 3 computers over the course of this project. Thankfully, git, Github, and npm have my back here. When I sat down at a new computer tonight (with VS Code and my plugins already installed), I used git to clone my remote repo to my local machine. Then &lt;strong&gt;npm install &lt;/strong&gt;brings down all my necessary node modules. A quick &lt;strong&gt;npx hugo &lt;/strong&gt;(&lt;em&gt;well, after making sure my file path had no spaces - a known error in POSTCSS) (and updating node to v 17.0.1 using npx) &lt;/em&gt;and we have our site rebuilt on a new machine. Well, almost:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3964 post-img&#34; height=&#34;463&#34; src=&#34;oneimage.png&#34; width=&#34;541&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Weirdly, only one of three project images appears on the main page. And the same &#34;gooddogs.jpg&#34; image is the only one that appears on the projects list-page. Curious... The gooddogs image is the one I&#39;m currently using as a placeholder if the project content file doesn&#39;t specify a slug_image. If I change that standin, the standin images do appear in the projects page... and now two images appear on the main page! After using each image one-by-one as the standin slug_image, now all the images are appearing correctly... which implies to me that the images are not actually being correctly generated by Hugo, but instead are being cached between builds, leading to the appearance of correct behavior. Indeed, if I delete the public and resources folders are restart the server, we see a very similar issue with the image currently being used as the project standin:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3965 post-img&#34; height=&#34;373&#34; src=&#34;newimage.png&#34; width=&#34;423&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah, I see &lt;a href=&#34;https://gohugo.io/hugo-pipes/introduction/&#34;&gt;here in the documentation that&lt;/a&gt; &#34;assets will only be published if .Permalink or .RelPermalink is used.&#34; Which explains why I was only seeing the placeholder image - it was the only one reference via permalink in the summary.html renderer. Changing that image reference code to the following:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt; {{ if isset .Params &#34;slug_image&#34; }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ $img := resources.Get .Params.slug_image }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        &amp;lt;img src=&#34;{{ $img.RelPermalink }}&#34; alt=&#34;&#34; class=&#34;...&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Worked, since all the images are reference via Permalink.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To help make things less confusing, I&#39;m going to change the &#34;image not found&#34; image to something that&#39;s not an image I&#39;m already using for something elsewhere - a nice SVG of a flash borrowed again from Heroicons.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3966 post-img&#34; height=&#34;163&#34; src=&#34;flask.png&#34; width=&#34;369&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To accomplish this, I added the SVG to a new /static/svg folder, then used a simple &lt;span style=&#34;color: initial;&#34;&gt;&amp;lt;img src=&#34;../../svg/notfound.svg&#34; .... tag (with proper tailwind formatting) to use it as the slug_image not present option.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Ok, but actually on to refactoring the page now. I realize that what I&#39;ve been creating is something between a resume page and a new actual homepage for my website, leaving it somewhat in limbo between the two. It&#39;s a bit odd to have job-history on the front page of a personal site, for example, but it should absolutely be on a resume page. So I&#39;ll create a new page that&#39;s strictly resume oriented, and refactor the index.html page into being a proper homepage.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, I&#39;ll create a new file in my content called &#34;/resume/resume.md&#34;, as well as a new file in my layouts folder called resume.html.html... except I can tell by poking at the content of these two files that resume.md is being used as the content within the default single.html template. So let&#39;s try this another way around - I&#39;ll create a /layouts/resume/_index.md file with frontmatter for my new resume page, and a layouts/resume/list.html file. That way, the {{site}}/resume URL points to the &#34;list page for resumes&#34;... which will just be my resume page. It seems like perhaps there&#39;d be a better way to do this, but this certainly works.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3970 post-img&#34; height=&#34;343&#34; src=&#34;resumepage.png&#34; width=&#34;283&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll move the job history and skills list over from the main page to the resume page, and reformat the header to just link to the resume page. Since that header is included as a partial, it&#39;ll update &lt;em&gt;everywhere at once&lt;/em&gt;. Oh and what the heck, I&#39;ll add a link to my twitter as well&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3973 post-img&#34; height=&#34;57&#34; src=&#34;fullnavbar.png&#34; width=&#34;921&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that took about two minutes, most of which was finding the Twitter logo SVG on Ionicons. Awesome!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Much more tinkering occurred here, including a joyous crowdsourcing session to name the selection of small projects.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3975 post-img&#34; height=&#34;171&#34; src=&#34;crowdsource.png&#34; width=&#34;625&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I learned some (but not all) about {{ range }} operator used to list pages, and that the summary layout can be distinct to each type of content (as well as having a default or fallback format, which is handy). So I created a small summary format for small projects, and embedded a few sample ones on the homepage. By using the {{ .RelPermalink }} template, each card on the homepage links to the appropriate piece of content.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;lksdf&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-hugo/</link>
      <pubDate>Tue, 02 Nov 2021 20:01:47 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-hugo/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Since I&#39;ve been using npm for the other parts of this project, I wanted to see if there was a straightforward way to install the Hugo static site generator with npm. The &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;official install instructions&lt;/a&gt; don&#39;t mention it, but thankfully &lt;a href=&#34;https://www.blogtrack.io/blog/powerful-blog-setup-with-hugo-and-npm/&#34;&gt;this post from Blocktrack.io does&lt;/a&gt;. It seems it&#39;s as simply as the usual &lt;em&gt;npm init&lt;/em&gt;, walking through the options, then running&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm install --save-dev hugo-bin&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Running npx hugo version lets us see that hugo v0.88.1 was indeed installed. Apparently, since we haven&#39;t installed the hugo binaries directly, we&#39;ll use the &#34;npx&#34; command to make npm invoke the hugo binary we installed.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, we run &lt;strong&gt;npx hugo new site . --force &lt;/strong&gt;to generate the starting hugo sites.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The blocktrack.io module suggests initializing git and using it to download a theme at this point, but since I&#39;m interested in building one up from scratch, I&#39;ll just initialize git here with &lt;strong&gt;git init.&lt;/strong&gt; I&#39;ll add a .gitignore file to exclude the /node_modules path, and make an initial commit to the repo.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Following along with our Blocktrack friends once more, I&#39;ll add a few scripts to the package.json file that will allow us to easily build, serve, and clean up the Hugo site. Of course, building and serving the site now gives us an empty page, since we have no content yet, and also shows a warning in the terminal where we started the server: &#34;found no layout file for &#34;HTML&#34; for kind &#34;home.&#34; Makes sense.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So let&#39;s create a homepage of some kind. Following along with &lt;a href=&#34;https://www.youtube.com/watch?v=ut1xtRZ1QOA&#34;&gt;this video from Giraffe Academy,&lt;/a&gt; I&#39;ll create an index.html file in at /layouts/index.html.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3921 size-full post-img&#34; height=&#34;269&#34; src=&#34;hp2.png&#34; width=&#34;502&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that&#39;s better! We have a very small, very bad website on localhost again!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll go ahead and replace that with some boilerplate via VSCode, and we&#39;ll start figuring out this hugo thing from the beginning. I&#39;m going to create this as a whole separate site, then work out how to merge what I&#39;ve learned here with my oh-so-beautiful site I was creating using Tailwind.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After repopulating the index.html page with some boilerplate HTML, let&#39;s see if we can&#39;t get something like the projects pages working.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3923 post-img&#34; height=&#34;391&#34; src=&#34;boilerplate.png&#34; width=&#34;540&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s try the loraDMX project first. If I run &lt;strong&gt;npx hugo new .\content\projects\loraDMX.md&lt;/strong&gt;, I get a new file with just a little bit of what hugo calls &#34;Frontmatter&#34; - metadata about the content of the page. Next, I&#39;ll create a projects-page layout at /layouts/projects/single.html with very simply syntax copied from this &lt;a href=&#34;https://cloudcannon.com/community/learn/hugo-tutorial/layouts-in-hugo/#reusable-layouts-block-and-define&#34;&gt;cloudcannon tutorial&lt;/a&gt;:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre&gt;&amp;lt;main&amp;gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    {{ block &#34;main&#34; .}}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;    {{end}}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&amp;lt;/main&amp;gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;and I&#39;ll fill in my loraDMX.md page with:&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- Using a block in a child page --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;	{{ define &#34;main&#34; }}&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;This will be inserted into the block&lt;span class=&#34;nt&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;	{{ end }} &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now if I run npm run hugo:build... hmmm, it seems to be broken. But what quick google search recommends adding templates to _default.... hmmm, no good either.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s go about this another way - let&#39;s download a simple hugo theme and see what we can learn by messing with it. I&#39;ll delete my content and template for now, and follow the steps on the &lt;a href=&#34;https://themes.gohugo.io/themes/hugo-theme-codex/#codex&#34;&gt;Codex hugo theme&lt;/a&gt; to get it installed. I&#39;ll also recreate a very, very basic index.md file as recommending in those install steps, so that something shows up.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3927 post-img&#34; height=&#34;339&#34; src=&#34;codex1.png&#34; width=&#34;395&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that&#39;s slightly better, there is indeed a webpage here now. Let&#39;s see what&#39;s going on in these theme files, and where this content is actually coming from.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Under /themes/hugo-theme-codex, it looks like we have index.html and 404.html files. Adding text to the index.html layout adds it to the homepage, so it seems that&#39;s what we&#39;re looking at. There&#39;s also this hilarious comment to give us a clue where to add our content:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3928 post-img&#34; height=&#34;204&#34; src=&#34;replace.png&#34; width=&#34;358&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We can go directly to localhost:1313/404.html to view what seems to be the 404 page defined in themes/hugo-theme-codex/layouts/404.html, which is good. But it looks like both index.html and 404.html aren&#39;t full pages, but rather pieces of content, which define {{ styles }} and {{ main }} blocks to populate into a template somewhere else. Let&#39;s see if we can&#39;t find those.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The (only?) file with an actual html layout lives in /layouts/_default/baseof.html. That is, it starts with &amp;lt;!DOCTYPE html&amp;gt;, has body and head tags, and seems to be including other page elements within itself. The other members of /layouts/_default (list.hml and single.html) seem to be layouts for single and list page contents, without being full pages in their own right. From what I can glean, from this and the hugo documentation, these are the styles for basic single and list pages, the two fundamental types of content in hugo.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m feeling pretty good about trying again to roll my own theme here, but while I&#39;ve got it installed, let&#39;s look at the remaining folders under /layouts/ in the Codex theme. The partials folder contains a bunch of small html/Go pages, while look like they&#39;re meant to be pulled into other pages. Things like nav.html, social-icons.html, burger.html, etc. Some are pure HTML, others have hugo-style (Go?) scripts to pull in further details or enumerate pages, I think. Finally, the /layouts/taxonomy folder has a single file, tag.html, while seems like it would list all the pages and present them? Unclear how this is working currently.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, let&#39;s delete this theme and get back to writing our own. In the layouts folder, I&#39;ll create a new _defaults folder, and within that, baseof.html (with boilerplate) and single.html and list.html (both empty for now). The content I&#39;ve created in these basic pages isn&#39;t visible yet, and interestingly, sometimes I&#39;m seeing build warnings about &#34;found no layout file for kind taxonomy&#34; and sometimes I&#39;m not. I notice the example site from the theme calls its homepage content &#34;_index.md&#34;... but changing that in my site makes no difference...&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Aha! Some sleuthing through the Hugo Forums indicates that not only do I need to &lt;em&gt;build&lt;/em&gt; the draft pages (the index is a draft, currently), but also to &lt;em&gt;serve&lt;/em&gt; them. By running, in my case, npx hugo server -D, I can now see some index.html content! Woohoo!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3932 post-img&#34; height=&#34;217&#34; src=&#34;indexx.png&#34; width=&#34;407&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Shortly after the above, I lost patience, and decided to see if there was a faster way to get started. I wiped everything, and went back to the quickstart guide, and installed the &lt;a href=&#34;https://github.com/Vimux/blank&#34;&gt;&#34;blank&#34; theme from Vimux&lt;/a&gt;. Building and serving this locally worked as expected.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;OK. So let&#39;s start from &lt;em&gt;where I think is the beginniing&lt;/em&gt;, with the baseof.html layout. I can see, in the &amp;lt;head&amp;gt; section, the &lt;span style=&#34;color: initial;&#34;&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt; inclusion. Changing the title value in config.toml does indeed change the value of the page title, so at long last, I&#39;m able to make little changes. Somewhere. To something. Similarly, adding &amp;lt;p&amp;gt;Hello World&amp;lt;/p&amp;gt; to the body makes it show up in the page. And adding in some plain content to index.html makes it show up on this index page as well. Ok.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, now to try to add some CONTENT! Following strictly along with the quickstart, I&#39;ll run &lt;strong&gt;npx hugo new pots/my-first-post.md&lt;/strong&gt;, and create some basic content in there. Re-serving the page:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3936 post-img&#34; height=&#34;346&#34; src=&#34;firstpost.png&#34; width=&#34;313&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s try to understand what&#39;s going on here and where each of these pieces comes from&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;The link at the top is created in the &lt;em&gt;header.html &lt;/em&gt;partial, which auto-generates the URL and text based on the config file. This header is included in the &lt;em&gt;baseof.html&lt;/em&gt; template.&lt;/li&gt;
&lt;li&gt;The Hello, world text is hardcoded into the baseof.html template itself&lt;/li&gt;
&lt;li&gt;The words &#34;This content is in index.html&#34; is hardcoded into the index.html template, and included as the &#34;main&#34; block of the baseof.html template in this case&lt;/li&gt;
&lt;li&gt;The index.html also includes the $paginator method... which I don&#39;t entirely understand yet.
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;I&#39;m also realizing I don&#39;t entirely understand the difference between a black include and a partial. It seems like the blocks are pieces of relevant content included from content pages, whereas partials are separate pieces of HTML etc. included from the separate partials folder?&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;The &#34;LATEST POST&#34; section is actually from the sidebar.html partial, which seems to list the last 5 latest posts using the {{ range }} function, which I&#39;ll need to learn more about&lt;/li&gt;
&lt;li&gt;Finally, the footer partial is responsible for the copyright indication and final link, also included via the baseof.html layout.&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;And now, some experiments.&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Making changes in the /themes/blank/static/style.css file does reflect on the page, but does require a rebuild.&lt;/li&gt;
&lt;li&gt;Let&#39;s see about overriding some of the theme files using our own. If I make a /layouts/partials/header.html file, copy and paste the header.html file&#39;s contents into it and make changes... we have changes! Similarly with the _default/baseof.html file.&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3939 post-img&#34; height=&#34;270&#34; src=&#34;separate.png&#34; width=&#34;342&#34;/&gt;&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;It looks like the &#34;blank&#34; template I installed is including the header, main, and footer blocks within the &#34;baseof&#34; file. Which I might or might-not want - the individual project pages (and blog pages, if I ever port those over) probably want a different header. So I may want to move those includes over to different templates.&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, the process from here looks like taking the rough layout I built with tailwind, and breaking some of its components apart into blocks to fit better within the Hugo mentality. For now, I&#39;m doing to just manually copy my css built with Tailwind into the proper place (build/css) and then work on integrating Hugo and Tailwind later on&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;First, I&#39;ll make it so baseof.html only really includes some basic metaconent, a reference to the CSS file, and an include to the {{ main }} block on a given page. Then I&#39;ll slim down the index.html file some as well by commenting out the pagination... and then blow it up again by copying everything from my &amp;lt;body&amp;gt; tag in my current version of the site over. After figuring out that the Tailwind-built CSS should go into static/css.style.css, it&#39;s mostly kinda working! Well, the images in the project cards are broken, but that&#39;s not surprising. Let&#39;s see if I can figure out where those should go.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Huh! So just copying my existing /images folder into /static/images worked! So the html tag with src=&#34;./images/workshop.jpg&#34; is referencing the image at /static/images/workshop.jpg. Good to know. I imagine there&#39;s a way to dynamically work with file names - as in, for a project file, load the image from such-and-such folder with the same name? I&#39;ll get to that later.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3942 post-img&#34; height=&#34;399&#34; src=&#34;imageswork.png&#34; width=&#34;524&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s see about breaking the header out into it&#39;s own partial. I think this may be the only page that uses this header, but it still seems like a good process to learn. I also see that Hugo has a &#34;Menus&#34; functionality... perhaps also good to look into at some point. But for now, I&#39;ll add {{ partial &#34;header.html }} to the very top of my index.html file, just inside the {{ define &#34;main }} tag. Then I&#39;ll copy my &#34;Green Navbar&#34; html code over from my Index.html file, and seeing that it works, removing it from Index.html....&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And hey! Everything looks the same! So the header is now broken out into its own partial file, ready for re-use if I want to - neat! I&#39;ll do the same for the footer in the footer.html partial.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s see about how we would use Hugo to make the management of our Projects easier. The ideal setup would allow:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Writing up a project page in markup or html for each project&lt;/li&gt;
&lt;li&gt;Having each project page have consistent formatting via a common template&lt;/li&gt;
&lt;li&gt;Having each project page contain the data necessary to generate a card on the index.html page&lt;/li&gt;
&lt;li&gt;Have a pretty list page containing all the projects, generated automatically from the project pages. Possibly categorized?&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m not quite sure how to proceed... so let&#39;s mess around!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If I make an empty loradmx.md file in a new content/projects folder, and look at the sitemap.xml, I can see two new pages have been generated: /projects/ and /projects/loradmx. They are... very barebones at the moment, but at least they appear. I hear the right way to do this is to use hugo new, so let&#39;s see what that creates:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3946 post-img&#34; height=&#34;181&#34; src=&#34;hugonew.png&#34; width=&#34;396&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Just a little bit of what Hugo calls &#34;Frontmatter&#34; - metadata about the content in question. I&#39;m thinking this is where I can stash the slug text for the cards that appear on the homepage and the projects page. Rebuilding the page with this frontmatter causes it to disappear from the default hugo server build, unless draft is set to false or I run &lt;strong&gt;npx hugo serve -D.&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3944 post-img&#34; height=&#34;205&#34; src=&#34;barebones.png&#34; width=&#34;217&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s try figuring out how these pages are being generated by adding our footer to them. As a place to start, at least.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems the content in /projects/loradmx is currently based on the theme/layouts/_defaults/single.html file. So, like before, I&#39;ll make a copy of it in my own layouts/_defaults folder. Similarly, I&#39;ll copy /layouts/_defaults/list.html. By making small changes to those files, I can confirm that the template files are indeed taking effect.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So now what? Well, let&#39;s start by adding our header and footer templates to both pages. I&#39;ll probably want to change this around some later, but it&#39;s an alright place to start.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And now is the post where I&#39;d really like to have the ability to work with Tailwind inside this project, so as I&#39;m making changes to styling these pages with Tailwind I can see the results live on the Hugo pages. Following the post from Praveen Juge, I&#39;ll run&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;npm install tailwindcss@latest postcss@latest postcss-cli@latest autoprefixer@latest --save&lt;/code&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To install the requisite Tailwind packages in via npm. I&#39;ll use npx tailwind init -p to create the basic tailwind.config.js and postcss.config.js files, then copy the varients over from my other working project. Finally, again as suggested by Praveen, I&#39;ll set my purge settings to&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;content: [&#34;./layouts/**/*.html&#34;, &#34;./content/**/*.md&#34;, &#34;./content/**/*.html&#34;],&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So that all the relevent css is captured.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;Sometime later after much poking around...&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, here&#39;s how you integrate Tailwind CSS into the Hugo build process after the above. Any relevant tailwind-style CSS wants to go in your &lt;a href=&#34;https://gohugo.io/getting-started/configuration/&#34;&gt;/assets folder&lt;/a&gt;, which is where Hugo looks for resources involved in &lt;a href=&#34;https://gohugo.io/hugo-pipes/&#34;&gt;Hugo Pipes&lt;/a&gt;, which may be transformed upon rebuild. The above commands take care of installing the necessary dependencies. Then, in wherever you reference your CSS file (in my case, in baseof.html), use:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    {{ $css := resources.Get &#34;css/style.css&#34; }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    {{ $style := $css | resources.PostCSS }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    &amp;lt;link rel =&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;{{ $style.RelPermalink }}&#34;&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To dynamically link to your generated CSS. Now you can write all the tailwind code you want and, so long as you&#39;re not working with custom classes in your css, it will all just work. There seems to be an outstanding issue working with Tailwind JIT compilation in Hugo, so I&#39;m not going to attempt that now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now that the projects page is rendering ok, I&#39;ll see about how to apply formatting to it. Looking at the &lt;a href=&#34;https://gohugo.io/templates/pagination/&#34;&gt;Paginator documentation&lt;/a&gt; is a bit confusing, so let&#39;s dig around a bit. The list template I pulled out of the blank theme has the following:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            {{ range .Paginator.Pages }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                {{ .Render &#34;summary&#34; }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            {{ end }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Which I take to mean - using the built-in Pagination function, get all the pages (assumedly only the projects pages?), then render them using the &lt;a href=&#34;https://gohugo.io/templates/views&#34;&gt;alternative view&lt;/a&gt; &#34;summary&#34; (which is in /layouts/_default/summary.html). Making a copy of that them file in my /layouts folder, I can see that that is indeed the case. Creating a few more project files use &lt;strong&gt;npx hugo new project/gooddog.md &lt;/strong&gt;(for example), all of the new project pages show up in the paginator, which is good. And now I can go through formatting the summary.html file to apply formatting to all of the listed projects!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3954 post-img&#34; height=&#34;514&#34; src=&#34;summaries.png&#34; width=&#34;536&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One curious thing is that Hugo is doing its own truncation of longer bits of Lorem Ipsum and adding a &#34;read more&#34; link. Presumably that&#39;s what this structure does:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ .Summary }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ if .Truncated }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            &amp;lt;a href=&#34;{{ .Permalink }}&#34;&amp;gt;Read more...&amp;lt;/a&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ end }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So let&#39;s learn more about that. It seems that the&lt;a href=&#34;https://gohugo.io/content-management/summaries/&#34;&gt; page .Summary functionality&lt;/a&gt; is one of Hugo&#39;s &lt;a href=&#34;https://gohugo.io/variables/page/&#34;&gt;built in page variables&lt;/a&gt;. It seems Hugo will default to using the first 70 words of a piece of content as a summary (or another value, if specified in the configuration). Or, one can override this with a custom summary in Frontmatter. OR, one can override THAT with a &amp;lt;!--more--&amp;gt; tag in the content to specify where the content should be split. Let&#39;s try out that second option on the Demilight page. By adding a summary key to the frontmatter of demilight.md, we can override the generated page summary so it shows up more cleanly.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3956 post-img&#34; height=&#34;206&#34; src=&#34;Custom-Summary.png&#34; width=&#34;386&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/how-to-display-a-custome-page-variable/1557&#34;&gt;A post from the Hugo forums&lt;/a&gt; suggests that it&#39;s possible to use one&#39;s own custom keys in the frontmatter as well. So, by adding the slug key to some frontmatter in a couple of the content files, and rewriting the summary section like so:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    &amp;lt;div&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ if .Slug}}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            {{ .Slug }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ else }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            {{ .Summary }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            {{ if .Truncated }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;                &amp;lt;a href=&#34;{{ .Permalink }}&#34;&amp;gt;Read more...&amp;lt;/a&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;            {{ end }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;        {{ end }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;    &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It&#39;s possible to have the list page display the hand-written slug if one was provided, or the generated summary if one wasn&#39;t! Neat!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(We can also point the &#34;more projects&#34; card on the homepage to &#34;/project&#34; to link it to this generated page.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now to associate an image with each of these individual project cards, we can do something like:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt; {{ $img := resources.Get &#34;images/goodogs.jpg&#34; }}&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&amp;lt;img src=&#34;{{ $img.RelPermalink }}&#34; alt=&#34;&#34; class=&#34;col-span-1&#34;&amp;gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Which makes the LoraDmx image associated with each and every card. Which is effective, but not exactly communicative. To improve this, we can use an additional front matter parameter called &#34;slug_image&#34; which specifies an image file path like &#34;images/loradmx.jpg&#34;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;HOLD THE PHONE. After another much fiddling around, I realize I made a silly error in the previous sentence. Did you spot it? Using a path like &#34;images/loradmx.jpg&#34; means the browser will look for the resource &lt;em&gt;relative to our current page&lt;/em&gt;. If we want to look in the images directory, we should specify the image as &lt;strong&gt;/&lt;/strong&gt;images/loradmx.jpg (note the leading slash). Oof. 25 minutes gone on that one. I found &lt;a href=&#34;https://www.markusantonwolf.com/blog/guide-for-different-ways-to-access-your-image-resources/&#34;&gt;this post on how to access your image resources in Hugo&lt;/a&gt; very helpful.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Now that we have a barebones project list page, it would probably be nice to format some actual project pages, yeah? Currently they&#39;re just using the default single.html template, which isn&#39;t terribly attractive. Let&#39;s create a new layout for project pages specifically, which should go in (according to the &lt;a href=&#34;https://gohugo.io/templates/lookup-order/&#34;&gt;template lookup order page&lt;/a&gt;) /layouts/project/single.html&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After much fiddling with Tailwind, something like a decent layout starts to emerge. I also added an additional piece of project content in HTML, just to verify that yes, indeed, that&#39;s possible.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;fghfghfghg&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Content with HTML, CSS</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-content-with-html-css/</link>
      <pubDate>Tue, 26 Oct 2021 16:33:45 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-content-with-html-css/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Now that I have the barebones of a publication workflow going, it&#39;d be nice if there was something to actually look at on this new site. I&#39;ve been looking for an excused to try out &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;TailwindCSS&lt;/a&gt;, a CSS framework where you compose styles through small utility classes instead of writing large ones. Let&#39;s start there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems like Tailwind CSS is most easily managed via npm (the Node Package Manager), which the &lt;a href=&#34;https://docs.npmjs.com/downloading-and-installing-node-js-and-npm&#34;&gt;npm resources recommend&lt;/a&gt; installing via a node version manager. I arbitrarily chose &lt;a href=&#34;https://github.com/coreybutler/nvm-windows&#34;&gt;nvm-windows&lt;/a&gt; and installed it using its installer. While it didn&#39;t work via Windows Powershell immediately, after restarting powershell the &lt;em&gt;nvm&lt;/em&gt; command worked fine.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3884 post-img&#34; height=&#34;406&#34; src=&#34;npmcommand.png&#34; width=&#34;841&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Then, by running nvm install latest, I had node.js 16.11.1 (64-bit) installed on my machine.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Based on some things I&#39;ve read, I&#39;ll &#39;cd&#39; into a new folder in powershell, and then run the &lt;em&gt;npm init&lt;/em&gt;&lt;strong&gt; &lt;/strong&gt;command to generate a basic &lt;em&gt;package.json&lt;/em&gt; file to hold some settings related to this project. The questions that this command prompts  all seem fairly straightforward, though I don&#39;t know what to include for the &#39;test&#39; command yet.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3885 post-img&#34; height=&#34;356&#34; src=&#34;npminit.png&#34; width=&#34;495&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Next, I&#39;ll try installing the tailwind package using the command recommended on the tailwind website:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;language-shell post-paragrpah&#34;&gt;&lt;code class=&#34;language-shell&#34;&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -D tailwindcss@latest postcss@latest autoprefixer@latest&lt;/code&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Which downloads a whole bunch of packages into the node_modules folder and creates a package-lock.json file. The latter appears to track all of the included/required node modules, like an env file say. From here, following along with &lt;a href=&#34;https://www.youtube.com/watch?v=UBOj6rqRUME&#34;&gt;a pretty speedy crash course video from Traversy Media,&lt;/a&gt; I&#39;ll create a couple of files. First is /src/style.css, which gets three lines as specified by the tailwind documentation:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre class=&#34;language-css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@tailwind&lt;/span&gt; base&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@tailwind&lt;/span&gt; components&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@tailwind&lt;/span&gt; utilities&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Also, empty files /src/index.html and /public/style.css, to be populated by our site html and tailwind&#39;s output css, respectively. Finally, I&#39;ll change the test script in the package.json file to &lt;em&gt;&lt;span style=&#34;color: initial;&#34;&gt;&#34;build:css&#34;: &#34;tailwind build src/style.css -o public/style.css&#34; &lt;/span&gt;&lt;/em&gt;&lt;span style=&#34;color: initial;&#34;&gt;and from the root folder run &lt;em&gt;npm run build:css&lt;/em&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After about 6 seconds, the process completes, and wow is there a lot in our output style.css file now! Over 180K lines of css! Well that&#39;s intense. Presumably we&#39;ll be eliminating a lot of this as we package the site up for publication.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Over in the empty index.html file, typing ! and hitting enter gives us a very basic HTML boilerplate page, to which I&#39;ll add a reference to the (output) stylesheet and just a little bit of content to play with for now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3888 post-img&#34; height=&#34;283&#34; src=&#34;very-basic-page.png&#34; width=&#34;643&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;language-shell post-paragrpah&#34;&gt;After installing the Live Server VS Code extension, I can right-click anywhere in this file and immediately open it in a Chrome tab for local viewing. And now we have a little playground for messing around with tailwind!&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The first experiments are never pretty, but that&#39;s the point really. They&#39;re educational.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3896 size-full post-img&#34; height=&#34;671&#34; src=&#34;firstailwinsc.png&#34; width=&#34;510&#34;/&gt;&lt;/p&gt;
&lt;!-- &lt;p class=&#34;post-p&#34;&gt;XXXX Add version of Tailwind site here??? XXXX&lt;/p&gt; --&gt;
&lt;p class=&#34;post-p&#34;&gt;I experimented with tailwind&#39;s @apply directive, which allows for the creation of custom subsets of CSS that you might want to commonly re-use. For a start, I tried creating a shortcut to a main site color and a secondary site color.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3897 post-img&#34; height=&#34;160&#34; src=&#34;primarysecondary.png&#34; width=&#34;335&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And futhermore, playing around with styling buttons in a navbar in the same way. But since this was taking ~6 seconds to regenerate the output CSS file each time, this was not at all a fast way to work.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, Tailwind has a new JIT mode that generates only the necessary styles on demand, reducing the build time to ~150ms. This is as simple as adding mode: &#39;jit&#39; to the tailwind.config.js file, and making sure the &#39;purge&#39; selection is correct.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After the initial flexbox exploration, I settled in for awhile playing around with navbar options. I took some inspiration from both &lt;a href=&#34;https://v1.tailwindcss.com/components/navigation&#34;&gt;tailwinds&#39; own Navigation Bar suggestions&lt;/a&gt; and &lt;a href=&#34;https://daisyui.com/&#34;&gt;DaisyUI&#39;s Components&lt;/a&gt;. For the sake of learning, I didn&#39;t use DaisyUI at this stage, but I think I may integrate their components when I start to build the actual resume page.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;A couple of useful resources were: &lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;this page on &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Aligning_Items_in_a_Flex_Container&#34;&gt;Flexbox Alignment&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/796087/make-a-div-into-a-link&#34;&gt;This Stack Overflow article on making a whole div clickable&lt;/a&gt;, which allowed me to extend the clickable idea to other parts of the header&lt;/li&gt;
    &lt;li&gt;The &lt;a href=&#34;https://github.com/ionic-team/ionicons&#34;&gt;Ionicon Icons&lt;/a&gt; and &lt;a href=&#34;https://heroicons.com/&#34;&gt;Hero Icons&lt;/a&gt;sets&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt=&#34;&#34; class=&#34;mt-8 aligncenter size-full wp-image-3904 post-img&#34; height=&#34;228&#34; src=&#34;3menus.png&#34; width=&#34;744&#34;/&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;After homing in on the Green menubar as one I liked best, I separated it out into a new HTML file to get to work prototyping some actual content for the page. I created my four major sections (Introduction, Projects, CV, and Skills), each with a header with an ID and a &amp;lt;p&amp;gt; tag for the text. I fleshed out each section with a little Lorem Ipsum text, and arbitrarily decided that I wanted to start with the projects section.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I spent quite a bit of time mucking around with the Flexbox layout before deciding to simplify things by moving to a Grid layout. I&#39;ve got 4 &#34;cards,&#34; each with an image, title, and blurb, that grow slightly when moused-over, and a fifth card that will link to a larger projects page. I do think I&#39;ll need to go back to something like Flexbox to make the site more responsive on smaller screens, but I&#39;ll cross that bridge down the road. Ideally, these cards would be auto-populated using something like Hugo, but I think fleshing this entry-page out first would be better.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-3911 post-img&#34; height=&#34;323&#34; src=&#34;projects-1024x460.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I also ran into an issue with the anchor links in the navbar. Because the navbar is held in a fixed position, using an anchor link to, say the h1 tag with id &#39;projects&#39;, clicking the #projects link sends that header to the top of the page... which is behind the navbar! Thankfully, &lt;a href=&#34;https://stackoverflow.com/questions/10732690/offsetting-an-html-anchor-to-adjust-for-fixed-header&#34;&gt;this stack overflow post&lt;/a&gt; has a clever solution that uses CSS&#39;s :before selector to position the anchor links lower on the page by a set offset. I made a new tailwind component for this css, applied to to all my page headers, and voila, problem solved.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, none of those cards actually link anywhere yet. But by using a full-size &amp;lt;span&amp;gt; element that fills the entire card at a higher z-value, each box is clickable as a link. This is not a particularly accessible solution, something I&#39;ll have to address at some point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Next, I roughed in the skills section, using some basic indenting and some categories that I&#39;ll probably change later. One VSCode plugin that I found very useful at this point is the &lt;a href=&#34;https://github.com/Tyriar/vscode-lorem-ipsum&#34;&gt;Lorem Ipsum plugin by Daniel Imms&lt;/a&gt;. Particularly because it generates different text at each multi-cursor position, it was simple to add a bunch of placeholder text for each of my skills subsections at this point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;At some point in this mucking around, I got interested in how one strips away some of that giant 180K-line mess of CSS to use just what&#39;s actually on the site. Following tailwind&#39;s own &lt;a href=&#34;https://tailwindcss.com/docs/optimizing-for-production&#34;&gt;Optimizing for Production&lt;/a&gt; post, I first ran &lt;strong&gt;npx tailwindcss init&lt;/strong&gt; to create a tailwind.config.js file. Then, within that file, I added the path &#39;./src/**/*.html&#39; to my purge list. From my upstanding, this means that any class referenced in any html file in the public folder will be preserved, and all the others will be purged when building for production.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems there are many ways to manipulate the NODE_ENV variable to switch between production and non-production stages, but one can&#39;t do it within the scripts in package.json, since the environment variable needs to be set before npm runs. So, to build the css for production, i&#39;ll now run &lt;strong&gt;&lt;code class=&#34;hljs language-javascript&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;$env&lt;/span&gt;:&lt;span class=&#34;hljs-variable constant_&#34;&gt;NODE_ENV&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&#34;production&#34;; npm run build:css&lt;/span&gt;&lt;/code&gt; &lt;/strong&gt;on windows, or . Setting the environment variable back to something else (like &#34;dev&#34;) and re-running the build command restores our burgeoning 180K lines of css.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;pre&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3891 post-img&#34; height=&#34;404&#34; src=&#34;sofewlines.png&#34; width=&#34;576&#34;/&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Once I&#39;m a little happier with the design (which I&#39;m just playing around with using VC Code&#39;s Live Server extension) I&#39;ll need to adjust my CD pipeline on GitHub so that, when I push a new HTML file, tailwinds auotmatically rebuilds the css file for production and pushes it to S3. But one thing at a time.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;em&gt;(It&#39;s unclear to me whether the above is actually best practices - probably not with a public repository, though I could see myself using a private repo to store the contents of a static site in future.)&lt;/em&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Visitor Counter with JS, Lambda, and DynamoDB</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-visitor-counter-with-js-lambda-dynamodb-and-sam/</link>
      <pubDate>Mon, 18 Oct 2021 02:42:20 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-visitor-counter-with-js-lambda-dynamodb-and-sam/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I&#39;ve been spending a lot of shower-thoughts on what the actual content of my resume page should be. A single-page, hand-written HTML/CSS page would probably be fastest, but I&#39;d also like to explore using a static-site generator. But then, do I port my whole site/blog over to that static-site format? And also, what should the actual layout/priority of the resume page be? While I stew on such things, I&#39;m going to continue implementing  the functions of the Cloud Resume Challenge that implement an on-site visitor counter.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;DynamoDB&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Starting off in the &lt;a href=&#34;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&#34;&gt;DynamoDB Documentation&lt;/a&gt;, it seems like our database can, for this use case, be really simple. Possibly just a single table with a single Item consisting of a scalar value (number) that we&#39;ll read, increment, and update. Possibly this is oversimplifying things, but let&#39;s jump in assuming things will be simple. We can see how wrong we are later.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Assuming at some point I might want to track some other kinds of stats for this site, I&#39;ll create a table called &#34;cloud-resume-stats&#34; with a partition key called &#34;stats&#34; from the DynamoDB UI. At first, the only &#34;stat&#34; will be the visitor count, but perhaps there will be other things to track later. Or not.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3868 post-img&#34; height=&#34;396&#34; src=&#34;cloudstats.png&#34; width=&#34;457&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As recommended in the Cloud Resume Challenge, I&#39;ll select to use Dynamic Pricing - since I imagine very few reads/writes overall, this should end up costing me close to nothing. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With the table setup, I&#39;ll add a single Item with the stat &#34;view-count&#34; and starting at quantity zero. This for now will be the only item in our database, and will track our view-count.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3869 post-img&#34; height=&#34;266&#34; src=&#34;attribute-1024x440.png&#34; width=&#34;620&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well, I guess that&#39;s the table set up, for now. Now let&#39;s look at modifying the data in that table with a Lambda serverless function.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Lambda Function&lt;/h3&gt;
&lt;p class=&#34;post-p&#34;&gt;Going into Lambda function UI in the AWS console and clicking &#39;Create Function&#39; gives us a variety of selections and default options. I&#39;ll create a new function with a Python 3.9 runtime (since I&#39;m more comfortable in Python than in Node, Ruby, or Go for example). I&#39;ll also take advantage of the option to create a new IAM role based on templates to make a new role with the &#34;Simple Microservice Permissions&#34; policy for lambdas; I&#39;ll need to inspect those permissions a little closely later on.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3870 post-img&#34; height=&#34;410&#34; src=&#34;newLambda-1024x728.png&#34; width=&#34;577&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;From the little I&#39;d looked into using AWS Lambdas before, I don&#39;t recall the nifty visual input/output editor that pops up here - neat! Let&#39;s see what our options are for triggers.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It looks like one of the options for triggers is via the AWS API Gateway, which is handy, since that&#39;s another piece of the Cloud Resume Challenge. And when selected, an option appears to select an existing API... or create a new one right here. Well that&#39;s handy.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3871 post-img&#34; height=&#34;308&#34; src=&#34;createAPI.png&#34; width=&#34;625&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;As for what the difference is between an HTTP API and a REST API in this context, I&#39;ll have to consult Amazon&#39;s &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html#services-apigateway-apitypes&#34;&gt;Choosing an API Type&lt;/a&gt; documentation, and the related &lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html&#34;&gt;Choosing Between HTTP APIs and REST APIs&lt;/a&gt; document. Given that both options appear to allow requests from public HTTP endpoints, and the HTTP API is described as &#34;lightweight&#34; (as opposed to the REST API&#39;s &#34;feature rich&#34;), I think that&#39;s where I&#39;ll start.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The next question is &#34;Security,&#34; which sounds like an important... so what the heck is a JWT authorizer??&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3872 post-img&#34; height=&#34;293&#34; src=&#34;jwt.png&#34; width=&#34;625&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Another Amazon guide to the rescue: &lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-jwt-authorizer.html&#34;&gt;Controlling Access to HTTP APIs with JWT Authorizers&lt;/a&gt;. It seems that JWT is JSON Web Token, and is part of a method of validating requests to API&#39;s using OATH or OpenID connect. Since biting off a full mouthful of OATH is probably more than I should try to tackle at this stage, I&#39;ll leave the API open for now, and look into whether rate-limiting requests to it/the Lambda function/the database is an option.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Finally, I&#39;ll enable Cross Origin Resource Sharing to allow access to the API from outside the domain of the lambda... I think. I&#39;m not entirely sure if this will be necessary, since I&#39;ll be accessing this lambda from within my own site in the S3 bucket I own. But I&#39;ll turn it on for now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I now have a long, auto-generated endpoint name for the API associated with this Lambda - I&#39;ll want to see later about reconfiguring that to be somewhat more readable, but all in good time. Let&#39;s get back to writing that Lambda function.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What I&#39;ll want is to be able to make a request to the API endpoint which accesses the current visitor count stored in our database, increments it by one, stores that value back in the database, and returns the new value to the frontend. There&#39;s some handy starter code over in some &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.get_item&#34;&gt;DynamoDB documentation&lt;/a&gt;; let&#39;s just start by seeing if we can retrieve the value of the visitor count from our table:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/291dc45533b08a53d7e1a7ff9e858cad.js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;And we can see in the response results that yes, indeed, we&#39;re pulling the results out of our database as expected:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3875 post-img&#34; height=&#34;490&#34; src=&#34;response.png&#34; width=&#34;715&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;(Another handy resource was this &lt;a href=&#34;&lt;script src=&#34;https://gist.github.com/gene1wood/4a052f39490fae00e0c3&#34;&gt;gist to list all available Python libraries in the default Python environment&lt;/a&gt;)..js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;And now, via the magic of the the AWS API&#39;s ADD action, we can write the increment action as follows, returning the resulting new viewpoint to the API:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/5af18f0f3927056abbca1e714afead71.js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;Alright, we can call this API endpoint and get an incremented and update viewcount back. That&#39;s good. But that URL sure is ugly - it&#39;d be nice if I could target something like &lt;strong&gt;api.jeff.glass/incrementViewcount.&lt;/strong&gt; Let&#39;s see if that&#39;s possible. Apparently, this requires a certificate for that domain in the Amazon Certificate Manager. I had hoped I could use the certificate I used for Cloudfront certification, but since that&#39;s in the us-east-1 region and the lambda is in us-east-2, it looks like I&#39;ll need another certificate. No worries though; it&#39;s easy enough to do that via the prompt in the API Gateway UI.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Currently, any request type to the API endpoint will return this incremented information - for cleanliness, I&#39;ll make it so only a GET request actually causes this to happen. Any other request type returns a 403 response code via another (very simple) Lambda.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3878 post-img&#34; height=&#34;382&#34; src=&#34;twolambda.png&#34; width=&#34;468&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ve also redirected api.jeff.glass to this API endpoint to hopefully make things cleaner, using the Custom Domain Names section of the UI and a new CNAME entry in my DNS manager pointing to the API ARN. And while I seem to able to query the enpoint via that URL, all I&#39;m getting is Status 500 Internal Server Errors. &lt;a href=&#34;https://aws.amazon.com/premiumsupport/knowledge-center/api-gateway-lambda-stage-variable-500/&#34;&gt;This AWS help article&lt;/a&gt; implies that&#39;s an issue with permissions, but I&#39;d have thought (and the UI seems to confirm) that by configuring the API Gateway when I create the Lambda functions themselves, the appropriate permissions/roles should be automatically created. When I go to check the logs, it seems I&#39;ll need to have a Cloudwatch resource of some kind as a destination for them. So, over to Cloudwatch it is.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Creating a new Log Group is straightforward, with all the default options. Feeding that ARN into the API Gateway&#39;s settings allows logs to start popping up whenever I hit the API endpoint. And, as expected, I&#39;m seeing 500-status errors in the logs as well:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/0185a8c3e0b4505097c21d6d16503a6c.js&#34;&gt;&lt;/script&gt;&lt;/p
&lt;p class=&#34;post-p&#34;&gt;At least I can confirm that the API Gateway is seeing a GET request as expected. Ah, and if I make a request to &lt;strong&gt;https://api.jeff.glass/incrementViewcount, &lt;/strong&gt;i get the incremented and returned view count as expected. And if I configure the /error URL to trigger the seperate error lambda (which just returns code 403), I can trigger that as well. But clearly there&#39;s something I don&#39;t understand about the way the /ANY route acts to route to integrations. When I create a route like ANY /{greedy}, the Cloudwatch logs do show the correct route being selected. But I still get a code 500 internal server error, as if the Lambda itself isn&#39;t running. On the other hand, this additional error handling Lambda is overkill, so I can just bin it. I&#39;ll make a mental post-it note to deepen my understanding of the ANY and {greedy} functionality though.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>GitHub for Frontend</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-github-for-frontend/</link>
      <pubDate>Sun, 17 Oct 2021 18:22:52 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-github-for-frontend/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;From an outside perspective, it seems that one of the goals of the Cloud Resume Challenge is to introduce new pracitioners to tools that will make their lives easier in developing future projects. Tools like GitHub processes, Continuous Integration/Continuous Development, infrastructure as code... all ways that seem apply grease to the sticky gears of development.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The piece that feels most approachable and useful to me at this early stage is the front end continuous development pipeline. The goal will be: any code that gets pushed to the main branch on a GitHub repository will be pushed to my S3 bucket to instantly become the new static site. It seems this will hopefully be quite straightforward using GitHub actions - let&#39;s try.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Starting a GitHub repository from the GitHub UI is very straightforward. Choose a name. Choose public vs. private. Generate some default files (or not). Hit create. Boom.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3829 post-img&#34; height=&#34;715&#34; src=&#34;frontend_github.png&#34; width=&#34;731&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So that&#39;s the familiar part, now into the unknown.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, Github has a very approachable page titled &lt;a href=&#34;https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions&#34;&gt;Understanding GitHub Actions&lt;/a&gt;, which provides a lot of context and vocabulary upfront for how to get started with Actions. And as usual, I suspect I&#39;ll be better off learning with dirty hands. So I&#39;ll start by initializing the minimum viable workflow and see what that looks like:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3832 post-img&#34; height=&#34;367&#34; src=&#34;minimumWorkflow.png&#34; width=&#34;481&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well let&#39;s see what that gets us. It looks like it automatically populates a file called &#34;blank.yml&#34; in the ./github/workflows directory. The contents is:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/4e6b1a042a4484b5e86fd99823dfce54.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, thanks to lots of generous comments, it seems we have a GitHub action to launches an Ubuntu instance, checks out the code in the repository, echoes a handful of messages to the logs, then shuts down. This should happen whenever a push or pull request to the main branch occurs. That should be pretty straightforward to test by making changes to the Readme.md file we created during repository setup.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3835 post-img&#34; height=&#34;470&#34; src=&#34;runAction.png&#34; width=&#34;542&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that sure was easy. As expected - an instance was launched, the Repo&#39;s code was cloned, a handful of Echo commands got executed.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So now, let&#39;s see if we can&#39;t figure out how to use an action to push content to our S3 bucket. For now, I think I&#39;m going to set it up to just push &lt;em&gt;all&lt;/em&gt; of the content in a specific folder to a bucket, but ultimately, I&#39;m contemplating using a static site generator like &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; or &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; to generate the site, and integrate that build process into a GitHub action of its own.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In several places, I&#39;ve seen it suggested to create an User using the Identity Manager in AWS to generate access keys that will only allow GitHub actions the bare minimum functions necessary to complete their role. Spinning up a new role is easy in IAM, and I&#39;m duplicating the minimum permissions in GitHub&#39;s &lt;a href=&#34;https://docs.github.com/en/enterprise-server@3.0/admin/github-actions/enabling-github-actions-for-github-enterprise-server/enabling-github-actions-with-amazon-s3-storage&#34;&gt;Enabling GitHub Actions with Amazon S3&lt;/a&gt; article:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3837 post-img&#34; height=&#34;438&#34; src=&#34;policy.png&#34; width=&#34;563&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With that out of the way, and with my new role&#39;s Access Key and Secret Access Key written down, it&#39;s back over to GitHub to implement the action.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Like any good process, I&#39;ll start by stealing someone else&#39;s good idea. In this case, I&#39;ll use the &lt;a href=&#34;https://github.com/marketplace/actions/s3-sync&#34;&gt;S3 Sync Action&lt;/a&gt; available in the GitHub marketplace. This was easy enough to drop into my repo, and to set the relevant AWS access keys as GitHub secrets so they&#39;re not publicly visible.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3840 post-img&#34; height=&#34;291&#34; src=&#34;secrets.png&#34; width=&#34;359&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/e80776b515e04a31146f21849cafa448.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Error oh no!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3842 post-img&#34; height=&#34;151&#34; src=&#34;actionError.png&#34; width=&#34;381&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Typo in Workflow file (extra &#39;-&#39;)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3843 post-img&#34; height=&#34;563&#34; src=&#34;S3-Sync-Error.png&#34; width=&#34;623&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Error in permissions - needed to specify all objects in bucket are valid, as well as adding a couple of additional permissions per &lt;a href=&#34;https://stackoverflow.com/a/36272287&#34;&gt;this StackOverflow post&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Curiously, accessing directly via the Index.html object URL shows me one thing, but going to resume.jeff.glass shows the original content:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3844 post-img&#34; height=&#34;370&#34; src=&#34;TwoDifferentResults.png&#34; width=&#34;650&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Ahhh, of course - directly accessing the resource shows the contents of the bucket, but resume.jeff.glass is pointing to the Cloudflare distribution I created, which still has cached content. So I need to invalidate the Cloudflare cache as part of this workflow as well, so that users will always see the most recent content when requested.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, that&#39;s something I can do manually in the Cloudflare console:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3846 post-img&#34; height=&#34;298&#34; src=&#34;createinvalidation.png&#34; width=&#34;640&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And now everything looks right:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3847 post-img&#34; height=&#34;374&#34; src=&#34;successfulIinvalid.png&#34; width=&#34;515&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But of course, the whole point is to automate this step. Let&#39;s see if we can work out how to add this functionality to the workflow we already have. Indeed, it looks like there&#39;s an &lt;a href=&#34;https://github.com/jakejarvis/s3-sync-action/pull/32&#34;&gt;outstanding pull request&lt;/a&gt; with exactly this functionality, by InscribeAI and Jake Garth. So really, what I need to figure out is the proper syntax for using this version of the action, as opposed to the original version.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For one thing, I&#39;ll add the CF Distribution ID as a repository secret. Then I&#39;ll change the action to point at InscribeAI version via some textual changes - just changing the author&#39;s name and adding the necessary environment key and secret.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This seems to have run successfully - let&#39;s make one more change to the Index.html file and see if our changes happen in when viewed from the Cloudfront Distribution:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well, sadly no, no Cloudfront distribution.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Well, looks like it&#39;s time to fork this GitHub repo and see about forming our own action. (There are surely other actions on the GitHub marketplace, but this seems like I challenge I could learn from.)&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;First things first, let&#39;s fork the repo that we&#39;ve been using so far to grab our own version.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3851 post-img&#34; height=&#34;139&#34; src=&#34;forked.jpg&#34; width=&#34;618&#34;/&gt;And I&#39;ll use the Git GUI program to grab a copy of the code from the Repo to work with locally. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3852 post-img&#34; height=&#34;261&#34; src=&#34;vscode.jpg&#34; width=&#34;444&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Just to make sure that I am indeed running the action from my local repository clone of the action (instead of the original jakejarvis version because there&#39;s something I might not understand), I&#39;ll add an output to the action.yml file to get a string output from the action. This is all per the &lt;a href=&#34;https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions&#34;&gt;GitHub Actions Metadata Syntax page&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3853 post-img&#34; height=&#34;230&#34; src=&#34;firstChange.jpg&#34; width=&#34;568&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll also add a few echo statements to the entrypoint.sh file that runs in the Docker container, to hopefully validate that this shell script is running and whether it&#39;s entering the cloudfront invalidation step. Basically, I want to know if my setup (workflow, actions, and script) isn&#39;t properly creating a Cloudfront invalidation, or whether it&#39;s not running at all.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3854 post-img&#34; height=&#34;176&#34; src=&#34;cf-echos.jpg&#34; width=&#34;538&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Hmm, the results of those echo commands don&#39;t appear in our output. And neither does the output of the aws cloudfront command that the shell script is using. Which, according to the &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-invalidation.html&#34;&gt;AWS CLI Reference,&lt;/a&gt; should be pretty verbose. I&#39;m also not seeing the output from the lone echo command I stuck at the top of the shell script. Maybe this script isn&#39;t actually running?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s add a RUN echo command to the Dockerfile in our action to see if we can get that output.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3855 post-img&#34; height=&#34;202&#34; src=&#34;noecho.jpg&#34; width=&#34;645&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And no, it doesn&#39;t seem like we can - we should see that echo command right here between the Pip invocation and adding the entrypoint. So whatever action I&#39;m running, it doesn&#39;t seem to be the one I&#39;m modifying in this dockerfile. Let&#39;s se if we can&#39;t figure out why.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One thing that stands out is that I&#39;m targeting a specific release version of this action - namely, 0.5.1 just like the action I forked. Perhaps I need to create a new release with these changes, and then target that? I&#39;ll use the GitHub UI to create a 0.5.1.1 release and see if I can target that successfully and see the results of my echo commands.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3857 post-img&#34; height=&#34;225&#34; src=&#34;invalidcfcensored-1024x340.png&#34; width=&#34;678&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Aha! There&#39;s the echos, and a new error to track down! So I was committing new code to the repo, but because the action was referencing a previous release of the action, none of it made any difference. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems the action specification allows for targeting a branch of the action, rather than a specific release, which would make development more straightforward for sure. Just for yucks, let&#39;s see what happens when I remove any specifier and just use &lt;strong&gt;uses:JeffersGlass/s3-sync-action:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3858 post-img&#34; height=&#34;148&#34; src=&#34;errortag.png&#34; width=&#34;654&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Ahh, very broken. But setting it to target &lt;strong&gt;JeffersGlass/s3-sync-action@master&lt;/strong&gt; works as intended. Well, the error with the Cloudfront distribution is the same, but at least I can now see changes to the action as soon as I commit them, rather than needing to create another release.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This seems to be a permissions issue, given the language &#34;... is not authorized to perform cloudfront:CreateInvalidation on resource.&#34; Which makes sense - I&#39;ll go back into the IAM policy setup and add a handful of Cloudfront-related permissions to the policy that the GitHub action is using, and rerun the action.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3859 post-img&#34; height=&#34;208&#34; src=&#34;successfulCF.png&#34; width=&#34;546&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That looks a much better result! And the invalidation appears in the Cloudfront distribution&#39;s Invalidations tab as well. As a final test, let&#39;s make some further small changes to the index.html file, push them, and see if they&#39;ll update/invalidate the CF distribution in real time.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3861 post-img&#34; height=&#34;297&#34; src=&#34;pushedsuccess.png&#34; width=&#34;621&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Success! Now, any time a change is pushed to the main branch in the repo, the GitHub Action will push the contents of the public folder to the S3 bucket, and invalidate the associated CloudFront distribution so the results appear for all viewers in realtime. And that was our goal, after all.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Like I mentioned, I ultimately would be interested in using a simple static site generator to create the formatting for the site, rather than uploading raw html/css/js. And that will require some additional CD actions, as well as modifying the target of this push-to-s3 action. But I&#39;ve solved a fundamental component of a productive workflow, and I&#39;m thrilled.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Custom Domain</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-custom-domain/</link>
      <pubDate>Wed, 13 Oct 2021 19:27:02 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-custom-domain/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Since I already have a custom domain at &lt;strong&gt;jeff.glass &lt;/strong&gt;&lt;em&gt;(which is likely where you&#39;re reading this, if you&#39;re reading this around the time of posting&lt;/em&gt;), I&#39;d like to figure out how to point a subdomain of that site at my nascent Cloudfront/S3 static site. While I should probably also learn how to register a new domain through Amazon&#39;s Route 53 service, I think the end product will be cleaner.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I currently have the domain registered through NameCheap, and pointing to the DNS servers provided via my hosting at iWebFusion. The first thing I&#39;ll try is just using a CNAME to point &lt;strong&gt;resume.jeff.glass&lt;/strong&gt; to the URL provided by my Cloudfront distribution.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But alas:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-large wp-image-3813 post-img&#34; height=&#34;305&#34; src=&#34;403-1024x434.png&#34; width=&#34;720&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Some sites suggest that fixing this could be as simple as modifying a setting in the Cloudfront distribution settings:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3814 post-img&#34; height=&#34;169&#34; src=&#34;alternate.png&#34; width=&#34;564&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3815 post-img&#34; height=&#34;204&#34; src=&#34;trusted-cert.png&#34; width=&#34;825&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The key resource here is the article &lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html&#34;&gt;Using Alternate Domains and HTTPS&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;But it turns out, requesting certificates from the Amazon Certificate Manager is pretty simple. Click request certificate and specify what domains it applies to (which allows for using wildcard characters!). To validate that you do indeed control the domain you&#39;re requesting the certificate for, the ACM uses what they call &#34;DNS Validation,&#34; which involves adding a single CNAME record to your DNS Zone records. Essentially, they give you a long, random-looking &#34;subdomain&#34; URL to redirect to a long, random-looking amazon URL. Then, by querying whether your site actually performs the redirect as requested, they can verify that you were indeed able to modify the DNS behavior of the site and therefore are the owner of that domain.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One trick is that, to use the generated certificate with Cloudfront, the certificate must be requested in the us-east-1 region, which may not be the region your bucket is in. (Since my most recent bucket is in us-east-2, it seems like my certificates were defaulting there as well. Or perhaps its geolocating me? Unclear). In any case, the simplest thing to do is use the &#34;request certificate&#34; link on the Cloudfront distribution settings, which automatically launches the wizard to request a new certificate in us-east-1.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3819 post-img&#34; height=&#34;127&#34; src=&#34;request-certificate.png&#34; width=&#34;301&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;With that certificate selected and the settings saved, my new site is available at &lt;a href=&#34;https://resume.jeff.glass/&#34;&gt;https://resume.jeff.glass&lt;/a&gt;! Not that it&#39;s terribly interesting at the time of writing, but now it&#39;s got a tasteful URL.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3822 post-img&#34; height=&#34;98&#34; src=&#34;helloworld-big.png&#34; width=&#34;226&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Part of the reason I&#39;m trying to document all the twists and turns of this process has to do with a later goal of the Cloud Resume Challenge. Namely, goal 11, which reads in full:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;h2 class=&#34;italic&#34;&gt;12. Infrastructure as Code&lt;/h2&gt;
&lt;p class=&#34;italic post-p&#34;&gt;You should not be configuring your API resources – the DynamoDB table, the API Gateway, the Lambda function – manually, by clicking around in the AWS console. Instead, define them in an &lt;a href=&#34;https://aws.amazon.com/serverless/sam/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;AWS Serverless Application Model (SAM) template&lt;/a&gt; and deploy them using the AWS SAM CLI. This is called “&lt;a href=&#34;https://www.hashicorp.com/resources/what-is-infrastructure-as-code/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;infrastructure as code&lt;/a&gt;” or IaC. It saves you time in the long run.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This will be an entirely new area of exploration for me, and from just a little examination will involve encapsulating chunks of the existing setup work in a format that it can be recreated automatically. Which parts of the setup? Unclear. It doesn&#39;t seem like HTTPS and Cloudfront setup are part of that, but I figure it can&#39;t hurt to write down the edge cases doing this by hand. I&#39;d like to not trip over them again when I go to automate things. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt; &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Cloudfront for HTTPs</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-cloudfront-for-https/</link>
      <pubDate>Wed, 13 Oct 2021 16:28:31 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-cloudfront-for-https/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;To a layman&#39;s eye, using AWS Cloudfront to enable HTTPs on a website seems like using a bazooka to blast a butterfly - massively overkill with far more power than necessary. But this challenge is meant to use a pocket-sized project to explore big powerful tools, so hey, why not?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems like getting started with Cloudfront is relatively straightforward for my tiny, simple usecase. They&#39;ll even transfer up to 50 GB / 2 million requests for free each month as part of the AWS free tier, which is awfully nice of them.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-3801 post-img&#34; height=&#34;256&#34; src=&#34;cf1-300x256.png&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The Origin setup here seems straightforward, mostly selecting which resources want to get distributed out via Cloudfront&#39;s distribution network. I&#39;m not quite sure what an Origin Access Identity is - it seems like possibly this is a way to allow content to be distributed to low-latency access areas without it being directly accessible by the public? Perhaps for content used by a site but not directly accessed? More for me to learn there.&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3803 size-full post-img&#34; height=&#34;726&#34; src=&#34;origin.png&#34; width=&#34;789&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The default caching behaviors all seem plausible, but I&#39;ll opt to redirect http requests to https, so that all traffic is ultimately flowing over https.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3805 post-img&#34; height=&#34;279&#34; src=&#34;Viewer.png&#34; width=&#34;401&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;While I don&#39;t currently see a use for edge functions in my simple website, I did spend some time digging into just what the heck they are for my own learning. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll set the distribution to just US and Europe - no sense paying extra for the random scrape that might come in from overseas, it can take the slow route to Ohio. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It looks like there are options for custom SSL certificates if desired, but I&#39;m just as happy to let Amazon handle that.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3807 post-img&#34; height=&#34;166&#34; src=&#34;enabled.png&#34; width=&#34;631&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;And with that... it looks like my distribution is up and running, behind https... but is it really?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Going to https://.... gives me that little lock icon by the address bar that I need, but I can still access the http:// version unsecurely, which isn&#39;t ideal. Ah, perhaps I should try accessing the site via the new Cloudfront URL?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Oh.&lt;/p&gt;
&lt;figure class=&#34;wp-block-image size-large&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-3809 post-img&#34; src=&#34;deniedd-1024x183.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;Well that&#39;s not great.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, &lt;a href=&#34;https://serverfault.com/a/776143&#34;&gt;Stack Overflow comes to the rescue&lt;/a&gt;. Turns out, I was using the &lt;em&gt;bucket&lt;/em&gt; url instead of the &lt;em&gt;static website&lt;/em&gt;&lt;em&gt; &lt;/em&gt;url as the origin for the Cloudfront distribution. Copying over the correct URL from the S3 bucket solved the issue, and I can now access my (VERY SMALL) website via the generated Cloudfront URL over HTTPS.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;m getting the feeling that comes with the start of lots of new domains: checking the boxes and accomplishing the bare minimum for this challenge seems like it won&#39;t be too hard, but the real learning will come from going deep and looking for actual understanding and nuance in all of these disparate services and processes. So, I&#39;ll need to find a balance. Sometimes it&#39;ll be good to plow through things and get placeholders up, so long as I come back to deepen my learning later.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
    <item>
      <title>Getting Started with AWS</title>
      <link>https://jeff.glass/post/cloud-resume-challenge-getting-started-with-aws/</link>
      <pubDate>Tue, 12 Oct 2021 19:46:36 -0500</pubDate>
      
      <guid>https://jeff.glass/post/cloud-resume-challenge-getting-started-with-aws/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;I&#39;m always looking for ways to expand my skillset, and in an increasingly digital, work-from-home oriented world, having a firmer grasp on web technologies seems like not a bad thing. But, as someone who considers themselves a technically competent nerd with no real credentials to speak of, where to get started?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;a href=&#34;https://cloudresumechallenge.dev/&#34;&gt;The Cloud Resume Challenge&lt;/a&gt; seems like a useful, self-guided way to start, or at least a roadmap toward building a &#39;complete&#39; resume project. So here we go!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h1 class=&#39;text-2xl&#39;&gt;The Challenge: 16 Steps&lt;/h1&gt;
&lt;p class=&#34;post-p&#34;&gt;Completion of the challenge requires ticking 14 boxes to set up a simple static website on AWS with a required subset of features, acquiring a AWS Certified Cloud Practitioner certification, and wrapping it all up with a blog post about your experiences. Starting at the beginning, as usual, here&#39;s the start of the blog posts!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The AWS certificate requires a $100 investment and a genuine exam worth studying for, it seems. Something I imagine would be significantly easier to start studying for &lt;em&gt;after&lt;/em&gt; completing the legwork of the rest of the challenge. So we&#39;ll set that requirement aside for most of the following.&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Why AWS?&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;The Cloud Resume Challenge currently offers versions tailored to AWS, GCP, and Azure. I&#39;ve chosen to go with AWS for the moment, but I&#39;ll admit, this is a fairly arbitrary choice based on my naïve impressions of the Amazon/GCP/Azure offerings. I&#39;m sure I&#39;ll revise these opinions down the road, but my sense is:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
&lt;li&gt;Amazon has a wider array of services offered, more industry reach, and a longer history of cloud presence. It seems to have a reputation for harder-to-parse naming and access conventions.&lt;/li&gt;
&lt;li&gt;GCP has a somewhat friendly access/account model, but less industry reach and a shorter real world knowledgebase.&lt;/li&gt;
&lt;li&gt;Microsoft Azure seems (again, from an outsider&#39;s perspective) to be targeted at existing businesses that are used to Microsoft&#39;s products and tools&lt;/li&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;AWS, Azure and GCP: Market Shares and Growth Rate&#34; class=&#34;post-img&#34; height=&#34;393&#34; src=&#34;https://www.veritis.com/wp-content/uploads/2018/05/aws-azure-gcp-cloud-market-share.jpg&#34; width=&#34;700&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Image from Veritis.com, Oct 2020&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For a self-guided project, a deep well of online resources is really appealing. It doesn&#39;t look like I&#39;ll run into any significant limitations with any of the three platforms with this basic a project. With AWS seeming to be a market leader, it feels like I may as well go that way, and hopefully, what I learn will be semi-transferrable knowledge.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h1 class=&#34;text-2xl&#34;&gt;Setting up a Static Website on AWS S3&lt;/h1&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Getting Oriented&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;The cloud resume challenge page directs users to this page on AWS helpfully titled &#34;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html&#34;&gt;Hosting a Static Website using Amazon S3&lt;/a&gt;.&#34; Neat!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Since this is a static website (i.e. made up only of static resources like HTML and CSS, possibly with some client-side Javascript but no server-side action), it seems that a static website on S3 is essentially a bunch of files plopped into a folder on Amazon&#39;s servers that people can point their web browsers at and view. Well, I&#39;m sure a &#34;bucket&#34; is more complicated than just being a &lt;em&gt;folder&lt;/em&gt;... but I&#39;ll cross that bridge when I need to.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Let&#39;s look through the AWS info documents listed on that page.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteEndpoints.html&#34;&gt;Website Endpoints&lt;/a&gt; page indicates that, by making the contents of a bucket publicly accessible, anyone can point their browser at a fiddly URL like&lt;em&gt; http://&lt;span style=&#34;color: #ff0000;&#34;&gt;bucket-name&lt;/span&gt;.s3-website-&lt;span style=&#34;color: #ff0000;&#34;&gt;Region&lt;/span&gt;.amazonaws.com&lt;/em&gt; and have access to that content. It goes on to talk a little about how to point ones DNS provider of choice at these specific resources, to use a more human-friendly URL. Or, one might use Amazon&#39;s Route 53 to.... accomplish the same thing? The distinction eludes me at this point, but that feels like something I can come back to.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/EnableWebsiteHosting.html&#34;&gt;Enabling Website Hosting&lt;/a&gt; page seems to clarify a little more the steps needed to make a bucket available as website, saying: &#34;&lt;em&gt;When you configure a bucket as a static website, you must enable static website hosting, &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/IndexDocumentSupport.html&#34;&gt;configure an index document&lt;/a&gt;, and &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteAccessPermissionsReqd.html&#34;&gt;set permissions&lt;/a&gt;.&#34; &lt;/em&gt;It seems any of these steps can be done in the online S3 console, using API requests, via Amazon&#39;s SDK via code, or using their command line interface. While I&#39;m sure programmatic access to these tools is really useful if you&#39;re spinning up sites in an automated fashion, I imagine I&#39;ll mostly be using the S3 console.&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;A Placeholder Page&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;None of this seems terribly complicated - I need to put some files in a bucket, then configure some settings so Amazon knows where to point people when they access my (very fiddly) URL. So I&#39;ll start by creating a very basic placeholder page to upload and play with. Time to get my hands dirty and learn.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For most of my scripting work at my day job, I use VS Code, which I happen to know has an HTML Boilerplate extension. The very generic HTML it generates is:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src=&#34;https://gist.github.com/JeffersGlass/c8b4479f21195de12ec59cb2f94f17ef.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, we&#39;ve got our basic HTML document, with a &amp;lt;head&amp;gt; tag to start off, a &amp;lt;body&amp;gt; with basically no content yet... and that&#39;s it. Plus some commenty-things that seem to be dealing with older versions of internet explorer.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s also a lot in here I don&#39;t understand yet, especially in the &amp;lt;head&amp;gt; section. What is a &amp;lt;meta&amp;gt; tag? Why do I need a viewport? I&#39;ll add these to my list of questions to answer down the road. I&#39;m just diving forward to get this thing online at this point.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I&#39;ll add a brief &amp;lt;p&amp;gt; tag to the above boilerplate with the text &#34;Hello, world!&#34; That&#39;s it. That&#39;s the whole website for now.&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Making a Bucket&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;If this whole process is really as simple as allowing the public to see the files in one of my buckets, it feels like I&#39;ll need this file (&lt;em&gt;now called index.html&lt;/em&gt;) to be in an S3 bucket. Let&#39;s figure out how to do that.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Searching for &#34;S3&#34; in the top search bar on AWS brings up a listing for the Simple Scalable Storage page...&lt;/p&gt;
&lt;figure class=&#34;wp-block-image size-full&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-3768 post-img&#34; src=&#34;image.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;...which has a create bucket button!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I think &#34;Hello_World&#34; would be a good name for this bucket... oh, except bucket names can only have lowercase letters, numbers, periods, and hyphens... and must be unique Alright, &#34;hello-world-jg-cr-1&#34; it is. I don&#39;t know what the advantages to the different regions are, but given that I&#39;ll likely be the only traffic to this site, I&#39;ll chosen US East (Ohio) us-east-2 since I&#39;m in the US Midwest.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-full wp-image-3774 post-img&#34; height=&#34;313&#34; src=&#34;bucketname.png&#34; width=&#34;641&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Aha! The next section talks about access settings. I recall from the earlier page that setting permissions to allow public access is something I&#39;ll need to do to allow the site to be publicly available. Seems I&#39;m able to do that right now, though I do have to check a big scary box saying I understand the risks.&lt;/p&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter wp-image-3775 size-full post-img&#34; height=&#34;664&#34; src=&#34;access.png&#34; width=&#34;780&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;There are some further options here. Versioning, which seems like it will store &lt;em&gt;every change to an object&lt;/em&gt; unless otherwise specified, which seems like overkill for this tiny bad website. Tags, which may be interesting later. Encryption, which, again, overkill. And object locking, to prevent the accidental deletion of objects, which would probably be more useful if I were adding/removing objects programmatically. I&#39;ll leave all those features as default for now.&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Uploading&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Hey, I&#39;ve got a bucket! With nothing it, it, but it is indeed, as promised, a bucket. And it seems I can just upload my &lt;em&gt;index.html &lt;/em&gt;file using the WebUI...&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Ah, here&#39;s some things I&#39;ll definitely want to go deep on at some point: &lt;strong&gt;permissions &lt;/strong&gt;and &lt;strong&gt;storage types&lt;/strong&gt;. I know the different types of storage will cost differerent amounts and have different restrictions, but I&#39;ll leave this as the default &#34;Standard&#34; for now. There are a couple of pre-defined &lt;em&gt;access control lists&lt;/em&gt;, but given that the &#34;Setting Permissions for Website Access&#34; page earlier has a specific setup recommended, I&#39;m going to leave this predefined as Private for now and change things momentarily, I think.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-3778 post-img&#34; height=&#34;122&#34; src=&#34;succeeded-300x122.png&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Upload succeeded! Of course, trying to access that file online at the moment only yields an Access Denied error, but that was to be expected. I haven&#39;t completed all the required steps yet.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;script src =&#34;https://gist.github.com/JeffersGlass/103390d195bc0e4352458043a474a5e1.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Static Website Hosting&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Going back into the list of buckets, selecting my newly formed bucket, and clicking on its Properties tab, it&#39;s dead easy to enable the &#34;Static Website Hosting&#34; setting as recommended:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-3780 post-img&#34; height=&#34;260&#34; src=&#34;static-300x260.png&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;It seems this step also takes care of the &#34;Configuring an Index Document&#34; step I anticipated from above. I enter &#34;index.html&#34; as my index document, so AWS knows what file to serve up when users access the &#34;root&#34; of the bucket.&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Permissions&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Since I elected not to configure my permissions automatically before, I&#39;ll go back and do that now, following along with the &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteAccessPermissionsReqd.html&#34;&gt;Setting Permissions for Website Access&lt;/a&gt; page. This is essentially copying and pasting the pre-generated permissions text into the in-browser permissions editor window and hitting save. &lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-3781 post-img&#34; height=&#34;300&#34; src=&#34;permsisions-300x300.png&#34; width=&#34;300&#34;/&gt;&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Success&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Now, if I go to &lt;img alt=&#34;&#34; class=&#34;aligncenter size-medium wp-image-3782 post-img&#34; height=&#34;56&#34; src=&#34;helloworld-300x56.png&#34; width=&#34;300&#34;/&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Alright! My first website hosted on AWS! So clean, so crisp, so minimalistic. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;h1 class=&#34;text-2xl&#34;&gt;Next Steps&lt;/h1&gt;
&lt;p class=&#34;post-p&#34;&gt;Very loosely speaking, this checks off one-and-a-half of the 16 points on the Cloud Resume Challenge checklist:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(4) Static Website&lt;/strong&gt; - Your HTML resume should be deployed online as an Amazon S3 Static Website.&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(16) Blog Post&lt;/strong&gt; - Link a short blog post describing some of the things you learned. (Of course, this is not that blog post, but is a starting point and framework for them).&lt;/p&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;To my eye, the remaining 14 goals fall into 5 separate topics. Here&#39;s what I think each entails, and which bullet points on the Cloud Resume Challenge they tick off:&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Site Content&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;As catchy as &#34;Hello World&#34; is, a resume it is not. This chunk involves making the website into meaningful content, formatted in a nice way. Possibly with basic, general HTML, possibly with some kind of interesting framework. But content should the primary focus of this chunk. I&#39;m not sure what form that will take, to be honest, but something better than boilerplate would of course be necessary.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This covers goals:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(2) HTML&lt;/strong&gt; - Your resume needs to be written in HTML&lt;br/&gt;&lt;strong&gt;(3) CSS&lt;/strong&gt; - Your resume needs to be styled with CSS&lt;/p&gt;&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Basic AWS Infrastructure&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;A cumbersome URL sitting in a bucket is not the most user friendly interface, nor the most secure. I&#39;ll need to set up a proper DNS address for my new site, and use something like Cloudfront to serve the site over https. Since I&#39;m already somewhat familiar with these processes outside of AWS, I hope this will be both educational and fairly straightforward.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This covers goals:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(5) HTTPS&lt;/strong&gt; - The S3 Website URL should use HTTPs for security&lt;br/&gt;(&lt;strong&gt;6) DNS&lt;/strong&gt; - Point a custom DNS domain name to the site.&lt;/p&gt;&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Site Features&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;There&#39;s a half-dozen goals in the Challenge that seem oriented toward exposing the participant to slightly more advanced website design. The result is a simple visitor counter, but it uses Javascript to query a database via an API and a Lambda written in python, that should be well tested and defined using a Serverless Application Model. I&#39;m sure I&#39;ll find out what a SAM is along the way; I know what most of the other words are at least.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This covers goals:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(7) Javascript&lt;/strong&gt; - Your resume webpage should include a visitor counter that displayed how many people have accessed the site.&lt;br/&gt;&lt;strong&gt;(8) Database&lt;/strong&gt; - The visitor counter will need to retrieve and update its count in a database somewhere.&lt;br/&gt;&lt;strong&gt;(9) API&lt;/strong&gt; - You will need to create an API that accepts requests from your web app and communicates with the database.&lt;br/&gt;&lt;strong&gt;(10) Python&lt;/strong&gt; - Write a bit of Python code in the Lambda function to achieve the API functionality.&lt;br/&gt;&lt;strong&gt;(11) Tests&lt;/strong&gt; - Include some tests for your Python code&lt;br/&gt;&lt;strong&gt;(12) Infrastructure as Code&lt;/strong&gt; - Define your database, API Gateway, and Lambda function in an AWS Serverless Application Model (SAM) template and deploy them&lt;/p&gt;&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Source Management/Deployment&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;You&#39;re telling me that manually uploading &lt;em&gt;index.html&lt;/em&gt; from my hard-drive to a bucket isn&#39;t website development best-practices? Rude.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This chunk actually involves creating two separate GitHub repositories: one to manage the actual content of the site; the other for the backend features developed above. Both will apparently be able to be automatically deployed to their respective parts of the AWS infrastructure, and to only do so if the corrects tests pass. Neat!&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This covers goals:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(13) Source Control&lt;/strong&gt; - Create a GitHub repository for your backend code.&lt;br/&gt;&lt;strong&gt;(14) CI/CD Back End&lt;/strong&gt; - Set up GitHub actions such that when you push an update to your Serverless Application Model template or Python code, your tests get run, and, if passing, the changes get packaged and pushed to AWS.&lt;br/&gt;&lt;strong&gt;(15) CI/CD Front End&lt;/strong&gt; - Create a second GitHub repository for your frontend code; configure Github actions so that when you push new code, your website gets updated.&lt;/p&gt;&lt;/p&gt;
&lt;h2 class=&#34;text-xl&#34;&gt;Certification&lt;/h2 class=&#34;text-xl&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;To have formally completed the Cloud Resume challenge, one needs to finish the required AWS certification. I suspect this will be the final thing I complete, as its sort of separate from the process of actually constructing the site.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This covers goal:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;p class=&#34;post-p&#34; style=&#34;padding-left: 40px;&#34;&gt;&lt;strong&gt;(1) Certification&lt;/strong&gt; - Your resume needs to have the AWS Cloud Practitioner Certification on it.&lt;/p&gt;&lt;/p&gt;
&lt;h1 class=&#34;text-2xl&#34;&gt;Onward&lt;/h1&gt;
&lt;p class=&#34;post-p&#34;&gt;So where to go next? My impulse is to start with with the GitHub repositories, to make development easier and since I&#39;m already fairly competent with git / GitHub as a workflow. Perhaps then I&#39;ll dig into HTTPS/DNS next, since hopefully those straightforward. That leaves what feels like the larger development fronts - actual content, and all the backend voodoo to implement the guest tracker. Which may actually be nice to bounce between, to keep the juices flowing when I stall on one. And those projects get far enough along their paths, it probably makes sense to start integrating the CI/CD pieces to make that process smoother. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;That&#39;s the thought for now, but of course, no battle plan survives contact with the enemy. But it does all sound like fun.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;/p&gt;
</description>
      &lt;
    </item>
    
  </channel>
</rss>