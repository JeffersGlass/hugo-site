<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>electronics on Jeff Glass</title>
    <link>https://jeff.glass/tags/electronics/</link>
    <description>Recent content in electronics on Jeff Glass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Mar 2022 00:05:00 -0500</lastBuildDate><atom:link href="https://jeff.glass/tags/electronics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Soft Shutdown and Consistent Boot on Power Loss</title>
      <link>https://jeff.glass/post/quick-dirty-system-power/</link>
      <pubDate>Sun, 13 Mar 2022 00:05:00 -0500</pubDate>
      
      <guid>https://jeff.glass/post/quick-dirty-system-power/</guid>
      <description>&lt;p class=&#34;italic post-p&#34;&gt;Tl;DR Computers hate having their power abruptly cut. A UPS, an Adafruit Feather board, and some python hackery keeps computers booting and shutting down gracefully when power is yanked and restored, deliberately or not.&lt;/p&gt;
&lt;p class=&#34;font-bold post-p&#34;&gt;Update: The &lt;a href=&#34;https://hackaday.com/2022/03/18/power-cycling-museum-computers-on-the-cheap/&#34;&gt;comments on the Hackaday post&lt;/a&gt; had a lot of other interesting solutions, some of which I&#39;d considered and some of which I didn&#39;t. Skip to the &lt;a href=&#34;#othersolutions&#34;&gt;Other Solutions&lt;/a&gt; for evaluation of these.&lt;/p&gt;
&lt;hr/&gt;
&lt;p class=&#34;post-p&#34;&gt;My dayjob involves solving technical problems for a large, multi-acre education facility with over 400 computer-driven interactives. To prolong the life of these devices (many of which are built around off-the-shelf computers and monitors), we like to power them down after operating hours and start them up in the morning. These are mostly windows machines, and just like a desktop they &lt;span class=&#34;italic&#34;&gt;love&lt;/span&gt; to be rebooted.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;What makes this challenging is both the number and placement of these devices. While many are in dedicated control rooms with &lt;a href=&#34;&#34;&gt;linked KVM systems&lt;/a&gt;, even using a mouse and keyboard to manually shut down 400 PCs would take the onsite staff far longer than designed, and could be error-prone. Worse, some computers are embedded inside consoles, cabinets, and displays, making the process of walking around and hitting power buttons (where accessible) or using a wireless keyboard (where not) even longer. The same is true of startup, except that a wireless keyboard isn&#39;t an option in that case. A central startup and shutdown solution is essential.&lt;/p&gt;
&lt;div class=&#34;max-w-xl px-10 mx-auto xl:float-right&#34;&gt;
    &lt;img src=&#34;medialon.jpg&#34; alt=&#34;A complex touchscreen controller based around a Medialon control system&#34; class=&#34;post-img&#34;&gt;
    &lt;p class=&#34;max-w-xl post-img-caption&#34;&gt;Not from my workplace, but grabbed from google images - just as an example of how involved a software-defined control system can be.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Of course, there are many ways to make this happen. The most ideal, when the money is available, is to use a central controller, like a &lt;a href=&#34;https://medialon.com/products/showmaster-pro/&#34;&gt;Medialon System&lt;/a&gt;, &lt;a href=&#34;https://www.crestron.com/Products/Control-Hardware-Software/Hardware&#34;&gt;Creston Controller&lt;/a&gt;, &lt;a href=&#34;https://derivative.ca/&#34;&gt;TouchDesigner interface&lt;/a&gt;, or similar. The control is put in charge of signalling the computers to wake up (via Wake-on-LAN), shut down (through  proprietary software modules), and handles cycling &lt;a href=&#34;https://www.se.com/us/en/product-range/7340-powerlink-intelligent-panelboards/#overview&#34;&gt;remotely-controller AC breakers&lt;/a&gt;, turning projcets on and off via various ethernet protocols, and so on. The dream is for whoever&#39;s operating the system to press one button (or click one button on a screen) to have the whole system turn on, or off.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Life is rarely a dream.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;We sometimes run into a situation where, for reasons of cost, planning, location, or timing, there is no exterior control of any kind. There&#39;s just a breaker in a panel (which may or may not be remote controlled) providing power to an installed cabinet. And as much as PC&#39;s love to be rebooted, they &lt;span class=&#34;italic&#34;&gt;hate&lt;/span&gt; having their power yanked unexpectedly.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So the challenge is: &lt;span class=&#34;font-bold&#34;&gt;given only control over their power, can we create a system that soft-starts and soft-shuts-down a PC?&lt;/span&gt; &lt;span class=&#34;italic&#34;&gt;(Yes we can, or this would be a very short post.)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;hr/&gt;&lt;/p&gt;
&lt;p class=&#34;post-h2&#34;&gt;Shutdown&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Getting a PC to soft shutdown on power loss is relatively straightfoward. There are (fairly fancy) &lt;a href=&#34;https://www.apc.com/shop/us/en/categories/power/uninterruptible-power-supply-ups-/ups-management/ups-network-management-cards/N-o7asnt&#34;&gt;networkable UPS systems and add-on cards&lt;/a&gt; that are meant just for this kind of thing. When mains power is killed, the UPS kicks into keep the computer(s) in question on, while sending a network message to do... whatever you want. Wait a minute then hibernate, run a backup, dump memory, etc.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Unfortunately, these solutions are somewhat cost-prohibitive, and also rather large. They seem designed for rackmount systems where they could be used to manage a bank of servers. The particular situation that I&#39;m building this for for is very tightly space-confired, and doing it for less than a grand would be great.&lt;/p&gt;
&lt;div class=&#34;max-w-lg px-10 mx-auto xl:float-left&#34;&gt;
    &lt;img src=&#34;apcups.jpg&#34; alt=&#34;A complex touchscreen controller based around a Medialon control system&#34; class=&#34;post-img&#34;&gt;
    &lt;p class=&#34;max-w-xl post-img-caption&#34;&gt;A cheap, off the shelf, 300W / ~30wH UPS. At time of writing, about $60 shipped.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Thankfully, there&#39;s a way to make this work on a cheaper and smaller UPS. Many off-the-shelf UPS&#39;s have the abilitiy to connect directly to a single PC via USB connection. APC, who makes consumer UPSes, has such a connection on even their &lt;a href=&#34;https://amzn.to/31ciSpg&#34;&gt;very basic units&lt;/a&gt;. They even include &lt;a href=&#34;https://www.apc.com/shop/us/en/categories/power/uninterruptible-power-supply-ups-/ups-management/powerchute-personal-edition/N-1b6nbpp&#34;&gt;some basic software (Powerchute)&lt;/a&gt; that can tell the computer to hibernate, shutdown, wait a few minutes and shutdown, etc when the batteries kick in. Sounds perfect, no?&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Not quite - we only have the ability to hook one computer directly to the UPS, but we&#39;d like to power multiple small computers &lt;a href=&#34;https://www.intel.com/content/www/us/en/products/details/nuc.html&#34;&gt;(often NUCs)&lt;/a&gt; off a single UPS. And there&#39;s no obvious way to hook into the Powerchute software directly. Having one UPS per computer would be an option, but a needlessly expensive one. Sometimes there&#39;s not even enough room for that to be possible.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The workaround is straightfoward - the Powerchute software logs an event to the Window System Log when it swtches to battery power. We can use Window&#39;s built-in task scheduling service to fire off a script of our choosing when this event occurs. Then it&#39;s just a matter of crafting some very basic network scripts to allow the UPS-connected computer to tell other computers to shut down, then shut itself down.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s what I came up with. It&#39;s not terrible robust, secure, or debuggable, but it&#39;s getting the job done for now. The client script runs on the computer connected to a UPS, and is triggered when the UPS switches to battery power. The server runs on as many connected computers as we want, and should be set to run at startup. The (static) IPs of the computers running the server script must be enterred in the client script.&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;client.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;This is one of a pair of programs meant to allow one computer to shutdown many computers in an exhibit context.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;This program (&amp;#39;client&amp;#39;) is meant to run on the singular computer that recveives a set signal to shutdown the exhibit. This signal may come from a button or switch, a system log (Say, via UPS), etc, which then runs this script.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;The server program should be running on any computers that need to be shutdown in this context.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;This client program steps through the list of provided servers and tells them to shut down, then shuts itself down.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;socket&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;os&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; sleep

socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;setdefaulttimeout(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;)
PORT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1933&lt;/span&gt;
MSG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;SHUTDOWN NOW&amp;#39;&lt;/span&gt;
RSP &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;SHUTDOWN CONFIRMED&amp;#34;&lt;/span&gt;

deviceIPs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;172.16.0.2&amp;#34;&lt;/span&gt;
]
attempts &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
MAX_ATTEMPTS &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Client program is contacting remote computers to shut them down&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(deviceIPs) &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:
    attempts &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; attempts &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; MAX_ATTEMPTS:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;System could not shut down the following IPs: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;deviceIPs&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Shutting down self in 15 seconds&amp;#34;&lt;/span&gt;)
        sleep(&lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; ip &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; deviceIPs:
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;socket(socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;AF_INET, socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;SOCK_STREAM) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; s:
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Attempting to connect tp &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;ip&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;, attempt &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;attempts&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; of &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;MAX_ATTEMPTS&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; (timeout is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;getdefaulttimeout())&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;s)&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
                s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;connect((ip, PORT))
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;TimeoutError&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; err:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Connection timed out&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Connection successful, sending message: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;MSG&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
            s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sendall(MSG)
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#f60&#34;&gt;1024&lt;/span&gt;)
            &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Received &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;repr&lt;/span&gt;(data)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; data[:&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(RSP)] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; RSP:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Received shutdown confirmation message from host at ip &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;ip&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
                deviceIPs&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;remove(ip)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Got some other message than we expected from host at ip &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;ip&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
    sleep(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Successfully shut down all remote IPs, shutting down self in 10 seconds&amp;#34;&lt;/span&gt;)
    sleep(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;)
os&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;shutdown /s /f /t 10&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;pb-8 post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;server.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;This is one of a pair of programs meant to allow one computer to shut down many computers in an exhibit context.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;This program (&amp;#39;server&amp;#39;) runs on any computer that is NOT receiving the direct singal to shut down.
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;The &amp;#39;client&amp;#39; program should run on the singular computer in the exhibit context that receives the signal to shutdown the exhibit (from a UPS, switch, etc)
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;socket&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;os&lt;/span&gt;

HOST &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
PORT &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1933&lt;/span&gt;
MSG &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;SHUTDOWN NOW&amp;#34;&lt;/span&gt;
RSP &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;SHUTDOWN CONFIRMED&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Server program is listening for shutdown commands from primary client&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;socket(socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;AF_INET, socket&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;SOCK_STREAM) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; s:
    s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;bind((HOST, PORT))
    s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;listen()
    conn, addr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;accept()
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; conn:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Connected by &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;addr&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
            data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#f60&#34;&gt;1024&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; data[:&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(MSG)] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; MSG:
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Got shutdown MSG &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
                conn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;sendall(RSP)
                os&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;shutdown /s /f /t 10&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;: 
                &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Got &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data&lt;span style=&#34;color:#a00&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; instead of expected &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;data[:&lt;span style=&#34;color:#366&#34;&gt;len&lt;/span&gt;(MSG)]&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; data:
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;post-h2&#34;&gt;Startup&lt;/p&gt;
&lt;div class=&#34;max-w-lg px-10 mx-auto xl:float-right&#34;&gt;
    &lt;img src=&#34;feather.jpg&#34; alt=&#34;A complex touchscreen controller based around a Medialon control system&#34; class=&#34;post-img&#34;&gt;
    &lt;p class=&#34;max-w-xl post-img-caption&#34;&gt;An Adafruit ESP-32 Featherwing - the purple Neopixel light indicates the unit has booted but does not see an attached ethernet cable&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&#34;post-p&#34;&gt;Almost every BIOS has the ability to wake the system when power is restored following an unexpected power loss. Most have the ability to boot the computer when power is removed and restored, regardless of whether the computer was gently shut down or rudely had its power cut. Unfortunately, neither of these options work for us - since the computer is on a UPS, as far the the power supply is concerned,&lt;span class=&#34;italic&#34;&gt; the computer never loses power.&lt;/span&gt; So, we&#39;ll have to rely on some other mechanism to detect when power is restored to cause the computer(s) to boot.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The hammer for this particular nail is a small, ethernet-capable microcontroller that sends out Wake-on-LAN packets at regular intervals whenever its powered on. We plug this microcontroller into an outlet &lt;span class=&#34;underline&#34;&gt;not&lt;/span&gt; backed by the UPS - when power is lost, the microcontroller shuts off almost immediately, allowing the computers to shut down as above. When power is restored, the microcontroller starts up and, after a brief delay, starts sending out Wake-On-LAN messages to all the MAC addresses it knows about.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;I chose the &lt;a href=&#34;https://www.adafruit.com/product/5000&#34;&gt;Adafruit ESP-32 Feather&lt;/a&gt; for a couple reasons. One, Python is &lt;a href=&#34;../../tags/python&#34;&gt;my language of choice&lt;/a&gt; for hacking things together, and I was excited to play more with &lt;a href=&#34;https://circuitpython.readthedocs.io/en/latest/README.html&#34;&gt;CircuitPython&lt;/a&gt;. Second, Adafruit&#39;s commitment to documentation and process is just great, and I wanted to get this project up on its feet quickly. And third, Adafruit&#39;s Featherwing line of accessory boards (specifically the &lt;a href=&#34;https://www.adafruit.com/product/3201&#34;&gt;Ethernet Featherwing&lt;/a&gt;) made it easy to get an Ethernet Stack and PHY running with minimal custom effort.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, I bashed together the following code to wake up, establish a network connection, and send a Wake-On-LAN message to each MAC address in a given array every 15 seconds or so:&lt;/p&gt;
&lt;p class=&#34;code-title&#34;&gt;code.py&lt;/p&gt;
&lt;div class=&#34;overflow-y-scroll h-124&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;76
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# SPDX-License-Identifier: MIT&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;board&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;busio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;digitalio&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;neopixel&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; sleep

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;adafruit_wiznet5k.adafruit_wiznet5k&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; WIZNET5K, SNMR_UDP, SNSR_SOCK_UDP
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;adafruit_wiznet5k.adafruit_wiznet5k_socket&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;socket&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;adafruit_requests&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;requests&lt;/span&gt;

pixel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; neopixel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;NeoPixel(board&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;NEOPIXEL, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)

targetMACs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
    [&lt;span style=&#34;color:#f60&#34;&gt;0x12&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x34&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x56&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x78&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x9A&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0xBC&lt;/span&gt;], &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Computer NW&lt;/span&gt;
    [&lt;span style=&#34;color:#f60&#34;&gt;0x12&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x34&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x56&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x78&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0x9A&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0xBD&lt;/span&gt;], &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Computer NE&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#... more computers as necessary&lt;/span&gt;
    ]

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Initialize ethernet interface with DHCP&lt;/span&gt;
cs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; digitalio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;DigitalInOut(board&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;D10)
spi_bus &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; busio&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;SPI(board&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;SCK, MOSI&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;board&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;MOSI, MISO&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;board&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;MISO)
eth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; WIZNET5K(spi_bus, cs, is_dhcp&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;)

ip &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;172.16.0.10&amp;#34;&lt;/span&gt;)
subnet_mask &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;255.255.0.0&amp;#34;&lt;/span&gt;)
gateway &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;172.16.0.10&amp;#34;&lt;/span&gt;)
dns &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;172.16.0.10&amp;#34;&lt;/span&gt;)
eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ifconfig &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (ip, subnet_mask, gateway, dns)
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#If using DHCP, uncomment the following line&lt;/span&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#eth.ifconfig = (ip, subnet_mask, None, None)&lt;/span&gt;

&lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Assigned Ethernet Address: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pretty_ip(eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ip_address)))

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Built-in neopixel will be purple while waiting for Ethernet to connect&lt;/span&gt;
pixel[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;255&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;255&lt;/span&gt;)

retry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; retry:
    retry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;socket_connect(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;unpretty_ip(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;172.16.255.255&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#f60&#34;&gt;556&lt;/span&gt;, conn_mode&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;SNMR_UDP)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;AssertionError&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; err:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;str&lt;/span&gt;(err) &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;, retrying in 10 Seconds&amp;#34;&lt;/span&gt;)
        retry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        sleep(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;)

    status &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;socket_status(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;int&lt;/span&gt;(b) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; status] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; [SNSR_SOCK_UDP]:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Socket 0 connected as UDP&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Socket not connected, status is &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;status&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        retry &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;
        sleep(&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;)

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Built in neopixel will be blue when standing by to send WOL packets&lt;/span&gt;
pixel[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;255&lt;/span&gt;)
sleep(&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;:
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#Built in neopixel will be green when sending WOL packets&lt;/span&gt;
    pixel[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;255&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; i, target &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;enumerate&lt;/span&gt;(targetMACs):
        
        fullPacket &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bytearray&lt;/span&gt;([&lt;span style=&#34;color:#f60&#34;&gt;0xFF&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; target &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;)
        &lt;span style=&#34;color:#366&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Sending WoL packet to computer &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; with mac address &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;{&lt;/span&gt;eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;pretty_mac(target)&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&lt;/span&gt;)
        eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;socket_write(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, fullPacket, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
        
        sleep(&lt;span style=&#34;color:#f60&#34;&gt;.1&lt;/span&gt;)

    pixel[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;255&lt;/span&gt;)
    sleep(&lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt;)

eth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;socket_close(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&#34;post-img-caption&#34;&gt;Scroll to see full code&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;If you&#39;re making use of this code yourself, you&#39;ll need the following libraries in your CIRCUITPY/libs folder:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;adafruit_wiznet5k&lt;/li&gt;
    &lt;li&gt;adafruit_requests.mpy&lt;/li&gt;
    &lt;li&gt;neopixel.mpy&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-p&#34;&gt;And, if it&#39;s helpful, here is the basic process of getting the ESP32-S2 feather up and running (summarized from &lt;a href=&#34;https://learn.adafruit.com/adafruit-esp32-s2-feather/install-uf2-bootloader&#34;&gt;Adafruit&#39;s excellent guide&lt;/a&gt;):&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Download the appropriate &lt;a href=&#34;https://circuitpython.org/board/adafruit_feather_esp32s2/&#34;&gt;Bootloader .BIN File&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://learn.adafruit.com/adafruit-esp32-s2-feather/install-uf2-bootloader#step-2-place-your-board-in-bootloader-mode-3089837-8&#34;&gt;Put the board in bootloader mode&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Use the online &lt;a href=&#34;https://adafruit.github.io/Adafruit_WebSerial_ESPTool/&#34;&gt;Adafruit ESPTool and Webserial&lt;/a&gt; tool to burn BIN file to the ESP32&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;Reset the feather - it will appear as an attached USB drive called CIRCUITPY, onto which the above code can be dropped&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;pb-4 post-h2&#34;&gt;System Diagram&lt;/p&gt;
&lt;img src=&#34;networkMap.png&#34; alt=&#34;&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-h2&#34;&gt;Step-by-Step Instructions&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;For those who came here looking for an actual step-by-step how-to, here&#39;s the full process of getting this system set up. (This is based on my particular steps with the Intel NUCs and APC UPS in the most recent setup - some steps, especially relating to the BIOS, may need to be adjusted for your hardware.)&lt;/p&gt;
&lt;p class=&#34;pb-2 post-h3&#34;&gt;Computer Info Gathering&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Identify the MAC addresses of the relevent NICs on all the computers you intend to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;pb-2 post-h3&#34;&gt;Feather Prep&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Solder headers onto the Adafruit ESP32 Feather and Ethernet featherwing, as necessary. Attach the two together.&lt;/li&gt;
    &lt;li&gt;Using the steps above, prepare the feather with its bootloader.&lt;/li&gt;
    &lt;li&gt;Load the code above onto the Feather.&lt;/li&gt;
    &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li class=&#34;italic&#34;&gt;Modify the list of MAC addresses in the code to include all of the MAC addresses you previously identified.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/ul&gt;
&lt;p class=&#34;pb-2 post-h3&#34;&gt;Physical Install&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Install the UPS, connected to the (switchable or unpredicable) power source. It may need to charge for several hours before it&#39;s usable.&lt;/li&gt;
    &lt;li&gt;Install the network switch, plugged into the battery-backed power on the UPS. A cheap unmanaged switch will do.&lt;/li&gt;
    &lt;li&gt;Install the computer(s). Plug them into the battery-backed power on the UPS&lt;/li&gt;
    &lt;li&gt;Plug the Feather assembly you prepped earlier into the NON-battery-backed power on the UPS.&lt;/li&gt;
    &lt;li&gt;Use CAT cables to attach the computers and Feather to the network switch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&#34;pb-2 post-h3&#34;&gt;Wake on Lan Setup&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;In both computer&#39;s BIOS&#39;s&#34;:&lt;/li&gt;
    &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li&gt;Make sure &#39;Wake on LAN from S4/S5 is set to &#39;Power On - Normal Boot&#39;&lt;/li&gt;
        &lt;li&gt;Make sure &#39;Deep S4/S5&#39; is Off&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;In both computer&#39;s Device Managers:&lt;/li&gt;
    &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li&gt;Find the network interface that is plugged into the network switch, and open its settings.&lt;/li&gt;
        &lt;li&gt;In the Power Management Tab:&lt;/li&gt;
        &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
            &lt;li&gt;Make sure &#39;Allow the computer to turn off this device&#39; is OFF&lt;/li&gt;
            &lt;li&gt;Make sure &#39;Allow this device to wake the computer&#39; is ON&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;In the Advanced Tab: Make sure &#39;Wake on Magic Packet&#39; is ENABLED&lt;/li&gt;
    &lt;/ul&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-h3&#34;&gt;Control Computer Setup&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;This will be the computer listening to the status of the UPS, and telling the other computers to turn off. There should be only one per setup.&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Assign the computer a static IP on the NIC you&#39;re using. The code above assumes this is &lt;code class=&#34;code&#34;&gt;172.16.0.1&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Plug the USB cable from the UPS into the control computer.&lt;/li&gt;
    &lt;li&gt;If not prompted, manually download and install the &lt;a href=&#34;https://www.apc.com/shop/us/en/categories/power/uninterruptible-power-supply-ups-/ups-management/powerchute-personal-edition/N-1b6nbpp&#34;&gt;Powerchute Control Software&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Unplug the UPS from wall-power once and plug it back in, to log the necessary events in the System Log.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Install Python&lt;/a&gt;. I used Python 3.10.0 at time of writing, but any later version should also be fine.&lt;/li&gt;
    &lt;li&gt;Copy the &lt;code class=&#34;code&#34;&gt;client.py&lt;/code&gt; code from above to a convienient file location on the computer (desktop, My Documents, etc).&lt;/li&gt;
    &lt;li&gt;In Task Scheduler, add a new event:&lt;/li&gt;
    &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
        &lt;li&gt;Title: Shutdown on Power Loss to UPS&lt;/li&gt;
        &lt;li&gt;Triggers:&lt;/li&gt;
        &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
            &lt;li&gt;On an Event&lt;/li&gt;
            &lt;li&gt;Log: Application&lt;/li&gt;
            &lt;li&gt;Source: APC UPS Service&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;Actions:&lt;/li&gt;
        &lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
            &lt;li&gt;Start a Program&lt;/li&gt;
            &lt;li&gt;Select &lt;code class=&#34;code&#34;&gt;client.py&lt;/code&gt; script from wherever you put it&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/ul&gt;
&lt;/ul&gt;
&lt;p class=&#34;post-h3&#34;&gt;Target Computer Setup&lt;/p&gt;
&lt;p class=&#34;italic post-p&#34;&gt;These computers will run a script on boot that listens for commands from the client computer to shut down. There can be as many of these per system as you like.&lt;/p&gt;
&lt;ul class=&#34;pl-8 text-justify list-disc list-outside&#34;&gt;
    &lt;li&gt;Assign the computer a static IP on the NIC you&#39;re using. The code above assumes this is &lt;code class=&#34;code&#34;&gt;172.16.0.2&lt;/code&gt;; if you add additional computers, you will need to add them to them to the deviceIPs array in the &lt;code class=&#34;code&#34;&gt;client.py&lt;/code&gt; script.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Install Python&lt;/a&gt;. I used Python 3.10.0 at time of writing, but any later version should also be fine.&lt;/li&gt;
    &lt;li&gt;Copy the &lt;code class=&#34;code&#34;&gt;server.py&lt;/code&gt; code from above to a convienient file location on the computer (desktop, My Documents, etc).&lt;/li&gt;
    &lt;li&gt;Create a shortcut to the &lt;code class=&#34;code&#34;&gt;server.py&lt;/code&gt; script in your startup folder. In Windows 10, this is located by default at: &lt;code class=&#34;code&#34;&gt;C:/users/{username}/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup.&lt;/code&gt; Any shortcuts/executables in this folder get executed automatically when Windows boots.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;othersolutions&#34; class=&#34;post-h2&#34;&gt;Other Solutions Considered (March 21, 2022)&lt;/h2&gt;
&lt;p class=&#34;post-p&#34;&gt;The commenters &lt;a href=&#34;https://hackaday.com/2022/03/18/power-cycling-museum-computers-on-the-cheap/&#34;&gt;over at Hackaday&lt;/a&gt; had some opinions and thoughts about other ways to accomplish this - which is great! It&#39;s certainly a fairly large nail and there are lots of hammers. Hackaday Columnist Chris Wilkinson even asked readers &#34;how [they] would have tackled this problem? Sound off in the comments below.&#34; And boy did they. &lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;So, let me address some of the proposed solutions and concerns, with some background that I didn&#39;t provide in the original post.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Scheduled Shutdown&lt;/h3&gt;
&lt;img src=&#34;commentschedule.PNG&#34; alt=&#34;A screenshot of a hackaday comment, of a use suggesting that scheduled shutdown would be better&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Many, many of the comments suggested using some version of Windows&#39; scheduled shutdown feature to turn the computers off at the same time every day. This is a very reasonable suggestion, and in fact &lt;span class=&#34;italic&#34;&gt;was the solution in place before I undertook this project.&lt;/span&gt; There was a scheuled shutdown at 4:10pm every day (shortly after &#34;normal&#34; closing) and another at midnight (after &#34;the latest the museum could be open&#34;).&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The issue is that the museum&#39;s span-of-day changes wildly day-to-day, week-to-week, and month-to-month without notice. Sometimes closing is at 5:30pm. Sometimes 8:00pm or 11:00pm for an event. Sometimes it needs to be shut off at 3pm for photo sessions in the space. While I wish we had the ability to accurately describe the closing time of the museum on a day-to-day basis, like any large public-facing institution with an events staff, things change quickly and regularly. This pretty much ruled out scheduled shutdown.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Remote Management Commands&lt;/h3&gt;
&lt;img src=&#34;commentactive.PNG&#34; alt=&#34;A screenshot of a hackaday comment, saying that one should use Active Directory commands&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;I wrestled with this solution for a fairly long time, but ultimately deemed it unsuccesful in Windows 10 personal (the OS I&#39;m forced to use). To be honest, I can&#39;t recall what every single obstacle was, but some were:&lt;/p&gt;
&lt;ul class=&#34;post-ul&#34;&gt;
    &lt;li&gt;Needing to address each computer by hostname, with the hostnames having some character restrictions (which I could not change)&lt;/li&gt;
    &lt;li&gt;Not having an Active Directory/Domain setup in this environemnt. For any number of reasons, we keep interactives isolated from our workplace domain system, so there&#39;s no Active Directory to be used.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.groovypost.com/howto/remote-shutdown-restart-windows-10/#:~:text=Enter%20your%20username%20on%20the,on%20the%20switches%20you%20choose.&#34;&gt;Several&lt;/a&gt; &lt;a href=&#34;https://www.maketecheasier.com/remote-shutdown-restart-windows-10/&#34;&gt;Resources&lt;/a&gt; suggest needing to make registry changes to enable remote shutdown, and while I tried several of these, none were successful. This also doesn&#39;t seem like the most durable/transportable solution. The various uses of batch files and services at affect the same didn&#39;t work for me either - not saying there wasn&#39;t something I missed, but it wasn&#39;t anywhere near as simple as run &lt;code class=&#34;code&#34;&gt;shutdown /r /m \\pc2&lt;/code&gt; and walk away.&lt;/li&gt;
    &lt;li&gt;One of the comments suggested using &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;, which I may have to give a look.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;UPS With Lan Card&lt;/h3&gt;
&lt;img src=&#34;commentupslan.PNG&#34; alt=&#34;A screenshot of a hackaday comment, suggesting using a UPS with build in LAN card&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;A couple users encouraged me to look at UPS&#39; that can be directly connected to a network, which would save the whole client-server model of the hacky python scripts above.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is something we looked at as well, but discarded for space reasons. The entire space inside the primary enclosure this project was designed for is only 5&#34; deep, which ruled out any rackmount components, which seem to be the major source of UPS&#39; with LAN interfaces. The standalone UPS&#39; with LAN attachability were either too large or two expensive for this project.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Read Only Harddrives&lt;/h3&gt;
&lt;img src=&#34;commentreadonly.PNG&#34; alt=&#34;A screenshot of a hackaday commnet, suggesting making the hard drives read-only&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Here&#39;s something I hadn&#39;t thought about - making the hard drives read only to prevent damage in the case of an untimely shutdown. Didn&#39;t know that was a thing! Stil not sure it&#39;s a thing, will have to look into it more.&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;RTS/CTS Signalling&lt;/h3&gt;
&lt;img src=&#34;commnetmultipleserial.PNG&#34; alt=&#34;A screenshot of a hackaday comment, suggesting using one RTS/CTS line among multiple computers&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Another expansion of an idea I had discarded - the UPS&#39; all have some varient of serial lines on them, but I assumed using serial to connect to the UPS&#39; was out for the same multi-computer reason that lead to me using the client/server model. But if it&#39;s really just a binary on/off signal on one of the control lines, there&#39;s no reason I couldn&#39;t read that simultaneously on several machines. Interesting!&lt;/p&gt;
&lt;h3 class=&#34;post-h3&#34;&gt;Virtualization&lt;/h3&gt;
&lt;img src=&#34;commentvirtualized.PNG&#34; alt=&#34;A screenshot of a hackaday comment, suggesting using virtualization to run all the interactives&#34; class=&#34;post-img&#34;&gt;
&lt;p class=&#34;post-p&#34;&gt;Make all the intereactives virtualized and run in their own VMs?? Now there&#39;s something that would never have crossed my mind. It&#39;s probably way out of scope for the kind of retrofit work that I&#39;ve been tasked with doing, but it&#39;s a nifty idea if we had the will and archetechture to handle it.&lt;/p&gt;</description>
      &lt;
    </item>
    
  </channel>
</rss>