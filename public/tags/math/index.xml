<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>math on Jeff Glass</title>
    <link>https://jeff.glass/tags/math/</link>
    <description>Recent content in math on Jeff Glass</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jul 2020 16:50:44 -0500</lastBuildDate><atom:link href="https://jeff.glass/tags/math/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PICO-8: Orbit</title>
      <link>https://jeff.glass/post/pico-8-orbit/</link>
      <pubDate>Wed, 08 Jul 2020 16:50:44 -0500</pubDate>
      
      <guid>https://jeff.glass/post/pico-8-orbit/</guid>
      <description>&lt;p class=&#34;post-p&#34;&gt;Over the past couple weeks, as a way to stretch my programming legs and play around with a new system, I&#39;ve been writing a little demo in the 8-bit retro video game environment called &lt;a href=&#34;https://www.lexaloffle.com/pico-8.php&#34;&gt;PICO-8&lt;/a&gt;. Since I think I&#39;m drifting away from this project now, I figured I might as well post my progress here: a &#34;game&#34; demo called &lt;strong&gt;Orbit&lt;/strong&gt; that instantiates a number of objects moving in an elliptical orbit around a central planet.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;One of the neat things about PICO-8 is how easy it is to embed a playable demo! Here is the full program running in your browser:&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;&lt;iframe class=&#34;m-auto&#34; height=&#34;600&#34; src=&#34;https://jeff.glass/pico8/orbit/orbit2.html&#34; width=&#34;600&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;The program starts by instantiating 5 orbiting objects around a central planet. You can switch which object you&#39;re focusing on using ← and →. The two primary buttons (defaults to C and X on a desktop, or onscreen keys on mobile) allow access to the menu at the top-right. The menu has functionality for speeding up or slowing down time, adding and removing objects, and changing whether orbits are displayed and what info shows up on the HUD.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;This is about the third time I&#39;ve recreated essentially this same structure in different languages/environments. The first time was in Lua in the &lt;a href=&#34;https://love2d.org/&#34;&gt;LOVE2D &lt;/a&gt;framework, the second was in Python in &lt;a href=&#34;https://www.pygame.org/news&#34;&gt;PyGame&lt;/a&gt;, and now it&#39;s in pseudo-Lua in PICO-8. I&#39;m not sure why this construct - just getting thing to orbit each other, really - appeals to me so much. But clearly there&#39;s something there.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;Each of the orbiting objects is &#34;on rails&#34; in a sense - rather than apply some kind of gravitational force each timestep, each object is locked into a perfect elliptical orbit defined by four orbital parameters (semi-major axis, eccentricity, argument of periapsis, and mean anomaly at epoch. Given a time T and those four parameters, the engine can calculate exactly where each object should be. Then we just let T advance at some fraction/multiple of real time.&lt;/p&gt;
&lt;figure class=&#34;wp-block-image size-large&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1201 post-img&#34; src=&#34;orbit_000.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;The next step in turning this into some kind of actual game would be to allow the orbiting objects (&#34;ships&#34;) to apply a small amount of thrust that changes their orbit. This involved calculating the current Cartesian parameters (position and velocity) and turning those into new orbital parameters. &lt;/p&gt;
&lt;figure class=&#34;wp-block-image size-large&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1202 post-img&#34; src=&#34;orbit_001.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;The hangup with this in PICO-8 is that all numbers are 32-bit fixed precision (0xFFFF.FFFF), with a range of -32768 to 32767.9999. While this is enough range to capture all the fundamental parameters of the orbit themselves (the largest of which is the semi-major axis, which can be up to about 200), it&#39;s not enough dynamic range to do some of the calculations for converting cartesian parameters to orbital ones. Even finding the magnitude of a 2D vector with components ~150 or greater involves an intermediate step with numbers larger than 32767, which is a problem when that&#39;s the largest number we can represent in our number system.&lt;/p&gt;
&lt;figure class=&#34;wp-block-image size-large&#34;&gt;&lt;img alt=&#34;&#34; class=&#34;wp-image-1203 post-img&#34; src=&#34;orbit_002.png&#34;/&gt;&lt;/figure&gt;
&lt;p class=&#34;post-p&#34;&gt;I briefly toyed with creating a system to present 64-bit numbers as a duo of 32-bit fixed-point ones, but it&#39;s not quite where my interests lie at the moment. So the project pauses here for now.&lt;/p&gt;
&lt;p class=&#34;post-p&#34;&gt;In any case, in encourage you to try out PICO-8 and play around. It&#39;s very approachable and a ton of fun, takes me right back to my days writing QBasic on my middle-school math teacher&#39;s computer.&lt;/p&gt;
</description>
      &lt;
    </item>
    
  </channel>
</rss>