=== From Ken Jin ===

Another interesting env var is PYTHON_OPT_DEBUG=4 (this ranges from 1 to 4), which tells you what the optimizer is doing 

=== From Brandt ===

brandtbucher â€” Yesterday at 4:01 PM
Looks great! A few things I noticed while reading:

>>>>> "The internals of the pull request itself.": Due to a GitHub bug, the PR looks empty. You should probably just link to the actual commit for this: https://github.com/python/cpython/commit/f6d9e5926b6138994eaa60d1c36462e36105733d
>>>> "the flags for the windows builds are the same": They aren't, but they're similar. They're spelled --experimental-jit, --experimental-jit-off, and --experimental-jit-interpreter
>>>> "--enable the-experimental-jit=yes-off": This option should be --enable-experimental-jit=yes-off. Probably also worth calling out the PYTHON_JIT=1 environment variable here (PYTHON_JIT=0 will also turn the JIT off in the other modes).
>>>> "--enable-experimental-jit=interpreter": Maybe worth clarifying that this runs the same code as the JIT, but without actually jitting anything. Also worth calling out that it doesn't require LLVM, it works anywhere, and it's quite a bit slower.
>>>> I don't see any mention of needing to install LLVM. Probably worth calling this out and linking to the Tools/jit/README.md for instructions.
>>>> "*Except in frames that are owned by the C Stack, i.e. C extensions calling into Python.": That's not really what "owned by the C stack" means. It's pretty subtle and not too important here, so I'd just leave it out (basically, these are "secret" shim frames that we sneak in whenever we re-enter the interpreter loop).
>>>> "and creates an nice HTML summary": It creates a markdown summary, not HTML.
>>>> "--enable-experimental-jit jit": Repeated "jit" here.
>>>> For the deeper dive, might be worth directing interested people to the jit_stencils.h file now sitting in their build directory. ğŸ™‚